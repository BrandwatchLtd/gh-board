{"version":3,"sources":["webpack:///4.bundle.js","webpack:///./src/components/burnup.jsx","webpack:///./src/components/chart.jsx","webpack:///./~/c3/c3.js","webpack:///./~/c3/~/d3/d3.js"],"names":["webpackJsonp",1354,"module","exports","__webpack_require__","_interopRequireDefault","obj","__esModule","default","Object","defineProperty","value","_react","_react2","_underscore","_underscore2","_chart","_chart2","_database","_database2","_routeUtils","_issueStore","_issueStore2","_loadable","_loadable2","_moment","_moment2","BurnupShell","createClass","displayName","componentWillMount","startPolling","componentWillUnmount","stopPolling","renderLoaded","cards","getDay","dateStr","Math","floor","Date","parse","getChunk","chunkType","d","getFullYear","getMonth","_d","Error","formatChunk","chunk","m","format","month","year","monthsShort","incrementChunk","formatChunkIndex","index","rows","length","createElement","sortBy","card","issue","createdAt","startDate","openedCards","closedCards","filter","closedAt","endDate","lastOpened","lastClosed","startDays","endDays","startChunk","endChunk","closedCount","openedCount","currentChunk","closedToday","openedToday","cardIndex","cardClosedDay","_cardIndex","cardOpenedDay","splice","push","unshift","chartData","x","colors","closed","total","new","ideal","types","options","axis","type","tick","culling","max","className","data","element","render","promise","fetchCards","getFilters","this",1355,"_c","_c2","ChartComponent","propTypes","PropTypes","string","object","isRequired","chart","shouldComponentUpdate","nextProps","props","JSON","stringify","componentDidMount","_generateChart","componentDidUpdate","prevProps","_destroyChart","build","assign","bindto","generate","destroy","id","style","styles",1356,"__WEBPACK_AMD_DEFINE_FACTORY__","__WEBPACK_AMD_DEFINE_ARRAY__","__WEBPACK_AMD_DEFINE_RESULT__","window","API","owner","inherit","base","derived","create","prototype","f","constructor","Chart","config","$$","internal","ChartInternal","loadConfig","init","bindThis","fn","target","argThis","keys","forEach","key","bind","c3_chart_fn","api","d3","getDefaultConfig","cache","axes","Axis","call","c3_axis","params","axisX","selection","attr","ceil","tickOffset","axisY","y","scaleExtent","domain","start","stop","generateTicks","scale","i","ticks","apply","tickArguments","copyScale","newScale","copy","isCategory","textFormatted","v","formatted","tickFormat","getSizeFor1Char","tickTextCharSize","size","h","w","select","text","each","box","getBoundingClientRect","height","width","undefined","transitionise","withoutTransition","transition","g","splitTickText","maxWidth","split","splitted","spaceIndex","charAt","subtext","substr","textWidth","sizeFor1Char","concat","slice","tickText","toString","isVertical","scale1","tspanDy","dy","orient","counts","tickSize","tickPosition","tickCentered","range","innerTickSize","textAnchorForText","rotate","textTransform","dxForText","sin","PI","yForText","tickLength","tickTransform","tickX","tickY","scale0","__chart__","tickValues","selectAll","tickEnter","enter","insert","tickExit","exit","remove","tickUpdate","rangeExtent","path","pathUpdate","append","lineEnter","lineUpdate","textEnter","textUpdate","tspan","tickPadding","tickMultiline","tickWidth","map","s","tickTextRotate","outerTickSize","rangeBand","dx","linear","tickCulling","withOuterTick","arguments","top","right","bottom","left","isCentered","tickInterval","interval","node","getTotalLength","Infinity","c3_chart_internal_fn","c3_chart_internal_axis_fn","c3","version","initParams","data_url","convertUrlToData","data_mimeType","data_keys","initWithData","data_json","convertJsonToData","data_rows","convertRowsToData","data_columns","convertColumnsToData","clipId","clipIdForXAxis","clipIdForYAxis","clipIdForGrid","clipIdForSubchart","clipPath","getClipPath","clipPathForXAxis","clipPathForYAxis","clipPathForGrid","clipPathForSubchart","dragStart","dragging","flowing","cancelClick","mouseover","transiting","color","generateColor","levelColor","generateLevelColor","dataTimeFormat","data_xLocaltime","time","utc","axisTimeFormat","axis_x_localtime","defaultAxisTimeFormat","multi","getMilliseconds","getSeconds","getMinutes","getHours","getDate","hiddenTargetIds","hiddenLegendIds","focusedTargetIds","defocusedTargetIds","xOrient","axis_rotated","yOrient","axis_y_inner","y2Orient","axis_y2_inner","subXOrient","isLegendRight","legend_position","isLegendInset","isLegendTop","legend_inset_anchor","isLegendLeft","legendStep","legendItemWidth","legendItemHeight","currentMaxTickWidths","y2","rotated_padding_left","rotated_padding_right","axis_x_show","rotated_padding_top","withoutFadeIn","intervalForObserveInserted","subx","initChartElements","initBar","initLine","initArc","initGauge","initText","defs","main","binding","initPie","initBrush","initZoom","selectChart","empty","document","observeInserted","html","classed","xs","targets","convertDataToTargets","data_filter","data_hide","addHiddenTargetIds","mapToIds","legend_hide","addHiddenLegendIds","hasType","legend_show","updateSizes","updateScales","extent","getXDomain","getYDomain","subX","subY","subY2","orgXDomain","brush","zoom_enabled","zoom","svg","on","onmouseover","onmouseout","clipChart","appendClip","clipXAxis","clipYAxis","clipGrid","clipSubchart","updateSvgSize","getTranslate","initSubchart","initTooltip","initLegend","CLASS","initRegion","initGrid","grid_lines_front","initGridLines","initEventRect","zoom_privileged","regions","zoomRect","axis_x_extent","getDefaultExtent","updateTargets","updateDimension","oninit","redraw","withTransition","withTransform","withUpdateXDomain","withUpdateOrgXDomain","withTransitionForAxis","onresize","generateResize","add","flush","onresized","smoothLines","el","x1","x2","y1","legendHeight","legend","getLegendHeight","legendWidth","getLegendWidth","legendHeightForBottom","hasArc","hasArcType","xAxisHeight","getHorizontalAxisHeight","subchartHeight","subchart_show","subchart_size_height","currentWidth","getCurrentWidth","currentHeight","getCurrentHeight","margin","getCurrentPaddingTop","getCurrentPaddingRight","getCurrentPaddingBottom","getCurrentPaddingLeft","margin2","NaN","margin3","updateSizeForLegend","width2","height2","arcWidth","arcHeight","getGaugeLabelHeight","updateRadius","radiusExpanded","updateTargetsForText","updateTargetsForBar","updateTargetsForLine","updateTargetsForArc","updateTargetsForSubchart","showTargets","isTargetToShow","duration","transition_duration","transitions","withY","withSubchart","withTransitionForExit","withTrimXDomain","withLegend","withEventRect","withDimension","withUpdateXAxis","drawArea","drawBar","drawLine","xForText","durationForExit","durationForAxis","waitForDraw","flow","intervalForCulling","xDomainForZoom","cx","cy","areaIndices","getShapeIndices","isAreaType","barIndices","isBarType","lineIndices","isLineType","hideAxis","targetsToShow","filterTargetsToShow","xv","getOption","generateTransitions","updateLegend","isCategorized","updateXDomain","axis_x_tick_values","updateXAxisTickValues","xAxis","subXAxis","zoom_rescale","orgDomain","axis_y_tick_values","axis_y_tick_count","yAxis","generateTickValues","axis_y2_tick_values","axis_y2_tick_count","y2Axis","updateLabels","axis_x_tick_culling","axis_x_tick_culling_max","e","indexOf","generateDrawArea","generateDrawBar","generateDrawLine","generateXYForText","tooltip","updateXgridFocus","data_empty_label_text","updateGrid","updateRegion","updateBar","updateLine","updateArea","updateCircle","hasDataLabel","updateText","redrawArc","redrawSubchart","selectedCircles","interaction_enabled","redrawEventRect","updateZoom","updateCircleY","circleY","circleX","generateFlow","isTabVisible","transitionsToWait","redrawBar","redrawLine","redrawArea","redrawCircle","redrawText","redrawRegion","redrawGrid","generateWait","t","onrendered","updateAndRedraw","withTransitionForTransform","transformAll","redrawWithoutRescale","isTimeSeries","axis_x_type","isCustomX","data_x","notEmpty","data_xs","isTimeSeriesY","axis_y_type","asHalfPixel","initialOpacity","initialOpacityForCircle","opacityForCircle","opacity","point_show","isValue","isScatterType","opacityForText","xx","parseDate","axis_x_categories","yv","yScale","subxx","transformMain","axisY2","chartArcs","transformContext","transformLegend","getXAxisClipX","getXAxisClipY","getXAxisClipWidth","getXAxisClipHeight","getYAxisClipX","getYAxisClipY","getYAxisClipWidth","getYAxisClipHeight","withoutAxis","observer","MutationObserver","console","error","mutations","mutation","previousSibling","disconnect","setInterval","parentNode","clearInterval","observe","attributes","childList","characterData","callResizeFunctions","resizeFunctions","endall","callback","n","timer","done","date","parsedDate","data_xFormat","isNaN","hidden","mozHidden","msHidden","webkitHidden","size_width","size_height","padding_left","padding_right","padding_top","padding_bottom","zoom_extent","zoom_onzoom","zoom_onzoomstart","zoom_onzoomend","data_xSort","data_idConverter","data_names","data_classes","data_groups","data_axes","data_type","data_types","data_labels","data_order","data_regions","data_color","data_colors","data_selection_enabled","data_selection_grouped","data_selection_isselectable","data_selection_multiple","data_selection_draggable","data_onclick","data_onmouseover","data_onmouseout","data_onselected","data_onunselected","subchart_onbrush","color_pattern","color_threshold","legend_inset_x","legend_inset_y","legend_inset_step","legend_item_onclick","legend_item_onmouseover","legend_item_onmouseout","legend_equally","axis_x_tick_centered","axis_x_tick_format","axis_x_tick_count","axis_x_tick_fit","axis_x_tick_rotate","axis_x_tick_outer","axis_x_tick_multiline","axis_x_tick_width","axis_x_max","axis_x_min","axis_x_padding","axis_x_height","axis_x_label","axis_y_show","axis_y_max","axis_y_min","axis_y_inverted","axis_y_center","axis_y_label","axis_y_tick_format","axis_y_tick_outer","axis_y_tick_time_value","axis_y_tick_time_interval","axis_y_padding","axis_y_default","axis_y2_show","axis_y2_max","axis_y2_min","axis_y2_inverted","axis_y2_center","axis_y2_label","axis_y2_tick_format","axis_y2_tick_outer","axis_y2_padding","axis_y2_default","grid_x_show","grid_x_type","grid_x_lines","grid_y_show","grid_y_lines","grid_y_ticks","grid_focus_show","point_r","point_focus_expand_enabled","point_focus_expand_r","point_select_r","line_connectNull","line_step_type","bar_width","bar_width_ratio","bar_width_max","bar_zerobased","area_zerobased","pie_label_show","pie_label_format","pie_label_threshold","pie_expand","gauge_label_show","gauge_label_format","gauge_expand","gauge_min","gauge_max","gauge_units","gauge_width","donut_label_show","donut_label_format","donut_label_threshold","donut_width","donut_expand","donut_title","tooltip_show","tooltip_grouped","tooltip_format_title","tooltip_format_name","tooltip_format_value","tooltip_position","tooltip_contents","defaultTitleFormat","defaultValueFormat","getTooltipContent","tooltip_init_show","tooltip_init_x","tooltip_init_position","additionalConfig","find","shift","read","this_config","isDefined","getScale","min","forTimeseries","getX","offset","_scale","raw","getY","getYScale","getId","getSubYScale","forInit","xMin","xMax","yMin","yMax","subXMin","subXMax","subYMin","subYMax","xAxisTickFormat","getXAxisTickFormat","xAxisTickValues","getXAxisTickValues","yAxisTickValues","getYAxisTickValues","y2AxisTickValues","getY2AxisTickValues","getXAxis","getYAxis","updateArc","getYDomainMin","j","k","baseId","idsInGroup","hasNegativeValue","ids","ys","getValuesAsIdKeyed","hasNegativeValueInTargets","getYDomainMax","hasPositiveValue","hasPositiveValueInTargets","axisId","xDomain","domainLength","padding","yDomainAbs","lengths","diff","ratio","isAllPositive","isAllNegative","targetsByAxisId","yTargets","filterByXDomain","yDomainMin","yDomainMax","center","isZeroBased","isInverted","showHorizontalDataLabel","showVerticalDataLabel","abs","getDataLabelLength","diffDomain","convertPixelsToAxisPadding","getPadding","reverse","getXDomainMin","values","getXDomainMax","getXDomainPadding","maxDataCount","paddingLeft","paddingRight","getMaxDataCount","firstX","lastX","getTime","withTrim","updateScaleExtent","trimXDomain","isX","hasValue","isNotX","getXKey","getXValuesOfXKey","xValues","getIndexByX","filterByX","getXValue","getOtherTargetXs","idsForX","getOtherTargetX","addXs","hasMultipleX","set","isMultipleX","addName","name","getValueOnIndex","valueOnIndex","updateTargetX","generateTargetX","updateTargetXs","rawX","cloneTarget","id_org","updateXs","getPrevX","getNextX","getMaxDataCountTarget","maxTarget","getEdgeX","mapToTargetIds","isString","hasTarget","targetId","isLegendToShow","mapTargetsToUniqueXs","merge","targetIds","removeHiddenTargetIds","removeHiddenLegendIds","checkValueInTargets","checker","isOrderDesc","toLowerCase","isOrderAsc","orderTargets","orderAsc","orderDesc","sort","t1","t2","reducer","p","c","t1Sum","reduce","t2Sum","isFunction","filterRemoveNull","paddingCoef","dataLabelFormat","isNoneArc","isArc","findSameXOfValues","targetX","sames","findClosestFromTargets","pos","candidates","findClosest","closest","minDist","shape","bars","getTargetSelectorSuffix","bar","isWithinBar","dist","xIndex","yIndex","pow","convertValuesToStep","converted","updateDataAttributes","attrs","current","url","mimeType","xhr","responseURL","status","statusText","response","convertTsvToData","convertCsvToData","convertXsvToData","xsv","parser","parseRows","csv","tsv","json","targetKeys","new_rows","o","new_row","isUndefined","columns","appendXs","xKey","convertedId","v1","v2","setTargetType","addCache","load","args","loadFromArgs","unload","selectorTarget","legendItem","categoryName","eventRects","eventRectUpdate","maxDataCountTarget","eventRectsMultiple","eventRectsSingle","eventRect","generateEventRectsForMultipleXs","updateEventRect","datum","generateEventRectsForSingleX","rectW","rectX","getEventRectWidth","prevX","nextX","thisX","classEvent","eventRectEnter","expandCircles","expandBars","hideXGridFocus","hideTooltip","unexpandCircles","unexpandBars","selectedData","isStepType","mouse","showTooltip","showXGridFocus","EXPANDED","isWithinShape","toggleShape","drag","behavior","origin","dragstart","dragend","mouseout","sameXData","shapes","dispatchEvent","selector","event","createEvent","initMouseEvent","getParentWidth","getParentHeight","withoutRecompute","ceil10","getAxisWidthByAxisId","getYAxisLabelPosition","isOuter","defaultPadding","legendWidthOnRight","getY2AxisLabelPosition","getParentRectValue","parent","tagName","offsetWidth","replace","getSvgLeft","hasLeftAxisRect","leftAxisClass","leftAxis","svgRect","chartRect","svgLeft","position","getLabelPositionById","getMaxTickWidth","isInner","cos","typeFilter","indices","__max__","getShapeX","targetsNum","isSub","getShapeY","getShapeOffset","y0","that","isWithin","nodeName","isWithinStep","isWithinCircle","pointSelectR","getInterpolate","isSplineType","chartLines","mainLineUpdate","mainLineEnter","classChartLine","classLines","classAreas","classCircles","classFocus","chartLine","generateClass","selectedCircle","mainLine","lines","line","lineData","classLine","getPoints","generateGetLinePoints","yScaleGetter","xValue","yValue","defined","x0","lineWithRegions","interpolate","lineTargetsNum","lineOffset","posX","posY","_regions","isWithinRegions","end","generateM","points","sWithRegion","xp","yp","dd","diffx2","prev","xOffset","d0","d1","x_diff","xv0","xv1","sqrt","mainArea","areas","area","classArea","orgAreaOpacity","generateGetAreaPoints","value0","getAreaBaseValue","value1","areaTargetsNum","areaOffset","mainCircle","circles","circle","lineOrScatterData","classCircle","pointR","getCircles","reset","r","pointExpandedR","d3_this","chartBars","mainBarUpdate","mainBarEnter","classChartBar","classBars","chartBar","barData","classBar","mainBar","getBarW","barTargetsNum","getBars","generateGetBarPoints","indexX","indexY","barW","barX","barY","barOffset","seg0","pathSegList","getItem","seg1","sx","ex","sy","ey","chartTexts","mainText","mainTextUpdate","mainTextEnter","classChartText","classTexts","chartText","barOrLineData","classText","texts","forFlow","getTextRect","cls","rect","dummy","forX","getAreaPoints","getBarPoints","getLinePoints","getter","getXForText","getYForText","textElement","xPos","yPos","isSafari","isChrome","has","isPieType","isGaugeType","isDonutType","isArcType","arcData","grid","xgrids","ygrids","xgridFocus","xgrid","gridLines","xgridLines","ygridLines","updateXGrid","withoutUpdate","xgridData","generateGridData","xgridAttr","updateYGrid","gridValues","ygrid","gridTextAnchor","gridTextDx","xGridTextX","yGridTextX","xgridLine","ygridLine","dataToShow","focusEl","firstYear","lastYear","gridData","tickNum","getGridFilterToRemove","found","param","removeGridLines","toRemove","toShow","tooltipContainer","getYFormat","title","bgcolor","titleFormat","nameFormat","valueFormat","tooltipName","tooltipPosition","tWidth","tHeight","tooltipLeft","tooltipRight","tooltipTop","chartRight","forArc","positionFunction","property","legendItemTextBox","legendHasRendered","updateLegendWithDefaults","insetLegendPosition","updateLegendStep","step","updateLegendItemWidth","updateLegendItemHeight","opacityForLegend","legendItemHidden","opacityForUnfocusedLegend","toggleFocusLegend","focus","legendItemFocused","revertLegend","showLegend","selectorLegends","hideLegend","isEmpty","clearLegendItemTextBoxCache","getTextBox","textContent","updatePositions","updateValues","withoutStep","areaLength","totalLength","itemLength","posMin","steps","margins","offsets","maxLength","isLast","itemWidth","tileWidth","itemHeight","paddingTop","maxHeight","widths","heights","xForLegend","xForLegendText","xForLegendRect","yForLegend","yForLegendText","yForLegendRect","l","rects","tiles","background","altKey","hide","show","toggle","revert","legendItemEvent","legendItemTile","legendBackground","axisXLabel","textAnchorForXAxisLabel","axisYLabel","textAnchorForYAxisLabel","axisY2Label","textAnchorForY2AxisLabel","withoutRotateTickText","axisParams","toFixed","getTickValues","getLabelOptionByAxisId","option","getLabelText","setLabelText","getLabelPosition","defaultPosition","isLeft","isCenter","isRight","isTop","isMiddle","isBottom","getXAxisLabelPosition","textForXAxisLabel","textForYAxisLabel","textForY2AxisLabel","xForAxisLabel","forHorizontal","dxForAxisLabel","textAnchorForAxisLabel","xForXAxisLabel","xForYAxisLabel","xForY2AxisLabel","dxForXAxisLabel","dxForYAxisLabel","dxForY2AxisLabel","dyForXAxisLabel","dyForYAxisLabel","dyForY2AxisLabel","defaultValue","unit","pixels","tickCount","forTimeSeries","targetCount","count","tickValue","a","b","axisSubX","isHidden","isIE9","navigator","appVersion","URL","getAxisClipX","getAxisClipY","getAxisClipWidth","getAxisClipHeight","pie","layout","radius","innerRadiusRatio","innerRadius","svgArc","getSvgArc","svgArcExpanded","getSvgArcExpanded","svgArcExpandedSub","updateAngle","gTic","gValue","gMin","gMax","startAngle","endAngle","arc","outerRadius","newArc","updated","centroid","rate","getArc","force","transformForArcLabel","translate","getArcRatio","whole","convertToArcData","textForArcLabel","shouldShowArcLabel","meetsArcLabelThreshold","getArcLabelFormat","defaultArcValueFormat","expandArc","selectorTargets","chartArc","shouldExpand","unexpandArc","shouldShow","threshold","getArcTitle","mainPieUpdate","mainPieEnter","classChartArc","classArcs","arcs","chartArcsTitle","mainArc","classArc","_current","attrTween","interpolated","gaugeValue","round","chartArcsBackground","chartArcsGaugeUnit","chartArcsGaugeMin","chartArcsGaugeMax","region","mainRegion","classRegion","regionX","regionY","regionWidth","regionHeight","isRegionOnX","mx","my","minX","maxX","minY","maxY","altDomain","dragarea","_x","_y","_w","_h","isSelected","SELECTED","isIncluded","INCLUDED","togglePoint","getPathBox","togglePath","selectPoint","unselectPoint","selected","selectPath","rgb","brighter","unselectPath","getToggle","redrawForBrush","update","context","contextLineEnter","contextLineUpdate","contextBarEnter","contextBarUpdate","updateBarForSubchart","contextBar","redrawBarForSubchart","drawBarOnSub","updateLineForSubchart","contextLine","redrawLineForSubchart","drawLineOnSub","updateAreaForSubchart","contextArea","redrawAreaForSubchart","drawAreaOnSub","startEvent","sourceEvent","redrawForZoom","clientX","clientY","orgScaleExtent","z","pattern","category10","Function","asValue","formatForY","yFormat","formatForY2","y2Format","defaultFormat","hasCaches","getCaches","focused","defocused","prefix","classShape","classShapes","classTarget","additionalClassSuffix","additionalClass","classFocused","classDefocused","selectorLegend","dict","items","defocus","enable","enabled","unzoom","clear","classes","categories","cacheIds","Array","dataCount","baseTarget","baseValue","to","notfoundIds","orgDataCount","tail","missing","translateX","transform","scaleX","flowIndex","flowLength","flowStart","flowEnd","durationForFlow","wait","ease","__data__","resetOther","isTargetId","isTargetIndex","unselect","transformTo","optionsForRedraw","groups","grids","shown","names","category","labels","resize","ua","userAgent","oThis","TypeError","aArgs","fToBind","fNOP","fBound",1357,"d3_ascending","d3_number","d3_numeric","d3_bisector","compare","lo","hi","mid","d3_zipLength","d3_range_integerScale","d3_class","ctor","properties","enumerable","d3_Map","_","d3_map_escape","d3_map_proto","d3_map_zero","d3_map_unescape","d3_map_has","d3_map_remove","d3_map_keys","d3_map_size","d3_map_empty","d3_Set","d3_rebind","source","method","d3_vendorSymbol","toUpperCase","d3_vendorPrefixes","prefixName","d3_noop","d3_dispatch","d3_dispatch_event","dispatch","listeners","listenerByName","listener","get","d3_eventPreventDefault","preventDefault","d3_eventSource","d3_eventDispatch","of","thiz","argumentz","e1","e0","d3_selection","d3_subclass","d3_selectionPrototype","d3_selection_selector","d3_select","d3_selection_selectorAll","d3_selectAll","d3_selection_attr","attrNull","removeAttribute","attrNullNS","removeAttributeNS","space","local","attrConstant","setAttribute","attrConstantNS","setAttributeNS","attrFunction","attrFunctionNS","ns","qualify","d3_collapse","trim","d3_selection_classedRe","RegExp","requote","d3_selection_classes","d3_selection_classed","classedConstant","classedFunction","d3_selection_classedName","re","classList","getAttribute","lastIndex","test","d3_selection_style","priority","styleNull","removeProperty","styleConstant","setProperty","styleFunction","d3_selection_property","propertyNull","propertyConstant","propertyFunction","d3_selection_creator","ownerDocument","createElementNS","namespaceURI","d3_selectionRemove","removeChild","d3_selection_dataNode","d3_selection_filter","d3_selectMatches","d3_selection_sortComparator","comparator","d3_selection_each","group","d3_selection_enter","d3_selection_enterPrototype","d3_selection_enterInsertBefore","i0","j0","d3_selection_interrupt","lock","__transition__","active","d3_selection_on","capture","onRemove","removeEventListener","$","onAdd","wrap","d3_array","addEventListener","removeAll","match","d3_selection_onListener","d3_selection_onFilters","d3_selection_onFilter","related","relatedTarget","compareDocumentPosition","d3_event_dragSuppress","d3_event_dragId","click","d3_window","d3_event_dragSelect","d3_documentElement","suppressClick","off","setTimeout","d3_mousePoint","container","changedTouches","ownerSVGElement","createSVGPoint","point","d3_mouse_bug44083","scrollX","scrollY","border","ctm","getScreenCTM","pageX","pageY","matrixTransform","inverse","clientLeft","clientTop","d3_behavior_dragTouchId","identifier","d3_behavior_dragTouchSubject","d3_behavior_dragMouseSubject","d3_sgn","d3_cross2d","d3_acos","π","acos","d3_asin","halfπ","asin","d3_sinh","exp","d3_cosh","d3_tanh","d3_haversin","d3_color","d3_hsl","d3_rgb_parse","d3_rgb_hsl","d3_hsl_rgb","m1","m2","vv","d3_rgb","d3_hcl","d3_lab","d3_lab_hcl","d3_rgb_lab","d3_hcl_lab","d3_radians","d3_lab_rgb","d3_lab_xyz","d3_lab_X","d3_lab_Y","d3_lab_Z","d3_xyz_rgb","atan2","d3_degrees","d3_xyz_lab","d3_rgbNumber","d3_rgbString","d3_rgb_hex","hsl","exec","parseFloat","d3_rgb_parseNumber","d3_rgb_names","parseInt","d3_rgb_xyz","d3_functor","d3_identity","d3_xhrType","d3_xhr","respond","result","request","d3_xhrHasResponse","headers","XMLHttpRequest","responseType","XDomainRequest","onload","onerror","onreadystatechange","readyState","onprogress","progress","header","send","open","setRequestHeader","overrideMimeType","beforesend","abort","rebind","d3_xhr_fixCallback","responseText","d3_timer_step","now","d3_timer_mark","delay","d3_timer_sweep","isFinite","clearTimeout","d3_timer_timeout","d3_timer_interval","d3_timer_frame","d3_timer_active","d3_timer_queueHead","t0","d3_timer_queueTail","d3_format_precision","log","LN10","d3_formatPrefix","symbol","d3_locale_numberFormat","locale","locale_decimal","decimal","locale_thousands","thousands","locale_grouping","grouping","locale_currency","currency","formatGroup","substring","join","specifier","d3_format_re","fill","align","sign","zfill","comma","precision","suffix","integer","exponent","d3_format_types","d3_format_typeDefault","zcomma","fullSuffix","negative","formatPrefix","before","after","lastIndexOf","d3_date_utc","UTC","d3_time_interval","number","d3_date","dt","times","range_utc","d3_time_interval_utc","d3_locale_timeFormat","d3_time_format","template","charCodeAt","d3_time_formatPads","d3_time_formats","H","M","S","L","Z","d3_time_parse","localZ","setFullYear","W","U","setHours","d3_time_parsers","d3_time_parseWeekdayAbbrev","d3_time_dayAbbrevRe","d3_time_dayAbbrevLookup","d3_time_parseWeekday","d3_time_dayRe","d3_time_dayLookup","d3_time_parseMonthAbbrev","d3_time_monthAbbrevRe","d3_time_monthAbbrevLookup","d3_time_parseMonth","d3_time_monthRe","d3_time_monthLookup","d3_time_parseLocaleFull","d3_time_parseLocaleDate","d3_time_parseLocaleTime","X","d3_time_parseAmPm","d3_time_periodLookup","locale_dateTime","dateTime","locale_date","locale_time","locale_periods","periods","locale_days","days","locale_shortDays","shortDays","locale_months","months","locale_shortMonths","shortMonths","d3_time_formatMulti","d3_time_formatRe","d3_time_formatLookup","A","B","d3_time_formatPad","I","d3_time","dayOfYear","sundayOfYear","mondayOfYear","Y","d3_time_zone","%","d3_time_parseDay","d3_time_parseHour24","d3_time_parseDayOfYear","d3_time_parseMilliseconds","d3_time_parseMonthNumber","d3_time_parseMinutes","d3_time_parseSeconds","d3_time_parseWeekNumberSunday","d3_time_parseWeekdayNumber","d3_time_parseWeekNumberMonday","d3_time_parseYear","d3_time_parseFullYear","d3_time_parseZone","d3_time_parseLiteralPercent","d3_time_numberRe","d3_time_expandYear","getTimezoneOffset","zs","zh","zm","d3_time_percentRe","formats","d3_adder","d3_adderSum","bv","av","d3_geo_streamGeometry","geometry","d3_geo_streamGeometryType","hasOwnProperty","d3_geo_streamLine","coordinates","coordinate","lineStart","lineEnd","d3_geo_streamPolygon","polygonStart","polygonEnd","d3_geo_areaRingStart","nextPoint","λ","φ","dλ","λ0","sdλ","adλ","cosφ","sinφ","sinφ0","u","cosφ0","d3_geo_areaRingSum","λ00","φ00","d3_geo_area","d3_geo_cartesian","spherical","d3_geo_cartesianDot","d3_geo_cartesianCross","d3_geo_cartesianAdd","d3_geo_cartesianScale","vector","d3_geo_cartesianNormalize","d3_geo_spherical","cartesian","d3_geo_sphericalEqual","ε","d3_geo_centroidPoint","d3_geo_centroidPointXYZ","d3_geo_centroidW0","d3_geo_centroidX0","d3_geo_centroidY0","d3_geo_centroidZ0","d3_geo_centroidLineStart","z0","d3_geo_centroidW1","d3_geo_centroidX1","d3_geo_centroidY1","d3_geo_centroidZ1","d3_geo_centroid","d3_geo_centroidLineEnd","d3_geo_centroidRingStart","cz","d3_geo_centroidX2","d3_geo_centroidY2","d3_geo_centroidZ2","d3_geo_compose","compose","invert","d3_true","d3_geo_clipPolygon","segments","clipStartInside","subject","clip","segment","p0","p1","d3_geo_clipPolygonIntersection","d3_geo_clipPolygonLinkCircular","entry","isSubject","array","other","d3_geo_clip","pointVisible","clipLine","clipStart","pointLine","pointRing","ring","ringListener","ringStart","ringEnd","clean","ringSegments","buffer","pop","polygon","polygonStarted","d3_geo_clipSegmentLength1","rotatedClipStart","d3_geo_pointInPolygon","d3_geo_clipSort","sphere","d3_geo_clipBufferListener","rejoin","d3_geo_clipAntimeridianLine","φ0","sλ0","λ1","φ1","sλ1","d3_geo_clipAntimeridianIntersect","cosφ1","sinλ0_λ1","atan","d3_geo_clipAntimeridianInterpolate","from","direction","meridian","parallel","meridianNormal","polarAngle","winding","point0","antimeridian","τ","intersection","φarc","d3_geo_clipCircle","visible","cr","c0","v0","v00","point2","point1","smallRadius","code","intersect","notHemisphere","two","pa","pb","n1","n2","n2n2","n1n2","determinant","c1","c2","n1xn2","uu","q","δλ","polar","q1","d3_geo_circleInterpolate","d3_geom_clipLine","ax","ay","bx","by","d3_geo_clipExtent","corner","comparePoints","ca","cb","insidePolygon","wn","a1","linePoint","first","v_","x_","y_","x__","y__","v__","bufferListener","d3_geo_clipExtentMAX","listener_","inside","d3_geo_conic","projectAt","d3_geo_projectionMutator","parallels","d3_geo_conicEqualArea","forward","ρ","C","ρ0","ρ0_y","d3_geo_pathAreaRingStart","d3_geo_pathAreaPolygon","x00","y00","d3_geo_pathArea","d3_geo_pathBoundsPoint","d3_geo_pathBoundsX0","d3_geo_pathBoundsX1","d3_geo_pathBoundsY0","d3_geo_pathBoundsY1","d3_geo_pathBuffer","pointCircle","pointLineStart","stream","lineEndPolygon","d3_geo_pathBufferCircle","pointRadius","d3_geo_pathCentroidPoint","d3_geo_pathCentroidLineStart","d3_geo_pathCentroid","d3_geo_pathCentroidLineEnd","d3_geo_pathCentroidRingStart","d3_geo_pathContext","moveTo","lineTo","closePath","d3_geo_resample","project","resample","maxDepth","resampleRecursive","resampleNone","d3_geo_transformPoint","resampleLineTo","a0","b0","ringPoint","a00","b00","c00","b1","depth","d2","δ2","φ2","λ2","dx2","dy2","dz","cosMinDistance","d3_geo_pathProjectStream","d3_geo_projectionRadians","d3_geo_transform","d3_geo_projection","projection","projectRotate","δx","δy","d3_geo_rotation","δφ","δγ","invalidate","valid","projectResample","preclip","d3_geo_clipAntimeridian","postclip","clipAngle","clipExtent","output","d3_geo_equirectangular","d3_geo_identityRotation","d3_geo_rotationλ","d3_geo_rotationφγ","d3_geo_forwardRotationλ","rotation","cosδφ","sinδφ","cosδγ","sinδγ","sr","d3_geo_circleAngle","angle","d3_geo_graticuleX","d3_geo_graticuleY","d3_source","d3_target","d3_geo_interpolate","cy0","sy0","cy1","sy1","kx0","ky0","kx1","ky1","distance","d3_geo_lengthLineStart","cosΔλ","d3_geo_lengthSum","d3_geo_length","d3_geo_azimuthal","azimuthal","cosλ","sinc","cosc","d3_geo_conicConformal","F","tan","d3_geo_mercator","d3_geo_conicEquidistant","G","d3_geo_mercatorProjection","clipAuto","d3_geo_transverseMercator","d3_geom_pointX","d3_geom_pointY","d3_geom_hullUpper","hull","hs","d3_geom_hullOrder","d3_geom_polygonInside","d3_geom_polygonIntersect","x3","x21","x43","y3","y21","y43","d3_geom_polygonClosed","d3_geom_voronoiBeach","d3_geom_voronoiRedBlackNode","edge","site","d3_geom_voronoiCreateBeach","beach","d3_geom_voronoiBeachPool","d3_geom_voronoiDetachBeach","d3_geom_voronoiDetachCircle","d3_geom_voronoiBeaches","d3_geom_voronoiRemoveBeach","vertex","previous","P","next","N","disappearing","lArc","rArc","iArc","nArcs","d3_geom_voronoiSetEdgeEnd","d3_geom_voronoiCreateEdge","d3_geom_voronoiAttachCircle","d3_geom_voronoiAddBeach","dxl","dxr","directrix","d3_geom_voronoiLeftBreakPoint","d3_geom_voronoiRightBreakPoint","R","lSite","rSite","hb","hc","rfocx","rfocy","pby2","lfocx","lfocy","plby2","hl","aby2","d3_geom_voronoiCell","edges","d3_geom_voronoiCloseCells","cell","iHalfEdge","halfEdges","nHalfEdges","cells","d3_geom_voronoiCells","iCell","prepare","d3_geom_voronoiHalfEdge","d3_geom_voronoiCreateBorderEdge","d3_geom_voronoiHalfEdgeOrder","d3_geom_voronoiCircle","cSite","ε2","ha","d3_geom_voronoiCirclePool","d3_geom_voronoiCircles","d3_geom_voronoiFirstCircle","d3_geom_voronoiClipEdges","d3_geom_voronoiEdges","d3_geom_voronoiConnectEdge","vb","fm","fb","va","lx","ly","rx","ry","fx","fy","d3_geom_voronoiEdge","d3_geom_voronoiRedBlackTree","d3_geom_voronoiRedBlackRotateLeft","tree","d3_geom_voronoiRedBlackRotateRight","d3_geom_voronoiRedBlackFirst","d3_geom_voronoi","sites","bbox","d3_geom_voronoiVertexOrder","diagram","d3_geom_voronoiTriangleArea","d3_geom_quadtreeCompatX","d3_geom_quadtreeCompatY","d3_geom_quadtreeNode","leaf","nodes","d3_geom_quadtreeVisit","children","d3_geom_quadtreeFind","root","closestPoint","minDistance2","distance2","xm","ym","below","d3_interpolateRgb","ar","ag","ab","br","bg","bb","d3_interpolateObject","d3_interpolate","d3_interpolateNumber","d3_interpolateString","am","bm","bs","bi","d3_interpolate_numberA","d3_interpolate_numberB","interpolators","d3_interpolateArray","na","nb","n0","d3_ease_clamp","d3_ease_reverse","d3_ease_reflect","d3_ease_quad","d3_ease_cubic","d3_ease_cubicInOut","t3","d3_ease_poly","d3_ease_sin","d3_ease_exp","d3_ease_circle","d3_ease_elastic","d3_ease_back","d3_ease_bounce","d3_interpolateHcl","hcl","ah","ac","al","bh","bc","bl","d3_interpolateHsl","as","d3_interpolateLab","lab","aa","ba","d3_interpolateRound","d3_transform","r0","r1","kx","d3_transformNormalize","kz","d3_transformDot","ky","d3_transformCombine","skew","d3_interpolateTransform","ta","tb","ra","rb","wa","wb","ka","kb","d3_uninterpolateNumber","d3_uninterpolateClamp","d3_layout_bundlePath","link","lca","d3_layout_bundleLeastCommonAncestor","d3_layout_bundleAncestors","ancestors","aNodes","bNodes","aNode","bNode","sharedNode","d3_layout_forceDragstart","fixed","d3_layout_forceDragend","d3_layout_forceMouseover","px","py","d3_layout_forceMouseout","d3_layout_forceAccumulate","quad","alpha","charges","charge","random","pointCharge","d3_layout_hierarchyRebind","hierarchy","links","d3_layout_hierarchyLinks","d3_layout_hierarchyVisitBefore","d3_layout_hierarchyVisitAfter","nodes2","d3_layout_hierarchyChildren","d3_layout_hierarchyValue","d3_layout_hierarchySort","child","d3_layout_stackX","d3_layout_stackY","d3_layout_stackOut","d3_layout_stackOrderDefault","d3_layout_stackOffsetZero","d3_layout_stackMaxIndex","d3_layout_stackReduceSum","d3_layout_stackSum","d3_layout_histogramBinSturges","d3_layout_histogramBinFixed","LN2","d3_layout_histogramRange","d3_layout_packSort","d3_layout_packInsert","_pack_next","_pack_prev","d3_layout_packSplice","d3_layout_packIntersects","dr","d3_layout_packSiblings","bound","d3_layout_packLink","d3_layout_packPlace","isect","s1","s2","d3_layout_packUnlink","d3_layout_packTransform","db","da","dc","d3_layout_treeSeparation","d3_layout_treeLeft","d3_layout_treeRight","d3_layout_treeMove","wm","wp","change","d3_layout_treeShift","d3_layout_treeAncestor","vim","ancestor","d3_layout_clusterY","d3_layout_clusterX","d3_layout_clusterLeft","d3_layout_clusterRight","d3_layout_treemapPadNull","d3_layout_treemapPad","d3_scaleExtent","d3_scaleRange","d3_scale_bilinear","uninterpolate","d3_scale_nice","nice","i1","d3_scale_niceStep","d3_scale_niceIdentity","d3_scale_polylinear","bisect","d3_scale_linear","clamp","rescale","input","Number","rangeRound","d3_scale_linearTicks","d3_scale_linearTickFormat","d3_scale_linearNice","d3_scale_linearRebind","d3_scale_linearTickRange","span","err","d3_scale_linearPrecision","d3_scale_linearFormatPrecision","d3_scale_linearFormatSignificant","d3_scale_log","positive","niced","d3_scale_logNiceNegative","d3_scale_logFormat","d3_scale_pow","powp","d3_scale_powPow","powb","d3_scale_ordinal","ranger","xi","rangePoints","rangeRoundPoints","rangeBands","outerPadding","rangeRoundBands","d3_scale_quantile","thresholds","quantile","quantiles","invertExtent","d3_scale_quantize","d3_scale_threshold","d3_scale_identity","identity","d3_zero","d3_svg_arcInnerRadius","d3_svg_arcOuterRadius","d3_svg_arcStartAngle","d3_svg_arcEndAngle","d3_svg_arcPadAngle","padAngle","d3_svg_arcSweep","d3_svg_arcCornerTangents","rc","cw","x01","y01","ox","oy","D","cx0","cx1","dx0","dy0","dx1","dy1","d3_svg_line","tension","d3_svg_lineLinear","interpolateKey","d3_svg_lineInterpolators","d3_svg_lineLinearClosed","d3_svg_lineStep","d3_svg_lineStepBefore","d3_svg_lineStepAfter","d3_svg_lineCardinalOpen","d3_svg_lineHermite","d3_svg_lineCardinalTangents","d3_svg_lineCardinalClosed","d3_svg_lineCardinal","tangents","pi","lp","p2","d3_svg_lineBasis","d3_svg_lineDot4","d3_svg_lineBasisBezier3","d3_svg_lineBasisBezier","d3_svg_lineBasisOpen","d3_svg_lineBasisClosed","d3_svg_lineBundle","d3_svg_lineBasisBezier1","d3_svg_lineBasisBezier2","d3_svg_lineSlope","d3_svg_lineFiniteDifferences","d3_svg_lineMonotoneTangents","d3_svg_lineMonotone","d3_svg_lineRadial","d3_svg_area","points1","interpolateReverse","points0","fx0","fy0","fx1","fy1","d3_svg_chordRadius","d3_svg_diagonalProjection","d3_svg_diagonalRadialProjection","d3_svg_symbolSize","d3_svg_symbolType","d3_svg_symbolCircle","d3_transition","namespace","d3_transitionPrototype","d3_transition_tween","tween","d3_transition_text","d3_transitionNamespace","d3_transitionNode","elapsed","tweened","d3_svg_axisX","d3_svg_axisY","d3_time_formatIsoNative","toISOString","d3_time_scale","methods","tickMethod","d3_time_scaleSteps","d3_time_scaleMilliseconds","d3_time_scaleDate","skip","skipped","d3_json","d3_html","d3_document","createRange","selectNode","body","createContextualFragment","d3_arraySlice","list","documentElement","childNodes","nodeType","d3_element_prototype","Element","d3_element_setAttribute","d3_element_setAttributeNS","d3_style_prototype","CSSStyleDeclaration","d3_style_setProperty","ascending","descending","sum","mean","median","numbers","d3_bisect","bisectLeft","bisectRight","bisector","shuffle","permute","indexes","permutes","pairs","zip","zips","transpose","matrix","entries","arrays","merged","isArray","nest","mapType","rollup","sortValues","keyValue","setter","valuesByKey","sortKey","sortKeys","keyMap","order","d3_requote_re","__proto__","querySelector","querySelectorAll","d3_selectMatcher","matches","Sizzle","matchesSelector","d3_selectionRoot","subgroup","subnode","subgroups","d3_nsPrefix","xhtml","xlink","xml","xmlns","getAttributeNS","contains","getComputedStyle","getPropertyValue","innerHTML","appendChild","insertBefore","groupData","nodeData","updateNodes","enterNodes","exitNodes","nodeByKeyValue","keyValues","nextSibling","upgroup","d3_transitionInheritId","d3_transitionId","d3_transitionInherit","interrupt","mouseenter","mouseleave","touch","touches","mousedown","touchstart","move","moved","position1","dragId","position0","dragged","dragOffset","ended","dragSubject","dragName","dragRestore","τε","SQRT2","ρ2","ρ4","interpolateZoom","coshr0","w0","ux0","uy0","ux1","uy1","w1","mousedowned","d3_behavior_zoomWheel","mousewheeled","dblclicked","touchstarted","location","view","scaleTo","translateTo","zoomTo","center0","zoomstarted","zooming","zoomed","zoomended","location0","mousemove","mouseup","relocate","locations0","started","touchmove","touchend","changed","touchtime","distance0","l0","l1","distance1","zoomName","mousewheelTimer","translate0","d3_behavior_zoomDelta","shiftKey","d3_behavior_zoomInfinity","view1","deltaY","deltaMode","wheelDelta","detail","d3_hslPrototype","darker","d3_hclPrototype","d3_lab_K","d3_labPrototype","d3_rgbPrototype","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkgrey","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkslategrey","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dimgrey","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","green","greenyellow","grey","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgray","lightgreen","lightgrey","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightslategrey","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","slategrey","snow","springgreen","steelblue","teal","thistle","tomato","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen","functor","dsv","delimiter","row","typedResponse","formatRow","formatValue","reFormat","delimiterCode","token","EOF","eol","EOL","formatRows","fieldSet","fields","field","then","d3_formatPrefixes","String","fromCharCode","toPrecision","toExponential","getUTCDate","getUTCDay","getUTCFullYear","getUTCHours","getUTCMilliseconds","getUTCMinutes","getUTCMonth","getUTCSeconds","valueOf","setDate","d3_time_prototype","setUTCDate","setDay","setUTCDay","setUTCFullYear","setUTCHours","setMilliseconds","setUTCMilliseconds","setMinutes","setUTCMinutes","setMonth","setUTCMonth","setSeconds","setUTCSeconds","setTime","day","years","week","sunday","weeks","weekOfYear","-","0","numberFormat","timeFormat","d3_locale_enUS","geo","d3_adderTemp","d3_geo_streamObjectType","Feature","feature","FeatureCollection","features","Sphere","Point","MultiPoint","LineString","MultiLineString","Polygon","MultiPolygon","GeometryCollection","geometries","d3_geo_areaSum","bounds","ranges","normal","equatorial","inflection","λ_","λi","φi","dλSum","λ__","φ__","compareRanges","withinRange","best","conicEqualArea","albers","albersUsa","lower48Point","alaskaPoint","hawaiiPoint","lower48","alaska","hawaii","pointStream","lower48Stream","alaskaStream","hawaiiStream","d3_geo_pathAreaSum","d3_geo_pathBounds","contextStream","cacheStream","projectStream","projectionMutator","equirectangular","Δλ","sinΔλ","sinφ1","graticule","X0","DX","X1","Y0","DY","Y1","outline","majorExtent","minorExtent","majorStep","minorStep","greatArc","source_","target_","d3_geo_azimuthalEqualArea","cosλcosφ","azimuthalEqualArea","d3_geo_azimuthalEquidistant","azimuthalEquidistant","conicConformal","conicEquidistant","d3_geo_gnomonic","gnomonic","mercator","d3_geo_orthographic","orthographic","d3_geo_stereographic","stereographic","transverseMercator","geom","vertices","flippedPoints","upper","lower","skipLeft","skipRight","d3_geom_polygonPrototype","grandpa","uncle","sibling","voronoi","polygons","d3_geom_voronoiClipExtent","triangles","s0","delaunay","quadtree","nx","ny","insertChild","nPoint","x1_","y1_","x2_","y2_","compat","visit","interpolateRgb","interpolateObject","interpolateNumber","interpolateString","interpolateArray","d3_ease_default","d3_ease","poly","cubic","elastic","back","bounce","d3_ease_mode","in","out","in-out","out-in","interpolateHcl","interpolateHsl","interpolateLab","interpolateRound","baseVal","consolidate","d3_transformIdentity","interpolateTransform","bundle","paths","chord","relayout","groupSums","groupIndex","subgroupIndex","chords","sortGroups","sortSubgroups","di","dj","subindex","sortChords","resort","repulse","dw","dn","theta2","chargeDistance2","dragmove","resume","distances","strengths","friction","linkDistance","d3_layout_forceLinkDistance","linkStrength","d3_layout_forceLinkStrength","d3_layout_forceChargeDistance2","gravity","weight","chargeDistance","theta","dimension","neighbors","stack","childs","revalue","partition","d3_layout_pieSortByValue","series","orders","d3_layout_stackOrders","d3_layout_stackOffsets","inside-out","sums","tops","bottoms","silhouette","wiggle","s3","o0","expand","zero","histogram","bin","bins","valuer","binner","frequency","pack","root0","root1","wrapTree","firstWalk","secondWalk","nodeSize","sizeNode","tx","separation","node1","queue","siblings","midpoint","apportion","vip","vop","vom","sip","sop","sim","som","cluster","previousNode","treemap","squarify","score","pad","remaining","mode","worst","stickify","rmax","rmin","stickies","sticky","padFunction","padConstant","µ","σ","logNormal","bates","irwinHall","ordinal","d3_category10","category20","d3_category20","category20b","d3_category20b","category20c","d3_category20c","quantize","circleSegment","rp","ap","padRadius","d3_svg_arcAuto","h1","h0","cornerRadius","oc","kc","lc","rc1","t30","t12","rc0","t03","t21","linear-closed","step-before","step-after","basis","basis-open","basis-closed","cardinal","cardinal-open","cardinal-closed","monotone","radial","equals","curve","self","diagonal","p3","projection_","d3_svg_symbols","cross","diamond","d3_svg_symbolTan30","square","triangle-down","d3_svg_symbolSqrt3","triangle-up","symbolTypes","subnodes","nameNS","attrTweenNS","styleString","styleTween","inheritId","id0","id1","tickArguments_","tickFormat_","tickSpacing","d3_svg_axisDefaultOrient","d3_svg_axisOrients","tickSubdivide","brushstart","resizes","d3_svg_brushCursor","gUpdate","backgroundUpdate","redrawX","redrawY","xExtent","yExtent","keydown","keyCode","keyup","brushmove","resizingX","move1","resizingY","event_","yClamp","xClamp","yExtentDomain","xExtentDomain","brushend","eventTarget","resizing","d3_svg_brushResizes","extent1","extent0","yi","nw","ne","se","sw","d3_time_formatUtc","d3_time_formatIso","iso","second","seconds","minute","minutes","hour","timezone","hours","d3_time_scaleLocalMethods","d3_time_scaleLocalFormat","d3_time_scaleUtcMethods","d3_time_scaleUtcFormat","responseXML"],"mappings":"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","file":"4.bundle.js","sourcesContent":["webpackJsonp([4],{\n\n/***/ 1354:\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _react = __webpack_require__(362);\n\t\n\tvar _react2 = _interopRequireDefault(_react);\n\t\n\tvar _underscore = __webpack_require__(768);\n\t\n\tvar _underscore2 = _interopRequireDefault(_underscore);\n\t\n\tvar _chart = __webpack_require__(1355);\n\t\n\tvar _chart2 = _interopRequireDefault(_chart);\n\t\n\tvar _database = __webpack_require__(1183);\n\t\n\tvar _database2 = _interopRequireDefault(_database);\n\t\n\tvar _routeUtils = __webpack_require__(767);\n\t\n\tvar _issueStore = __webpack_require__(1270);\n\t\n\tvar _issueStore2 = _interopRequireDefault(_issueStore);\n\t\n\tvar _loadable = __webpack_require__(1309);\n\t\n\tvar _loadable2 = _interopRequireDefault(_loadable);\n\t\n\tvar _moment = __webpack_require__(1185);\n\t\n\tvar _moment2 = _interopRequireDefault(_moment);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tvar BurnupShell = _react2.default.createClass({\n\t  displayName: 'BurnupShell',\n\t  componentWillMount: function componentWillMount() {\n\t    // Needs to be called before `render()`\n\t    _issueStore2.default.startPolling();\n\t  },\n\t  componentWillUnmount: function componentWillUnmount() {\n\t    _issueStore2.default.stopPolling();\n\t  },\n\t  renderLoaded: function renderLoaded(cards) {\n\t    function getDay(dateStr) {\n\t      return Math.floor(Date.parse(dateStr) / 1000 / 60 / 60 / 24);\n\t    }\n\t\n\t    var chunkType = null;\n\t    function getChunk(dateStr) {\n\t      if (chunkType === 'day') {\n\t        return Math.floor(Date.parse(dateStr) / 1000 / 60 / 60 / 24);\n\t        // } else if (chunkType === 'week') {\n\t        //   return Math.floor(Date.parse(dateStr) / 1000 / 60 / 60 / 24 / 7);\n\t      } else if (chunkType === 'month') {\n\t          var d = new Date(dateStr);\n\t          return d.getFullYear() * 100 + d.getMonth();\n\t        } else if (chunkType === 'year') {\n\t          var _d = new Date(dateStr);\n\t          return _d.getFullYear();\n\t        } else {\n\t          throw new Error('BUG: Invalid date range chunk type');\n\t        }\n\t    }\n\t    function formatChunk(chunk) {\n\t      if (chunkType === 'day') {\n\t        var m = new _moment2.default(chunk * 1000 * 60 * 60 * 24);\n\t        return m.format('MMM DD');\n\t        // } else if (chunkType === 'week') {\n\t        //   return Math.floor(Date.parse(dateStr) / 1000 / 60 / 60 / 24 / 7);\n\t      } else if (chunkType === 'month') {\n\t          var month = chunk % 100;\n\t          if (month === 0) {\n\t            var year = chunk / 100 % 100; // only use the last 2 digits of the year\n\t            return _moment2.default.monthsShort(month) + ' \\'' + year; // moment months are 0-indexed\n\t          } else {\n\t              return _moment2.default.monthsShort(month); // moment months are 0-indexed\n\t            }\n\t        } else if (chunkType === 'year') {\n\t            return chunk;\n\t          } else {\n\t            throw new Error('BUG: Invalid date range chunk type');\n\t          }\n\t    }\n\t    function incrementChunk(chunk) {\n\t      if (chunkType === 'day') {\n\t        return chunk + 1;\n\t        // } else if (chunkType === 'week') {\n\t        //   return chunk + 7;\n\t      } else if (chunkType === 'month') {\n\t          var month = chunk % 100; // split off the year\n\t          if (month >= 12) {\n\t            return chunk - month + 100;\n\t          } else {\n\t            return chunk + 1;\n\t          }\n\t        } else if (chunkType === 'year') {\n\t          return chunk + 1;\n\t        } else {\n\t          throw new Error('BUG: Invalid date range chunk type');\n\t        }\n\t    }\n\t\n\t    // Get the total number of Issues\n\t    var total = cards.length;\n\t\n\t    if (!cards.length) {\n\t      return _react2.default.createElement(\n\t        'span',\n\t        null,\n\t        'Not showing a chart because there are 0 cards to show'\n\t      );\n\t    }\n\t\n\t    cards = _underscore2.default.sortBy(cards, function (card) {\n\t      return getDay(card.issue.createdAt);\n\t    });\n\t    // Get the oldest Issue and the newest Issue Date\n\t    var startDate = cards[0].issue.createdAt;\n\t\n\t    var openedCards = cards;\n\t\n\t    // From this point, we only care about closed Issues\n\t    var closedCards = cards.filter(function (card) {\n\t      return card.issue.closedAt;\n\t    });\n\t    closedCards = _underscore2.default.sortBy(closedCards, function (card) {\n\t      return getDay(card.issue.closedAt);\n\t    });\n\t    var endDate = void 0;\n\t    if (closedCards.length && openedCards.length) {\n\t      var lastOpened = openedCards[openedCards.length - 1].issue.createdAt;\n\t      var lastClosed = closedCards[closedCards.length - 1].issue.closedAt;\n\t      if (Date.parse(lastOpened) < Date.parse(lastClosed)) {\n\t        endDate = lastClosed;\n\t      } else {\n\t        endDate = lastOpened;\n\t      }\n\t    } else if (openedCards.length) {\n\t      endDate = openedCards[openedCards.length - 1].issue.createdAt;\n\t    } else if (closedCards.length) {\n\t      endDate = closedCards[closedCards.length - 1].issue.closedAt;\n\t    } else {\n\t      throw new Error('BUG: should not have gotten here');\n\t    }\n\t\n\t    var startDays = getDay(startDate);\n\t    var endDays = getDay(endDate);\n\t\n\t    if (endDays - startDays < 90) {\n\t      chunkType = 'day';\n\t      // } else if (endDays - startDays < 100) {\n\t      //   chunkType = 'week';\n\t    } else if (endDays - startDays < 1500) {\n\t        chunkType = 'month';\n\t      } else {\n\t        chunkType = 'year';\n\t      }\n\t\n\t    var startChunk = getChunk(startDate);\n\t    var endChunk = getChunk(endDate);\n\t\n\t    // TODO: If the number of days is more than, say 50, then show changes per week.\n\t    // Loop over the days and build a chart\n\t    var closedCount = 0;\n\t    var openedCount = 0;\n\t    var rows = [];\n\t    for (var currentChunk = startChunk; currentChunk <= endChunk; currentChunk = incrementChunk(currentChunk)) {\n\t      // loop through the cards to count how many have closed on this day\n\t      var closedToday = 0;\n\t      var openedToday = 0;\n\t      for (var cardIndex = 0; cardIndex < closedCards.length; cardIndex++) {\n\t        var cardClosedDay = getChunk(closedCards[cardIndex].issue.closedAt);\n\t        if (cardClosedDay <= currentChunk) {\n\t          closedToday++;\n\t        } else {\n\t          break;\n\t        }\n\t      }\n\t      for (var _cardIndex = 0; _cardIndex < openedCards.length; _cardIndex++) {\n\t        var cardOpenedDay = getChunk(openedCards[_cardIndex].issue.createdAt);\n\t        if (cardOpenedDay <= currentChunk) {\n\t          openedToday++;\n\t        } else {\n\t          break;\n\t        }\n\t      }\n\t      // remove the cards since they are now accounted for\n\t      if (closedToday) {\n\t        closedCards.splice(0, closedToday);\n\t        closedCount += closedToday;\n\t      }\n\t      if (openedToday) {\n\t        openedCards.splice(0, openedToday);\n\t        openedCount += openedToday;\n\t      }\n\t      // Only add an entry if it changed\n\t      rows.push([currentChunk,\n\t      // closedToday ? closedCount : null,\n\t      // openedToday ? openedCount : null,\n\t      closedCount, openedCount, openedToday || null]);\n\t    }\n\t\n\t    // if (closedCards.length > 0) {\n\t    //   throw new Error('BUG: Should have counted all the cards');\n\t    // }\n\t\n\t    // Add the row titles and the \"Ideal\" line\n\t    rows[0].push(0); // ideal start\n\t    rows[rows.length - 1].push(openedCount); // ideal end\n\t    rows.unshift(['chunk', 'closed', 'total', 'new', 'ideal']);\n\t\n\t    var chartData = {\n\t      x: 'chunk',\n\t      rows: rows,\n\t      colors: {\n\t        closed: '#ff0000',\n\t        total: '#00ff00',\n\t        'new': '#0000ff',\n\t        ideal: '#999999'\n\t      },\n\t      types: {\n\t        closed: 'area-spline',\n\t        total: 'area-spline',\n\t        'new': 'bar'\n\t      }\n\t    };\n\t    // groups: [['opened', 'closed']]\n\t    function formatChunkIndex(index) {\n\t      return formatChunk(rows[index + 1][0]); // +1 because 1st row is the headers\n\t    }\n\t    var options = {\n\t      axis: {\n\t        x: {\n\t          type: 'category',\n\t          tick: {\n\t            format: formatChunkIndex,\n\t            culling: {\n\t              max: 20\n\t            }\n\t          }\n\t        }\n\t      }\n\t    };\n\t    // tooltip: { // Doesn't work with the far-right item yet\n\t    //   position: function(dataToShow, tWidth, tHeight, element) {\n\t    //     // return {top: 10, left: element.x.baseVal.value};\n\t    //     const $$ = this;\n\t    //     const mouse = $$.d3.mouse(element);\n\t    //     const svgLeft = $$.getSvgLeft(true);\n\t    //     const tooltipLeft = svgLeft + $$.getCurrentPaddingLeft(true) + $$.x(dataToShow[0].x) + 20;\n\t    //     const tooltipRight = tooltipLeft + tWidth;\n\t    //     const chartRight = svgLeft + $$.currentWidth - $$.getCurrentPaddingRight();\n\t    //     const tooltipTop = mouse[1] + 15;\n\t    //     return {top: 10, left: tooltipLeft};\n\t    //   }\n\t    // }\n\t    return _react2.default.createElement(_chart2.default, { className: 'burnup-chart', data: chartData, options: options, element: 'burnup' });\n\t  },\n\t  render: function render() {\n\t    // TODO: send the current filter as an arg to `Database.fetchCards()` so it can smartly (using Indexes) fetch the cards\n\t    var promise = _database2.default.fetchCards((0, _routeUtils.getFilters)());\n\t\n\t    return _react2.default.createElement(\n\t      'div',\n\t      { className: 'burnup' },\n\t      _react2.default.createElement(\n\t        'h2',\n\t        null,\n\t        _react2.default.createElement('i', { className: 'octicon octicon-graph' }),\n\t        '  Burnup Chart'\n\t      ),\n\t      _react2.default.createElement(\n\t        'p',\n\t        null,\n\t        'Make sure you selected ',\n\t        _react2.default.createElement(\n\t          'strong',\n\t          null,\n\t          'closed'\n\t        ),\n\t        ' and ',\n\t        _react2.default.createElement(\n\t          'strong',\n\t          null,\n\t          'Issues'\n\t        ),\n\t        ' and optionally a Milestone from the filter dropdown at the top of this page'\n\t      ),\n\t      _react2.default.createElement(\n\t        'p',\n\t        null,\n\t        'Also, this chart only fills the area when something changed (useful for weekends/open-source projects that frequently have periods of no change)'\n\t      ),\n\t      _react2.default.createElement(_loadable2.default, {\n\t        promise: promise,\n\t        renderLoaded: this.renderLoaded\n\t      })\n\t    );\n\t  }\n\t});\n\t\n\texports.default = BurnupShell;\n\n/***/ },\n\n/***/ 1355:\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\t\n\tvar _c = __webpack_require__(1356);\n\t\n\tvar _c2 = _interopRequireDefault(_c);\n\t\n\tvar _react = __webpack_require__(362);\n\t\n\tvar _react2 = _interopRequireDefault(_react);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\t/**\n\t * React-C3 Chart\n\t * Copyright 2015 - Cody Reichert <codyreichert@gmail.com>\n\t */\n\t\n\tvar ChartComponent = _react2.default.createClass({\n\t    displayName: 'React-C3-Chart',\n\t\n\t    propTypes: {\n\t        className: _react2.default.PropTypes.string,\n\t        data: _react2.default.PropTypes.object.isRequired,\n\t        element: _react2.default.PropTypes.string.isRequired,\n\t        options: _react2.default.PropTypes.object\n\t    },\n\t\n\t    chart: null,\n\t\n\t    shouldComponentUpdate: function shouldComponentUpdate(nextProps) {\n\t        if (this.props.data.rows.length !== nextProps.data.rows.length) {\n\t            // shallow check\n\t            return true;\n\t        } else if (JSON.stringify(this.props.data.rows) !== JSON.stringify(nextProps.data.rows)) {\n\t            // deeper check\n\t            return true;\n\t        }\n\t        return false;\n\t    },\n\t\n\t    componentDidMount: function componentDidMount() {\n\t        this._generateChart(this.props.data, this.props.element, this.props.options);\n\t    },\n\t\n\t    componentDidUpdate: function componentDidUpdate(prevProps) {\n\t        if (prevProps.data.rows !== this.props.data.rows) {\n\t            this._generateChart(this.props.data, this.props.element, this.props.options);\n\t        }\n\t    },\n\t\n\t    componentWillUnmount: function componentWillUnmount() {\n\t        this._destroyChart();\n\t    },\n\t\n\t    _generateChart: function _generateChart(data, element, options) {\n\t        var build = Object.assign({}, {\n\t            bindto: '#' + element,\n\t            data: data\n\t        }, options);\n\t        this.chart = _c2.default.generate(build);\n\t    },\n\t\n\t    _destroyChart: function _destroyChart() {\n\t        this.chart.destroy();\n\t    },\n\t\n\t    render: function render() {\n\t        var className = void 0;\n\t        if (this.props.className) {\n\t            className = 'c3 ' + this.props.className;\n\t        } else {\n\t            className = 'c3';\n\t        }\n\t        return _react2.default.createElement('div', { className: className,\n\t            id: this.props.element,\n\t            style: this.props.styles });\n\t    }\n\t});\n\t\n\texports.default = ChartComponent;\n\n/***/ },\n\n/***/ 1356:\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (window) {\n\t    'use strict';\n\t\n\t    /*global define, module, exports, require */\n\t\n\t    var c3 = { version: \"0.4.10\" };\n\t\n\t    var c3_chart_fn,\n\t        c3_chart_internal_fn,\n\t        c3_chart_internal_axis_fn;\n\t\n\t    function API(owner) {\n\t        this.owner = owner;\n\t    }\n\t\n\t    function inherit(base, derived) {\n\t\n\t        if (Object.create) {\n\t            derived.prototype = Object.create(base.prototype);\n\t        } else {\n\t            var f = function f() {};\n\t            f.prototype = base.prototype;\n\t            derived.prototype = new f();\n\t        }\n\t\n\t        derived.prototype.constructor = derived;\n\t\n\t        return derived;\n\t    }\n\t\n\t    function Chart(config) {\n\t        var $$ = this.internal = new ChartInternal(this);\n\t        $$.loadConfig(config);\n\t        $$.init();\n\t\n\t        // bind \"this\" to nested API\n\t        (function bindThis(fn, target, argThis) {\n\t            Object.keys(fn).forEach(function (key) {\n\t                target[key] = fn[key].bind(argThis);\n\t                if (Object.keys(fn[key]).length > 0) {\n\t                    bindThis(fn[key], target[key], argThis);\n\t                }\n\t            });\n\t        })(c3_chart_fn, this, this);\n\t    }\n\t\n\t    function ChartInternal(api) {\n\t        var $$ = this;\n\t        $$.d3 = window.d3 ? window.d3 :  true ? __webpack_require__(1357) : undefined;\n\t        $$.api = api;\n\t        $$.config = $$.getDefaultConfig();\n\t        $$.data = {};\n\t        $$.cache = {};\n\t        $$.axes = {};\n\t    }\n\t\n\t    c3.generate = function (config) {\n\t        return new Chart(config);\n\t    };\n\t\n\t    c3.chart = {\n\t        fn: Chart.prototype,\n\t        internal: {\n\t            fn: ChartInternal.prototype,\n\t            axis: {\n\t                fn: Axis.prototype\n\t            }\n\t        }\n\t    };\n\t    c3_chart_fn = c3.chart.fn;\n\t    c3_chart_internal_fn = c3.chart.internal.fn;\n\t    c3_chart_internal_axis_fn = c3.chart.internal.axis.fn;\n\t\n\t    c3_chart_internal_fn.init = function () {\n\t        var $$ = this, config = $$.config;\n\t\n\t        $$.initParams();\n\t\n\t        if (config.data_url) {\n\t            $$.convertUrlToData(config.data_url, config.data_mimeType, config.data_keys, $$.initWithData);\n\t        }\n\t        else if (config.data_json) {\n\t            $$.initWithData($$.convertJsonToData(config.data_json, config.data_keys));\n\t        }\n\t        else if (config.data_rows) {\n\t            $$.initWithData($$.convertRowsToData(config.data_rows));\n\t        }\n\t        else if (config.data_columns) {\n\t            $$.initWithData($$.convertColumnsToData(config.data_columns));\n\t        }\n\t        else {\n\t            throw Error('url or json or rows or columns is required.');\n\t        }\n\t    };\n\t\n\t    c3_chart_internal_fn.initParams = function () {\n\t        var $$ = this, d3 = $$.d3, config = $$.config;\n\t\n\t        // MEMO: clipId needs to be unique because it conflicts when multiple charts exist\n\t        $$.clipId = \"c3-\" + (+new Date()) + '-clip',\n\t        $$.clipIdForXAxis = $$.clipId + '-xaxis',\n\t        $$.clipIdForYAxis = $$.clipId + '-yaxis',\n\t        $$.clipIdForGrid = $$.clipId + '-grid',\n\t        $$.clipIdForSubchart = $$.clipId + '-subchart',\n\t        $$.clipPath = $$.getClipPath($$.clipId),\n\t        $$.clipPathForXAxis = $$.getClipPath($$.clipIdForXAxis),\n\t        $$.clipPathForYAxis = $$.getClipPath($$.clipIdForYAxis);\n\t        $$.clipPathForGrid = $$.getClipPath($$.clipIdForGrid),\n\t        $$.clipPathForSubchart = $$.getClipPath($$.clipIdForSubchart),\n\t\n\t        $$.dragStart = null;\n\t        $$.dragging = false;\n\t        $$.flowing = false;\n\t        $$.cancelClick = false;\n\t        $$.mouseover = false;\n\t        $$.transiting = false;\n\t\n\t        $$.color = $$.generateColor();\n\t        $$.levelColor = $$.generateLevelColor();\n\t\n\t        $$.dataTimeFormat = config.data_xLocaltime ? d3.time.format : d3.time.format.utc;\n\t        $$.axisTimeFormat = config.axis_x_localtime ? d3.time.format : d3.time.format.utc;\n\t        $$.defaultAxisTimeFormat = $$.axisTimeFormat.multi([\n\t            [\".%L\", function (d) { return d.getMilliseconds(); }],\n\t            [\":%S\", function (d) { return d.getSeconds(); }],\n\t            [\"%I:%M\", function (d) { return d.getMinutes(); }],\n\t            [\"%I %p\", function (d) { return d.getHours(); }],\n\t            [\"%-m/%-d\", function (d) { return d.getDay() && d.getDate() !== 1; }],\n\t            [\"%-m/%-d\", function (d) { return d.getDate() !== 1; }],\n\t            [\"%-m/%-d\", function (d) { return d.getMonth(); }],\n\t            [\"%Y/%-m/%-d\", function () { return true; }]\n\t        ]);\n\t\n\t        $$.hiddenTargetIds = [];\n\t        $$.hiddenLegendIds = [];\n\t        $$.focusedTargetIds = [];\n\t        $$.defocusedTargetIds = [];\n\t\n\t        $$.xOrient = config.axis_rotated ? \"left\" : \"bottom\";\n\t        $$.yOrient = config.axis_rotated ? (config.axis_y_inner ? \"top\" : \"bottom\") : (config.axis_y_inner ? \"right\" : \"left\");\n\t        $$.y2Orient = config.axis_rotated ? (config.axis_y2_inner ? \"bottom\" : \"top\") : (config.axis_y2_inner ? \"left\" : \"right\");\n\t        $$.subXOrient = config.axis_rotated ? \"left\" : \"bottom\";\n\t\n\t        $$.isLegendRight = config.legend_position === 'right';\n\t        $$.isLegendInset = config.legend_position === 'inset';\n\t        $$.isLegendTop = config.legend_inset_anchor === 'top-left' || config.legend_inset_anchor === 'top-right';\n\t        $$.isLegendLeft = config.legend_inset_anchor === 'top-left' || config.legend_inset_anchor === 'bottom-left';\n\t        $$.legendStep = 0;\n\t        $$.legendItemWidth = 0;\n\t        $$.legendItemHeight = 0;\n\t\n\t        $$.currentMaxTickWidths = {\n\t            x: 0,\n\t            y: 0,\n\t            y2: 0\n\t        };\n\t\n\t        $$.rotated_padding_left = 30;\n\t        $$.rotated_padding_right = config.axis_rotated && !config.axis_x_show ? 0 : 30;\n\t        $$.rotated_padding_top = 5;\n\t\n\t        $$.withoutFadeIn = {};\n\t\n\t        $$.intervalForObserveInserted = undefined;\n\t\n\t        $$.axes.subx = d3.selectAll([]); // needs when excluding subchart.js\n\t    };\n\t\n\t    c3_chart_internal_fn.initChartElements = function () {\n\t        if (this.initBar) { this.initBar(); }\n\t        if (this.initLine) { this.initLine(); }\n\t        if (this.initArc) { this.initArc(); }\n\t        if (this.initGauge) { this.initGauge(); }\n\t        if (this.initText) { this.initText(); }\n\t    };\n\t\n\t    c3_chart_internal_fn.initWithData = function (data) {\n\t        var $$ = this, d3 = $$.d3, config = $$.config;\n\t        var defs, main, binding = true;\n\t\n\t        $$.axis = new Axis($$);\n\t\n\t        if ($$.initPie) { $$.initPie(); }\n\t        if ($$.initBrush) { $$.initBrush(); }\n\t        if ($$.initZoom) { $$.initZoom(); }\n\t\n\t        if (!config.bindto) {\n\t            $$.selectChart = d3.selectAll([]);\n\t        }\n\t        else if (typeof config.bindto.node === 'function') {\n\t            $$.selectChart = config.bindto;\n\t        }\n\t        else {\n\t            $$.selectChart = d3.select(config.bindto);\n\t        }\n\t        if ($$.selectChart.empty()) {\n\t            $$.selectChart = d3.select(document.createElement('div')).style('opacity', 0);\n\t            $$.observeInserted($$.selectChart);\n\t            binding = false;\n\t        }\n\t        $$.selectChart.html(\"\").classed(\"c3\", true);\n\t\n\t        // Init data as targets\n\t        $$.data.xs = {};\n\t        $$.data.targets = $$.convertDataToTargets(data);\n\t\n\t        if (config.data_filter) {\n\t            $$.data.targets = $$.data.targets.filter(config.data_filter);\n\t        }\n\t\n\t        // Set targets to hide if needed\n\t        if (config.data_hide) {\n\t            $$.addHiddenTargetIds(config.data_hide === true ? $$.mapToIds($$.data.targets) : config.data_hide);\n\t        }\n\t        if (config.legend_hide) {\n\t            $$.addHiddenLegendIds(config.legend_hide === true ? $$.mapToIds($$.data.targets) : config.legend_hide);\n\t        }\n\t\n\t        // when gauge, hide legend // TODO: fix\n\t        if ($$.hasType('gauge')) {\n\t            config.legend_show = false;\n\t        }\n\t\n\t        // Init sizes and scales\n\t        $$.updateSizes();\n\t        $$.updateScales();\n\t\n\t        // Set domains for each scale\n\t        $$.x.domain(d3.extent($$.getXDomain($$.data.targets)));\n\t        $$.y.domain($$.getYDomain($$.data.targets, 'y'));\n\t        $$.y2.domain($$.getYDomain($$.data.targets, 'y2'));\n\t        $$.subX.domain($$.x.domain());\n\t        $$.subY.domain($$.y.domain());\n\t        $$.subY2.domain($$.y2.domain());\n\t\n\t        // Save original x domain for zoom update\n\t        $$.orgXDomain = $$.x.domain();\n\t\n\t        // Set initialized scales to brush and zoom\n\t        if ($$.brush) { $$.brush.scale($$.subX); }\n\t        if (config.zoom_enabled) { $$.zoom.scale($$.x); }\n\t\n\t        /*-- Basic Elements --*/\n\t\n\t        // Define svgs\n\t        $$.svg = $$.selectChart.append(\"svg\")\n\t            .style(\"overflow\", \"hidden\")\n\t            .on('mouseenter', function () { return config.onmouseover.call($$); })\n\t            .on('mouseleave', function () { return config.onmouseout.call($$); });\n\t\n\t        // Define defs\n\t        defs = $$.svg.append(\"defs\");\n\t        $$.clipChart = $$.appendClip(defs, $$.clipId);\n\t        $$.clipXAxis = $$.appendClip(defs, $$.clipIdForXAxis);\n\t        $$.clipYAxis = $$.appendClip(defs, $$.clipIdForYAxis);\n\t        $$.clipGrid = $$.appendClip(defs, $$.clipIdForGrid);\n\t        $$.clipSubchart = $$.appendClip(defs, $$.clipIdForSubchart);\n\t        $$.updateSvgSize();\n\t\n\t        // Define regions\n\t        main = $$.main = $$.svg.append(\"g\").attr(\"transform\", $$.getTranslate('main'));\n\t\n\t        if ($$.initSubchart) { $$.initSubchart(); }\n\t        if ($$.initTooltip) { $$.initTooltip(); }\n\t        if ($$.initLegend) { $$.initLegend(); }\n\t\n\t        /*-- Main Region --*/\n\t\n\t        // text when empty\n\t        main.append(\"text\")\n\t            .attr(\"class\", CLASS.text + ' ' + CLASS.empty)\n\t            .attr(\"text-anchor\", \"middle\") // horizontal centering of text at x position in all browsers.\n\t            .attr(\"dominant-baseline\", \"middle\"); // vertical centering of text at y position in all browsers, except IE.\n\t\n\t        // Regions\n\t        $$.initRegion();\n\t\n\t        // Grids\n\t        $$.initGrid();\n\t\n\t        // Define g for chart area\n\t        main.append('g')\n\t            .attr(\"clip-path\", $$.clipPath)\n\t            .attr('class', CLASS.chart);\n\t\n\t        // Grid lines\n\t        if (config.grid_lines_front) { $$.initGridLines(); }\n\t\n\t        // Cover whole with rects for events\n\t        $$.initEventRect();\n\t\n\t        // Define g for chart\n\t        $$.initChartElements();\n\t\n\t        // if zoom privileged, insert rect to forefront\n\t        // TODO: is this needed?\n\t        main.insert('rect', config.zoom_privileged ? null : 'g.' + CLASS.regions)\n\t            .attr('class', CLASS.zoomRect)\n\t            .attr('width', $$.width)\n\t            .attr('height', $$.height)\n\t            .style('opacity', 0)\n\t            .on(\"dblclick.zoom\", null);\n\t\n\t        // Set default extent if defined\n\t        if (config.axis_x_extent) { $$.brush.extent($$.getDefaultExtent()); }\n\t\n\t        // Add Axis\n\t        $$.axis.init();\n\t\n\t        // Set targets\n\t        $$.updateTargets($$.data.targets);\n\t\n\t        // Draw with targets\n\t        if (binding) {\n\t            $$.updateDimension();\n\t            $$.config.oninit.call($$);\n\t            $$.redraw({\n\t                withTransition: false,\n\t                withTransform: true,\n\t                withUpdateXDomain: true,\n\t                withUpdateOrgXDomain: true,\n\t                withTransitionForAxis: false\n\t            });\n\t        }\n\t\n\t        // Bind resize event\n\t        if (window.onresize == null) {\n\t            window.onresize = $$.generateResize();\n\t        }\n\t        if (window.onresize.add) {\n\t            window.onresize.add(function () {\n\t                config.onresize.call($$);\n\t            });\n\t            window.onresize.add(function () {\n\t                $$.api.flush();\n\t            });\n\t            window.onresize.add(function () {\n\t                config.onresized.call($$);\n\t            });\n\t        }\n\t\n\t        // export element of the chart\n\t        $$.api.element = $$.selectChart.node();\n\t    };\n\t\n\t    c3_chart_internal_fn.smoothLines = function (el, type) {\n\t        var $$ = this;\n\t        if (type === 'grid') {\n\t            el.each(function () {\n\t                var g = $$.d3.select(this),\n\t                    x1 = g.attr('x1'),\n\t                    x2 = g.attr('x2'),\n\t                    y1 = g.attr('y1'),\n\t                    y2 = g.attr('y2');\n\t                g.attr({\n\t                    'x1': Math.ceil(x1),\n\t                    'x2': Math.ceil(x2),\n\t                    'y1': Math.ceil(y1),\n\t                    'y2': Math.ceil(y2)\n\t                });\n\t            });\n\t        }\n\t    };\n\t\n\t\n\t    c3_chart_internal_fn.updateSizes = function () {\n\t        var $$ = this, config = $$.config;\n\t        var legendHeight = $$.legend ? $$.getLegendHeight() : 0,\n\t            legendWidth = $$.legend ? $$.getLegendWidth() : 0,\n\t            legendHeightForBottom = $$.isLegendRight || $$.isLegendInset ? 0 : legendHeight,\n\t            hasArc = $$.hasArcType(),\n\t            xAxisHeight = config.axis_rotated || hasArc ? 0 : $$.getHorizontalAxisHeight('x'),\n\t            subchartHeight = config.subchart_show && !hasArc ? (config.subchart_size_height + xAxisHeight) : 0;\n\t\n\t        $$.currentWidth = $$.getCurrentWidth();\n\t        $$.currentHeight = $$.getCurrentHeight();\n\t\n\t        // for main\n\t        $$.margin = config.axis_rotated ? {\n\t            top: $$.getHorizontalAxisHeight('y2') + $$.getCurrentPaddingTop(),\n\t            right: hasArc ? 0 : $$.getCurrentPaddingRight(),\n\t            bottom: $$.getHorizontalAxisHeight('y') + legendHeightForBottom + $$.getCurrentPaddingBottom(),\n\t            left: subchartHeight + (hasArc ? 0 : $$.getCurrentPaddingLeft())\n\t        } : {\n\t            top: 4 + $$.getCurrentPaddingTop(), // for top tick text\n\t            right: hasArc ? 0 : $$.getCurrentPaddingRight(),\n\t            bottom: xAxisHeight + subchartHeight + legendHeightForBottom + $$.getCurrentPaddingBottom(),\n\t            left: hasArc ? 0 : $$.getCurrentPaddingLeft()\n\t        };\n\t\n\t        // for subchart\n\t        $$.margin2 = config.axis_rotated ? {\n\t            top: $$.margin.top,\n\t            right: NaN,\n\t            bottom: 20 + legendHeightForBottom,\n\t            left: $$.rotated_padding_left\n\t        } : {\n\t            top: $$.currentHeight - subchartHeight - legendHeightForBottom,\n\t            right: NaN,\n\t            bottom: xAxisHeight + legendHeightForBottom,\n\t            left: $$.margin.left\n\t        };\n\t\n\t        // for legend\n\t        $$.margin3 = {\n\t            top: 0,\n\t            right: NaN,\n\t            bottom: 0,\n\t            left: 0\n\t        };\n\t        if ($$.updateSizeForLegend) { $$.updateSizeForLegend(legendHeight, legendWidth); }\n\t\n\t        $$.width = $$.currentWidth - $$.margin.left - $$.margin.right;\n\t        $$.height = $$.currentHeight - $$.margin.top - $$.margin.bottom;\n\t        if ($$.width < 0) { $$.width = 0; }\n\t        if ($$.height < 0) { $$.height = 0; }\n\t\n\t        $$.width2 = config.axis_rotated ? $$.margin.left - $$.rotated_padding_left - $$.rotated_padding_right : $$.width;\n\t        $$.height2 = config.axis_rotated ? $$.height : $$.currentHeight - $$.margin2.top - $$.margin2.bottom;\n\t        if ($$.width2 < 0) { $$.width2 = 0; }\n\t        if ($$.height2 < 0) { $$.height2 = 0; }\n\t\n\t        // for arc\n\t        $$.arcWidth = $$.width - ($$.isLegendRight ? legendWidth + 10 : 0);\n\t        $$.arcHeight = $$.height - ($$.isLegendRight ? 0 : 10);\n\t        if ($$.hasType('gauge')) {\n\t            $$.arcHeight += $$.height - $$.getGaugeLabelHeight();\n\t        }\n\t        if ($$.updateRadius) { $$.updateRadius(); }\n\t\n\t        if ($$.isLegendRight && hasArc) {\n\t            $$.margin3.left = $$.arcWidth / 2 + $$.radiusExpanded * 1.1;\n\t        }\n\t    };\n\t\n\t    c3_chart_internal_fn.updateTargets = function (targets) {\n\t        var $$ = this;\n\t\n\t        /*-- Main --*/\n\t\n\t        //-- Text --//\n\t        $$.updateTargetsForText(targets);\n\t\n\t        //-- Bar --//\n\t        $$.updateTargetsForBar(targets);\n\t\n\t        //-- Line --//\n\t        $$.updateTargetsForLine(targets);\n\t\n\t        //-- Arc --//\n\t        if ($$.hasArcType() && $$.updateTargetsForArc) { $$.updateTargetsForArc(targets); }\n\t\n\t        /*-- Sub --*/\n\t\n\t        if ($$.updateTargetsForSubchart) { $$.updateTargetsForSubchart(targets); }\n\t\n\t        // Fade-in each chart\n\t        $$.showTargets();\n\t    };\n\t    c3_chart_internal_fn.showTargets = function () {\n\t        var $$ = this;\n\t        $$.svg.selectAll('.' + CLASS.target).filter(function (d) { return $$.isTargetToShow(d.id); })\n\t          .transition().duration($$.config.transition_duration)\n\t            .style(\"opacity\", 1);\n\t    };\n\t\n\t    c3_chart_internal_fn.redraw = function (options, transitions) {\n\t        var $$ = this, main = $$.main, d3 = $$.d3, config = $$.config;\n\t        var areaIndices = $$.getShapeIndices($$.isAreaType), barIndices = $$.getShapeIndices($$.isBarType), lineIndices = $$.getShapeIndices($$.isLineType);\n\t        var withY, withSubchart, withTransition, withTransitionForExit, withTransitionForAxis,\n\t            withTransform, withUpdateXDomain, withUpdateOrgXDomain, withTrimXDomain, withLegend,\n\t            withEventRect, withDimension, withUpdateXAxis;\n\t        var hideAxis = $$.hasArcType();\n\t        var drawArea, drawBar, drawLine, xForText, yForText;\n\t        var duration, durationForExit, durationForAxis;\n\t        var waitForDraw, flow;\n\t        var targetsToShow = $$.filterTargetsToShow($$.data.targets), tickValues, i, intervalForCulling, xDomainForZoom;\n\t        var xv = $$.xv.bind($$), cx, cy;\n\t\n\t        options = options || {};\n\t        withY = getOption(options, \"withY\", true);\n\t        withSubchart = getOption(options, \"withSubchart\", true);\n\t        withTransition = getOption(options, \"withTransition\", true);\n\t        withTransform = getOption(options, \"withTransform\", false);\n\t        withUpdateXDomain = getOption(options, \"withUpdateXDomain\", false);\n\t        withUpdateOrgXDomain = getOption(options, \"withUpdateOrgXDomain\", false);\n\t        withTrimXDomain = getOption(options, \"withTrimXDomain\", true);\n\t        withUpdateXAxis = getOption(options, \"withUpdateXAxis\", withUpdateXDomain);\n\t        withLegend = getOption(options, \"withLegend\", false);\n\t        withEventRect = getOption(options, \"withEventRect\", true);\n\t        withDimension = getOption(options, \"withDimension\", true);\n\t        withTransitionForExit = getOption(options, \"withTransitionForExit\", withTransition);\n\t        withTransitionForAxis = getOption(options, \"withTransitionForAxis\", withTransition);\n\t\n\t        duration = withTransition ? config.transition_duration : 0;\n\t        durationForExit = withTransitionForExit ? duration : 0;\n\t        durationForAxis = withTransitionForAxis ? duration : 0;\n\t\n\t        transitions = transitions || $$.axis.generateTransitions(durationForAxis);\n\t\n\t        // update legend and transform each g\n\t        if (withLegend && config.legend_show) {\n\t            $$.updateLegend($$.mapToIds($$.data.targets), options, transitions);\n\t        } else if (withDimension) {\n\t            // need to update dimension (e.g. axis.y.tick.values) because y tick values should change\n\t            // no need to update axis in it because they will be updated in redraw()\n\t            $$.updateDimension(true);\n\t        }\n\t\n\t        // MEMO: needed for grids calculation\n\t        if ($$.isCategorized() && targetsToShow.length === 0) {\n\t            $$.x.domain([0, $$.axes.x.selectAll('.tick').size()]);\n\t        }\n\t\n\t        if (targetsToShow.length) {\n\t            $$.updateXDomain(targetsToShow, withUpdateXDomain, withUpdateOrgXDomain, withTrimXDomain);\n\t            if (!config.axis_x_tick_values) {\n\t                tickValues = $$.axis.updateXAxisTickValues(targetsToShow);\n\t            }\n\t        } else {\n\t            $$.xAxis.tickValues([]);\n\t            $$.subXAxis.tickValues([]);\n\t        }\n\t\n\t        if (config.zoom_rescale && !options.flow) {\n\t            xDomainForZoom = $$.x.orgDomain();\n\t        }\n\t\n\t        $$.y.domain($$.getYDomain(targetsToShow, 'y', xDomainForZoom));\n\t        $$.y2.domain($$.getYDomain(targetsToShow, 'y2', xDomainForZoom));\n\t\n\t        if (!config.axis_y_tick_values && config.axis_y_tick_count) {\n\t            $$.yAxis.tickValues($$.axis.generateTickValues($$.y.domain(), config.axis_y_tick_count));\n\t        }\n\t        if (!config.axis_y2_tick_values && config.axis_y2_tick_count) {\n\t            $$.y2Axis.tickValues($$.axis.generateTickValues($$.y2.domain(), config.axis_y2_tick_count));\n\t        }\n\t\n\t        // axes\n\t        $$.axis.redraw(transitions, hideAxis);\n\t\n\t        // Update axis label\n\t        $$.axis.updateLabels(withTransition);\n\t\n\t        // show/hide if manual culling needed\n\t        if ((withUpdateXDomain || withUpdateXAxis) && targetsToShow.length) {\n\t            if (config.axis_x_tick_culling && tickValues) {\n\t                for (i = 1; i < tickValues.length; i++) {\n\t                    if (tickValues.length / i < config.axis_x_tick_culling_max) {\n\t                        intervalForCulling = i;\n\t                        break;\n\t                    }\n\t                }\n\t                $$.svg.selectAll('.' + CLASS.axisX + ' .tick text').each(function (e) {\n\t                    var index = tickValues.indexOf(e);\n\t                    if (index >= 0) {\n\t                        d3.select(this).style('display', index % intervalForCulling ? 'none' : 'block');\n\t                    }\n\t                });\n\t            } else {\n\t                $$.svg.selectAll('.' + CLASS.axisX + ' .tick text').style('display', 'block');\n\t            }\n\t        }\n\t\n\t        // setup drawer - MEMO: these must be called after axis updated\n\t        drawArea = $$.generateDrawArea ? $$.generateDrawArea(areaIndices, false) : undefined;\n\t        drawBar = $$.generateDrawBar ? $$.generateDrawBar(barIndices) : undefined;\n\t        drawLine = $$.generateDrawLine ? $$.generateDrawLine(lineIndices, false) : undefined;\n\t        xForText = $$.generateXYForText(areaIndices, barIndices, lineIndices, true);\n\t        yForText = $$.generateXYForText(areaIndices, barIndices, lineIndices, false);\n\t\n\t        // Update sub domain\n\t        if (withY) {\n\t            $$.subY.domain($$.getYDomain(targetsToShow, 'y'));\n\t            $$.subY2.domain($$.getYDomain(targetsToShow, 'y2'));\n\t        }\n\t\n\t        // tooltip\n\t        $$.tooltip.style(\"display\", \"none\");\n\t\n\t        // xgrid focus\n\t        $$.updateXgridFocus();\n\t\n\t        // Data empty label positioning and text.\n\t        main.select(\"text.\" + CLASS.text + '.' + CLASS.empty)\n\t            .attr(\"x\", $$.width / 2)\n\t            .attr(\"y\", $$.height / 2)\n\t            .text(config.data_empty_label_text)\n\t          .transition()\n\t            .style('opacity', targetsToShow.length ? 0 : 1);\n\t\n\t        // grid\n\t        $$.updateGrid(duration);\n\t\n\t        // rect for regions\n\t        $$.updateRegion(duration);\n\t\n\t        // bars\n\t        $$.updateBar(durationForExit);\n\t\n\t        // lines, areas and cricles\n\t        $$.updateLine(durationForExit);\n\t        $$.updateArea(durationForExit);\n\t        $$.updateCircle();\n\t\n\t        // text\n\t        if ($$.hasDataLabel()) {\n\t            $$.updateText(durationForExit);\n\t        }\n\t\n\t        // arc\n\t        if ($$.redrawArc) { $$.redrawArc(duration, durationForExit, withTransform); }\n\t\n\t        // subchart\n\t        if ($$.redrawSubchart) {\n\t            $$.redrawSubchart(withSubchart, transitions, duration, durationForExit, areaIndices, barIndices, lineIndices);\n\t        }\n\t\n\t        // circles for select\n\t        main.selectAll('.' + CLASS.selectedCircles)\n\t            .filter($$.isBarType.bind($$))\n\t            .selectAll('circle')\n\t            .remove();\n\t\n\t        // event rects will redrawn when flow called\n\t        if (config.interaction_enabled && !options.flow && withEventRect) {\n\t            $$.redrawEventRect();\n\t            if ($$.updateZoom) { $$.updateZoom(); }\n\t        }\n\t\n\t        // update circleY based on updated parameters\n\t        $$.updateCircleY();\n\t\n\t        // generate circle x/y functions depending on updated params\n\t        cx = ($$.config.axis_rotated ? $$.circleY : $$.circleX).bind($$);\n\t        cy = ($$.config.axis_rotated ? $$.circleX : $$.circleY).bind($$);\n\t\n\t        if (options.flow) {\n\t            flow = $$.generateFlow({\n\t                targets: targetsToShow,\n\t                flow: options.flow,\n\t                duration: options.flow.duration,\n\t                drawBar: drawBar,\n\t                drawLine: drawLine,\n\t                drawArea: drawArea,\n\t                cx: cx,\n\t                cy: cy,\n\t                xv: xv,\n\t                xForText: xForText,\n\t                yForText: yForText\n\t            });\n\t        }\n\t\n\t        if ((duration || flow) && $$.isTabVisible()) { // Only use transition if tab visible. See #938.\n\t            // transition should be derived from one transition\n\t            d3.transition().duration(duration).each(function () {\n\t                var transitionsToWait = [];\n\t\n\t                // redraw and gather transitions\n\t                [\n\t                    $$.redrawBar(drawBar, true),\n\t                    $$.redrawLine(drawLine, true),\n\t                    $$.redrawArea(drawArea, true),\n\t                    $$.redrawCircle(cx, cy, true),\n\t                    $$.redrawText(xForText, yForText, options.flow, true),\n\t                    $$.redrawRegion(true),\n\t                    $$.redrawGrid(true),\n\t                ].forEach(function (transitions) {\n\t                    transitions.forEach(function (transition) {\n\t                        transitionsToWait.push(transition);\n\t                    });\n\t                });\n\t\n\t                // Wait for end of transitions to call flow and onrendered callback\n\t                waitForDraw = $$.generateWait();\n\t                transitionsToWait.forEach(function (t) {\n\t                    waitForDraw.add(t);\n\t                });\n\t            })\n\t            .call(waitForDraw, function () {\n\t                if (flow) {\n\t                    flow();\n\t                }\n\t                if (config.onrendered) {\n\t                    config.onrendered.call($$);\n\t                }\n\t            });\n\t        }\n\t        else {\n\t            $$.redrawBar(drawBar);\n\t            $$.redrawLine(drawLine);\n\t            $$.redrawArea(drawArea);\n\t            $$.redrawCircle(cx, cy);\n\t            $$.redrawText(xForText, yForText, options.flow);\n\t            $$.redrawRegion();\n\t            $$.redrawGrid();\n\t            if (config.onrendered) {\n\t                config.onrendered.call($$);\n\t            }\n\t        }\n\t\n\t        // update fadein condition\n\t        $$.mapToIds($$.data.targets).forEach(function (id) {\n\t            $$.withoutFadeIn[id] = true;\n\t        });\n\t    };\n\t\n\t    c3_chart_internal_fn.updateAndRedraw = function (options) {\n\t        var $$ = this, config = $$.config, transitions;\n\t        options = options || {};\n\t        // same with redraw\n\t        options.withTransition = getOption(options, \"withTransition\", true);\n\t        options.withTransform = getOption(options, \"withTransform\", false);\n\t        options.withLegend = getOption(options, \"withLegend\", false);\n\t        // NOT same with redraw\n\t        options.withUpdateXDomain = true;\n\t        options.withUpdateOrgXDomain = true;\n\t        options.withTransitionForExit = false;\n\t        options.withTransitionForTransform = getOption(options, \"withTransitionForTransform\", options.withTransition);\n\t        // MEMO: this needs to be called before updateLegend and it means this ALWAYS needs to be called)\n\t        $$.updateSizes();\n\t        // MEMO: called in updateLegend in redraw if withLegend\n\t        if (!(options.withLegend && config.legend_show)) {\n\t            transitions = $$.axis.generateTransitions(options.withTransitionForAxis ? config.transition_duration : 0);\n\t            // Update scales\n\t            $$.updateScales();\n\t            $$.updateSvgSize();\n\t            // Update g positions\n\t            $$.transformAll(options.withTransitionForTransform, transitions);\n\t        }\n\t        // Draw with new sizes & scales\n\t        $$.redraw(options, transitions);\n\t    };\n\t    c3_chart_internal_fn.redrawWithoutRescale = function () {\n\t        this.redraw({\n\t            withY: false,\n\t            withSubchart: false,\n\t            withEventRect: false,\n\t            withTransitionForAxis: false\n\t        });\n\t    };\n\t\n\t    c3_chart_internal_fn.isTimeSeries = function () {\n\t        return this.config.axis_x_type === 'timeseries';\n\t    };\n\t    c3_chart_internal_fn.isCategorized = function () {\n\t        return this.config.axis_x_type.indexOf('categor') >= 0;\n\t    };\n\t    c3_chart_internal_fn.isCustomX = function () {\n\t        var $$ = this, config = $$.config;\n\t        return !$$.isTimeSeries() && (config.data_x || notEmpty(config.data_xs));\n\t    };\n\t\n\t    c3_chart_internal_fn.isTimeSeriesY = function () {\n\t        return this.config.axis_y_type === 'timeseries';\n\t    };\n\t\n\t    c3_chart_internal_fn.getTranslate = function (target) {\n\t        var $$ = this, config = $$.config, x, y;\n\t        if (target === 'main') {\n\t            x = asHalfPixel($$.margin.left);\n\t            y = asHalfPixel($$.margin.top);\n\t        } else if (target === 'context') {\n\t            x = asHalfPixel($$.margin2.left);\n\t            y = asHalfPixel($$.margin2.top);\n\t        } else if (target === 'legend') {\n\t            x = $$.margin3.left;\n\t            y = $$.margin3.top;\n\t        } else if (target === 'x') {\n\t            x = 0;\n\t            y = config.axis_rotated ? 0 : $$.height;\n\t        } else if (target === 'y') {\n\t            x = 0;\n\t            y = config.axis_rotated ? $$.height : 0;\n\t        } else if (target === 'y2') {\n\t            x = config.axis_rotated ? 0 : $$.width;\n\t            y = config.axis_rotated ? 1 : 0;\n\t        } else if (target === 'subx') {\n\t            x = 0;\n\t            y = config.axis_rotated ? 0 : $$.height2;\n\t        } else if (target === 'arc') {\n\t            x = $$.arcWidth / 2;\n\t            y = $$.arcHeight / 2;\n\t        }\n\t        return \"translate(\" + x + \",\" + y + \")\";\n\t    };\n\t    c3_chart_internal_fn.initialOpacity = function (d) {\n\t        return d.value !== null && this.withoutFadeIn[d.id] ? 1 : 0;\n\t    };\n\t    c3_chart_internal_fn.initialOpacityForCircle = function (d) {\n\t        return d.value !== null && this.withoutFadeIn[d.id] ? this.opacityForCircle(d) : 0;\n\t    };\n\t    c3_chart_internal_fn.opacityForCircle = function (d) {\n\t        var opacity = this.config.point_show ? 1 : 0;\n\t        return isValue(d.value) ? (this.isScatterType(d) ? 0.5 : opacity) : 0;\n\t    };\n\t    c3_chart_internal_fn.opacityForText = function () {\n\t        return this.hasDataLabel() ? 1 : 0;\n\t    };\n\t    c3_chart_internal_fn.xx = function (d) {\n\t        return d ? this.x(d.x) : null;\n\t    };\n\t    c3_chart_internal_fn.xv = function (d) {\n\t        var $$ = this, value = d.value;\n\t        if ($$.isTimeSeries()) {\n\t            value = $$.parseDate(d.value);\n\t        }\n\t        else if ($$.isCategorized() && typeof d.value === 'string') {\n\t            value = $$.config.axis_x_categories.indexOf(d.value);\n\t        }\n\t        return Math.ceil($$.x(value));\n\t    };\n\t    c3_chart_internal_fn.yv = function (d) {\n\t        var $$ = this,\n\t            yScale = d.axis && d.axis === 'y2' ? $$.y2 : $$.y;\n\t        return Math.ceil(yScale(d.value));\n\t    };\n\t    c3_chart_internal_fn.subxx = function (d) {\n\t        return d ? this.subX(d.x) : null;\n\t    };\n\t\n\t    c3_chart_internal_fn.transformMain = function (withTransition, transitions) {\n\t        var $$ = this,\n\t            xAxis, yAxis, y2Axis;\n\t        if (transitions && transitions.axisX) {\n\t            xAxis = transitions.axisX;\n\t        } else {\n\t            xAxis  = $$.main.select('.' + CLASS.axisX);\n\t            if (withTransition) { xAxis = xAxis.transition(); }\n\t        }\n\t        if (transitions && transitions.axisY) {\n\t            yAxis = transitions.axisY;\n\t        } else {\n\t            yAxis = $$.main.select('.' + CLASS.axisY);\n\t            if (withTransition) { yAxis = yAxis.transition(); }\n\t        }\n\t        if (transitions && transitions.axisY2) {\n\t            y2Axis = transitions.axisY2;\n\t        } else {\n\t            y2Axis = $$.main.select('.' + CLASS.axisY2);\n\t            if (withTransition) { y2Axis = y2Axis.transition(); }\n\t        }\n\t        (withTransition ? $$.main.transition() : $$.main).attr(\"transform\", $$.getTranslate('main'));\n\t        xAxis.attr(\"transform\", $$.getTranslate('x'));\n\t        yAxis.attr(\"transform\", $$.getTranslate('y'));\n\t        y2Axis.attr(\"transform\", $$.getTranslate('y2'));\n\t        $$.main.select('.' + CLASS.chartArcs).attr(\"transform\", $$.getTranslate('arc'));\n\t    };\n\t    c3_chart_internal_fn.transformAll = function (withTransition, transitions) {\n\t        var $$ = this;\n\t        $$.transformMain(withTransition, transitions);\n\t        if ($$.config.subchart_show) { $$.transformContext(withTransition, transitions); }\n\t        if ($$.legend) { $$.transformLegend(withTransition); }\n\t    };\n\t\n\t    c3_chart_internal_fn.updateSvgSize = function () {\n\t        var $$ = this,\n\t            brush = $$.svg.select(\".c3-brush .background\");\n\t        $$.svg.attr('width', $$.currentWidth).attr('height', $$.currentHeight);\n\t        $$.svg.selectAll(['#' + $$.clipId, '#' + $$.clipIdForGrid]).select('rect')\n\t            .attr('width', $$.width)\n\t            .attr('height', $$.height);\n\t        $$.svg.select('#' + $$.clipIdForXAxis).select('rect')\n\t            .attr('x', $$.getXAxisClipX.bind($$))\n\t            .attr('y', $$.getXAxisClipY.bind($$))\n\t            .attr('width', $$.getXAxisClipWidth.bind($$))\n\t            .attr('height', $$.getXAxisClipHeight.bind($$));\n\t        $$.svg.select('#' + $$.clipIdForYAxis).select('rect')\n\t            .attr('x', $$.getYAxisClipX.bind($$))\n\t            .attr('y', $$.getYAxisClipY.bind($$))\n\t            .attr('width', $$.getYAxisClipWidth.bind($$))\n\t            .attr('height', $$.getYAxisClipHeight.bind($$));\n\t        $$.svg.select('#' + $$.clipIdForSubchart).select('rect')\n\t            .attr('width', $$.width)\n\t            .attr('height', brush.size() ? brush.attr('height') : 0);\n\t        $$.svg.select('.' + CLASS.zoomRect)\n\t            .attr('width', $$.width)\n\t            .attr('height', $$.height);\n\t        // MEMO: parent div's height will be bigger than svg when <!DOCTYPE html>\n\t        $$.selectChart.style('max-height', $$.currentHeight + \"px\");\n\t    };\n\t\n\t\n\t    c3_chart_internal_fn.updateDimension = function (withoutAxis) {\n\t        var $$ = this;\n\t        if (!withoutAxis) {\n\t            if ($$.config.axis_rotated) {\n\t                $$.axes.x.call($$.xAxis);\n\t                $$.axes.subx.call($$.subXAxis);\n\t            } else {\n\t                $$.axes.y.call($$.yAxis);\n\t                $$.axes.y2.call($$.y2Axis);\n\t            }\n\t        }\n\t        $$.updateSizes();\n\t        $$.updateScales();\n\t        $$.updateSvgSize();\n\t        $$.transformAll(false);\n\t    };\n\t\n\t    c3_chart_internal_fn.observeInserted = function (selection) {\n\t        var $$ = this, observer;\n\t        if (typeof MutationObserver === 'undefined') {\n\t            window.console.error(\"MutationObserver not defined.\");\n\t            return;\n\t        }\n\t        observer= new MutationObserver(function (mutations) {\n\t            mutations.forEach(function (mutation) {\n\t                if (mutation.type === 'childList' && mutation.previousSibling) {\n\t                    observer.disconnect();\n\t                    // need to wait for completion of load because size calculation requires the actual sizes determined after that completion\n\t                    $$.intervalForObserveInserted = window.setInterval(function () {\n\t                        // parentNode will NOT be null when completed\n\t                        if (selection.node().parentNode) {\n\t                            window.clearInterval($$.intervalForObserveInserted);\n\t                            $$.updateDimension();\n\t                            $$.config.oninit.call($$);\n\t                            $$.redraw({\n\t                                withTransform: true,\n\t                                withUpdateXDomain: true,\n\t                                withUpdateOrgXDomain: true,\n\t                                withTransition: false,\n\t                                withTransitionForTransform: false,\n\t                                withLegend: true\n\t                            });\n\t                            selection.transition().style('opacity', 1);\n\t                        }\n\t                    }, 10);\n\t                }\n\t            });\n\t        });\n\t        observer.observe(selection.node(), {attributes: true, childList: true, characterData: true});\n\t    };\n\t\n\t\n\t    c3_chart_internal_fn.generateResize = function () {\n\t        var resizeFunctions = [];\n\t        function callResizeFunctions() {\n\t            resizeFunctions.forEach(function (f) {\n\t                f();\n\t            });\n\t        }\n\t        callResizeFunctions.add = function (f) {\n\t            resizeFunctions.push(f);\n\t        };\n\t        return callResizeFunctions;\n\t    };\n\t\n\t    c3_chart_internal_fn.endall = function (transition, callback) {\n\t        var n = 0;\n\t        transition\n\t            .each(function () { ++n; })\n\t            .each(\"end\", function () {\n\t                if (!--n) { callback.apply(this, arguments); }\n\t            });\n\t    };\n\t    c3_chart_internal_fn.generateWait = function () {\n\t        var transitionsToWait = [],\n\t            f = function (transition, callback) {\n\t                var timer = setInterval(function () {\n\t                    var done = 0;\n\t                    transitionsToWait.forEach(function (t) {\n\t                        if (t.empty()) {\n\t                            done += 1;\n\t                            return;\n\t                        }\n\t                        try {\n\t                            t.transition();\n\t                        } catch (e) {\n\t                            done += 1;\n\t                        }\n\t                    });\n\t                    if (done === transitionsToWait.length) {\n\t                        clearInterval(timer);\n\t                        if (callback) { callback(); }\n\t                    }\n\t                }, 10);\n\t            };\n\t        f.add = function (transition) {\n\t            transitionsToWait.push(transition);\n\t        };\n\t        return f;\n\t    };\n\t\n\t    c3_chart_internal_fn.parseDate = function (date) {\n\t        var $$ = this, parsedDate;\n\t        if (date instanceof Date) {\n\t            parsedDate = date;\n\t        } else if (typeof date === 'string') {\n\t            parsedDate = $$.dataTimeFormat($$.config.data_xFormat).parse(date);\n\t        } else if (typeof date === 'number' || !isNaN(date)) {\n\t            parsedDate = new Date(+date);\n\t        }\n\t        if (!parsedDate || isNaN(+parsedDate)) {\n\t            window.console.error(\"Failed to parse x '\" + date + \"' to Date object\");\n\t        }\n\t        return parsedDate;\n\t    };\n\t\n\t    c3_chart_internal_fn.isTabVisible = function () {\n\t        var hidden;\n\t        if (typeof document.hidden !== \"undefined\") { // Opera 12.10 and Firefox 18 and later support\n\t            hidden = \"hidden\";\n\t        } else if (typeof document.mozHidden !== \"undefined\") {\n\t            hidden = \"mozHidden\";\n\t        } else if (typeof document.msHidden !== \"undefined\") {\n\t            hidden = \"msHidden\";\n\t        } else if (typeof document.webkitHidden !== \"undefined\") {\n\t            hidden = \"webkitHidden\";\n\t        }\n\t\n\t        return document[hidden] ? false : true;\n\t    };\n\t\n\t    c3_chart_internal_fn.getDefaultConfig = function () {\n\t        var config = {\n\t            bindto: '#chart',\n\t            size_width: undefined,\n\t            size_height: undefined,\n\t            padding_left: undefined,\n\t            padding_right: undefined,\n\t            padding_top: undefined,\n\t            padding_bottom: undefined,\n\t            zoom_enabled: false,\n\t            zoom_extent: undefined,\n\t            zoom_privileged: false,\n\t            zoom_rescale: false,\n\t            zoom_onzoom: function () {},\n\t            zoom_onzoomstart: function () {},\n\t            zoom_onzoomend: function () {},\n\t            interaction_enabled: true,\n\t            onmouseover: function () {},\n\t            onmouseout: function () {},\n\t            onresize: function () {},\n\t            onresized: function () {},\n\t            oninit: function () {},\n\t            onrendered: function () {},\n\t            transition_duration: 350,\n\t            data_x: undefined,\n\t            data_xs: {},\n\t            data_xFormat: '%Y-%m-%d',\n\t            data_xLocaltime: true,\n\t            data_xSort: true,\n\t            data_idConverter: function (id) { return id; },\n\t            data_names: {},\n\t            data_classes: {},\n\t            data_groups: [],\n\t            data_axes: {},\n\t            data_type: undefined,\n\t            data_types: {},\n\t            data_labels: {},\n\t            data_order: 'desc',\n\t            data_regions: {},\n\t            data_color: undefined,\n\t            data_colors: {},\n\t            data_hide: false,\n\t            data_filter: undefined,\n\t            data_selection_enabled: false,\n\t            data_selection_grouped: false,\n\t            data_selection_isselectable: function () { return true; },\n\t            data_selection_multiple: true,\n\t            data_selection_draggable: false,\n\t            data_onclick: function () {},\n\t            data_onmouseover: function () {},\n\t            data_onmouseout: function () {},\n\t            data_onselected: function () {},\n\t            data_onunselected: function () {},\n\t            data_url: undefined,\n\t            data_json: undefined,\n\t            data_rows: undefined,\n\t            data_columns: undefined,\n\t            data_mimeType: undefined,\n\t            data_keys: undefined,\n\t            // configuration for no plot-able data supplied.\n\t            data_empty_label_text: \"\",\n\t            // subchart\n\t            subchart_show: false,\n\t            subchart_size_height: 60,\n\t            subchart_onbrush: function () {},\n\t            // color\n\t            color_pattern: [],\n\t            color_threshold: {},\n\t            // legend\n\t            legend_show: true,\n\t            legend_hide: false,\n\t            legend_position: 'bottom',\n\t            legend_inset_anchor: 'top-left',\n\t            legend_inset_x: 10,\n\t            legend_inset_y: 0,\n\t            legend_inset_step: undefined,\n\t            legend_item_onclick: undefined,\n\t            legend_item_onmouseover: undefined,\n\t            legend_item_onmouseout: undefined,\n\t            legend_equally: false,\n\t            // axis\n\t            axis_rotated: false,\n\t            axis_x_show: true,\n\t            axis_x_type: 'indexed',\n\t            axis_x_localtime: true,\n\t            axis_x_categories: [],\n\t            axis_x_tick_centered: false,\n\t            axis_x_tick_format: undefined,\n\t            axis_x_tick_culling: {},\n\t            axis_x_tick_culling_max: 10,\n\t            axis_x_tick_count: undefined,\n\t            axis_x_tick_fit: true,\n\t            axis_x_tick_values: null,\n\t            axis_x_tick_rotate: 0,\n\t            axis_x_tick_outer: true,\n\t            axis_x_tick_multiline: true,\n\t            axis_x_tick_width: null,\n\t            axis_x_max: undefined,\n\t            axis_x_min: undefined,\n\t            axis_x_padding: {},\n\t            axis_x_height: undefined,\n\t            axis_x_extent: undefined,\n\t            axis_x_label: {},\n\t            axis_y_show: true,\n\t            axis_y_type: undefined,\n\t            axis_y_max: undefined,\n\t            axis_y_min: undefined,\n\t            axis_y_inverted: false,\n\t            axis_y_center: undefined,\n\t            axis_y_inner: undefined,\n\t            axis_y_label: {},\n\t            axis_y_tick_format: undefined,\n\t            axis_y_tick_outer: true,\n\t            axis_y_tick_values: null,\n\t            axis_y_tick_count: undefined,\n\t            axis_y_tick_time_value: undefined,\n\t            axis_y_tick_time_interval: undefined,\n\t            axis_y_padding: {},\n\t            axis_y_default: undefined,\n\t            axis_y2_show: false,\n\t            axis_y2_max: undefined,\n\t            axis_y2_min: undefined,\n\t            axis_y2_inverted: false,\n\t            axis_y2_center: undefined,\n\t            axis_y2_inner: undefined,\n\t            axis_y2_label: {},\n\t            axis_y2_tick_format: undefined,\n\t            axis_y2_tick_outer: true,\n\t            axis_y2_tick_values: null,\n\t            axis_y2_tick_count: undefined,\n\t            axis_y2_padding: {},\n\t            axis_y2_default: undefined,\n\t            // grid\n\t            grid_x_show: false,\n\t            grid_x_type: 'tick',\n\t            grid_x_lines: [],\n\t            grid_y_show: false,\n\t            // not used\n\t            // grid_y_type: 'tick',\n\t            grid_y_lines: [],\n\t            grid_y_ticks: 10,\n\t            grid_focus_show: true,\n\t            grid_lines_front: true,\n\t            // point - point of each data\n\t            point_show: true,\n\t            point_r: 2.5,\n\t            point_focus_expand_enabled: true,\n\t            point_focus_expand_r: undefined,\n\t            point_select_r: undefined,\n\t            // line\n\t            line_connectNull: false,\n\t            line_step_type: 'step',\n\t            // bar\n\t            bar_width: undefined,\n\t            bar_width_ratio: 0.6,\n\t            bar_width_max: undefined,\n\t            bar_zerobased: true,\n\t            // area\n\t            area_zerobased: true,\n\t            // pie\n\t            pie_label_show: true,\n\t            pie_label_format: undefined,\n\t            pie_label_threshold: 0.05,\n\t            pie_expand: true,\n\t            // gauge\n\t            gauge_label_show: true,\n\t            gauge_label_format: undefined,\n\t            gauge_expand: true,\n\t            gauge_min: 0,\n\t            gauge_max: 100,\n\t            gauge_units: undefined,\n\t            gauge_width: undefined,\n\t            // donut\n\t            donut_label_show: true,\n\t            donut_label_format: undefined,\n\t            donut_label_threshold: 0.05,\n\t            donut_width: undefined,\n\t            donut_expand: true,\n\t            donut_title: \"\",\n\t            // region - region to change style\n\t            regions: [],\n\t            // tooltip - show when mouseover on each data\n\t            tooltip_show: true,\n\t            tooltip_grouped: true,\n\t            tooltip_format_title: undefined,\n\t            tooltip_format_name: undefined,\n\t            tooltip_format_value: undefined,\n\t            tooltip_position: undefined,\n\t            tooltip_contents: function (d, defaultTitleFormat, defaultValueFormat, color) {\n\t                return this.getTooltipContent ? this.getTooltipContent(d, defaultTitleFormat, defaultValueFormat, color) : '';\n\t            },\n\t            tooltip_init_show: false,\n\t            tooltip_init_x: 0,\n\t            tooltip_init_position: {top: '0px', left: '50px'}\n\t        };\n\t\n\t        Object.keys(this.additionalConfig).forEach(function (key) {\n\t            config[key] = this.additionalConfig[key];\n\t        }, this);\n\t\n\t        return config;\n\t    };\n\t    c3_chart_internal_fn.additionalConfig = {};\n\t\n\t    c3_chart_internal_fn.loadConfig = function (config) {\n\t        var this_config = this.config, target, keys, read;\n\t        function find() {\n\t            var key = keys.shift();\n\t    //        console.log(\"key =>\", key, \", target =>\", target);\n\t            if (key && target && typeof target === 'object' && key in target) {\n\t                target = target[key];\n\t                return find();\n\t            }\n\t            else if (!key) {\n\t                return target;\n\t            }\n\t            else {\n\t                return undefined;\n\t            }\n\t        }\n\t        Object.keys(this_config).forEach(function (key) {\n\t            target = config;\n\t            keys = key.split('_');\n\t            read = find();\n\t    //        console.log(\"CONFIG : \", key, read);\n\t            if (isDefined(read)) {\n\t                this_config[key] = read;\n\t            }\n\t        });\n\t    };\n\t\n\t    c3_chart_internal_fn.getScale = function (min, max, forTimeseries) {\n\t        return (forTimeseries ? this.d3.time.scale() : this.d3.scale.linear()).range([min, max]);\n\t    };\n\t    c3_chart_internal_fn.getX = function (min, max, domain, offset) {\n\t        var $$ = this,\n\t            scale = $$.getScale(min, max, $$.isTimeSeries()),\n\t            _scale = domain ? scale.domain(domain) : scale, key;\n\t        // Define customized scale if categorized axis\n\t        if ($$.isCategorized()) {\n\t            offset = offset || function () { return 0; };\n\t            scale = function (d, raw) {\n\t                var v = _scale(d) + offset(d);\n\t                return raw ? v : Math.ceil(v);\n\t            };\n\t        } else {\n\t            scale = function (d, raw) {\n\t                var v = _scale(d);\n\t                return raw ? v : Math.ceil(v);\n\t            };\n\t        }\n\t        // define functions\n\t        for (key in _scale) {\n\t            scale[key] = _scale[key];\n\t        }\n\t        scale.orgDomain = function () {\n\t            return _scale.domain();\n\t        };\n\t        // define custom domain() for categorized axis\n\t        if ($$.isCategorized()) {\n\t            scale.domain = function (domain) {\n\t                if (!arguments.length) {\n\t                    domain = this.orgDomain();\n\t                    return [domain[0], domain[1] + 1];\n\t                }\n\t                _scale.domain(domain);\n\t                return scale;\n\t            };\n\t        }\n\t        return scale;\n\t    };\n\t    c3_chart_internal_fn.getY = function (min, max, domain) {\n\t        var scale = this.getScale(min, max, this.isTimeSeriesY());\n\t        if (domain) { scale.domain(domain); }\n\t        return scale;\n\t    };\n\t    c3_chart_internal_fn.getYScale = function (id) {\n\t        return this.axis.getId(id) === 'y2' ? this.y2 : this.y;\n\t    };\n\t    c3_chart_internal_fn.getSubYScale = function (id) {\n\t        return this.axis.getId(id) === 'y2' ? this.subY2 : this.subY;\n\t    };\n\t    c3_chart_internal_fn.updateScales = function () {\n\t        var $$ = this, config = $$.config,\n\t            forInit = !$$.x;\n\t        // update edges\n\t        $$.xMin = config.axis_rotated ? 1 : 0;\n\t        $$.xMax = config.axis_rotated ? $$.height : $$.width;\n\t        $$.yMin = config.axis_rotated ? 0 : $$.height;\n\t        $$.yMax = config.axis_rotated ? $$.width : 1;\n\t        $$.subXMin = $$.xMin;\n\t        $$.subXMax = $$.xMax;\n\t        $$.subYMin = config.axis_rotated ? 0 : $$.height2;\n\t        $$.subYMax = config.axis_rotated ? $$.width2 : 1;\n\t        // update scales\n\t        $$.x = $$.getX($$.xMin, $$.xMax, forInit ? undefined : $$.x.orgDomain(), function () { return $$.xAxis.tickOffset(); });\n\t        $$.y = $$.getY($$.yMin, $$.yMax, forInit ? config.axis_y_default : $$.y.domain());\n\t        $$.y2 = $$.getY($$.yMin, $$.yMax, forInit ? config.axis_y2_default : $$.y2.domain());\n\t        $$.subX = $$.getX($$.xMin, $$.xMax, $$.orgXDomain, function (d) { return d % 1 ? 0 : $$.subXAxis.tickOffset(); });\n\t        $$.subY = $$.getY($$.subYMin, $$.subYMax, forInit ? config.axis_y_default : $$.subY.domain());\n\t        $$.subY2 = $$.getY($$.subYMin, $$.subYMax, forInit ? config.axis_y2_default : $$.subY2.domain());\n\t        // update axes\n\t        $$.xAxisTickFormat = $$.axis.getXAxisTickFormat();\n\t        $$.xAxisTickValues = $$.axis.getXAxisTickValues();\n\t        $$.yAxisTickValues = $$.axis.getYAxisTickValues();\n\t        $$.y2AxisTickValues = $$.axis.getY2AxisTickValues();\n\t\n\t        $$.xAxis = $$.axis.getXAxis($$.x, $$.xOrient, $$.xAxisTickFormat, $$.xAxisTickValues, config.axis_x_tick_outer);\n\t        $$.subXAxis = $$.axis.getXAxis($$.subX, $$.subXOrient, $$.xAxisTickFormat, $$.xAxisTickValues, config.axis_x_tick_outer);\n\t        $$.yAxis = $$.axis.getYAxis($$.y, $$.yOrient, config.axis_y_tick_format, $$.yAxisTickValues, config.axis_y_tick_outer);\n\t        $$.y2Axis = $$.axis.getYAxis($$.y2, $$.y2Orient, config.axis_y2_tick_format, $$.y2AxisTickValues, config.axis_y2_tick_outer);\n\t\n\t        // Set initialized scales to brush and zoom\n\t        if (!forInit) {\n\t            if ($$.brush) { $$.brush.scale($$.subX); }\n\t            if (config.zoom_enabled) { $$.zoom.scale($$.x); }\n\t        }\n\t        // update for arc\n\t        if ($$.updateArc) { $$.updateArc(); }\n\t    };\n\t\n\t    c3_chart_internal_fn.getYDomainMin = function (targets) {\n\t        var $$ = this, config = $$.config,\n\t            ids = $$.mapToIds(targets), ys = $$.getValuesAsIdKeyed(targets),\n\t            j, k, baseId, idsInGroup, id, hasNegativeValue;\n\t        if (config.data_groups.length > 0) {\n\t            hasNegativeValue = $$.hasNegativeValueInTargets(targets);\n\t            for (j = 0; j < config.data_groups.length; j++) {\n\t                // Determine baseId\n\t                idsInGroup = config.data_groups[j].filter(function (id) { return ids.indexOf(id) >= 0; });\n\t                if (idsInGroup.length === 0) { continue; }\n\t                baseId = idsInGroup[0];\n\t                // Consider negative values\n\t                if (hasNegativeValue && ys[baseId]) {\n\t                    ys[baseId].forEach(function (v, i) {\n\t                        ys[baseId][i] = v < 0 ? v : 0;\n\t                    });\n\t                }\n\t                // Compute min\n\t                for (k = 1; k < idsInGroup.length; k++) {\n\t                    id = idsInGroup[k];\n\t                    if (! ys[id]) { continue; }\n\t                    ys[id].forEach(function (v, i) {\n\t                        if ($$.axis.getId(id) === $$.axis.getId(baseId) && ys[baseId] && !(hasNegativeValue && +v > 0)) {\n\t                            ys[baseId][i] += +v;\n\t                        }\n\t                    });\n\t                }\n\t            }\n\t        }\n\t        return $$.d3.min(Object.keys(ys).map(function (key) { return $$.d3.min(ys[key]); }));\n\t    };\n\t    c3_chart_internal_fn.getYDomainMax = function (targets) {\n\t        var $$ = this, config = $$.config,\n\t            ids = $$.mapToIds(targets), ys = $$.getValuesAsIdKeyed(targets),\n\t            j, k, baseId, idsInGroup, id, hasPositiveValue;\n\t        if (config.data_groups.length > 0) {\n\t            hasPositiveValue = $$.hasPositiveValueInTargets(targets);\n\t            for (j = 0; j < config.data_groups.length; j++) {\n\t                // Determine baseId\n\t                idsInGroup = config.data_groups[j].filter(function (id) { return ids.indexOf(id) >= 0; });\n\t                if (idsInGroup.length === 0) { continue; }\n\t                baseId = idsInGroup[0];\n\t                // Consider positive values\n\t                if (hasPositiveValue && ys[baseId]) {\n\t                    ys[baseId].forEach(function (v, i) {\n\t                        ys[baseId][i] = v > 0 ? v : 0;\n\t                    });\n\t                }\n\t                // Compute max\n\t                for (k = 1; k < idsInGroup.length; k++) {\n\t                    id = idsInGroup[k];\n\t                    if (! ys[id]) { continue; }\n\t                    ys[id].forEach(function (v, i) {\n\t                        if ($$.axis.getId(id) === $$.axis.getId(baseId) && ys[baseId] && !(hasPositiveValue && +v < 0)) {\n\t                            ys[baseId][i] += +v;\n\t                        }\n\t                    });\n\t                }\n\t            }\n\t        }\n\t        return $$.d3.max(Object.keys(ys).map(function (key) { return $$.d3.max(ys[key]); }));\n\t    };\n\t    c3_chart_internal_fn.getYDomain = function (targets, axisId, xDomain) {\n\t        var $$ = this, config = $$.config,\n\t            targetsByAxisId = targets.filter(function (t) { return $$.axis.getId(t.id) === axisId; }),\n\t            yTargets = xDomain ? $$.filterByXDomain(targetsByAxisId, xDomain) : targetsByAxisId,\n\t            yMin = axisId === 'y2' ? config.axis_y2_min : config.axis_y_min,\n\t            yMax = axisId === 'y2' ? config.axis_y2_max : config.axis_y_max,\n\t            yDomainMin = $$.getYDomainMin(yTargets),\n\t            yDomainMax = $$.getYDomainMax(yTargets),\n\t            domain, domainLength, padding, padding_top, padding_bottom,\n\t            center = axisId === 'y2' ? config.axis_y2_center : config.axis_y_center,\n\t            yDomainAbs, lengths, diff, ratio, isAllPositive, isAllNegative,\n\t            isZeroBased = ($$.hasType('bar', yTargets) && config.bar_zerobased) || ($$.hasType('area', yTargets) && config.area_zerobased),\n\t            isInverted = axisId === 'y2' ? config.axis_y2_inverted : config.axis_y_inverted,\n\t            showHorizontalDataLabel = $$.hasDataLabel() && config.axis_rotated,\n\t            showVerticalDataLabel = $$.hasDataLabel() && !config.axis_rotated;\n\t\n\t        // MEMO: avoid inverting domain unexpectedly\n\t        yDomainMin = isValue(yMin) ? yMin : isValue(yMax) ? (yDomainMin < yMax ? yDomainMin : yMax - 10) : yDomainMin;\n\t        yDomainMax = isValue(yMax) ? yMax : isValue(yMin) ? (yMin < yDomainMax ? yDomainMax : yMin + 10) : yDomainMax;\n\t\n\t        if (yTargets.length === 0) { // use current domain if target of axisId is none\n\t            return axisId === 'y2' ? $$.y2.domain() : $$.y.domain();\n\t        }\n\t        if (isNaN(yDomainMin)) { // set minimum to zero when not number\n\t            yDomainMin = 0;\n\t        }\n\t        if (isNaN(yDomainMax)) { // set maximum to have same value as yDomainMin\n\t            yDomainMax = yDomainMin;\n\t        }\n\t        if (yDomainMin === yDomainMax) {\n\t            yDomainMin < 0 ? yDomainMax = 0 : yDomainMin = 0;\n\t        }\n\t        isAllPositive = yDomainMin >= 0 && yDomainMax >= 0;\n\t        isAllNegative = yDomainMin <= 0 && yDomainMax <= 0;\n\t\n\t        // Cancel zerobased if axis_*_min / axis_*_max specified\n\t        if ((isValue(yMin) && isAllPositive) || (isValue(yMax) && isAllNegative)) {\n\t            isZeroBased = false;\n\t        }\n\t\n\t        // Bar/Area chart should be 0-based if all positive|negative\n\t        if (isZeroBased) {\n\t            if (isAllPositive) { yDomainMin = 0; }\n\t            if (isAllNegative) { yDomainMax = 0; }\n\t        }\n\t\n\t        domainLength = Math.abs(yDomainMax - yDomainMin);\n\t        padding = padding_top = padding_bottom = domainLength * 0.1;\n\t\n\t        if (typeof center !== 'undefined') {\n\t            yDomainAbs = Math.max(Math.abs(yDomainMin), Math.abs(yDomainMax));\n\t            yDomainMax = center + yDomainAbs;\n\t            yDomainMin = center - yDomainAbs;\n\t        }\n\t        // add padding for data label\n\t        if (showHorizontalDataLabel) {\n\t            lengths = $$.getDataLabelLength(yDomainMin, yDomainMax, 'width');\n\t            diff = diffDomain($$.y.range());\n\t            ratio = [lengths[0] / diff, lengths[1] / diff];\n\t            padding_top += domainLength * (ratio[1] / (1 - ratio[0] - ratio[1]));\n\t            padding_bottom += domainLength * (ratio[0] / (1 - ratio[0] - ratio[1]));\n\t        } else if (showVerticalDataLabel) {\n\t            lengths = $$.getDataLabelLength(yDomainMin, yDomainMax, 'height');\n\t            padding_top += $$.axis.convertPixelsToAxisPadding(lengths[1], domainLength);\n\t            padding_bottom += $$.axis.convertPixelsToAxisPadding(lengths[0], domainLength);\n\t        }\n\t        if (axisId === 'y' && notEmpty(config.axis_y_padding)) {\n\t            padding_top = $$.axis.getPadding(config.axis_y_padding, 'top', padding_top, domainLength);\n\t            padding_bottom = $$.axis.getPadding(config.axis_y_padding, 'bottom', padding_bottom, domainLength);\n\t        }\n\t        if (axisId === 'y2' && notEmpty(config.axis_y2_padding)) {\n\t            padding_top = $$.axis.getPadding(config.axis_y2_padding, 'top', padding_top, domainLength);\n\t            padding_bottom = $$.axis.getPadding(config.axis_y2_padding, 'bottom', padding_bottom, domainLength);\n\t        }\n\t        // Bar/Area chart should be 0-based if all positive|negative\n\t        if (isZeroBased) {\n\t            if (isAllPositive) { padding_bottom = yDomainMin; }\n\t            if (isAllNegative) { padding_top = -yDomainMax; }\n\t        }\n\t        domain = [yDomainMin - padding_bottom, yDomainMax + padding_top];\n\t        return isInverted ? domain.reverse() : domain;\n\t    };\n\t    c3_chart_internal_fn.getXDomainMin = function (targets) {\n\t        var $$ = this, config = $$.config;\n\t        return isDefined(config.axis_x_min) ?\n\t            ($$.isTimeSeries() ? this.parseDate(config.axis_x_min) : config.axis_x_min) :\n\t        $$.d3.min(targets, function (t) { return $$.d3.min(t.values, function (v) { return v.x; }); });\n\t    };\n\t    c3_chart_internal_fn.getXDomainMax = function (targets) {\n\t        var $$ = this, config = $$.config;\n\t        return isDefined(config.axis_x_max) ?\n\t            ($$.isTimeSeries() ? this.parseDate(config.axis_x_max) : config.axis_x_max) :\n\t        $$.d3.max(targets, function (t) { return $$.d3.max(t.values, function (v) { return v.x; }); });\n\t    };\n\t    c3_chart_internal_fn.getXDomainPadding = function (domain) {\n\t        var $$ = this, config = $$.config,\n\t            diff = domain[1] - domain[0],\n\t            maxDataCount, padding, paddingLeft, paddingRight;\n\t        if ($$.isCategorized()) {\n\t            padding = 0;\n\t        } else if ($$.hasType('bar')) {\n\t            maxDataCount = $$.getMaxDataCount();\n\t            padding = maxDataCount > 1 ? (diff / (maxDataCount - 1)) / 2 : 0.5;\n\t        } else {\n\t            padding = diff * 0.01;\n\t        }\n\t        if (typeof config.axis_x_padding === 'object' && notEmpty(config.axis_x_padding)) {\n\t            paddingLeft = isValue(config.axis_x_padding.left) ? config.axis_x_padding.left : padding;\n\t            paddingRight = isValue(config.axis_x_padding.right) ? config.axis_x_padding.right : padding;\n\t        } else if (typeof config.axis_x_padding === 'number') {\n\t            paddingLeft = paddingRight = config.axis_x_padding;\n\t        } else {\n\t            paddingLeft = paddingRight = padding;\n\t        }\n\t        return {left: paddingLeft, right: paddingRight};\n\t    };\n\t    c3_chart_internal_fn.getXDomain = function (targets) {\n\t        var $$ = this,\n\t            xDomain = [$$.getXDomainMin(targets), $$.getXDomainMax(targets)],\n\t            firstX = xDomain[0], lastX = xDomain[1],\n\t            padding = $$.getXDomainPadding(xDomain),\n\t            min = 0, max = 0;\n\t        // show center of x domain if min and max are the same\n\t        if ((firstX - lastX) === 0 && !$$.isCategorized()) {\n\t            if ($$.isTimeSeries()) {\n\t                firstX = new Date(firstX.getTime() * 0.5);\n\t                lastX = new Date(lastX.getTime() * 1.5);\n\t            } else {\n\t                firstX = firstX === 0 ? 1 : (firstX * 0.5);\n\t                lastX = lastX === 0 ? -1 : (lastX * 1.5);\n\t            }\n\t        }\n\t        if (firstX || firstX === 0) {\n\t            min = $$.isTimeSeries() ? new Date(firstX.getTime() - padding.left) : firstX - padding.left;\n\t        }\n\t        if (lastX || lastX === 0) {\n\t            max = $$.isTimeSeries() ? new Date(lastX.getTime() + padding.right) : lastX + padding.right;\n\t        }\n\t        return [min, max];\n\t    };\n\t    c3_chart_internal_fn.updateXDomain = function (targets, withUpdateXDomain, withUpdateOrgXDomain, withTrim, domain) {\n\t        var $$ = this, config = $$.config;\n\t\n\t        if (withUpdateOrgXDomain) {\n\t            $$.x.domain(domain ? domain : $$.d3.extent($$.getXDomain(targets)));\n\t            $$.orgXDomain = $$.x.domain();\n\t            if (config.zoom_enabled) { $$.zoom.scale($$.x).updateScaleExtent(); }\n\t            $$.subX.domain($$.x.domain());\n\t            if ($$.brush) { $$.brush.scale($$.subX); }\n\t        }\n\t        if (withUpdateXDomain) {\n\t            $$.x.domain(domain ? domain : (!$$.brush || $$.brush.empty()) ? $$.orgXDomain : $$.brush.extent());\n\t            if (config.zoom_enabled) { $$.zoom.scale($$.x).updateScaleExtent(); }\n\t        }\n\t\n\t        // Trim domain when too big by zoom mousemove event\n\t        if (withTrim) { $$.x.domain($$.trimXDomain($$.x.orgDomain())); }\n\t\n\t        return $$.x.domain();\n\t    };\n\t    c3_chart_internal_fn.trimXDomain = function (domain) {\n\t        var $$ = this;\n\t        if (domain[0] <= $$.orgXDomain[0]) {\n\t            domain[1] = +domain[1] + ($$.orgXDomain[0] - domain[0]);\n\t            domain[0] = $$.orgXDomain[0];\n\t        }\n\t        if ($$.orgXDomain[1] <= domain[1]) {\n\t            domain[0] = +domain[0] - (domain[1] - $$.orgXDomain[1]);\n\t            domain[1] = $$.orgXDomain[1];\n\t        }\n\t        return domain;\n\t    };\n\t\n\t    c3_chart_internal_fn.isX = function (key) {\n\t        var $$ = this, config = $$.config;\n\t        return (config.data_x && key === config.data_x) || (notEmpty(config.data_xs) && hasValue(config.data_xs, key));\n\t    };\n\t    c3_chart_internal_fn.isNotX = function (key) {\n\t        return !this.isX(key);\n\t    };\n\t    c3_chart_internal_fn.getXKey = function (id) {\n\t        var $$ = this, config = $$.config;\n\t        return config.data_x ? config.data_x : notEmpty(config.data_xs) ? config.data_xs[id] : null;\n\t    };\n\t    c3_chart_internal_fn.getXValuesOfXKey = function (key, targets) {\n\t        var $$ = this,\n\t            xValues, ids = targets && notEmpty(targets) ? $$.mapToIds(targets) : [];\n\t        ids.forEach(function (id) {\n\t            if ($$.getXKey(id) === key) {\n\t                xValues = $$.data.xs[id];\n\t            }\n\t        });\n\t        return xValues;\n\t    };\n\t    c3_chart_internal_fn.getIndexByX = function (x) {\n\t        var $$ = this,\n\t            data = $$.filterByX($$.data.targets, x);\n\t        return data.length ? data[0].index : null;\n\t    };\n\t    c3_chart_internal_fn.getXValue = function (id, i) {\n\t        var $$ = this;\n\t        return id in $$.data.xs && $$.data.xs[id] && isValue($$.data.xs[id][i]) ? $$.data.xs[id][i] : i;\n\t    };\n\t    c3_chart_internal_fn.getOtherTargetXs = function () {\n\t        var $$ = this,\n\t            idsForX = Object.keys($$.data.xs);\n\t        return idsForX.length ? $$.data.xs[idsForX[0]] : null;\n\t    };\n\t    c3_chart_internal_fn.getOtherTargetX = function (index) {\n\t        var xs = this.getOtherTargetXs();\n\t        return xs && index < xs.length ? xs[index] : null;\n\t    };\n\t    c3_chart_internal_fn.addXs = function (xs) {\n\t        var $$ = this;\n\t        Object.keys(xs).forEach(function (id) {\n\t            $$.config.data_xs[id] = xs[id];\n\t        });\n\t    };\n\t    c3_chart_internal_fn.hasMultipleX = function (xs) {\n\t        return this.d3.set(Object.keys(xs).map(function (id) { return xs[id]; })).size() > 1;\n\t    };\n\t    c3_chart_internal_fn.isMultipleX = function () {\n\t        return notEmpty(this.config.data_xs) || !this.config.data_xSort || this.hasType('scatter');\n\t    };\n\t    c3_chart_internal_fn.addName = function (data) {\n\t        var $$ = this, name;\n\t        if (data) {\n\t            name = $$.config.data_names[data.id];\n\t            data.name = name ? name : data.id;\n\t        }\n\t        return data;\n\t    };\n\t    c3_chart_internal_fn.getValueOnIndex = function (values, index) {\n\t        var valueOnIndex = values.filter(function (v) { return v.index === index; });\n\t        return valueOnIndex.length ? valueOnIndex[0] : null;\n\t    };\n\t    c3_chart_internal_fn.updateTargetX = function (targets, x) {\n\t        var $$ = this;\n\t        targets.forEach(function (t) {\n\t            t.values.forEach(function (v, i) {\n\t                v.x = $$.generateTargetX(x[i], t.id, i);\n\t            });\n\t            $$.data.xs[t.id] = x;\n\t        });\n\t    };\n\t    c3_chart_internal_fn.updateTargetXs = function (targets, xs) {\n\t        var $$ = this;\n\t        targets.forEach(function (t) {\n\t            if (xs[t.id]) {\n\t                $$.updateTargetX([t], xs[t.id]);\n\t            }\n\t        });\n\t    };\n\t    c3_chart_internal_fn.generateTargetX = function (rawX, id, index) {\n\t        var $$ = this, x;\n\t        if ($$.isTimeSeries()) {\n\t            x = rawX ? $$.parseDate(rawX) : $$.parseDate($$.getXValue(id, index));\n\t        }\n\t        else if ($$.isCustomX() && !$$.isCategorized()) {\n\t            x = isValue(rawX) ? +rawX : $$.getXValue(id, index);\n\t        }\n\t        else {\n\t            x = index;\n\t        }\n\t        return x;\n\t    };\n\t    c3_chart_internal_fn.cloneTarget = function (target) {\n\t        return {\n\t            id : target.id,\n\t            id_org : target.id_org,\n\t            values : target.values.map(function (d) {\n\t                return {x: d.x, value: d.value, id: d.id};\n\t            })\n\t        };\n\t    };\n\t    c3_chart_internal_fn.updateXs = function () {\n\t        var $$ = this;\n\t        if ($$.data.targets.length) {\n\t            $$.xs = [];\n\t            $$.data.targets[0].values.forEach(function (v) {\n\t                $$.xs[v.index] = v.x;\n\t            });\n\t        }\n\t    };\n\t    c3_chart_internal_fn.getPrevX = function (i) {\n\t        var x = this.xs[i - 1];\n\t        return typeof x !== 'undefined' ? x : null;\n\t    };\n\t    c3_chart_internal_fn.getNextX = function (i) {\n\t        var x = this.xs[i + 1];\n\t        return typeof x !== 'undefined' ? x : null;\n\t    };\n\t    c3_chart_internal_fn.getMaxDataCount = function () {\n\t        var $$ = this;\n\t        return $$.d3.max($$.data.targets, function (t) { return t.values.length; });\n\t    };\n\t    c3_chart_internal_fn.getMaxDataCountTarget = function (targets) {\n\t        var length = targets.length, max = 0, maxTarget;\n\t        if (length > 1) {\n\t            targets.forEach(function (t) {\n\t                if (t.values.length > max) {\n\t                    maxTarget = t;\n\t                    max = t.values.length;\n\t                }\n\t            });\n\t        } else {\n\t            maxTarget = length ? targets[0] : null;\n\t        }\n\t        return maxTarget;\n\t    };\n\t    c3_chart_internal_fn.getEdgeX = function (targets) {\n\t        var $$ = this;\n\t        return !targets.length ? [0, 0] : [\n\t            $$.d3.min(targets, function (t) { return t.values[0].x; }),\n\t            $$.d3.max(targets, function (t) { return t.values[t.values.length - 1].x; })\n\t        ];\n\t    };\n\t    c3_chart_internal_fn.mapToIds = function (targets) {\n\t        return targets.map(function (d) { return d.id; });\n\t    };\n\t    c3_chart_internal_fn.mapToTargetIds = function (ids) {\n\t        var $$ = this;\n\t        return ids ? (isString(ids) ? [ids] : ids) : $$.mapToIds($$.data.targets);\n\t    };\n\t    c3_chart_internal_fn.hasTarget = function (targets, id) {\n\t        var ids = this.mapToIds(targets), i;\n\t        for (i = 0; i < ids.length; i++) {\n\t            if (ids[i] === id) {\n\t                return true;\n\t            }\n\t        }\n\t        return false;\n\t    };\n\t    c3_chart_internal_fn.isTargetToShow = function (targetId) {\n\t        return this.hiddenTargetIds.indexOf(targetId) < 0;\n\t    };\n\t    c3_chart_internal_fn.isLegendToShow = function (targetId) {\n\t        return this.hiddenLegendIds.indexOf(targetId) < 0;\n\t    };\n\t    c3_chart_internal_fn.filterTargetsToShow = function (targets) {\n\t        var $$ = this;\n\t        return targets.filter(function (t) { return $$.isTargetToShow(t.id); });\n\t    };\n\t    c3_chart_internal_fn.mapTargetsToUniqueXs = function (targets) {\n\t        var $$ = this;\n\t        var xs = $$.d3.set($$.d3.merge(targets.map(function (t) { return t.values.map(function (v) { return +v.x; }); }))).values();\n\t        return $$.isTimeSeries() ? xs.map(function (x) { return new Date(+x); }) : xs.map(function (x) { return +x; });\n\t    };\n\t    c3_chart_internal_fn.addHiddenTargetIds = function (targetIds) {\n\t        this.hiddenTargetIds = this.hiddenTargetIds.concat(targetIds);\n\t    };\n\t    c3_chart_internal_fn.removeHiddenTargetIds = function (targetIds) {\n\t        this.hiddenTargetIds = this.hiddenTargetIds.filter(function (id) { return targetIds.indexOf(id) < 0; });\n\t    };\n\t    c3_chart_internal_fn.addHiddenLegendIds = function (targetIds) {\n\t        this.hiddenLegendIds = this.hiddenLegendIds.concat(targetIds);\n\t    };\n\t    c3_chart_internal_fn.removeHiddenLegendIds = function (targetIds) {\n\t        this.hiddenLegendIds = this.hiddenLegendIds.filter(function (id) { return targetIds.indexOf(id) < 0; });\n\t    };\n\t    c3_chart_internal_fn.getValuesAsIdKeyed = function (targets) {\n\t        var ys = {};\n\t        targets.forEach(function (t) {\n\t            ys[t.id] = [];\n\t            t.values.forEach(function (v) {\n\t                ys[t.id].push(v.value);\n\t            });\n\t        });\n\t        return ys;\n\t    };\n\t    c3_chart_internal_fn.checkValueInTargets = function (targets, checker) {\n\t        var ids = Object.keys(targets), i, j, values;\n\t        for (i = 0; i < ids.length; i++) {\n\t            values = targets[ids[i]].values;\n\t            for (j = 0; j < values.length; j++) {\n\t                if (checker(values[j].value)) {\n\t                    return true;\n\t                }\n\t            }\n\t        }\n\t        return false;\n\t    };\n\t    c3_chart_internal_fn.hasNegativeValueInTargets = function (targets) {\n\t        return this.checkValueInTargets(targets, function (v) { return v < 0; });\n\t    };\n\t    c3_chart_internal_fn.hasPositiveValueInTargets = function (targets) {\n\t        return this.checkValueInTargets(targets, function (v) { return v > 0; });\n\t    };\n\t    c3_chart_internal_fn.isOrderDesc = function () {\n\t        var config = this.config;\n\t        return typeof(config.data_order) === 'string' && config.data_order.toLowerCase() === 'desc';\n\t    };\n\t    c3_chart_internal_fn.isOrderAsc = function () {\n\t        var config = this.config;\n\t        return typeof(config.data_order) === 'string' && config.data_order.toLowerCase() === 'asc';\n\t    };\n\t    c3_chart_internal_fn.orderTargets = function (targets) {\n\t        var $$ = this, config = $$.config, orderAsc = $$.isOrderAsc(), orderDesc = $$.isOrderDesc();\n\t        if (orderAsc || orderDesc) {\n\t            targets.sort(function (t1, t2) {\n\t                var reducer = function (p, c) { return p + Math.abs(c.value); };\n\t                var t1Sum = t1.values.reduce(reducer, 0),\n\t                    t2Sum = t2.values.reduce(reducer, 0);\n\t                return orderAsc ? t2Sum - t1Sum : t1Sum - t2Sum;\n\t            });\n\t        } else if (isFunction(config.data_order)) {\n\t            targets.sort(config.data_order);\n\t        } // TODO: accept name array for order\n\t        return targets;\n\t    };\n\t    c3_chart_internal_fn.filterByX = function (targets, x) {\n\t        return this.d3.merge(targets.map(function (t) { return t.values; })).filter(function (v) { return v.x - x === 0; });\n\t    };\n\t    c3_chart_internal_fn.filterRemoveNull = function (data) {\n\t        return data.filter(function (d) { return isValue(d.value); });\n\t    };\n\t    c3_chart_internal_fn.filterByXDomain = function (targets, xDomain) {\n\t        return targets.map(function (t) {\n\t            return {\n\t                id: t.id,\n\t                id_org: t.id_org,\n\t                values: t.values.filter(function (v) {\n\t                    return xDomain[0] <= v.x && v.x <= xDomain[1];\n\t                })\n\t            };\n\t        });\n\t    };\n\t    c3_chart_internal_fn.hasDataLabel = function () {\n\t        var config = this.config;\n\t        if (typeof config.data_labels === 'boolean' && config.data_labels) {\n\t            return true;\n\t        } else if (typeof config.data_labels === 'object' && notEmpty(config.data_labels)) {\n\t            return true;\n\t        }\n\t        return false;\n\t    };\n\t    c3_chart_internal_fn.getDataLabelLength = function (min, max, key) {\n\t        var $$ = this,\n\t            lengths = [0, 0], paddingCoef = 1.3;\n\t        $$.selectChart.select('svg').selectAll('.dummy')\n\t            .data([min, max])\n\t            .enter().append('text')\n\t            .text(function (d) { return $$.dataLabelFormat(d.id)(d); })\n\t            .each(function (d, i) {\n\t                lengths[i] = this.getBoundingClientRect()[key] * paddingCoef;\n\t            })\n\t            .remove();\n\t        return lengths;\n\t    };\n\t    c3_chart_internal_fn.isNoneArc = function (d) {\n\t        return this.hasTarget(this.data.targets, d.id);\n\t    },\n\t    c3_chart_internal_fn.isArc = function (d) {\n\t        return 'data' in d && this.hasTarget(this.data.targets, d.data.id);\n\t    };\n\t    c3_chart_internal_fn.findSameXOfValues = function (values, index) {\n\t        var i, targetX = values[index].x, sames = [];\n\t        for (i = index - 1; i >= 0; i--) {\n\t            if (targetX !== values[i].x) { break; }\n\t            sames.push(values[i]);\n\t        }\n\t        for (i = index; i < values.length; i++) {\n\t            if (targetX !== values[i].x) { break; }\n\t            sames.push(values[i]);\n\t        }\n\t        return sames;\n\t    };\n\t\n\t    c3_chart_internal_fn.findClosestFromTargets = function (targets, pos) {\n\t        var $$ = this, candidates;\n\t\n\t        // map to array of closest points of each target\n\t        candidates = targets.map(function (target) {\n\t            return $$.findClosest(target.values, pos);\n\t        });\n\t\n\t        // decide closest point and return\n\t        return $$.findClosest(candidates, pos);\n\t    };\n\t    c3_chart_internal_fn.findClosest = function (values, pos) {\n\t        var $$ = this, minDist = 100, closest;\n\t\n\t        // find mouseovering bar\n\t        values.filter(function (v) { return v && $$.isBarType(v.id); }).forEach(function (v) {\n\t            var shape = $$.main.select('.' + CLASS.bars + $$.getTargetSelectorSuffix(v.id) + ' .' + CLASS.bar + '-' + v.index).node();\n\t            if (!closest && $$.isWithinBar(shape)) {\n\t                closest = v;\n\t            }\n\t        });\n\t\n\t        // find closest point from non-bar\n\t        values.filter(function (v) { return v && !$$.isBarType(v.id); }).forEach(function (v) {\n\t            var d = $$.dist(v, pos);\n\t            if (d < minDist) {\n\t                minDist = d;\n\t                closest = v;\n\t            }\n\t        });\n\t\n\t        return closest;\n\t    };\n\t    c3_chart_internal_fn.dist = function (data, pos) {\n\t        var $$ = this, config = $$.config,\n\t            xIndex = config.axis_rotated ? 1 : 0,\n\t            yIndex = config.axis_rotated ? 0 : 1,\n\t            y = $$.circleY(data, data.index),\n\t            x = $$.x(data.x);\n\t        return Math.pow(x - pos[xIndex], 2) + Math.pow(y - pos[yIndex], 2);\n\t    };\n\t    c3_chart_internal_fn.convertValuesToStep = function (values) {\n\t        var converted = [].concat(values), i;\n\t\n\t        if (!this.isCategorized()) {\n\t            return values;\n\t        }\n\t\n\t        for (i = values.length + 1; 0 < i; i--) {\n\t            converted[i] = converted[i - 1];\n\t        }\n\t\n\t        converted[0] = {\n\t            x: converted[0].x - 1,\n\t            value: converted[0].value,\n\t            id: converted[0].id\n\t        };\n\t        converted[values.length + 1] = {\n\t            x: converted[values.length].x + 1,\n\t            value: converted[values.length].value,\n\t            id: converted[values.length].id\n\t        };\n\t\n\t        return converted;\n\t    };\n\t    c3_chart_internal_fn.updateDataAttributes = function (name, attrs) {\n\t        var $$ = this, config = $$.config, current = config['data_' + name];\n\t        if (typeof attrs === 'undefined') { return current; }\n\t        Object.keys(attrs).forEach(function (id) {\n\t            current[id] = attrs[id];\n\t        });\n\t        $$.redraw({withLegend: true});\n\t        return current;\n\t    };\n\t\n\t    c3_chart_internal_fn.convertUrlToData = function (url, mimeType, keys, done) {\n\t        var $$ = this, type = mimeType ? mimeType : 'csv';\n\t        $$.d3.xhr(url, function (error, data) {\n\t            var d;\n\t            if (!data) {\n\t                throw new Error(error.responseURL + ' ' + error.status + ' (' + error.statusText + ')');\n\t            }\n\t            if (type === 'json') {\n\t                d = $$.convertJsonToData(JSON.parse(data.response), keys);\n\t            } else if (type === 'tsv') {\n\t                d = $$.convertTsvToData(data.response);\n\t            } else {\n\t                d = $$.convertCsvToData(data.response);\n\t            }\n\t            done.call($$, d);\n\t        });\n\t    };\n\t    c3_chart_internal_fn.convertXsvToData = function (xsv, parser) {\n\t        var rows = parser.parseRows(xsv), d;\n\t        if (rows.length === 1) {\n\t            d = [{}];\n\t            rows[0].forEach(function (id) {\n\t                d[0][id] = null;\n\t            });\n\t        } else {\n\t            d = parser.parse(xsv);\n\t        }\n\t        return d;\n\t    };\n\t    c3_chart_internal_fn.convertCsvToData = function (csv) {\n\t        return this.convertXsvToData(csv, this.d3.csv);\n\t    };\n\t    c3_chart_internal_fn.convertTsvToData = function (tsv) {\n\t        return this.convertXsvToData(tsv, this.d3.tsv);\n\t    };\n\t    c3_chart_internal_fn.convertJsonToData = function (json, keys) {\n\t        var $$ = this,\n\t            new_rows = [], targetKeys, data;\n\t        if (keys) { // when keys specified, json would be an array that includes objects\n\t            if (keys.x) {\n\t                targetKeys = keys.value.concat(keys.x);\n\t                $$.config.data_x = keys.x;\n\t            } else {\n\t                targetKeys = keys.value;\n\t            }\n\t            new_rows.push(targetKeys);\n\t            json.forEach(function (o) {\n\t                var new_row = [];\n\t                targetKeys.forEach(function (key) {\n\t                    // convert undefined to null because undefined data will be removed in convertDataToTargets()\n\t                    var v = isUndefined(o[key]) ? null : o[key];\n\t                    new_row.push(v);\n\t                });\n\t                new_rows.push(new_row);\n\t            });\n\t            data = $$.convertRowsToData(new_rows);\n\t        } else {\n\t            Object.keys(json).forEach(function (key) {\n\t                new_rows.push([key].concat(json[key]));\n\t            });\n\t            data = $$.convertColumnsToData(new_rows);\n\t        }\n\t        return data;\n\t    };\n\t    c3_chart_internal_fn.convertRowsToData = function (rows) {\n\t        var keys = rows[0], new_row = {}, new_rows = [], i, j;\n\t        for (i = 1; i < rows.length; i++) {\n\t            new_row = {};\n\t            for (j = 0; j < rows[i].length; j++) {\n\t                if (isUndefined(rows[i][j])) {\n\t                    throw new Error(\"Source data is missing a component at (\" + i + \",\" + j + \")!\");\n\t                }\n\t                new_row[keys[j]] = rows[i][j];\n\t            }\n\t            new_rows.push(new_row);\n\t        }\n\t        return new_rows;\n\t    };\n\t    c3_chart_internal_fn.convertColumnsToData = function (columns) {\n\t        var new_rows = [], i, j, key;\n\t        for (i = 0; i < columns.length; i++) {\n\t            key = columns[i][0];\n\t            for (j = 1; j < columns[i].length; j++) {\n\t                if (isUndefined(new_rows[j - 1])) {\n\t                    new_rows[j - 1] = {};\n\t                }\n\t                if (isUndefined(columns[i][j])) {\n\t                    throw new Error(\"Source data is missing a component at (\" + i + \",\" + j + \")!\");\n\t                }\n\t                new_rows[j - 1][key] = columns[i][j];\n\t            }\n\t        }\n\t        return new_rows;\n\t    };\n\t    c3_chart_internal_fn.convertDataToTargets = function (data, appendXs) {\n\t        var $$ = this, config = $$.config,\n\t            ids = $$.d3.keys(data[0]).filter($$.isNotX, $$),\n\t            xs = $$.d3.keys(data[0]).filter($$.isX, $$),\n\t            targets;\n\t\n\t        // save x for update data by load when custom x and c3.x API\n\t        ids.forEach(function (id) {\n\t            var xKey = $$.getXKey(id);\n\t\n\t            if ($$.isCustomX() || $$.isTimeSeries()) {\n\t                // if included in input data\n\t                if (xs.indexOf(xKey) >= 0) {\n\t                    $$.data.xs[id] = (appendXs && $$.data.xs[id] ? $$.data.xs[id] : []).concat(\n\t                        data.map(function (d) { return d[xKey]; })\n\t                            .filter(isValue)\n\t                            .map(function (rawX, i) { return $$.generateTargetX(rawX, id, i); })\n\t                    );\n\t                }\n\t                // if not included in input data, find from preloaded data of other id's x\n\t                else if (config.data_x) {\n\t                    $$.data.xs[id] = $$.getOtherTargetXs();\n\t                }\n\t                // if not included in input data, find from preloaded data\n\t                else if (notEmpty(config.data_xs)) {\n\t                    $$.data.xs[id] = $$.getXValuesOfXKey(xKey, $$.data.targets);\n\t                }\n\t                // MEMO: if no x included, use same x of current will be used\n\t            } else {\n\t                $$.data.xs[id] = data.map(function (d, i) { return i; });\n\t            }\n\t        });\n\t\n\t\n\t        // check x is defined\n\t        ids.forEach(function (id) {\n\t            if (!$$.data.xs[id]) {\n\t                throw new Error('x is not defined for id = \"' + id + '\".');\n\t            }\n\t        });\n\t\n\t        // convert to target\n\t        targets = ids.map(function (id, index) {\n\t            var convertedId = config.data_idConverter(id);\n\t            return {\n\t                id: convertedId,\n\t                id_org: id,\n\t                values: data.map(function (d, i) {\n\t                    var xKey = $$.getXKey(id), rawX = d[xKey], x = $$.generateTargetX(rawX, id, i);\n\t                    // use x as categories if custom x and categorized\n\t                    if ($$.isCustomX() && $$.isCategorized() && index === 0 && rawX) {\n\t                        if (i === 0) { config.axis_x_categories = []; }\n\t                        config.axis_x_categories.push(rawX);\n\t                    }\n\t                    // mark as x = undefined if value is undefined and filter to remove after mapped\n\t                    if (isUndefined(d[id]) || $$.data.xs[id].length <= i) {\n\t                        x = undefined;\n\t                    }\n\t                    return {x: x, value: d[id] !== null && !isNaN(d[id]) ? +d[id] : null, id: convertedId};\n\t                }).filter(function (v) { return isDefined(v.x); })\n\t            };\n\t        });\n\t\n\t        // finish targets\n\t        targets.forEach(function (t) {\n\t            var i;\n\t            // sort values by its x\n\t            if (config.data_xSort) {\n\t                t.values = t.values.sort(function (v1, v2) {\n\t                    var x1 = v1.x || v1.x === 0 ? v1.x : Infinity,\n\t                        x2 = v2.x || v2.x === 0 ? v2.x : Infinity;\n\t                    return x1 - x2;\n\t                });\n\t            }\n\t            // indexing each value\n\t            i = 0;\n\t            t.values.forEach(function (v) {\n\t                v.index = i++;\n\t            });\n\t            // this needs to be sorted because its index and value.index is identical\n\t            $$.data.xs[t.id].sort(function (v1, v2) {\n\t                return v1 - v2;\n\t            });\n\t        });\n\t\n\t        // set target types\n\t        if (config.data_type) {\n\t            $$.setTargetType($$.mapToIds(targets).filter(function (id) { return ! (id in config.data_types); }), config.data_type);\n\t        }\n\t\n\t        // cache as original id keyed\n\t        targets.forEach(function (d) {\n\t            $$.addCache(d.id_org, d);\n\t        });\n\t\n\t        return targets;\n\t    };\n\t\n\t    c3_chart_internal_fn.load = function (targets, args) {\n\t        var $$ = this;\n\t        if (targets) {\n\t            // filter loading targets if needed\n\t            if (args.filter) {\n\t                targets = targets.filter(args.filter);\n\t            }\n\t            // set type if args.types || args.type specified\n\t            if (args.type || args.types) {\n\t                targets.forEach(function (t) {\n\t                    var type = args.types && args.types[t.id] ? args.types[t.id] : args.type;\n\t                    $$.setTargetType(t.id, type);\n\t                });\n\t            }\n\t            // Update/Add data\n\t            $$.data.targets.forEach(function (d) {\n\t                for (var i = 0; i < targets.length; i++) {\n\t                    if (d.id === targets[i].id) {\n\t                        d.values = targets[i].values;\n\t                        targets.splice(i, 1);\n\t                        break;\n\t                    }\n\t                }\n\t            });\n\t            $$.data.targets = $$.data.targets.concat(targets); // add remained\n\t        }\n\t\n\t        // Set targets\n\t        $$.updateTargets($$.data.targets);\n\t\n\t        // Redraw with new targets\n\t        $$.redraw({withUpdateOrgXDomain: true, withUpdateXDomain: true, withLegend: true});\n\t\n\t        if (args.done) { args.done(); }\n\t    };\n\t    c3_chart_internal_fn.loadFromArgs = function (args) {\n\t        var $$ = this;\n\t        if (args.data) {\n\t            $$.load($$.convertDataToTargets(args.data), args);\n\t        }\n\t        else if (args.url) {\n\t            $$.convertUrlToData(args.url, args.mimeType, args.keys, function (data) {\n\t                $$.load($$.convertDataToTargets(data), args);\n\t            });\n\t        }\n\t        else if (args.json) {\n\t            $$.load($$.convertDataToTargets($$.convertJsonToData(args.json, args.keys)), args);\n\t        }\n\t        else if (args.rows) {\n\t            $$.load($$.convertDataToTargets($$.convertRowsToData(args.rows)), args);\n\t        }\n\t        else if (args.columns) {\n\t            $$.load($$.convertDataToTargets($$.convertColumnsToData(args.columns)), args);\n\t        }\n\t        else {\n\t            $$.load(null, args);\n\t        }\n\t    };\n\t    c3_chart_internal_fn.unload = function (targetIds, done) {\n\t        var $$ = this;\n\t        if (!done) {\n\t            done = function () {};\n\t        }\n\t        // filter existing target\n\t        targetIds = targetIds.filter(function (id) { return $$.hasTarget($$.data.targets, id); });\n\t        // If no target, call done and return\n\t        if (!targetIds || targetIds.length === 0) {\n\t            done();\n\t            return;\n\t        }\n\t        $$.svg.selectAll(targetIds.map(function (id) { return $$.selectorTarget(id); }))\n\t            .transition()\n\t            .style('opacity', 0)\n\t            .remove()\n\t            .call($$.endall, done);\n\t        targetIds.forEach(function (id) {\n\t            // Reset fadein for future load\n\t            $$.withoutFadeIn[id] = false;\n\t            // Remove target's elements\n\t            if ($$.legend) {\n\t                $$.legend.selectAll('.' + CLASS.legendItem + $$.getTargetSelectorSuffix(id)).remove();\n\t            }\n\t            // Remove target\n\t            $$.data.targets = $$.data.targets.filter(function (t) {\n\t                return t.id !== id;\n\t            });\n\t        });\n\t    };\n\t\n\t    c3_chart_internal_fn.categoryName = function (i) {\n\t        var config = this.config;\n\t        return i < config.axis_x_categories.length ? config.axis_x_categories[i] : i;\n\t    };\n\t\n\t    c3_chart_internal_fn.initEventRect = function () {\n\t        var $$ = this;\n\t        $$.main.select('.' + CLASS.chart).append(\"g\")\n\t            .attr(\"class\", CLASS.eventRects)\n\t            .style('fill-opacity', 0);\n\t    };\n\t    c3_chart_internal_fn.redrawEventRect = function () {\n\t        var $$ = this, config = $$.config,\n\t            eventRectUpdate, maxDataCountTarget,\n\t            isMultipleX = $$.isMultipleX();\n\t\n\t        // rects for mouseover\n\t        var eventRects = $$.main.select('.' + CLASS.eventRects)\n\t                .style('cursor', config.zoom_enabled ? config.axis_rotated ? 'ns-resize' : 'ew-resize' : null)\n\t                .classed(CLASS.eventRectsMultiple, isMultipleX)\n\t                .classed(CLASS.eventRectsSingle, !isMultipleX);\n\t\n\t        // clear old rects\n\t        eventRects.selectAll('.' + CLASS.eventRect).remove();\n\t\n\t        // open as public variable\n\t        $$.eventRect = eventRects.selectAll('.' + CLASS.eventRect);\n\t\n\t        if (isMultipleX) {\n\t            eventRectUpdate = $$.eventRect.data([0]);\n\t            // enter : only one rect will be added\n\t            $$.generateEventRectsForMultipleXs(eventRectUpdate.enter());\n\t            // update\n\t            $$.updateEventRect(eventRectUpdate);\n\t            // exit : not needed because always only one rect exists\n\t        }\n\t        else {\n\t            // Set data and update $$.eventRect\n\t            maxDataCountTarget = $$.getMaxDataCountTarget($$.data.targets);\n\t            eventRects.datum(maxDataCountTarget ? maxDataCountTarget.values : []);\n\t            $$.eventRect = eventRects.selectAll('.' + CLASS.eventRect);\n\t            eventRectUpdate = $$.eventRect.data(function (d) { return d; });\n\t            // enter\n\t            $$.generateEventRectsForSingleX(eventRectUpdate.enter());\n\t            // update\n\t            $$.updateEventRect(eventRectUpdate);\n\t            // exit\n\t            eventRectUpdate.exit().remove();\n\t        }\n\t    };\n\t    c3_chart_internal_fn.updateEventRect = function (eventRectUpdate) {\n\t        var $$ = this, config = $$.config,\n\t            x, y, w, h, rectW, rectX;\n\t\n\t        // set update selection if null\n\t        eventRectUpdate = eventRectUpdate || $$.eventRect.data(function (d) { return d; });\n\t\n\t        if ($$.isMultipleX()) {\n\t            // TODO: rotated not supported yet\n\t            x = 0;\n\t            y = 0;\n\t            w = $$.width;\n\t            h = $$.height;\n\t        }\n\t        else {\n\t            if (($$.isCustomX() || $$.isTimeSeries()) && !$$.isCategorized()) {\n\t\n\t                // update index for x that is used by prevX and nextX\n\t                $$.updateXs();\n\t\n\t                rectW = function (d) {\n\t                    var prevX = $$.getPrevX(d.index), nextX = $$.getNextX(d.index);\n\t\n\t                    // if there this is a single data point make the eventRect full width (or height)\n\t                    if (prevX === null && nextX === null) {\n\t                        return config.axis_rotated ? $$.height : $$.width;\n\t                    }\n\t\n\t                    if (prevX === null) { prevX = $$.x.domain()[0]; }\n\t                    if (nextX === null) { nextX = $$.x.domain()[1]; }\n\t\n\t                    return Math.max(0, ($$.x(nextX) - $$.x(prevX)) / 2);\n\t                };\n\t                rectX = function (d) {\n\t                    var prevX = $$.getPrevX(d.index), nextX = $$.getNextX(d.index),\n\t                        thisX = $$.data.xs[d.id][d.index];\n\t\n\t                    // if there this is a single data point position the eventRect at 0\n\t                    if (prevX === null && nextX === null) {\n\t                        return 0;\n\t                    }\n\t\n\t                    if (prevX === null) { prevX = $$.x.domain()[0]; }\n\t\n\t                    return ($$.x(thisX) + $$.x(prevX)) / 2;\n\t                };\n\t            } else {\n\t                rectW = $$.getEventRectWidth();\n\t                rectX = function (d) {\n\t                    return $$.x(d.x) - (rectW / 2);\n\t                };\n\t            }\n\t            x = config.axis_rotated ? 0 : rectX;\n\t            y = config.axis_rotated ? rectX : 0;\n\t            w = config.axis_rotated ? $$.width : rectW;\n\t            h = config.axis_rotated ? rectW : $$.height;\n\t        }\n\t\n\t        eventRectUpdate\n\t            .attr('class', $$.classEvent.bind($$))\n\t            .attr(\"x\", x)\n\t            .attr(\"y\", y)\n\t            .attr(\"width\", w)\n\t            .attr(\"height\", h);\n\t    };\n\t    c3_chart_internal_fn.generateEventRectsForSingleX = function (eventRectEnter) {\n\t        var $$ = this, d3 = $$.d3, config = $$.config;\n\t        eventRectEnter.append(\"rect\")\n\t            .attr(\"class\", $$.classEvent.bind($$))\n\t            .style(\"cursor\", config.data_selection_enabled && config.data_selection_grouped ? \"pointer\" : null)\n\t            .on('mouseover', function (d) {\n\t                var index = d.index;\n\t\n\t                if ($$.dragging || $$.flowing) { return; } // do nothing while dragging/flowing\n\t                if ($$.hasArcType()) { return; }\n\t\n\t                // Expand shapes for selection\n\t                if (config.point_focus_expand_enabled) { $$.expandCircles(index, null, true); }\n\t                $$.expandBars(index, null, true);\n\t\n\t                // Call event handler\n\t                $$.main.selectAll('.' + CLASS.shape + '-' + index).each(function (d) {\n\t                    config.data_onmouseover.call($$.api, d);\n\t                });\n\t            })\n\t            .on('mouseout', function (d) {\n\t                var index = d.index;\n\t                if (!$$.config) { return; } // chart is destroyed\n\t                if ($$.hasArcType()) { return; }\n\t                $$.hideXGridFocus();\n\t                $$.hideTooltip();\n\t                // Undo expanded shapes\n\t                $$.unexpandCircles();\n\t                $$.unexpandBars();\n\t                // Call event handler\n\t                $$.main.selectAll('.' + CLASS.shape + '-' + index).each(function (d) {\n\t                    config.data_onmouseout.call($$.api, d);\n\t                });\n\t            })\n\t            .on('mousemove', function (d) {\n\t                var selectedData, index = d.index,\n\t                    eventRect = $$.svg.select('.' + CLASS.eventRect + '-' + index);\n\t\n\t                if ($$.dragging || $$.flowing) { return; } // do nothing while dragging/flowing\n\t                if ($$.hasArcType()) { return; }\n\t\n\t                if ($$.isStepType(d) && $$.config.line_step_type === 'step-after' && d3.mouse(this)[0] < $$.x($$.getXValue(d.id, index))) {\n\t                    index -= 1;\n\t                }\n\t\n\t                // Show tooltip\n\t                selectedData = $$.filterTargetsToShow($$.data.targets).map(function (t) {\n\t                    return $$.addName($$.getValueOnIndex(t.values, index));\n\t                });\n\t\n\t                if (config.tooltip_grouped) {\n\t                    $$.showTooltip(selectedData, this);\n\t                    $$.showXGridFocus(selectedData);\n\t                }\n\t\n\t                if (config.tooltip_grouped && (!config.data_selection_enabled || config.data_selection_grouped)) {\n\t                    return;\n\t                }\n\t\n\t                $$.main.selectAll('.' + CLASS.shape + '-' + index)\n\t                    .each(function () {\n\t                        d3.select(this).classed(CLASS.EXPANDED, true);\n\t                        if (config.data_selection_enabled) {\n\t                            eventRect.style('cursor', config.data_selection_grouped ? 'pointer' : null);\n\t                        }\n\t                        if (!config.tooltip_grouped) {\n\t                            $$.hideXGridFocus();\n\t                            $$.hideTooltip();\n\t                            if (!config.data_selection_grouped) {\n\t                                $$.unexpandCircles(index);\n\t                                $$.unexpandBars(index);\n\t                            }\n\t                        }\n\t                    })\n\t                    .filter(function (d) {\n\t                        return $$.isWithinShape(this, d);\n\t                    })\n\t                    .each(function (d) {\n\t                        if (config.data_selection_enabled && (config.data_selection_grouped || config.data_selection_isselectable(d))) {\n\t                            eventRect.style('cursor', 'pointer');\n\t                        }\n\t                        if (!config.tooltip_grouped) {\n\t                            $$.showTooltip([d], this);\n\t                            $$.showXGridFocus([d]);\n\t                            if (config.point_focus_expand_enabled) { $$.expandCircles(index, d.id, true); }\n\t                            $$.expandBars(index, d.id, true);\n\t                        }\n\t                    });\n\t            })\n\t            .on('click', function (d) {\n\t                var index = d.index;\n\t                if ($$.hasArcType() || !$$.toggleShape) { return; }\n\t                if ($$.cancelClick) {\n\t                    $$.cancelClick = false;\n\t                    return;\n\t                }\n\t                if ($$.isStepType(d) && config.line_step_type === 'step-after' && d3.mouse(this)[0] < $$.x($$.getXValue(d.id, index))) {\n\t                    index -= 1;\n\t                }\n\t                $$.main.selectAll('.' + CLASS.shape + '-' + index).each(function (d) {\n\t                    if (config.data_selection_grouped || $$.isWithinShape(this, d)) {\n\t                        $$.toggleShape(this, d, index);\n\t                        $$.config.data_onclick.call($$.api, d, this);\n\t                    }\n\t                });\n\t            })\n\t            .call(\n\t                config.data_selection_draggable && $$.drag ? (\n\t                    d3.behavior.drag().origin(Object)\n\t                        .on('drag', function () { $$.drag(d3.mouse(this)); })\n\t                        .on('dragstart', function () { $$.dragstart(d3.mouse(this)); })\n\t                        .on('dragend', function () { $$.dragend(); })\n\t                ) : function () {}\n\t            );\n\t    };\n\t\n\t    c3_chart_internal_fn.generateEventRectsForMultipleXs = function (eventRectEnter) {\n\t        var $$ = this, d3 = $$.d3, config = $$.config;\n\t\n\t        function mouseout() {\n\t            $$.svg.select('.' + CLASS.eventRect).style('cursor', null);\n\t            $$.hideXGridFocus();\n\t            $$.hideTooltip();\n\t            $$.unexpandCircles();\n\t            $$.unexpandBars();\n\t        }\n\t\n\t        eventRectEnter.append('rect')\n\t            .attr('x', 0)\n\t            .attr('y', 0)\n\t            .attr('width', $$.width)\n\t            .attr('height', $$.height)\n\t            .attr('class', CLASS.eventRect)\n\t            .on('mouseout', function () {\n\t                if (!$$.config) { return; } // chart is destroyed\n\t                if ($$.hasArcType()) { return; }\n\t                mouseout();\n\t            })\n\t            .on('mousemove', function () {\n\t                var targetsToShow = $$.filterTargetsToShow($$.data.targets);\n\t                var mouse, closest, sameXData, selectedData;\n\t\n\t                if ($$.dragging) { return; } // do nothing when dragging\n\t                if ($$.hasArcType(targetsToShow)) { return; }\n\t\n\t                mouse = d3.mouse(this);\n\t                closest = $$.findClosestFromTargets(targetsToShow, mouse);\n\t\n\t                if ($$.mouseover && (!closest || closest.id !== $$.mouseover.id)) {\n\t                    config.data_onmouseout.call($$.api, $$.mouseover);\n\t                    $$.mouseover = undefined;\n\t                }\n\t\n\t                if (! closest) {\n\t                    mouseout();\n\t                    return;\n\t                }\n\t\n\t                if ($$.isScatterType(closest) || !config.tooltip_grouped) {\n\t                    sameXData = [closest];\n\t                } else {\n\t                    sameXData = $$.filterByX(targetsToShow, closest.x);\n\t                }\n\t\n\t                // show tooltip when cursor is close to some point\n\t                selectedData = sameXData.map(function (d) {\n\t                    return $$.addName(d);\n\t                });\n\t                $$.showTooltip(selectedData, this);\n\t\n\t                // expand points\n\t                if (config.point_focus_expand_enabled) {\n\t                    $$.expandCircles(closest.index, closest.id, true);\n\t                }\n\t                $$.expandBars(closest.index, closest.id, true);\n\t\n\t                // Show xgrid focus line\n\t                $$.showXGridFocus(selectedData);\n\t\n\t                // Show cursor as pointer if point is close to mouse position\n\t                if ($$.isBarType(closest.id) || $$.dist(closest, mouse) < 100) {\n\t                    $$.svg.select('.' + CLASS.eventRect).style('cursor', 'pointer');\n\t                    if (!$$.mouseover) {\n\t                        config.data_onmouseover.call($$.api, closest);\n\t                        $$.mouseover = closest;\n\t                    }\n\t                }\n\t            })\n\t            .on('click', function () {\n\t                var targetsToShow = $$.filterTargetsToShow($$.data.targets);\n\t                var mouse, closest;\n\t\n\t                if ($$.hasArcType(targetsToShow)) { return; }\n\t\n\t                mouse = d3.mouse(this);\n\t                closest = $$.findClosestFromTargets(targetsToShow, mouse);\n\t\n\t                if (! closest) { return; }\n\t\n\t                // select if selection enabled\n\t                if ($$.isBarType(closest.id) || $$.dist(closest, mouse) < 100) {\n\t                    $$.main.selectAll('.' + CLASS.shapes + $$.getTargetSelectorSuffix(closest.id)).selectAll('.' + CLASS.shape + '-' + closest.index).each(function () {\n\t                        if (config.data_selection_grouped || $$.isWithinShape(this, closest)) {\n\t                            $$.toggleShape(this, closest, closest.index);\n\t                            $$.config.data_onclick.call($$.api, closest, this);\n\t                        }\n\t                    });\n\t                }\n\t            })\n\t            .call(\n\t                config.data_selection_draggable && $$.drag ? (\n\t                    d3.behavior.drag().origin(Object)\n\t                        .on('drag', function () { $$.drag(d3.mouse(this)); })\n\t                        .on('dragstart', function () { $$.dragstart(d3.mouse(this)); })\n\t                        .on('dragend', function () { $$.dragend(); })\n\t                ) : function () {}\n\t            );\n\t    };\n\t    c3_chart_internal_fn.dispatchEvent = function (type, index, mouse) {\n\t        var $$ = this,\n\t            selector = '.' + CLASS.eventRect + (!$$.isMultipleX() ? '-' + index : ''),\n\t            eventRect = $$.main.select(selector).node(),\n\t            box = eventRect.getBoundingClientRect(),\n\t            x = box.left + (mouse ? mouse[0] : 0),\n\t            y = box.top + (mouse ? mouse[1] : 0),\n\t            event = document.createEvent(\"MouseEvents\");\n\t\n\t        event.initMouseEvent(type, true, true, window, 0, x, y, x, y,\n\t                             false, false, false, false, 0, null);\n\t        eventRect.dispatchEvent(event);\n\t    };\n\t\n\t    c3_chart_internal_fn.getCurrentWidth = function () {\n\t        var $$ = this, config = $$.config;\n\t        return config.size_width ? config.size_width : $$.getParentWidth();\n\t    };\n\t    c3_chart_internal_fn.getCurrentHeight = function () {\n\t        var $$ = this, config = $$.config,\n\t            h = config.size_height ? config.size_height : $$.getParentHeight();\n\t        return h > 0 ? h : 320 / ($$.hasType('gauge') ? 2 : 1);\n\t    };\n\t    c3_chart_internal_fn.getCurrentPaddingTop = function () {\n\t        var config = this.config;\n\t        return isValue(config.padding_top) ? config.padding_top : 0;\n\t    };\n\t    c3_chart_internal_fn.getCurrentPaddingBottom = function () {\n\t        var config = this.config;\n\t        return isValue(config.padding_bottom) ? config.padding_bottom : 0;\n\t    };\n\t    c3_chart_internal_fn.getCurrentPaddingLeft = function (withoutRecompute) {\n\t        var $$ = this, config = $$.config;\n\t        if (isValue(config.padding_left)) {\n\t            return config.padding_left;\n\t        } else if (config.axis_rotated) {\n\t            return !config.axis_x_show ? 1 : Math.max(ceil10($$.getAxisWidthByAxisId('x', withoutRecompute)), 40);\n\t        } else if (!config.axis_y_show || config.axis_y_inner) { // && !config.axis_rotated\n\t            return $$.axis.getYAxisLabelPosition().isOuter ? 30 : 1;\n\t        } else {\n\t            return ceil10($$.getAxisWidthByAxisId('y', withoutRecompute));\n\t        }\n\t    };\n\t    c3_chart_internal_fn.getCurrentPaddingRight = function () {\n\t        var $$ = this, config = $$.config,\n\t            defaultPadding = 10, legendWidthOnRight = $$.isLegendRight ? $$.getLegendWidth() + 20 : 0;\n\t        if (isValue(config.padding_right)) {\n\t            return config.padding_right + 1; // 1 is needed not to hide tick line\n\t        } else if (config.axis_rotated) {\n\t            return defaultPadding + legendWidthOnRight;\n\t        } else if (!config.axis_y2_show || config.axis_y2_inner) { // && !config.axis_rotated\n\t            return 2 + legendWidthOnRight + ($$.axis.getY2AxisLabelPosition().isOuter ? 20 : 0);\n\t        } else {\n\t            return ceil10($$.getAxisWidthByAxisId('y2')) + legendWidthOnRight;\n\t        }\n\t    };\n\t\n\t    c3_chart_internal_fn.getParentRectValue = function (key) {\n\t        var parent = this.selectChart.node(), v;\n\t        while (parent && parent.tagName !== 'BODY') {\n\t            try {\n\t                v = parent.getBoundingClientRect()[key];\n\t            } catch(e) {\n\t                if (key === 'width') {\n\t                    // In IE in certain cases getBoundingClientRect\n\t                    // will cause an \"unspecified error\"\n\t                    v = parent.offsetWidth;\n\t                }\n\t            }\n\t            if (v) {\n\t                break;\n\t            }\n\t            parent = parent.parentNode;\n\t        }\n\t        return v;\n\t    };\n\t    c3_chart_internal_fn.getParentWidth = function () {\n\t        return this.getParentRectValue('width');\n\t    };\n\t    c3_chart_internal_fn.getParentHeight = function () {\n\t        var h = this.selectChart.style('height');\n\t        return h.indexOf('px') > 0 ? +h.replace('px', '') : 0;\n\t    };\n\t\n\t\n\t    c3_chart_internal_fn.getSvgLeft = function (withoutRecompute) {\n\t        var $$ = this, config = $$.config,\n\t            hasLeftAxisRect = config.axis_rotated || (!config.axis_rotated && !config.axis_y_inner),\n\t            leftAxisClass = config.axis_rotated ? CLASS.axisX : CLASS.axisY,\n\t            leftAxis = $$.main.select('.' + leftAxisClass).node(),\n\t            svgRect = leftAxis && hasLeftAxisRect ? leftAxis.getBoundingClientRect() : {right: 0},\n\t            chartRect = $$.selectChart.node().getBoundingClientRect(),\n\t            hasArc = $$.hasArcType(),\n\t            svgLeft = svgRect.right - chartRect.left - (hasArc ? 0 : $$.getCurrentPaddingLeft(withoutRecompute));\n\t        return svgLeft > 0 ? svgLeft : 0;\n\t    };\n\t\n\t\n\t    c3_chart_internal_fn.getAxisWidthByAxisId = function (id, withoutRecompute) {\n\t        var $$ = this, position = $$.axis.getLabelPositionById(id);\n\t        return $$.axis.getMaxTickWidth(id, withoutRecompute) + (position.isInner ? 20 : 40);\n\t    };\n\t    c3_chart_internal_fn.getHorizontalAxisHeight = function (axisId) {\n\t        var $$ = this, config = $$.config, h = 30;\n\t        if (axisId === 'x' && !config.axis_x_show) { return 8; }\n\t        if (axisId === 'x' && config.axis_x_height) { return config.axis_x_height; }\n\t        if (axisId === 'y' && !config.axis_y_show) { return config.legend_show && !$$.isLegendRight && !$$.isLegendInset ? 10 : 1; }\n\t        if (axisId === 'y2' && !config.axis_y2_show) { return $$.rotated_padding_top; }\n\t        // Calculate x axis height when tick rotated\n\t        if (axisId === 'x' && !config.axis_rotated && config.axis_x_tick_rotate) {\n\t            h = 30 + $$.axis.getMaxTickWidth(axisId) * Math.cos(Math.PI * (90 - config.axis_x_tick_rotate) / 180);\n\t        }\n\t        return h + ($$.axis.getLabelPositionById(axisId).isInner ? 0 : 10) + (axisId === 'y2' ? -10 : 0);\n\t    };\n\t\n\t    c3_chart_internal_fn.getEventRectWidth = function () {\n\t        return Math.max(0, this.xAxis.tickInterval());\n\t    };\n\t\n\t    c3_chart_internal_fn.getShapeIndices = function (typeFilter) {\n\t        var $$ = this, config = $$.config,\n\t            indices = {}, i = 0, j, k;\n\t        $$.filterTargetsToShow($$.data.targets.filter(typeFilter, $$)).forEach(function (d) {\n\t            for (j = 0; j < config.data_groups.length; j++) {\n\t                if (config.data_groups[j].indexOf(d.id) < 0) { continue; }\n\t                for (k = 0; k < config.data_groups[j].length; k++) {\n\t                    if (config.data_groups[j][k] in indices) {\n\t                        indices[d.id] = indices[config.data_groups[j][k]];\n\t                        break;\n\t                    }\n\t                }\n\t            }\n\t            if (isUndefined(indices[d.id])) { indices[d.id] = i++; }\n\t        });\n\t        indices.__max__ = i - 1;\n\t        return indices;\n\t    };\n\t    c3_chart_internal_fn.getShapeX = function (offset, targetsNum, indices, isSub) {\n\t        var $$ = this, scale = isSub ? $$.subX : $$.x;\n\t        return function (d) {\n\t            var index = d.id in indices ? indices[d.id] : 0;\n\t            return d.x || d.x === 0 ? scale(d.x) - offset * (targetsNum / 2 - index) : 0;\n\t        };\n\t    };\n\t    c3_chart_internal_fn.getShapeY = function (isSub) {\n\t        var $$ = this;\n\t        return function (d) {\n\t            var scale = isSub ? $$.getSubYScale(d.id) : $$.getYScale(d.id);\n\t            return scale(d.value);\n\t        };\n\t    };\n\t    c3_chart_internal_fn.getShapeOffset = function (typeFilter, indices, isSub) {\n\t        var $$ = this,\n\t            targets = $$.orderTargets($$.filterTargetsToShow($$.data.targets.filter(typeFilter, $$))),\n\t            targetIds = targets.map(function (t) { return t.id; });\n\t        return function (d, i) {\n\t            var scale = isSub ? $$.getSubYScale(d.id) : $$.getYScale(d.id),\n\t                y0 = scale(0), offset = y0;\n\t            targets.forEach(function (t) {\n\t                var values = $$.isStepType(d) ? $$.convertValuesToStep(t.values) : t.values;\n\t                if (t.id === d.id || indices[t.id] !== indices[d.id]) { return; }\n\t                if (targetIds.indexOf(t.id) < targetIds.indexOf(d.id)) {\n\t                    if (values[i].value * d.value >= 0) {\n\t                        offset += scale(values[i].value) - y0;\n\t                    }\n\t                }\n\t            });\n\t            return offset;\n\t        };\n\t    };\n\t    c3_chart_internal_fn.isWithinShape = function (that, d) {\n\t        var $$ = this,\n\t            shape = $$.d3.select(that), isWithin;\n\t        if (!$$.isTargetToShow(d.id)) {\n\t            isWithin = false;\n\t        }\n\t        else if (that.nodeName === 'circle') {\n\t            isWithin = $$.isStepType(d) ? $$.isWithinStep(that, $$.getYScale(d.id)(d.value)) : $$.isWithinCircle(that, $$.pointSelectR(d) * 1.5);\n\t        }\n\t        else if (that.nodeName === 'path') {\n\t            isWithin = shape.classed(CLASS.bar) ? $$.isWithinBar(that) : true;\n\t        }\n\t        return isWithin;\n\t    };\n\t\n\t\n\t    c3_chart_internal_fn.getInterpolate = function (d) {\n\t        var $$ = this;\n\t        return $$.isSplineType(d) ? \"cardinal\" : $$.isStepType(d) ? $$.config.line_step_type : \"linear\";\n\t    };\n\t\n\t    c3_chart_internal_fn.initLine = function () {\n\t        var $$ = this;\n\t        $$.main.select('.' + CLASS.chart).append(\"g\")\n\t            .attr(\"class\", CLASS.chartLines);\n\t    };\n\t    c3_chart_internal_fn.updateTargetsForLine = function (targets) {\n\t        var $$ = this, config = $$.config,\n\t            mainLineUpdate, mainLineEnter,\n\t            classChartLine = $$.classChartLine.bind($$),\n\t            classLines = $$.classLines.bind($$),\n\t            classAreas = $$.classAreas.bind($$),\n\t            classCircles = $$.classCircles.bind($$),\n\t            classFocus = $$.classFocus.bind($$);\n\t        mainLineUpdate = $$.main.select('.' + CLASS.chartLines).selectAll('.' + CLASS.chartLine)\n\t            .data(targets)\n\t            .attr('class', function (d) { return classChartLine(d) + classFocus(d); });\n\t        mainLineEnter = mainLineUpdate.enter().append('g')\n\t            .attr('class', classChartLine)\n\t            .style('opacity', 0)\n\t            .style(\"pointer-events\", \"none\");\n\t        // Lines for each data\n\t        mainLineEnter.append('g')\n\t            .attr(\"class\", classLines);\n\t        // Areas\n\t        mainLineEnter.append('g')\n\t            .attr('class', classAreas);\n\t        // Circles for each data point on lines\n\t        mainLineEnter.append('g')\n\t            .attr(\"class\", function (d) { return $$.generateClass(CLASS.selectedCircles, d.id); });\n\t        mainLineEnter.append('g')\n\t            .attr(\"class\", classCircles)\n\t            .style(\"cursor\", function (d) { return config.data_selection_isselectable(d) ? \"pointer\" : null; });\n\t        // Update date for selected circles\n\t        targets.forEach(function (t) {\n\t            $$.main.selectAll('.' + CLASS.selectedCircles + $$.getTargetSelectorSuffix(t.id)).selectAll('.' + CLASS.selectedCircle).each(function (d) {\n\t                d.value = t.values[d.index].value;\n\t            });\n\t        });\n\t        // MEMO: can not keep same color...\n\t        //mainLineUpdate.exit().remove();\n\t    };\n\t    c3_chart_internal_fn.updateLine = function (durationForExit) {\n\t        var $$ = this;\n\t        $$.mainLine = $$.main.selectAll('.' + CLASS.lines).selectAll('.' + CLASS.line)\n\t            .data($$.lineData.bind($$));\n\t        $$.mainLine.enter().append('path')\n\t            .attr('class', $$.classLine.bind($$))\n\t            .style(\"stroke\", $$.color);\n\t        $$.mainLine\n\t            .style(\"opacity\", $$.initialOpacity.bind($$))\n\t            .style('shape-rendering', function (d) { return $$.isStepType(d) ? 'crispEdges' : ''; })\n\t            .attr('transform', null);\n\t        $$.mainLine.exit().transition().duration(durationForExit)\n\t            .style('opacity', 0)\n\t            .remove();\n\t    };\n\t    c3_chart_internal_fn.redrawLine = function (drawLine, withTransition) {\n\t        return [\n\t            (withTransition ? this.mainLine.transition() : this.mainLine)\n\t                .attr(\"d\", drawLine)\n\t                .style(\"stroke\", this.color)\n\t                .style(\"opacity\", 1)\n\t        ];\n\t    };\n\t    c3_chart_internal_fn.generateDrawLine = function (lineIndices, isSub) {\n\t        var $$ = this, config = $$.config,\n\t            line = $$.d3.svg.line(),\n\t            getPoints = $$.generateGetLinePoints(lineIndices, isSub),\n\t            yScaleGetter = isSub ? $$.getSubYScale : $$.getYScale,\n\t            xValue = function (d) { return (isSub ? $$.subxx : $$.xx).call($$, d); },\n\t            yValue = function (d, i) {\n\t                return config.data_groups.length > 0 ? getPoints(d, i)[0][1] : yScaleGetter.call($$, d.id)(d.value);\n\t            };\n\t\n\t        line = config.axis_rotated ? line.x(yValue).y(xValue) : line.x(xValue).y(yValue);\n\t        if (!config.line_connectNull) { line = line.defined(function (d) { return d.value != null; }); }\n\t        return function (d) {\n\t            var values = config.line_connectNull ? $$.filterRemoveNull(d.values) : d.values,\n\t                x = isSub ? $$.x : $$.subX, y = yScaleGetter.call($$, d.id), x0 = 0, y0 = 0, path;\n\t            if ($$.isLineType(d)) {\n\t                if (config.data_regions[d.id]) {\n\t                    path = $$.lineWithRegions(values, x, y, config.data_regions[d.id]);\n\t                } else {\n\t                    if ($$.isStepType(d)) { values = $$.convertValuesToStep(values); }\n\t                    path = line.interpolate($$.getInterpolate(d))(values);\n\t                }\n\t            } else {\n\t                if (values[0]) {\n\t                    x0 = x(values[0].x);\n\t                    y0 = y(values[0].value);\n\t                }\n\t                path = config.axis_rotated ? \"M \" + y0 + \" \" + x0 : \"M \" + x0 + \" \" + y0;\n\t            }\n\t            return path ? path : \"M 0 0\";\n\t        };\n\t    };\n\t    c3_chart_internal_fn.generateGetLinePoints = function (lineIndices, isSub) { // partial duplication of generateGetBarPoints\n\t        var $$ = this, config = $$.config,\n\t            lineTargetsNum = lineIndices.__max__ + 1,\n\t            x = $$.getShapeX(0, lineTargetsNum, lineIndices, !!isSub),\n\t            y = $$.getShapeY(!!isSub),\n\t            lineOffset = $$.getShapeOffset($$.isLineType, lineIndices, !!isSub),\n\t            yScale = isSub ? $$.getSubYScale : $$.getYScale;\n\t        return function (d, i) {\n\t            var y0 = yScale.call($$, d.id)(0),\n\t                offset = lineOffset(d, i) || y0, // offset is for stacked area chart\n\t                posX = x(d), posY = y(d);\n\t            // fix posY not to overflow opposite quadrant\n\t            if (config.axis_rotated) {\n\t                if ((0 < d.value && posY < y0) || (d.value < 0 && y0 < posY)) { posY = y0; }\n\t            }\n\t            // 1 point that marks the line position\n\t            return [\n\t                [posX, posY - (y0 - offset)],\n\t                [posX, posY - (y0 - offset)], // needed for compatibility\n\t                [posX, posY - (y0 - offset)], // needed for compatibility\n\t                [posX, posY - (y0 - offset)]  // needed for compatibility\n\t            ];\n\t        };\n\t    };\n\t\n\t\n\t    c3_chart_internal_fn.lineWithRegions = function (d, x, y, _regions) {\n\t        var $$ = this, config = $$.config,\n\t            prev = -1, i, j,\n\t            s = \"M\", sWithRegion,\n\t            xp, yp, dx, dy, dd, diff, diffx2,\n\t            xOffset = $$.isCategorized() ? 0.5 : 0,\n\t            xValue, yValue,\n\t            regions = [];\n\t\n\t        function isWithinRegions(x, regions) {\n\t            var i;\n\t            for (i = 0; i < regions.length; i++) {\n\t                if (regions[i].start < x && x <= regions[i].end) { return true; }\n\t            }\n\t            return false;\n\t        }\n\t\n\t        // Check start/end of regions\n\t        if (isDefined(_regions)) {\n\t            for (i = 0; i < _regions.length; i++) {\n\t                regions[i] = {};\n\t                if (isUndefined(_regions[i].start)) {\n\t                    regions[i].start = d[0].x;\n\t                } else {\n\t                    regions[i].start = $$.isTimeSeries() ? $$.parseDate(_regions[i].start) : _regions[i].start;\n\t                }\n\t                if (isUndefined(_regions[i].end)) {\n\t                    regions[i].end = d[d.length - 1].x;\n\t                } else {\n\t                    regions[i].end = $$.isTimeSeries() ? $$.parseDate(_regions[i].end) : _regions[i].end;\n\t                }\n\t            }\n\t        }\n\t\n\t        // Set scales\n\t        xValue = config.axis_rotated ? function (d) { return y(d.value); } : function (d) { return x(d.x); };\n\t        yValue = config.axis_rotated ? function (d) { return x(d.x); } : function (d) { return y(d.value); };\n\t\n\t        // Define svg generator function for region\n\t        function generateM(points) {\n\t            return 'M' + points[0][0] + ' ' + points[0][1] + ' ' + points[1][0] + ' ' + points[1][1];\n\t        }\n\t        if ($$.isTimeSeries()) {\n\t            sWithRegion = function (d0, d1, j, diff) {\n\t                var x0 = d0.x.getTime(), x_diff = d1.x - d0.x,\n\t                    xv0 = new Date(x0 + x_diff * j),\n\t                    xv1 = new Date(x0 + x_diff * (j + diff)),\n\t                    points;\n\t                if (config.axis_rotated) {\n\t                    points = [[y(yp(j)), x(xv0)], [y(yp(j + diff)), x(xv1)]];\n\t                } else {\n\t                    points = [[x(xv0), y(yp(j))], [x(xv1), y(yp(j + diff))]];\n\t                }\n\t                return generateM(points);\n\t            };\n\t        } else {\n\t            sWithRegion = function (d0, d1, j, diff) {\n\t                var points;\n\t                if (config.axis_rotated) {\n\t                    points = [[y(yp(j), true), x(xp(j))], [y(yp(j + diff), true), x(xp(j + diff))]];\n\t                } else {\n\t                    points = [[x(xp(j), true), y(yp(j))], [x(xp(j + diff), true), y(yp(j + diff))]];\n\t                }\n\t                return generateM(points);\n\t            };\n\t        }\n\t\n\t        // Generate\n\t        for (i = 0; i < d.length; i++) {\n\t\n\t            // Draw as normal\n\t            if (isUndefined(regions) || ! isWithinRegions(d[i].x, regions)) {\n\t                s += \" \" + xValue(d[i]) + \" \" + yValue(d[i]);\n\t            }\n\t            // Draw with region // TODO: Fix for horizotal charts\n\t            else {\n\t                xp = $$.getScale(d[i - 1].x + xOffset, d[i].x + xOffset, $$.isTimeSeries());\n\t                yp = $$.getScale(d[i - 1].value, d[i].value);\n\t\n\t                dx = x(d[i].x) - x(d[i - 1].x);\n\t                dy = y(d[i].value) - y(d[i - 1].value);\n\t                dd = Math.sqrt(Math.pow(dx, 2) + Math.pow(dy, 2));\n\t                diff = 2 / dd;\n\t                diffx2 = diff * 2;\n\t\n\t                for (j = diff; j <= 1; j += diffx2) {\n\t                    s += sWithRegion(d[i - 1], d[i], j, diff);\n\t                }\n\t            }\n\t            prev = d[i].x;\n\t        }\n\t\n\t        return s;\n\t    };\n\t\n\t\n\t    c3_chart_internal_fn.updateArea = function (durationForExit) {\n\t        var $$ = this, d3 = $$.d3;\n\t        $$.mainArea = $$.main.selectAll('.' + CLASS.areas).selectAll('.' + CLASS.area)\n\t            .data($$.lineData.bind($$));\n\t        $$.mainArea.enter().append('path')\n\t            .attr(\"class\", $$.classArea.bind($$))\n\t            .style(\"fill\", $$.color)\n\t            .style(\"opacity\", function () { $$.orgAreaOpacity = +d3.select(this).style('opacity'); return 0; });\n\t        $$.mainArea\n\t            .style(\"opacity\", $$.orgAreaOpacity);\n\t        $$.mainArea.exit().transition().duration(durationForExit)\n\t            .style('opacity', 0)\n\t            .remove();\n\t    };\n\t    c3_chart_internal_fn.redrawArea = function (drawArea, withTransition) {\n\t        return [\n\t            (withTransition ? this.mainArea.transition() : this.mainArea)\n\t                .attr(\"d\", drawArea)\n\t                .style(\"fill\", this.color)\n\t                .style(\"opacity\", this.orgAreaOpacity)\n\t        ];\n\t    };\n\t    c3_chart_internal_fn.generateDrawArea = function (areaIndices, isSub) {\n\t        var $$ = this, config = $$.config, area = $$.d3.svg.area(),\n\t            getPoints = $$.generateGetAreaPoints(areaIndices, isSub),\n\t            yScaleGetter = isSub ? $$.getSubYScale : $$.getYScale,\n\t            xValue = function (d) { return (isSub ? $$.subxx : $$.xx).call($$, d); },\n\t            value0 = function (d, i) {\n\t                return config.data_groups.length > 0 ? getPoints(d, i)[0][1] : yScaleGetter.call($$, d.id)($$.getAreaBaseValue(d.id));\n\t            },\n\t            value1 = function (d, i) {\n\t                return config.data_groups.length > 0 ? getPoints(d, i)[1][1] : yScaleGetter.call($$, d.id)(d.value);\n\t            };\n\t\n\t        area = config.axis_rotated ? area.x0(value0).x1(value1).y(xValue) : area.x(xValue).y0(value0).y1(value1);\n\t        if (!config.line_connectNull) {\n\t            area = area.defined(function (d) { return d.value !== null; });\n\t        }\n\t\n\t        return function (d) {\n\t            var values = config.line_connectNull ? $$.filterRemoveNull(d.values) : d.values,\n\t                x0 = 0, y0 = 0, path;\n\t            if ($$.isAreaType(d)) {\n\t                if ($$.isStepType(d)) { values = $$.convertValuesToStep(values); }\n\t                path = area.interpolate($$.getInterpolate(d))(values);\n\t            } else {\n\t                if (values[0]) {\n\t                    x0 = $$.x(values[0].x);\n\t                    y0 = $$.getYScale(d.id)(values[0].value);\n\t                }\n\t                path = config.axis_rotated ? \"M \" + y0 + \" \" + x0 : \"M \" + x0 + \" \" + y0;\n\t            }\n\t            return path ? path : \"M 0 0\";\n\t        };\n\t    };\n\t    c3_chart_internal_fn.getAreaBaseValue = function () {\n\t        return 0;\n\t    };\n\t    c3_chart_internal_fn.generateGetAreaPoints = function (areaIndices, isSub) { // partial duplication of generateGetBarPoints\n\t        var $$ = this, config = $$.config,\n\t            areaTargetsNum = areaIndices.__max__ + 1,\n\t            x = $$.getShapeX(0, areaTargetsNum, areaIndices, !!isSub),\n\t            y = $$.getShapeY(!!isSub),\n\t            areaOffset = $$.getShapeOffset($$.isAreaType, areaIndices, !!isSub),\n\t            yScale = isSub ? $$.getSubYScale : $$.getYScale;\n\t        return function (d, i) {\n\t            var y0 = yScale.call($$, d.id)(0),\n\t                offset = areaOffset(d, i) || y0, // offset is for stacked area chart\n\t                posX = x(d), posY = y(d);\n\t            // fix posY not to overflow opposite quadrant\n\t            if (config.axis_rotated) {\n\t                if ((0 < d.value && posY < y0) || (d.value < 0 && y0 < posY)) { posY = y0; }\n\t            }\n\t            // 1 point that marks the area position\n\t            return [\n\t                [posX, offset],\n\t                [posX, posY - (y0 - offset)],\n\t                [posX, posY - (y0 - offset)], // needed for compatibility\n\t                [posX, offset] // needed for compatibility\n\t            ];\n\t        };\n\t    };\n\t\n\t\n\t    c3_chart_internal_fn.updateCircle = function () {\n\t        var $$ = this;\n\t        $$.mainCircle = $$.main.selectAll('.' + CLASS.circles).selectAll('.' + CLASS.circle)\n\t            .data($$.lineOrScatterData.bind($$));\n\t        $$.mainCircle.enter().append(\"circle\")\n\t            .attr(\"class\", $$.classCircle.bind($$))\n\t            .attr(\"r\", $$.pointR.bind($$))\n\t            .style(\"fill\", $$.color);\n\t        $$.mainCircle\n\t            .style(\"opacity\", $$.initialOpacityForCircle.bind($$));\n\t        $$.mainCircle.exit().remove();\n\t    };\n\t    c3_chart_internal_fn.redrawCircle = function (cx, cy, withTransition) {\n\t        var selectedCircles = this.main.selectAll('.' + CLASS.selectedCircle);\n\t        return [\n\t            (withTransition ? this.mainCircle.transition() : this.mainCircle)\n\t                .style('opacity', this.opacityForCircle.bind(this))\n\t                .style(\"fill\", this.color)\n\t                .attr(\"cx\", cx)\n\t                .attr(\"cy\", cy),\n\t            (withTransition ? selectedCircles.transition() : selectedCircles)\n\t                .attr(\"cx\", cx)\n\t                .attr(\"cy\", cy)\n\t        ];\n\t    };\n\t    c3_chart_internal_fn.circleX = function (d) {\n\t        return d.x || d.x === 0 ? this.x(d.x) : null;\n\t    };\n\t    c3_chart_internal_fn.updateCircleY = function () {\n\t        var $$ = this, lineIndices, getPoints;\n\t        if ($$.config.data_groups.length > 0) {\n\t            lineIndices = $$.getShapeIndices($$.isLineType),\n\t            getPoints = $$.generateGetLinePoints(lineIndices);\n\t            $$.circleY = function (d, i) {\n\t                return getPoints(d, i)[0][1];\n\t            };\n\t        } else {\n\t            $$.circleY = function (d) {\n\t                return $$.getYScale(d.id)(d.value);\n\t            };\n\t        }\n\t    };\n\t    c3_chart_internal_fn.getCircles = function (i, id) {\n\t        var $$ = this;\n\t        return (id ? $$.main.selectAll('.' + CLASS.circles + $$.getTargetSelectorSuffix(id)) : $$.main).selectAll('.' + CLASS.circle + (isValue(i) ? '-' + i : ''));\n\t    };\n\t    c3_chart_internal_fn.expandCircles = function (i, id, reset) {\n\t        var $$ = this,\n\t            r = $$.pointExpandedR.bind($$);\n\t        if (reset) { $$.unexpandCircles(); }\n\t        $$.getCircles(i, id)\n\t            .classed(CLASS.EXPANDED, true)\n\t            .attr('r', r);\n\t    };\n\t    c3_chart_internal_fn.unexpandCircles = function (i) {\n\t        var $$ = this,\n\t            r = $$.pointR.bind($$);\n\t        $$.getCircles(i)\n\t            .filter(function () { return $$.d3.select(this).classed(CLASS.EXPANDED); })\n\t            .classed(CLASS.EXPANDED, false)\n\t            .attr('r', r);\n\t    };\n\t    c3_chart_internal_fn.pointR = function (d) {\n\t        var $$ = this, config = $$.config;\n\t        return $$.isStepType(d) ? 0 : (isFunction(config.point_r) ? config.point_r(d) : config.point_r);\n\t    };\n\t    c3_chart_internal_fn.pointExpandedR = function (d) {\n\t        var $$ = this, config = $$.config;\n\t        return config.point_focus_expand_enabled ? (config.point_focus_expand_r ? config.point_focus_expand_r : $$.pointR(d) * 1.75) : $$.pointR(d);\n\t    };\n\t    c3_chart_internal_fn.pointSelectR = function (d) {\n\t        var $$ = this, config = $$.config;\n\t        return config.point_select_r ? config.point_select_r : $$.pointR(d) * 4;\n\t    };\n\t    c3_chart_internal_fn.isWithinCircle = function (that, r) {\n\t        var d3 = this.d3,\n\t            mouse = d3.mouse(that), d3_this = d3.select(that),\n\t            cx = +d3_this.attr(\"cx\"), cy = +d3_this.attr(\"cy\");\n\t        return Math.sqrt(Math.pow(cx - mouse[0], 2) + Math.pow(cy - mouse[1], 2)) < r;\n\t    };\n\t    c3_chart_internal_fn.isWithinStep = function (that, y) {\n\t        return Math.abs(y - this.d3.mouse(that)[1]) < 30;\n\t    };\n\t\n\t    c3_chart_internal_fn.initBar = function () {\n\t        var $$ = this;\n\t        $$.main.select('.' + CLASS.chart).append(\"g\")\n\t            .attr(\"class\", CLASS.chartBars);\n\t    };\n\t    c3_chart_internal_fn.updateTargetsForBar = function (targets) {\n\t        var $$ = this, config = $$.config,\n\t            mainBarUpdate, mainBarEnter,\n\t            classChartBar = $$.classChartBar.bind($$),\n\t            classBars = $$.classBars.bind($$),\n\t            classFocus = $$.classFocus.bind($$);\n\t        mainBarUpdate = $$.main.select('.' + CLASS.chartBars).selectAll('.' + CLASS.chartBar)\n\t            .data(targets)\n\t            .attr('class', function (d) { return classChartBar(d) + classFocus(d); });\n\t        mainBarEnter = mainBarUpdate.enter().append('g')\n\t            .attr('class', classChartBar)\n\t            .style('opacity', 0)\n\t            .style(\"pointer-events\", \"none\");\n\t        // Bars for each data\n\t        mainBarEnter.append('g')\n\t            .attr(\"class\", classBars)\n\t            .style(\"cursor\", function (d) { return config.data_selection_isselectable(d) ? \"pointer\" : null; });\n\t\n\t    };\n\t    c3_chart_internal_fn.updateBar = function (durationForExit) {\n\t        var $$ = this,\n\t            barData = $$.barData.bind($$),\n\t            classBar = $$.classBar.bind($$),\n\t            initialOpacity = $$.initialOpacity.bind($$),\n\t            color = function (d) { return $$.color(d.id); };\n\t        $$.mainBar = $$.main.selectAll('.' + CLASS.bars).selectAll('.' + CLASS.bar)\n\t            .data(barData);\n\t        $$.mainBar.enter().append('path')\n\t            .attr(\"class\", classBar)\n\t            .style(\"stroke\", color)\n\t            .style(\"fill\", color);\n\t        $$.mainBar\n\t            .style(\"opacity\", initialOpacity);\n\t        $$.mainBar.exit().transition().duration(durationForExit)\n\t            .style('opacity', 0)\n\t            .remove();\n\t    };\n\t    c3_chart_internal_fn.redrawBar = function (drawBar, withTransition) {\n\t        return [\n\t            (withTransition ? this.mainBar.transition() : this.mainBar)\n\t                .attr('d', drawBar)\n\t                .style(\"fill\", this.color)\n\t                .style(\"opacity\", 1)\n\t        ];\n\t    };\n\t    c3_chart_internal_fn.getBarW = function (axis, barTargetsNum) {\n\t        var $$ = this, config = $$.config,\n\t            w = typeof config.bar_width === 'number' ? config.bar_width : barTargetsNum ? (axis.tickInterval() * config.bar_width_ratio) / barTargetsNum : 0;\n\t        return config.bar_width_max && w > config.bar_width_max ? config.bar_width_max : w;\n\t    };\n\t    c3_chart_internal_fn.getBars = function (i, id) {\n\t        var $$ = this;\n\t        return (id ? $$.main.selectAll('.' + CLASS.bars + $$.getTargetSelectorSuffix(id)) : $$.main).selectAll('.' + CLASS.bar + (isValue(i) ? '-' + i : ''));\n\t    };\n\t    c3_chart_internal_fn.expandBars = function (i, id, reset) {\n\t        var $$ = this;\n\t        if (reset) { $$.unexpandBars(); }\n\t        $$.getBars(i, id).classed(CLASS.EXPANDED, true);\n\t    };\n\t    c3_chart_internal_fn.unexpandBars = function (i) {\n\t        var $$ = this;\n\t        $$.getBars(i).classed(CLASS.EXPANDED, false);\n\t    };\n\t    c3_chart_internal_fn.generateDrawBar = function (barIndices, isSub) {\n\t        var $$ = this, config = $$.config,\n\t            getPoints = $$.generateGetBarPoints(barIndices, isSub);\n\t        return function (d, i) {\n\t            // 4 points that make a bar\n\t            var points = getPoints(d, i);\n\t\n\t            // switch points if axis is rotated, not applicable for sub chart\n\t            var indexX = config.axis_rotated ? 1 : 0;\n\t            var indexY = config.axis_rotated ? 0 : 1;\n\t\n\t            var path = 'M ' + points[0][indexX] + ',' + points[0][indexY] + ' ' +\n\t                    'L' + points[1][indexX] + ',' + points[1][indexY] + ' ' +\n\t                    'L' + points[2][indexX] + ',' + points[2][indexY] + ' ' +\n\t                    'L' + points[3][indexX] + ',' + points[3][indexY] + ' ' +\n\t                    'z';\n\t\n\t            return path;\n\t        };\n\t    };\n\t    c3_chart_internal_fn.generateGetBarPoints = function (barIndices, isSub) {\n\t        var $$ = this,\n\t            axis = isSub ? $$.subXAxis : $$.xAxis,\n\t            barTargetsNum = barIndices.__max__ + 1,\n\t            barW = $$.getBarW(axis, barTargetsNum),\n\t            barX = $$.getShapeX(barW, barTargetsNum, barIndices, !!isSub),\n\t            barY = $$.getShapeY(!!isSub),\n\t            barOffset = $$.getShapeOffset($$.isBarType, barIndices, !!isSub),\n\t            yScale = isSub ? $$.getSubYScale : $$.getYScale;\n\t        return function (d, i) {\n\t            var y0 = yScale.call($$, d.id)(0),\n\t                offset = barOffset(d, i) || y0, // offset is for stacked bar chart\n\t                posX = barX(d), posY = barY(d);\n\t            // fix posY not to overflow opposite quadrant\n\t            if ($$.config.axis_rotated) {\n\t                if ((0 < d.value && posY < y0) || (d.value < 0 && y0 < posY)) { posY = y0; }\n\t            }\n\t            // 4 points that make a bar\n\t            return [\n\t                [posX, offset],\n\t                [posX, posY - (y0 - offset)],\n\t                [posX + barW, posY - (y0 - offset)],\n\t                [posX + barW, offset]\n\t            ];\n\t        };\n\t    };\n\t    c3_chart_internal_fn.isWithinBar = function (that) {\n\t        var mouse = this.d3.mouse(that), box = that.getBoundingClientRect(),\n\t            seg0 = that.pathSegList.getItem(0), seg1 = that.pathSegList.getItem(1),\n\t            x = Math.min(seg0.x, seg1.x), y = Math.min(seg0.y, seg1.y),\n\t            w = box.width, h = box.height, offset = 2,\n\t            sx = x - offset, ex = x + w + offset, sy = y + h + offset, ey = y - offset;\n\t        return sx < mouse[0] && mouse[0] < ex && ey < mouse[1] && mouse[1] < sy;\n\t    };\n\t\n\t    c3_chart_internal_fn.initText = function () {\n\t        var $$ = this;\n\t        $$.main.select('.' + CLASS.chart).append(\"g\")\n\t            .attr(\"class\", CLASS.chartTexts);\n\t        $$.mainText = $$.d3.selectAll([]);\n\t    };\n\t    c3_chart_internal_fn.updateTargetsForText = function (targets) {\n\t        var $$ = this, mainTextUpdate, mainTextEnter,\n\t            classChartText = $$.classChartText.bind($$),\n\t            classTexts = $$.classTexts.bind($$),\n\t            classFocus = $$.classFocus.bind($$);\n\t        mainTextUpdate = $$.main.select('.' + CLASS.chartTexts).selectAll('.' + CLASS.chartText)\n\t            .data(targets)\n\t            .attr('class', function (d) { return classChartText(d) + classFocus(d); });\n\t        mainTextEnter = mainTextUpdate.enter().append('g')\n\t            .attr('class', classChartText)\n\t            .style('opacity', 0)\n\t            .style(\"pointer-events\", \"none\");\n\t        mainTextEnter.append('g')\n\t            .attr('class', classTexts);\n\t    };\n\t    c3_chart_internal_fn.updateText = function (durationForExit) {\n\t        var $$ = this, config = $$.config,\n\t            barOrLineData = $$.barOrLineData.bind($$),\n\t            classText = $$.classText.bind($$);\n\t        $$.mainText = $$.main.selectAll('.' + CLASS.texts).selectAll('.' + CLASS.text)\n\t            .data(barOrLineData);\n\t        $$.mainText.enter().append('text')\n\t            .attr(\"class\", classText)\n\t            .attr('text-anchor', function (d) { return config.axis_rotated ? (d.value < 0 ? 'end' : 'start') : 'middle'; })\n\t            .style(\"stroke\", 'none')\n\t            .style(\"fill\", function (d) { return $$.color(d); })\n\t            .style(\"fill-opacity\", 0);\n\t        $$.mainText\n\t            .text(function (d, i, j) { return $$.dataLabelFormat(d.id)(d.value, d.id, i, j); });\n\t        $$.mainText.exit()\n\t            .transition().duration(durationForExit)\n\t            .style('fill-opacity', 0)\n\t            .remove();\n\t    };\n\t    c3_chart_internal_fn.redrawText = function (xForText, yForText, forFlow, withTransition) {\n\t        return [\n\t            (withTransition ? this.mainText.transition() : this.mainText)\n\t                .attr('x', xForText)\n\t                .attr('y', yForText)\n\t                .style(\"fill\", this.color)\n\t                .style(\"fill-opacity\", forFlow ? 0 : this.opacityForText.bind(this))\n\t        ];\n\t    };\n\t    c3_chart_internal_fn.getTextRect = function (text, cls) {\n\t        var dummy = this.d3.select('body').append('div').classed('c3', true),\n\t            svg = dummy.append(\"svg\").style('visibility', 'hidden').style('position', 'fixed').style('top', 0).style('left', 0),\n\t            rect;\n\t        svg.selectAll('.dummy')\n\t            .data([text])\n\t          .enter().append('text')\n\t            .classed(cls ? cls : \"\", true)\n\t            .text(text)\n\t          .each(function () { rect = this.getBoundingClientRect(); });\n\t        dummy.remove();\n\t        return rect;\n\t    };\n\t    c3_chart_internal_fn.generateXYForText = function (areaIndices, barIndices, lineIndices, forX) {\n\t        var $$ = this,\n\t            getAreaPoints = $$.generateGetAreaPoints(areaIndices, false),\n\t            getBarPoints = $$.generateGetBarPoints(barIndices, false),\n\t            getLinePoints = $$.generateGetLinePoints(lineIndices, false),\n\t            getter = forX ? $$.getXForText : $$.getYForText;\n\t        return function (d, i) {\n\t            var getPoints = $$.isAreaType(d) ? getAreaPoints : $$.isBarType(d) ? getBarPoints : getLinePoints;\n\t            return getter.call($$, getPoints(d, i), d, this);\n\t        };\n\t    };\n\t    c3_chart_internal_fn.getXForText = function (points, d, textElement) {\n\t        var $$ = this,\n\t            box = textElement.getBoundingClientRect(), xPos, padding;\n\t        if ($$.config.axis_rotated) {\n\t            padding = $$.isBarType(d) ? 4 : 6;\n\t            xPos = points[2][1] + padding * (d.value < 0 ? -1 : 1);\n\t        } else {\n\t            xPos = $$.hasType('bar') ? (points[2][0] + points[0][0]) / 2 : points[0][0];\n\t        }\n\t        // show labels regardless of the domain if value is null\n\t        if (d.value === null) {\n\t            if (xPos > $$.width) {\n\t                xPos = $$.width - box.width;\n\t            } else if (xPos < 0) {\n\t                xPos = 4;\n\t            }\n\t        }\n\t        return xPos;\n\t    };\n\t    c3_chart_internal_fn.getYForText = function (points, d, textElement) {\n\t        var $$ = this,\n\t            box = textElement.getBoundingClientRect(),\n\t            yPos;\n\t        if ($$.config.axis_rotated) {\n\t            yPos = (points[0][0] + points[2][0] + box.height * 0.6) / 2;\n\t        } else {\n\t            yPos = points[2][1];\n\t            if (d.value < 0) {\n\t                yPos += box.height;\n\t                if ($$.isBarType(d) && $$.isSafari()) {\n\t                    yPos -= 3;\n\t                }\n\t                else if (!$$.isBarType(d) && $$.isChrome()) {\n\t                    yPos += 3;\n\t                }\n\t            } else {\n\t                yPos += $$.isBarType(d) ? -3 : -6;\n\t            }\n\t        }\n\t        // show labels regardless of the domain if value is null\n\t        if (d.value === null && !$$.config.axis_rotated) {\n\t            if (yPos < box.height) {\n\t                yPos = box.height;\n\t            } else if (yPos > this.height) {\n\t                yPos = this.height - 4;\n\t            }\n\t        }\n\t        return yPos;\n\t    };\n\t\n\t    c3_chart_internal_fn.setTargetType = function (targetIds, type) {\n\t        var $$ = this, config = $$.config;\n\t        $$.mapToTargetIds(targetIds).forEach(function (id) {\n\t            $$.withoutFadeIn[id] = (type === config.data_types[id]);\n\t            config.data_types[id] = type;\n\t        });\n\t        if (!targetIds) {\n\t            config.data_type = type;\n\t        }\n\t    };\n\t    c3_chart_internal_fn.hasType = function (type, targets) {\n\t        var $$ = this, types = $$.config.data_types, has = false;\n\t        targets = targets || $$.data.targets;\n\t        if (targets && targets.length) {\n\t            targets.forEach(function (target) {\n\t                var t = types[target.id];\n\t                if ((t && t.indexOf(type) >= 0) || (!t && type === 'line')) {\n\t                    has = true;\n\t                }\n\t            });\n\t        } else if (Object.keys(types).length) {\n\t            Object.keys(types).forEach(function (id) {\n\t                if (types[id] === type) { has = true; }\n\t            });\n\t        } else {\n\t            has = $$.config.data_type === type;\n\t        }\n\t        return has;\n\t    };\n\t    c3_chart_internal_fn.hasArcType = function (targets) {\n\t        return this.hasType('pie', targets) || this.hasType('donut', targets) || this.hasType('gauge', targets);\n\t    };\n\t    c3_chart_internal_fn.isLineType = function (d) {\n\t        var config = this.config, id = isString(d) ? d : d.id;\n\t        return !config.data_types[id] || ['line', 'spline', 'area', 'area-spline', 'step', 'area-step'].indexOf(config.data_types[id]) >= 0;\n\t    };\n\t    c3_chart_internal_fn.isStepType = function (d) {\n\t        var id = isString(d) ? d : d.id;\n\t        return ['step', 'area-step'].indexOf(this.config.data_types[id]) >= 0;\n\t    };\n\t    c3_chart_internal_fn.isSplineType = function (d) {\n\t        var id = isString(d) ? d : d.id;\n\t        return ['spline', 'area-spline'].indexOf(this.config.data_types[id]) >= 0;\n\t    };\n\t    c3_chart_internal_fn.isAreaType = function (d) {\n\t        var id = isString(d) ? d : d.id;\n\t        return ['area', 'area-spline', 'area-step'].indexOf(this.config.data_types[id]) >= 0;\n\t    };\n\t    c3_chart_internal_fn.isBarType = function (d) {\n\t        var id = isString(d) ? d : d.id;\n\t        return this.config.data_types[id] === 'bar';\n\t    };\n\t    c3_chart_internal_fn.isScatterType = function (d) {\n\t        var id = isString(d) ? d : d.id;\n\t        return this.config.data_types[id] === 'scatter';\n\t    };\n\t    c3_chart_internal_fn.isPieType = function (d) {\n\t        var id = isString(d) ? d : d.id;\n\t        return this.config.data_types[id] === 'pie';\n\t    };\n\t    c3_chart_internal_fn.isGaugeType = function (d) {\n\t        var id = isString(d) ? d : d.id;\n\t        return this.config.data_types[id] === 'gauge';\n\t    };\n\t    c3_chart_internal_fn.isDonutType = function (d) {\n\t        var id = isString(d) ? d : d.id;\n\t        return this.config.data_types[id] === 'donut';\n\t    };\n\t    c3_chart_internal_fn.isArcType = function (d) {\n\t        return this.isPieType(d) || this.isDonutType(d) || this.isGaugeType(d);\n\t    };\n\t    c3_chart_internal_fn.lineData = function (d) {\n\t        return this.isLineType(d) ? [d] : [];\n\t    };\n\t    c3_chart_internal_fn.arcData = function (d) {\n\t        return this.isArcType(d.data) ? [d] : [];\n\t    };\n\t    /* not used\n\t     function scatterData(d) {\n\t     return isScatterType(d) ? d.values : [];\n\t     }\n\t     */\n\t    c3_chart_internal_fn.barData = function (d) {\n\t        return this.isBarType(d) ? d.values : [];\n\t    };\n\t    c3_chart_internal_fn.lineOrScatterData = function (d) {\n\t        return this.isLineType(d) || this.isScatterType(d) ? d.values : [];\n\t    };\n\t    c3_chart_internal_fn.barOrLineData = function (d) {\n\t        return this.isBarType(d) || this.isLineType(d) ? d.values : [];\n\t    };\n\t\n\t    c3_chart_internal_fn.initGrid = function () {\n\t        var $$ = this, config = $$.config, d3 = $$.d3;\n\t        $$.grid = $$.main.append('g')\n\t            .attr(\"clip-path\", $$.clipPathForGrid)\n\t            .attr('class', CLASS.grid);\n\t        if (config.grid_x_show) {\n\t            $$.grid.append(\"g\").attr(\"class\", CLASS.xgrids);\n\t        }\n\t        if (config.grid_y_show) {\n\t            $$.grid.append('g').attr('class', CLASS.ygrids);\n\t        }\n\t        if (config.grid_focus_show) {\n\t            $$.grid.append('g')\n\t                .attr(\"class\", CLASS.xgridFocus)\n\t                .append('line')\n\t                .attr('class', CLASS.xgridFocus);\n\t        }\n\t        $$.xgrid = d3.selectAll([]);\n\t        if (!config.grid_lines_front) { $$.initGridLines(); }\n\t    };\n\t    c3_chart_internal_fn.initGridLines = function () {\n\t        var $$ = this, d3 = $$.d3;\n\t        $$.gridLines = $$.main.append('g')\n\t            .attr(\"clip-path\", $$.clipPathForGrid)\n\t            .attr('class', CLASS.grid + ' ' + CLASS.gridLines);\n\t        $$.gridLines.append('g').attr(\"class\", CLASS.xgridLines);\n\t        $$.gridLines.append('g').attr('class', CLASS.ygridLines);\n\t        $$.xgridLines = d3.selectAll([]);\n\t    };\n\t    c3_chart_internal_fn.updateXGrid = function (withoutUpdate) {\n\t        var $$ = this, config = $$.config, d3 = $$.d3,\n\t            xgridData = $$.generateGridData(config.grid_x_type, $$.x),\n\t            tickOffset = $$.isCategorized() ? $$.xAxis.tickOffset() : 0;\n\t\n\t        $$.xgridAttr = config.axis_rotated ? {\n\t            'x1': 0,\n\t            'x2': $$.width,\n\t            'y1': function (d) { return $$.x(d) - tickOffset; },\n\t            'y2': function (d) { return $$.x(d) - tickOffset; }\n\t        } : {\n\t            'x1': function (d) { return $$.x(d) + tickOffset; },\n\t            'x2': function (d) { return $$.x(d) + tickOffset; },\n\t            'y1': 0,\n\t            'y2': $$.height\n\t        };\n\t\n\t        $$.xgrid = $$.main.select('.' + CLASS.xgrids).selectAll('.' + CLASS.xgrid)\n\t            .data(xgridData);\n\t        $$.xgrid.enter().append('line').attr(\"class\", CLASS.xgrid);\n\t        if (!withoutUpdate) {\n\t            $$.xgrid.attr($$.xgridAttr)\n\t                .style(\"opacity\", function () { return +d3.select(this).attr(config.axis_rotated ? 'y1' : 'x1') === (config.axis_rotated ? $$.height : 0) ? 0 : 1; });\n\t        }\n\t        $$.xgrid.exit().remove();\n\t    };\n\t\n\t    c3_chart_internal_fn.updateYGrid = function () {\n\t        var $$ = this, config = $$.config,\n\t            gridValues = $$.yAxis.tickValues() || $$.y.ticks(config.grid_y_ticks);\n\t        $$.ygrid = $$.main.select('.' + CLASS.ygrids).selectAll('.' + CLASS.ygrid)\n\t            .data(gridValues);\n\t        $$.ygrid.enter().append('line')\n\t            .attr('class', CLASS.ygrid);\n\t        $$.ygrid.attr(\"x1\", config.axis_rotated ? $$.y : 0)\n\t            .attr(\"x2\", config.axis_rotated ? $$.y : $$.width)\n\t            .attr(\"y1\", config.axis_rotated ? 0 : $$.y)\n\t            .attr(\"y2\", config.axis_rotated ? $$.height : $$.y);\n\t        $$.ygrid.exit().remove();\n\t        $$.smoothLines($$.ygrid, 'grid');\n\t    };\n\t\n\t    c3_chart_internal_fn.gridTextAnchor = function (d) {\n\t        return d.position ? d.position : \"end\";\n\t    };\n\t    c3_chart_internal_fn.gridTextDx = function (d) {\n\t        return d.position === 'start' ? 4 : d.position === 'middle' ? 0 : -4;\n\t    };\n\t    c3_chart_internal_fn.xGridTextX = function (d) {\n\t        return d.position === 'start' ? -this.height : d.position === 'middle' ? -this.height / 2 : 0;\n\t    };\n\t    c3_chart_internal_fn.yGridTextX = function (d) {\n\t        return d.position === 'start' ? 0 : d.position === 'middle' ? this.width / 2 : this.width;\n\t    };\n\t    c3_chart_internal_fn.updateGrid = function (duration) {\n\t        var $$ = this, main = $$.main, config = $$.config,\n\t            xgridLine, ygridLine, yv;\n\t\n\t        // hide if arc type\n\t        $$.grid.style('visibility', $$.hasArcType() ? 'hidden' : 'visible');\n\t\n\t        main.select('line.' + CLASS.xgridFocus).style(\"visibility\", \"hidden\");\n\t        if (config.grid_x_show) {\n\t            $$.updateXGrid();\n\t        }\n\t        $$.xgridLines = main.select('.' + CLASS.xgridLines).selectAll('.' + CLASS.xgridLine)\n\t            .data(config.grid_x_lines);\n\t        // enter\n\t        xgridLine = $$.xgridLines.enter().append('g')\n\t            .attr(\"class\", function (d) { return CLASS.xgridLine + (d['class'] ? ' ' + d['class'] : ''); });\n\t        xgridLine.append('line')\n\t            .style(\"opacity\", 0);\n\t        xgridLine.append('text')\n\t            .attr(\"text-anchor\", $$.gridTextAnchor)\n\t            .attr(\"transform\", config.axis_rotated ? \"\" : \"rotate(-90)\")\n\t            .attr('dx', $$.gridTextDx)\n\t            .attr('dy', -5)\n\t            .style(\"opacity\", 0);\n\t        // udpate\n\t        // done in d3.transition() of the end of this function\n\t        // exit\n\t        $$.xgridLines.exit().transition().duration(duration)\n\t            .style(\"opacity\", 0)\n\t            .remove();\n\t\n\t        // Y-Grid\n\t        if (config.grid_y_show) {\n\t            $$.updateYGrid();\n\t        }\n\t        $$.ygridLines = main.select('.' + CLASS.ygridLines).selectAll('.' + CLASS.ygridLine)\n\t            .data(config.grid_y_lines);\n\t        // enter\n\t        ygridLine = $$.ygridLines.enter().append('g')\n\t            .attr(\"class\", function (d) { return CLASS.ygridLine + (d['class'] ? ' ' + d['class'] : ''); });\n\t        ygridLine.append('line')\n\t            .style(\"opacity\", 0);\n\t        ygridLine.append('text')\n\t            .attr(\"text-anchor\", $$.gridTextAnchor)\n\t            .attr(\"transform\", config.axis_rotated ? \"rotate(-90)\" : \"\")\n\t            .attr('dx', $$.gridTextDx)\n\t            .attr('dy', -5)\n\t            .style(\"opacity\", 0);\n\t        // update\n\t        yv = $$.yv.bind($$);\n\t        $$.ygridLines.select('line')\n\t          .transition().duration(duration)\n\t            .attr(\"x1\", config.axis_rotated ? yv : 0)\n\t            .attr(\"x2\", config.axis_rotated ? yv : $$.width)\n\t            .attr(\"y1\", config.axis_rotated ? 0 : yv)\n\t            .attr(\"y2\", config.axis_rotated ? $$.height : yv)\n\t            .style(\"opacity\", 1);\n\t        $$.ygridLines.select('text')\n\t          .transition().duration(duration)\n\t            .attr(\"x\", config.axis_rotated ? $$.xGridTextX.bind($$) : $$.yGridTextX.bind($$))\n\t            .attr(\"y\", yv)\n\t            .text(function (d) { return d.text; })\n\t            .style(\"opacity\", 1);\n\t        // exit\n\t        $$.ygridLines.exit().transition().duration(duration)\n\t            .style(\"opacity\", 0)\n\t            .remove();\n\t    };\n\t    c3_chart_internal_fn.redrawGrid = function (withTransition) {\n\t        var $$ = this, config = $$.config, xv = $$.xv.bind($$),\n\t            lines = $$.xgridLines.select('line'),\n\t            texts = $$.xgridLines.select('text');\n\t        return [\n\t            (withTransition ? lines.transition() : lines)\n\t                .attr(\"x1\", config.axis_rotated ? 0 : xv)\n\t                .attr(\"x2\", config.axis_rotated ? $$.width : xv)\n\t                .attr(\"y1\", config.axis_rotated ? xv : 0)\n\t                .attr(\"y2\", config.axis_rotated ? xv : $$.height)\n\t                .style(\"opacity\", 1),\n\t            (withTransition ? texts.transition() : texts)\n\t                .attr(\"x\", config.axis_rotated ? $$.yGridTextX.bind($$) : $$.xGridTextX.bind($$))\n\t                .attr(\"y\", xv)\n\t                .text(function (d) { return d.text; })\n\t                .style(\"opacity\", 1)\n\t        ];\n\t    };\n\t    c3_chart_internal_fn.showXGridFocus = function (selectedData) {\n\t        var $$ = this, config = $$.config,\n\t            dataToShow = selectedData.filter(function (d) { return d && isValue(d.value); }),\n\t            focusEl = $$.main.selectAll('line.' + CLASS.xgridFocus),\n\t            xx = $$.xx.bind($$);\n\t        if (! config.tooltip_show) { return; }\n\t        // Hide when scatter plot exists\n\t        if ($$.hasType('scatter') || $$.hasArcType()) { return; }\n\t        focusEl\n\t            .style(\"visibility\", \"visible\")\n\t            .data([dataToShow[0]])\n\t            .attr(config.axis_rotated ? 'y1' : 'x1', xx)\n\t            .attr(config.axis_rotated ? 'y2' : 'x2', xx);\n\t        $$.smoothLines(focusEl, 'grid');\n\t    };\n\t    c3_chart_internal_fn.hideXGridFocus = function () {\n\t        this.main.select('line.' + CLASS.xgridFocus).style(\"visibility\", \"hidden\");\n\t    };\n\t    c3_chart_internal_fn.updateXgridFocus = function () {\n\t        var $$ = this, config = $$.config;\n\t        $$.main.select('line.' + CLASS.xgridFocus)\n\t            .attr(\"x1\", config.axis_rotated ? 0 : -10)\n\t            .attr(\"x2\", config.axis_rotated ? $$.width : -10)\n\t            .attr(\"y1\", config.axis_rotated ? -10 : 0)\n\t            .attr(\"y2\", config.axis_rotated ? -10 : $$.height);\n\t    };\n\t    c3_chart_internal_fn.generateGridData = function (type, scale) {\n\t        var $$ = this,\n\t            gridData = [], xDomain, firstYear, lastYear, i,\n\t            tickNum = $$.main.select(\".\" + CLASS.axisX).selectAll('.tick').size();\n\t        if (type === 'year') {\n\t            xDomain = $$.getXDomain();\n\t            firstYear = xDomain[0].getFullYear();\n\t            lastYear = xDomain[1].getFullYear();\n\t            for (i = firstYear; i <= lastYear; i++) {\n\t                gridData.push(new Date(i + '-01-01 00:00:00'));\n\t            }\n\t        } else {\n\t            gridData = scale.ticks(10);\n\t            if (gridData.length > tickNum) { // use only int\n\t                gridData = gridData.filter(function (d) { return (\"\" + d).indexOf('.') < 0; });\n\t            }\n\t        }\n\t        return gridData;\n\t    };\n\t    c3_chart_internal_fn.getGridFilterToRemove = function (params) {\n\t        return params ? function (line) {\n\t            var found = false;\n\t            [].concat(params).forEach(function (param) {\n\t                if ((('value' in param && line.value === param.value) || ('class' in param && line['class'] === param['class']))) {\n\t                    found = true;\n\t                }\n\t            });\n\t            return found;\n\t        } : function () { return true; };\n\t    };\n\t    c3_chart_internal_fn.removeGridLines = function (params, forX) {\n\t        var $$ = this, config = $$.config,\n\t            toRemove = $$.getGridFilterToRemove(params),\n\t            toShow = function (line) { return !toRemove(line); },\n\t            classLines = forX ? CLASS.xgridLines : CLASS.ygridLines,\n\t            classLine = forX ? CLASS.xgridLine : CLASS.ygridLine;\n\t        $$.main.select('.' + classLines).selectAll('.' + classLine).filter(toRemove)\n\t            .transition().duration(config.transition_duration)\n\t            .style('opacity', 0).remove();\n\t        if (forX) {\n\t            config.grid_x_lines = config.grid_x_lines.filter(toShow);\n\t        } else {\n\t            config.grid_y_lines = config.grid_y_lines.filter(toShow);\n\t        }\n\t    };\n\t\n\t    c3_chart_internal_fn.initTooltip = function () {\n\t        var $$ = this, config = $$.config, i;\n\t        $$.tooltip = $$.selectChart\n\t            .style(\"position\", \"relative\")\n\t          .append(\"div\")\n\t            .attr('class', CLASS.tooltipContainer)\n\t            .style(\"position\", \"absolute\")\n\t            .style(\"pointer-events\", \"none\")\n\t            .style(\"display\", \"none\");\n\t        // Show tooltip if needed\n\t        if (config.tooltip_init_show) {\n\t            if ($$.isTimeSeries() && isString(config.tooltip_init_x)) {\n\t                config.tooltip_init_x = $$.parseDate(config.tooltip_init_x);\n\t                for (i = 0; i < $$.data.targets[0].values.length; i++) {\n\t                    if (($$.data.targets[0].values[i].x - config.tooltip_init_x) === 0) { break; }\n\t                }\n\t                config.tooltip_init_x = i;\n\t            }\n\t            $$.tooltip.html(config.tooltip_contents.call($$, $$.data.targets.map(function (d) {\n\t                return $$.addName(d.values[config.tooltip_init_x]);\n\t            }), $$.axis.getXAxisTickFormat(), $$.getYFormat($$.hasArcType()), $$.color));\n\t            $$.tooltip.style(\"top\", config.tooltip_init_position.top)\n\t                .style(\"left\", config.tooltip_init_position.left)\n\t                .style(\"display\", \"block\");\n\t        }\n\t    };\n\t    c3_chart_internal_fn.getTooltipContent = function (d, defaultTitleFormat, defaultValueFormat, color) {\n\t        var $$ = this, config = $$.config,\n\t            titleFormat = config.tooltip_format_title || defaultTitleFormat,\n\t            nameFormat = config.tooltip_format_name || function (name) { return name; },\n\t            valueFormat = config.tooltip_format_value || defaultValueFormat,\n\t            text, i, title, value, name, bgcolor;\n\t        for (i = 0; i < d.length; i++) {\n\t            if (! (d[i] && (d[i].value || d[i].value === 0))) { continue; }\n\t\n\t            if (! text) {\n\t                title = titleFormat ? titleFormat(d[i].x) : d[i].x;\n\t                text = \"<table class='\" + CLASS.tooltip + \"'>\" + (title || title === 0 ? \"<tr><th colspan='2'>\" + title + \"</th></tr>\" : \"\");\n\t            }\n\t\n\t            value = valueFormat(d[i].value, d[i].ratio, d[i].id, d[i].index);\n\t            if (value !== undefined) {\n\t                name = nameFormat(d[i].name, d[i].ratio, d[i].id, d[i].index);\n\t                bgcolor = $$.levelColor ? $$.levelColor(d[i].value) : color(d[i].id);\n\t\n\t                text += \"<tr class='\" + CLASS.tooltipName + \"-\" + d[i].id + \"'>\";\n\t                text += \"<td class='name'><span style='background-color:\" + bgcolor + \"'></span>\" + name + \"</td>\";\n\t                text += \"<td class='value'>\" + value + \"</td>\";\n\t                text += \"</tr>\";\n\t            }\n\t        }\n\t        return text + \"</table>\";\n\t    };\n\t    c3_chart_internal_fn.tooltipPosition = function (dataToShow, tWidth, tHeight, element) {\n\t        var $$ = this, config = $$.config, d3 = $$.d3;\n\t        var svgLeft, tooltipLeft, tooltipRight, tooltipTop, chartRight;\n\t        var forArc = $$.hasArcType(),\n\t            mouse = d3.mouse(element);\n\t      // Determin tooltip position\n\t        if (forArc) {\n\t            tooltipLeft = (($$.width - ($$.isLegendRight ? $$.getLegendWidth() : 0)) / 2) + mouse[0];\n\t            tooltipTop = ($$.height / 2) + mouse[1] + 20;\n\t        } else {\n\t            svgLeft = $$.getSvgLeft(true);\n\t            if (config.axis_rotated) {\n\t                tooltipLeft = svgLeft + mouse[0] + 100;\n\t                tooltipRight = tooltipLeft + tWidth;\n\t                chartRight = $$.currentWidth - $$.getCurrentPaddingRight();\n\t                tooltipTop = $$.x(dataToShow[0].x) + 20;\n\t            } else {\n\t                tooltipLeft = svgLeft + $$.getCurrentPaddingLeft(true) + $$.x(dataToShow[0].x) + 20;\n\t                tooltipRight = tooltipLeft + tWidth;\n\t                chartRight = svgLeft + $$.currentWidth - $$.getCurrentPaddingRight();\n\t                tooltipTop = mouse[1] + 15;\n\t            }\n\t\n\t            if (tooltipRight > chartRight) {\n\t                // 20 is needed for Firefox to keep tooletip width\n\t                tooltipLeft -= tooltipRight - chartRight + 20;\n\t            }\n\t            if (tooltipTop + tHeight > $$.currentHeight) {\n\t                tooltipTop -= tHeight + 30;\n\t            }\n\t        }\n\t        if (tooltipTop < 0) {\n\t            tooltipTop = 0;\n\t        }\n\t        return {top: tooltipTop, left: tooltipLeft};\n\t    };\n\t    c3_chart_internal_fn.showTooltip = function (selectedData, element) {\n\t        var $$ = this, config = $$.config;\n\t        var tWidth, tHeight, position;\n\t        var forArc = $$.hasArcType(),\n\t            dataToShow = selectedData.filter(function (d) { return d && isValue(d.value); }),\n\t            positionFunction = config.tooltip_position || c3_chart_internal_fn.tooltipPosition;\n\t        if (dataToShow.length === 0 || !config.tooltip_show) {\n\t            return;\n\t        }\n\t        $$.tooltip.html(config.tooltip_contents.call($$, selectedData, $$.axis.getXAxisTickFormat(), $$.getYFormat(forArc), $$.color)).style(\"display\", \"block\");\n\t\n\t        // Get tooltip dimensions\n\t        tWidth = $$.tooltip.property('offsetWidth');\n\t        tHeight = $$.tooltip.property('offsetHeight');\n\t\n\t        position = positionFunction.call(this, dataToShow, tWidth, tHeight, element);\n\t        // Set tooltip\n\t        $$.tooltip\n\t            .style(\"top\", position.top + \"px\")\n\t            .style(\"left\", position.left + 'px');\n\t    };\n\t    c3_chart_internal_fn.hideTooltip = function () {\n\t        this.tooltip.style(\"display\", \"none\");\n\t    };\n\t\n\t    c3_chart_internal_fn.initLegend = function () {\n\t        var $$ = this;\n\t        $$.legendItemTextBox = {};\n\t        $$.legendHasRendered = false;\n\t        $$.legend = $$.svg.append(\"g\").attr(\"transform\", $$.getTranslate('legend'));\n\t        if (!$$.config.legend_show) {\n\t            $$.legend.style('visibility', 'hidden');\n\t            $$.hiddenLegendIds = $$.mapToIds($$.data.targets);\n\t            return;\n\t        }\n\t        // MEMO: call here to update legend box and tranlate for all\n\t        // MEMO: translate will be upated by this, so transform not needed in updateLegend()\n\t        $$.updateLegendWithDefaults();\n\t    };\n\t    c3_chart_internal_fn.updateLegendWithDefaults = function () {\n\t        var $$ = this;\n\t        $$.updateLegend($$.mapToIds($$.data.targets), {withTransform: false, withTransitionForTransform: false, withTransition: false});\n\t    };\n\t    c3_chart_internal_fn.updateSizeForLegend = function (legendHeight, legendWidth) {\n\t        var $$ = this, config = $$.config, insetLegendPosition = {\n\t            top: $$.isLegendTop ? $$.getCurrentPaddingTop() + config.legend_inset_y + 5.5 : $$.currentHeight - legendHeight - $$.getCurrentPaddingBottom() - config.legend_inset_y,\n\t            left: $$.isLegendLeft ? $$.getCurrentPaddingLeft() + config.legend_inset_x + 0.5 : $$.currentWidth - legendWidth - $$.getCurrentPaddingRight() - config.legend_inset_x + 0.5\n\t        };\n\t\n\t        $$.margin3 = {\n\t            top: $$.isLegendRight ? 0 : $$.isLegendInset ? insetLegendPosition.top : $$.currentHeight - legendHeight,\n\t            right: NaN,\n\t            bottom: 0,\n\t            left: $$.isLegendRight ? $$.currentWidth - legendWidth : $$.isLegendInset ? insetLegendPosition.left : 0\n\t        };\n\t    };\n\t    c3_chart_internal_fn.transformLegend = function (withTransition) {\n\t        var $$ = this;\n\t        (withTransition ? $$.legend.transition() : $$.legend).attr(\"transform\", $$.getTranslate('legend'));\n\t    };\n\t    c3_chart_internal_fn.updateLegendStep = function (step) {\n\t        this.legendStep = step;\n\t    };\n\t    c3_chart_internal_fn.updateLegendItemWidth = function (w) {\n\t        this.legendItemWidth = w;\n\t    };\n\t    c3_chart_internal_fn.updateLegendItemHeight = function (h) {\n\t        this.legendItemHeight = h;\n\t    };\n\t    c3_chart_internal_fn.getLegendWidth = function () {\n\t        var $$ = this;\n\t        return $$.config.legend_show ? $$.isLegendRight || $$.isLegendInset ? $$.legendItemWidth * ($$.legendStep + 1) : $$.currentWidth : 0;\n\t    };\n\t    c3_chart_internal_fn.getLegendHeight = function () {\n\t        var $$ = this, h = 0;\n\t        if ($$.config.legend_show) {\n\t            if ($$.isLegendRight) {\n\t                h = $$.currentHeight;\n\t            } else {\n\t                h = Math.max(20, $$.legendItemHeight) * ($$.legendStep + 1);\n\t            }\n\t        }\n\t        return h;\n\t    };\n\t    c3_chart_internal_fn.opacityForLegend = function (legendItem) {\n\t        return legendItem.classed(CLASS.legendItemHidden) ? null : 1;\n\t    };\n\t    c3_chart_internal_fn.opacityForUnfocusedLegend = function (legendItem) {\n\t        return legendItem.classed(CLASS.legendItemHidden) ? null : 0.3;\n\t    };\n\t    c3_chart_internal_fn.toggleFocusLegend = function (targetIds, focus) {\n\t        var $$ = this;\n\t        targetIds = $$.mapToTargetIds(targetIds);\n\t        $$.legend.selectAll('.' + CLASS.legendItem)\n\t            .filter(function (id) { return targetIds.indexOf(id) >= 0; })\n\t            .classed(CLASS.legendItemFocused, focus)\n\t          .transition().duration(100)\n\t            .style('opacity', function () {\n\t                var opacity = focus ? $$.opacityForLegend : $$.opacityForUnfocusedLegend;\n\t                return opacity.call($$, $$.d3.select(this));\n\t            });\n\t    };\n\t    c3_chart_internal_fn.revertLegend = function () {\n\t        var $$ = this, d3 = $$.d3;\n\t        $$.legend.selectAll('.' + CLASS.legendItem)\n\t            .classed(CLASS.legendItemFocused, false)\n\t            .transition().duration(100)\n\t            .style('opacity', function () { return $$.opacityForLegend(d3.select(this)); });\n\t    };\n\t    c3_chart_internal_fn.showLegend = function (targetIds) {\n\t        var $$ = this, config = $$.config;\n\t        if (!config.legend_show) {\n\t            config.legend_show = true;\n\t            $$.legend.style('visibility', 'visible');\n\t            if (!$$.legendHasRendered) {\n\t                $$.updateLegendWithDefaults();\n\t            }\n\t        }\n\t        $$.removeHiddenLegendIds(targetIds);\n\t        $$.legend.selectAll($$.selectorLegends(targetIds))\n\t            .style('visibility', 'visible')\n\t            .transition()\n\t            .style('opacity', function () { return $$.opacityForLegend($$.d3.select(this)); });\n\t    };\n\t    c3_chart_internal_fn.hideLegend = function (targetIds) {\n\t        var $$ = this, config = $$.config;\n\t        if (config.legend_show && isEmpty(targetIds)) {\n\t            config.legend_show = false;\n\t            $$.legend.style('visibility', 'hidden');\n\t        }\n\t        $$.addHiddenLegendIds(targetIds);\n\t        $$.legend.selectAll($$.selectorLegends(targetIds))\n\t            .style('opacity', 0)\n\t            .style('visibility', 'hidden');\n\t    };\n\t    c3_chart_internal_fn.clearLegendItemTextBoxCache = function () {\n\t        this.legendItemTextBox = {};\n\t    };\n\t    c3_chart_internal_fn.updateLegend = function (targetIds, options, transitions) {\n\t        var $$ = this, config = $$.config;\n\t        var xForLegend, xForLegendText, xForLegendRect, yForLegend, yForLegendText, yForLegendRect;\n\t        var paddingTop = 4, paddingRight = 10, maxWidth = 0, maxHeight = 0, posMin = 10, tileWidth = 15;\n\t        var l, totalLength = 0, offsets = {}, widths = {}, heights = {}, margins = [0], steps = {}, step = 0;\n\t        var withTransition, withTransitionForTransform;\n\t        var texts, rects, tiles, background;\n\t\n\t        options = options || {};\n\t        withTransition = getOption(options, \"withTransition\", true);\n\t        withTransitionForTransform = getOption(options, \"withTransitionForTransform\", true);\n\t\n\t        function getTextBox(textElement, id) {\n\t            if (!$$.legendItemTextBox[id]) {\n\t                $$.legendItemTextBox[id] = $$.getTextRect(textElement.textContent, CLASS.legendItem);\n\t            }\n\t            return $$.legendItemTextBox[id];\n\t        }\n\t\n\t        function updatePositions(textElement, id, index) {\n\t            var reset = index === 0, isLast = index === targetIds.length - 1,\n\t                box = getTextBox(textElement, id),\n\t                itemWidth = box.width + tileWidth + (isLast && !($$.isLegendRight || $$.isLegendInset) ? 0 : paddingRight),\n\t                itemHeight = box.height + paddingTop,\n\t                itemLength = $$.isLegendRight || $$.isLegendInset ? itemHeight : itemWidth,\n\t                areaLength = $$.isLegendRight || $$.isLegendInset ? $$.getLegendHeight() : $$.getLegendWidth(),\n\t                margin, maxLength;\n\t\n\t            // MEMO: care about condifion of step, totalLength\n\t            function updateValues(id, withoutStep) {\n\t                if (!withoutStep) {\n\t                    margin = (areaLength - totalLength - itemLength) / 2;\n\t                    if (margin < posMin) {\n\t                        margin = (areaLength - itemLength) / 2;\n\t                        totalLength = 0;\n\t                        step++;\n\t                    }\n\t                }\n\t                steps[id] = step;\n\t                margins[step] = $$.isLegendInset ? 10 : margin;\n\t                offsets[id] = totalLength;\n\t                totalLength += itemLength;\n\t            }\n\t\n\t            if (reset) {\n\t                totalLength = 0;\n\t                step = 0;\n\t                maxWidth = 0;\n\t                maxHeight = 0;\n\t            }\n\t\n\t            if (config.legend_show && !$$.isLegendToShow(id)) {\n\t                widths[id] = heights[id] = steps[id] = offsets[id] = 0;\n\t                return;\n\t            }\n\t\n\t            widths[id] = itemWidth;\n\t            heights[id] = itemHeight;\n\t\n\t            if (!maxWidth || itemWidth >= maxWidth) { maxWidth = itemWidth; }\n\t            if (!maxHeight || itemHeight >= maxHeight) { maxHeight = itemHeight; }\n\t            maxLength = $$.isLegendRight || $$.isLegendInset ? maxHeight : maxWidth;\n\t\n\t            if (config.legend_equally) {\n\t                Object.keys(widths).forEach(function (id) { widths[id] = maxWidth; });\n\t                Object.keys(heights).forEach(function (id) { heights[id] = maxHeight; });\n\t                margin = (areaLength - maxLength * targetIds.length) / 2;\n\t                if (margin < posMin) {\n\t                    totalLength = 0;\n\t                    step = 0;\n\t                    targetIds.forEach(function (id) { updateValues(id); });\n\t                }\n\t                else {\n\t                    updateValues(id, true);\n\t                }\n\t            } else {\n\t                updateValues(id);\n\t            }\n\t        }\n\t\n\t        if ($$.isLegendInset) {\n\t            step = config.legend_inset_step ? config.legend_inset_step : targetIds.length;\n\t            $$.updateLegendStep(step);\n\t        }\n\t\n\t        if ($$.isLegendRight) {\n\t            xForLegend = function (id) { return maxWidth * steps[id]; };\n\t            yForLegend = function (id) { return margins[steps[id]] + offsets[id]; };\n\t        } else if ($$.isLegendInset) {\n\t            xForLegend = function (id) { return maxWidth * steps[id] + 10; };\n\t            yForLegend = function (id) { return margins[steps[id]] + offsets[id]; };\n\t        } else {\n\t            xForLegend = function (id) { return margins[steps[id]] + offsets[id]; };\n\t            yForLegend = function (id) { return maxHeight * steps[id]; };\n\t        }\n\t        xForLegendText = function (id, i) { return xForLegend(id, i) + 14; };\n\t        yForLegendText = function (id, i) { return yForLegend(id, i) + 9; };\n\t        xForLegendRect = function (id, i) { return xForLegend(id, i); };\n\t        yForLegendRect = function (id, i) { return yForLegend(id, i) - 5; };\n\t\n\t        // Define g for legend area\n\t        l = $$.legend.selectAll('.' + CLASS.legendItem)\n\t            .data(targetIds)\n\t            .enter().append('g')\n\t            .attr('class', function (id) { return $$.generateClass(CLASS.legendItem, id); })\n\t            .style('visibility', function (id) { return $$.isLegendToShow(id) ? 'visible' : 'hidden'; })\n\t            .style('cursor', 'pointer')\n\t            .on('click', function (id) {\n\t                if (config.legend_item_onclick) {\n\t                    config.legend_item_onclick.call($$, id);\n\t                } else {\n\t                    if ($$.d3.event.altKey) {\n\t                        $$.api.hide();\n\t                        $$.api.show(id);\n\t                    } else {\n\t                        $$.api.toggle(id);\n\t                        $$.isTargetToShow(id) ? $$.api.focus(id) : $$.api.revert();\n\t                    }\n\t                }\n\t            })\n\t            .on('mouseover', function (id) {\n\t                $$.d3.select(this).classed(CLASS.legendItemFocused, true);\n\t                if (!$$.transiting && $$.isTargetToShow(id)) {\n\t                    $$.api.focus(id);\n\t                }\n\t                if (config.legend_item_onmouseover) {\n\t                    config.legend_item_onmouseover.call($$, id);\n\t                }\n\t            })\n\t            .on('mouseout', function (id) {\n\t                $$.d3.select(this).classed(CLASS.legendItemFocused, false);\n\t                $$.api.revert();\n\t                if (config.legend_item_onmouseout) {\n\t                    config.legend_item_onmouseout.call($$, id);\n\t                }\n\t            });\n\t        l.append('text')\n\t            .text(function (id) { return isDefined(config.data_names[id]) ? config.data_names[id] : id; })\n\t            .each(function (id, i) { updatePositions(this, id, i); })\n\t            .style(\"pointer-events\", \"none\")\n\t            .attr('x', $$.isLegendRight || $$.isLegendInset ? xForLegendText : -200)\n\t            .attr('y', $$.isLegendRight || $$.isLegendInset ? -200 : yForLegendText);\n\t        l.append('rect')\n\t            .attr(\"class\", CLASS.legendItemEvent)\n\t            .style('fill-opacity', 0)\n\t            .attr('x', $$.isLegendRight || $$.isLegendInset ? xForLegendRect : -200)\n\t            .attr('y', $$.isLegendRight || $$.isLegendInset ? -200 : yForLegendRect);\n\t        l.append('rect')\n\t            .attr(\"class\", CLASS.legendItemTile)\n\t            .style(\"pointer-events\", \"none\")\n\t            .style('fill', $$.color)\n\t            .attr('x', $$.isLegendRight || $$.isLegendInset ? xForLegendText : -200)\n\t            .attr('y', $$.isLegendRight || $$.isLegendInset ? -200 : yForLegend)\n\t            .attr('width', 10)\n\t            .attr('height', 10);\n\t\n\t        // Set background for inset legend\n\t        background = $$.legend.select('.' + CLASS.legendBackground + ' rect');\n\t        if ($$.isLegendInset && maxWidth > 0 && background.size() === 0) {\n\t            background = $$.legend.insert('g', '.' + CLASS.legendItem)\n\t                .attr(\"class\", CLASS.legendBackground)\n\t                .append('rect');\n\t        }\n\t\n\t        texts = $$.legend.selectAll('text')\n\t            .data(targetIds)\n\t            .text(function (id) { return isDefined(config.data_names[id]) ? config.data_names[id] : id; }) // MEMO: needed for update\n\t            .each(function (id, i) { updatePositions(this, id, i); });\n\t        (withTransition ? texts.transition() : texts)\n\t            .attr('x', xForLegendText)\n\t            .attr('y', yForLegendText);\n\t\n\t        rects = $$.legend.selectAll('rect.' + CLASS.legendItemEvent)\n\t            .data(targetIds);\n\t        (withTransition ? rects.transition() : rects)\n\t            .attr('width', function (id) { return widths[id]; })\n\t            .attr('height', function (id) { return heights[id]; })\n\t            .attr('x', xForLegendRect)\n\t            .attr('y', yForLegendRect);\n\t\n\t        tiles = $$.legend.selectAll('rect.' + CLASS.legendItemTile)\n\t            .data(targetIds);\n\t        (withTransition ? tiles.transition() : tiles)\n\t            .style('fill', $$.color)\n\t            .attr('x', xForLegend)\n\t            .attr('y', yForLegend);\n\t\n\t        if (background) {\n\t            (withTransition ? background.transition() : background)\n\t                .attr('height', $$.getLegendHeight() - 12)\n\t                .attr('width', maxWidth * (step + 1) + 10);\n\t        }\n\t\n\t        // toggle legend state\n\t        $$.legend.selectAll('.' + CLASS.legendItem)\n\t            .classed(CLASS.legendItemHidden, function (id) { return !$$.isTargetToShow(id); });\n\t\n\t        // Update all to reflect change of legend\n\t        $$.updateLegendItemWidth(maxWidth);\n\t        $$.updateLegendItemHeight(maxHeight);\n\t        $$.updateLegendStep(step);\n\t        // Update size and scale\n\t        $$.updateSizes();\n\t        $$.updateScales();\n\t        $$.updateSvgSize();\n\t        // Update g positions\n\t        $$.transformAll(withTransitionForTransform, transitions);\n\t        $$.legendHasRendered = true;\n\t    };\n\t\n\t    function Axis(owner) {\n\t        API.call(this, owner);\n\t    }\n\t\n\t    inherit(API, Axis);\n\t\n\t    Axis.prototype.init = function init() {\n\t\n\t        var $$ = this.owner, config = $$.config, main = $$.main;\n\t        $$.axes.x = main.append(\"g\")\n\t            .attr(\"class\", CLASS.axis + ' ' + CLASS.axisX)\n\t            .attr(\"clip-path\", $$.clipPathForXAxis)\n\t            .attr(\"transform\", $$.getTranslate('x'))\n\t            .style(\"visibility\", config.axis_x_show ? 'visible' : 'hidden');\n\t        $$.axes.x.append(\"text\")\n\t            .attr(\"class\", CLASS.axisXLabel)\n\t            .attr(\"transform\", config.axis_rotated ? \"rotate(-90)\" : \"\")\n\t            .style(\"text-anchor\", this.textAnchorForXAxisLabel.bind(this));\n\t        $$.axes.y = main.append(\"g\")\n\t            .attr(\"class\", CLASS.axis + ' ' + CLASS.axisY)\n\t            .attr(\"clip-path\", config.axis_y_inner ? \"\" : $$.clipPathForYAxis)\n\t            .attr(\"transform\", $$.getTranslate('y'))\n\t            .style(\"visibility\", config.axis_y_show ? 'visible' : 'hidden');\n\t        $$.axes.y.append(\"text\")\n\t            .attr(\"class\", CLASS.axisYLabel)\n\t            .attr(\"transform\", config.axis_rotated ? \"\" : \"rotate(-90)\")\n\t            .style(\"text-anchor\", this.textAnchorForYAxisLabel.bind(this));\n\t\n\t        $$.axes.y2 = main.append(\"g\")\n\t            .attr(\"class\", CLASS.axis + ' ' + CLASS.axisY2)\n\t            // clip-path?\n\t            .attr(\"transform\", $$.getTranslate('y2'))\n\t            .style(\"visibility\", config.axis_y2_show ? 'visible' : 'hidden');\n\t        $$.axes.y2.append(\"text\")\n\t            .attr(\"class\", CLASS.axisY2Label)\n\t            .attr(\"transform\", config.axis_rotated ? \"\" : \"rotate(-90)\")\n\t            .style(\"text-anchor\", this.textAnchorForY2AxisLabel.bind(this));\n\t    };\n\t    Axis.prototype.getXAxis = function getXAxis(scale, orient, tickFormat, tickValues, withOuterTick, withoutTransition, withoutRotateTickText) {\n\t        var $$ = this.owner, config = $$.config,\n\t            axisParams = {\n\t                isCategory: $$.isCategorized(),\n\t                withOuterTick: withOuterTick,\n\t                tickMultiline: config.axis_x_tick_multiline,\n\t                tickWidth: config.axis_x_tick_width,\n\t                tickTextRotate: withoutRotateTickText ? 0 : config.axis_x_tick_rotate,\n\t                withoutTransition: withoutTransition,\n\t            },\n\t            axis = c3_axis($$.d3, axisParams).scale(scale).orient(orient);\n\t\n\t        if ($$.isTimeSeries() && tickValues) {\n\t            tickValues = tickValues.map(function (v) { return $$.parseDate(v); });\n\t        }\n\t\n\t        // Set tick\n\t        axis.tickFormat(tickFormat).tickValues(tickValues);\n\t        if ($$.isCategorized()) {\n\t            axis.tickCentered(config.axis_x_tick_centered);\n\t            if (isEmpty(config.axis_x_tick_culling)) {\n\t                config.axis_x_tick_culling = false;\n\t            }\n\t        }\n\t\n\t        return axis;\n\t    };\n\t    Axis.prototype.updateXAxisTickValues = function updateXAxisTickValues(targets, axis) {\n\t        var $$ = this.owner, config = $$.config, tickValues;\n\t        if (config.axis_x_tick_fit || config.axis_x_tick_count) {\n\t            tickValues = this.generateTickValues($$.mapTargetsToUniqueXs(targets), config.axis_x_tick_count, $$.isTimeSeries());\n\t        }\n\t        if (axis) {\n\t            axis.tickValues(tickValues);\n\t        } else {\n\t            $$.xAxis.tickValues(tickValues);\n\t            $$.subXAxis.tickValues(tickValues);\n\t        }\n\t        return tickValues;\n\t    };\n\t    Axis.prototype.getYAxis = function getYAxis(scale, orient, tickFormat, tickValues, withOuterTick, withoutTransition) {\n\t        var axisParams = {\n\t            withOuterTick: withOuterTick,\n\t            withoutTransition: withoutTransition,\n\t        },\n\t            $$ = this.owner,\n\t            d3 = $$.d3,\n\t            config = $$.config,\n\t            axis = c3_axis(d3, axisParams).scale(scale).orient(orient).tickFormat(tickFormat);\n\t        if ($$.isTimeSeriesY()) {\n\t            axis.ticks(d3.time[config.axis_y_tick_time_value], config.axis_y_tick_time_interval);\n\t        } else {\n\t            axis.tickValues(tickValues);\n\t        }\n\t        return axis;\n\t    };\n\t    Axis.prototype.getId = function getId(id) {\n\t        var config = this.owner.config;\n\t        return id in config.data_axes ? config.data_axes[id] : 'y';\n\t    };\n\t    Axis.prototype.getXAxisTickFormat = function getXAxisTickFormat() {\n\t        var $$ = this.owner, config = $$.config,\n\t            format = $$.isTimeSeries() ? $$.defaultAxisTimeFormat : $$.isCategorized() ? $$.categoryName : function (v) { return v < 0 ? v.toFixed(0) : v; };\n\t        if (config.axis_x_tick_format) {\n\t            if (isFunction(config.axis_x_tick_format)) {\n\t                format = config.axis_x_tick_format;\n\t            } else if ($$.isTimeSeries()) {\n\t                format = function (date) {\n\t                    return date ? $$.axisTimeFormat(config.axis_x_tick_format)(date) : \"\";\n\t                };\n\t            }\n\t        }\n\t        return isFunction(format) ? function (v) { return format.call($$, v); } : format;\n\t    };\n\t    Axis.prototype.getTickValues = function getTickValues(tickValues, axis) {\n\t        return tickValues ? tickValues : axis ? axis.tickValues() : undefined;\n\t    };\n\t    Axis.prototype.getXAxisTickValues = function getXAxisTickValues() {\n\t        return this.getTickValues(this.owner.config.axis_x_tick_values, this.owner.xAxis);\n\t    };\n\t    Axis.prototype.getYAxisTickValues = function getYAxisTickValues() {\n\t        return this.getTickValues(this.owner.config.axis_y_tick_values, this.owner.yAxis);\n\t    };\n\t    Axis.prototype.getY2AxisTickValues = function getY2AxisTickValues() {\n\t        return this.getTickValues(this.owner.config.axis_y2_tick_values, this.owner.y2Axis);\n\t    };\n\t    Axis.prototype.getLabelOptionByAxisId = function getLabelOptionByAxisId(axisId) {\n\t        var $$ = this.owner, config = $$.config, option;\n\t        if (axisId === 'y') {\n\t            option = config.axis_y_label;\n\t        } else if (axisId === 'y2') {\n\t            option = config.axis_y2_label;\n\t        } else if (axisId === 'x') {\n\t            option = config.axis_x_label;\n\t        }\n\t        return option;\n\t    };\n\t    Axis.prototype.getLabelText = function getLabelText(axisId) {\n\t        var option = this.getLabelOptionByAxisId(axisId);\n\t        return isString(option) ? option : option ? option.text : null;\n\t    };\n\t    Axis.prototype.setLabelText = function setLabelText(axisId, text) {\n\t        var $$ = this.owner, config = $$.config,\n\t            option = this.getLabelOptionByAxisId(axisId);\n\t        if (isString(option)) {\n\t            if (axisId === 'y') {\n\t                config.axis_y_label = text;\n\t            } else if (axisId === 'y2') {\n\t                config.axis_y2_label = text;\n\t            } else if (axisId === 'x') {\n\t                config.axis_x_label = text;\n\t            }\n\t        } else if (option) {\n\t            option.text = text;\n\t        }\n\t    };\n\t    Axis.prototype.getLabelPosition = function getLabelPosition(axisId, defaultPosition) {\n\t        var option = this.getLabelOptionByAxisId(axisId),\n\t            position = (option && typeof option === 'object' && option.position) ? option.position : defaultPosition;\n\t        return {\n\t            isInner: position.indexOf('inner') >= 0,\n\t            isOuter: position.indexOf('outer') >= 0,\n\t            isLeft: position.indexOf('left') >= 0,\n\t            isCenter: position.indexOf('center') >= 0,\n\t            isRight: position.indexOf('right') >= 0,\n\t            isTop: position.indexOf('top') >= 0,\n\t            isMiddle: position.indexOf('middle') >= 0,\n\t            isBottom: position.indexOf('bottom') >= 0\n\t        };\n\t    };\n\t    Axis.prototype.getXAxisLabelPosition = function getXAxisLabelPosition() {\n\t        return this.getLabelPosition('x', this.owner.config.axis_rotated ? 'inner-top' : 'inner-right');\n\t    };\n\t    Axis.prototype.getYAxisLabelPosition = function getYAxisLabelPosition() {\n\t        return this.getLabelPosition('y', this.owner.config.axis_rotated ? 'inner-right' : 'inner-top');\n\t    };\n\t    Axis.prototype.getY2AxisLabelPosition = function getY2AxisLabelPosition() {\n\t        return this.getLabelPosition('y2', this.owner.config.axis_rotated ? 'inner-right' : 'inner-top');\n\t    };\n\t    Axis.prototype.getLabelPositionById = function getLabelPositionById(id) {\n\t        return id === 'y2' ? this.getY2AxisLabelPosition() : id === 'y' ? this.getYAxisLabelPosition() : this.getXAxisLabelPosition();\n\t    };\n\t    Axis.prototype.textForXAxisLabel = function textForXAxisLabel() {\n\t        return this.getLabelText('x');\n\t    };\n\t    Axis.prototype.textForYAxisLabel = function textForYAxisLabel() {\n\t        return this.getLabelText('y');\n\t    };\n\t    Axis.prototype.textForY2AxisLabel = function textForY2AxisLabel() {\n\t        return this.getLabelText('y2');\n\t    };\n\t    Axis.prototype.xForAxisLabel = function xForAxisLabel(forHorizontal, position) {\n\t        var $$ = this.owner;\n\t        if (forHorizontal) {\n\t            return position.isLeft ? 0 : position.isCenter ? $$.width / 2 : $$.width;\n\t        } else {\n\t            return position.isBottom ? -$$.height : position.isMiddle ? -$$.height / 2 : 0;\n\t        }\n\t    };\n\t    Axis.prototype.dxForAxisLabel = function dxForAxisLabel(forHorizontal, position) {\n\t        if (forHorizontal) {\n\t            return position.isLeft ? \"0.5em\" : position.isRight ? \"-0.5em\" : \"0\";\n\t        } else {\n\t            return position.isTop ? \"-0.5em\" : position.isBottom ? \"0.5em\" : \"0\";\n\t        }\n\t    };\n\t    Axis.prototype.textAnchorForAxisLabel = function textAnchorForAxisLabel(forHorizontal, position) {\n\t        if (forHorizontal) {\n\t            return position.isLeft ? 'start' : position.isCenter ? 'middle' : 'end';\n\t        } else {\n\t            return position.isBottom ? 'start' : position.isMiddle ? 'middle' : 'end';\n\t        }\n\t    };\n\t    Axis.prototype.xForXAxisLabel = function xForXAxisLabel() {\n\t        return this.xForAxisLabel(!this.owner.config.axis_rotated, this.getXAxisLabelPosition());\n\t    };\n\t    Axis.prototype.xForYAxisLabel = function xForYAxisLabel() {\n\t        return this.xForAxisLabel(this.owner.config.axis_rotated, this.getYAxisLabelPosition());\n\t    };\n\t    Axis.prototype.xForY2AxisLabel = function xForY2AxisLabel() {\n\t        return this.xForAxisLabel(this.owner.config.axis_rotated, this.getY2AxisLabelPosition());\n\t    };\n\t    Axis.prototype.dxForXAxisLabel = function dxForXAxisLabel() {\n\t        return this.dxForAxisLabel(!this.owner.config.axis_rotated, this.getXAxisLabelPosition());\n\t    };\n\t    Axis.prototype.dxForYAxisLabel = function dxForYAxisLabel() {\n\t        return this.dxForAxisLabel(this.owner.config.axis_rotated, this.getYAxisLabelPosition());\n\t    };\n\t    Axis.prototype.dxForY2AxisLabel = function dxForY2AxisLabel() {\n\t        return this.dxForAxisLabel(this.owner.config.axis_rotated, this.getY2AxisLabelPosition());\n\t    };\n\t    Axis.prototype.dyForXAxisLabel = function dyForXAxisLabel() {\n\t        var $$ = this.owner, config = $$.config,\n\t            position = this.getXAxisLabelPosition();\n\t        if (config.axis_rotated) {\n\t            return position.isInner ? \"1.2em\" : -25 - this.getMaxTickWidth('x');\n\t        } else {\n\t            return position.isInner ? \"-0.5em\" : config.axis_x_height ? config.axis_x_height - 10 : \"3em\";\n\t        }\n\t    };\n\t    Axis.prototype.dyForYAxisLabel = function dyForYAxisLabel() {\n\t        var $$ = this.owner,\n\t            position = this.getYAxisLabelPosition();\n\t        if ($$.config.axis_rotated) {\n\t            return position.isInner ? \"-0.5em\" : \"3em\";\n\t        } else {\n\t            return position.isInner ? \"1.2em\" : -10 - ($$.config.axis_y_inner ? 0 : (this.getMaxTickWidth('y') + 10));\n\t        }\n\t    };\n\t    Axis.prototype.dyForY2AxisLabel = function dyForY2AxisLabel() {\n\t        var $$ = this.owner,\n\t            position = this.getY2AxisLabelPosition();\n\t        if ($$.config.axis_rotated) {\n\t            return position.isInner ? \"1.2em\" : \"-2.2em\";\n\t        } else {\n\t            return position.isInner ? \"-0.5em\" : 15 + ($$.config.axis_y2_inner ? 0 : (this.getMaxTickWidth('y2') + 15));\n\t        }\n\t    };\n\t    Axis.prototype.textAnchorForXAxisLabel = function textAnchorForXAxisLabel() {\n\t        var $$ = this.owner;\n\t        return this.textAnchorForAxisLabel(!$$.config.axis_rotated, this.getXAxisLabelPosition());\n\t    };\n\t    Axis.prototype.textAnchorForYAxisLabel = function textAnchorForYAxisLabel() {\n\t        var $$ = this.owner;\n\t        return this.textAnchorForAxisLabel($$.config.axis_rotated, this.getYAxisLabelPosition());\n\t    };\n\t    Axis.prototype.textAnchorForY2AxisLabel = function textAnchorForY2AxisLabel() {\n\t        var $$ = this.owner;\n\t        return this.textAnchorForAxisLabel($$.config.axis_rotated, this.getY2AxisLabelPosition());\n\t    };\n\t    Axis.prototype.getMaxTickWidth = function getMaxTickWidth(id, withoutRecompute) {\n\t        var $$ = this.owner, config = $$.config,\n\t            maxWidth = 0, targetsToShow, scale, axis, dummy, svg;\n\t        if (withoutRecompute && $$.currentMaxTickWidths[id]) {\n\t            return $$.currentMaxTickWidths[id];\n\t        }\n\t        if ($$.svg) {\n\t            targetsToShow = $$.filterTargetsToShow($$.data.targets);\n\t            if (id === 'y') {\n\t                scale = $$.y.copy().domain($$.getYDomain(targetsToShow, 'y'));\n\t                axis = this.getYAxis(scale, $$.yOrient, config.axis_y_tick_format, $$.yAxisTickValues, false, true);\n\t            } else if (id === 'y2') {\n\t                scale = $$.y2.copy().domain($$.getYDomain(targetsToShow, 'y2'));\n\t                axis = this.getYAxis(scale, $$.y2Orient, config.axis_y2_tick_format, $$.y2AxisTickValues, false, true);\n\t            } else {\n\t                scale = $$.x.copy().domain($$.getXDomain(targetsToShow));\n\t                axis = this.getXAxis(scale, $$.xOrient, $$.xAxisTickFormat, $$.xAxisTickValues, false, true, true);\n\t                this.updateXAxisTickValues(targetsToShow, axis);\n\t            }\n\t            dummy = $$.d3.select('body').append('div').classed('c3', true);\n\t            svg = dummy.append(\"svg\").style('visibility', 'hidden').style('position', 'fixed').style('top', 0).style('left', 0),\n\t            svg.append('g').call(axis).each(function () {\n\t                $$.d3.select(this).selectAll('text').each(function () {\n\t                    var box = this.getBoundingClientRect();\n\t                    if (maxWidth < box.width) { maxWidth = box.width; }\n\t                });\n\t                dummy.remove();\n\t            });\n\t        }\n\t        $$.currentMaxTickWidths[id] = maxWidth <= 0 ? $$.currentMaxTickWidths[id] : maxWidth;\n\t        return $$.currentMaxTickWidths[id];\n\t    };\n\t\n\t    Axis.prototype.updateLabels = function updateLabels(withTransition) {\n\t        var $$ = this.owner;\n\t        var axisXLabel = $$.main.select('.' + CLASS.axisX + ' .' + CLASS.axisXLabel),\n\t            axisYLabel = $$.main.select('.' + CLASS.axisY + ' .' + CLASS.axisYLabel),\n\t            axisY2Label = $$.main.select('.' + CLASS.axisY2 + ' .' + CLASS.axisY2Label);\n\t        (withTransition ? axisXLabel.transition() : axisXLabel)\n\t            .attr(\"x\", this.xForXAxisLabel.bind(this))\n\t            .attr(\"dx\", this.dxForXAxisLabel.bind(this))\n\t            .attr(\"dy\", this.dyForXAxisLabel.bind(this))\n\t            .text(this.textForXAxisLabel.bind(this));\n\t        (withTransition ? axisYLabel.transition() : axisYLabel)\n\t            .attr(\"x\", this.xForYAxisLabel.bind(this))\n\t            .attr(\"dx\", this.dxForYAxisLabel.bind(this))\n\t            .attr(\"dy\", this.dyForYAxisLabel.bind(this))\n\t            .text(this.textForYAxisLabel.bind(this));\n\t        (withTransition ? axisY2Label.transition() : axisY2Label)\n\t            .attr(\"x\", this.xForY2AxisLabel.bind(this))\n\t            .attr(\"dx\", this.dxForY2AxisLabel.bind(this))\n\t            .attr(\"dy\", this.dyForY2AxisLabel.bind(this))\n\t            .text(this.textForY2AxisLabel.bind(this));\n\t    };\n\t    Axis.prototype.getPadding = function getPadding(padding, key, defaultValue, domainLength) {\n\t        if (!isValue(padding[key])) {\n\t            return defaultValue;\n\t        }\n\t        if (padding.unit === 'ratio') {\n\t            return padding[key] * domainLength;\n\t        }\n\t        // assume padding is pixels if unit is not specified\n\t        return this.convertPixelsToAxisPadding(padding[key], domainLength);\n\t    };\n\t    Axis.prototype.convertPixelsToAxisPadding = function convertPixelsToAxisPadding(pixels, domainLength) {\n\t        var $$ = this.owner,\n\t            length = $$.config.axis_rotated ? $$.width : $$.height;\n\t        return domainLength * (pixels / length);\n\t    };\n\t    Axis.prototype.generateTickValues = function generateTickValues(values, tickCount, forTimeSeries) {\n\t        var tickValues = values, targetCount, start, end, count, interval, i, tickValue;\n\t        if (tickCount) {\n\t            targetCount = isFunction(tickCount) ? tickCount() : tickCount;\n\t            // compute ticks according to tickCount\n\t            if (targetCount === 1) {\n\t                tickValues = [values[0]];\n\t            } else if (targetCount === 2) {\n\t                tickValues = [values[0], values[values.length - 1]];\n\t            } else if (targetCount > 2) {\n\t                count = targetCount - 2;\n\t                start = values[0];\n\t                end = values[values.length - 1];\n\t                interval = (end - start) / (count + 1);\n\t                // re-construct unique values\n\t                tickValues = [start];\n\t                for (i = 0; i < count; i++) {\n\t                    tickValue = +start + interval * (i + 1);\n\t                    tickValues.push(forTimeSeries ? new Date(tickValue) : tickValue);\n\t                }\n\t                tickValues.push(end);\n\t            }\n\t        }\n\t        if (!forTimeSeries) { tickValues = tickValues.sort(function (a, b) { return a - b; }); }\n\t        return tickValues;\n\t    };\n\t    Axis.prototype.generateTransitions = function generateTransitions(duration) {\n\t        var $$ = this.owner, axes = $$.axes;\n\t        return {\n\t            axisX: duration ? axes.x.transition().duration(duration) : axes.x,\n\t            axisY: duration ? axes.y.transition().duration(duration) : axes.y,\n\t            axisY2: duration ? axes.y2.transition().duration(duration) : axes.y2,\n\t            axisSubX: duration ? axes.subx.transition().duration(duration) : axes.subx\n\t        };\n\t    };\n\t    Axis.prototype.redraw = function redraw(transitions, isHidden) {\n\t        var $$ = this.owner;\n\t        $$.axes.x.style(\"opacity\", isHidden ? 0 : 1);\n\t        $$.axes.y.style(\"opacity\", isHidden ? 0 : 1);\n\t        $$.axes.y2.style(\"opacity\", isHidden ? 0 : 1);\n\t        $$.axes.subx.style(\"opacity\", isHidden ? 0 : 1);\n\t        transitions.axisX.call($$.xAxis);\n\t        transitions.axisY.call($$.yAxis);\n\t        transitions.axisY2.call($$.y2Axis);\n\t        transitions.axisSubX.call($$.subXAxis);\n\t    };\n\t\n\t    c3_chart_internal_fn.getClipPath = function (id) {\n\t        var isIE9 = window.navigator.appVersion.toLowerCase().indexOf(\"msie 9.\") >= 0;\n\t        return \"url(\" + (isIE9 ? \"\" : document.URL.split('#')[0]) + \"#\" + id + \")\";\n\t    };\n\t    c3_chart_internal_fn.appendClip = function (parent, id) {\n\t        return parent.append(\"clipPath\").attr(\"id\", id).append(\"rect\");\n\t    };\n\t    c3_chart_internal_fn.getAxisClipX = function (forHorizontal) {\n\t        // axis line width + padding for left\n\t        var left = Math.max(30, this.margin.left);\n\t        return forHorizontal ? -(1 + left) : -(left - 1);\n\t    };\n\t    c3_chart_internal_fn.getAxisClipY = function (forHorizontal) {\n\t        return forHorizontal ? -20 : -this.margin.top;\n\t    };\n\t    c3_chart_internal_fn.getXAxisClipX = function () {\n\t        var $$ = this;\n\t        return $$.getAxisClipX(!$$.config.axis_rotated);\n\t    };\n\t    c3_chart_internal_fn.getXAxisClipY = function () {\n\t        var $$ = this;\n\t        return $$.getAxisClipY(!$$.config.axis_rotated);\n\t    };\n\t    c3_chart_internal_fn.getYAxisClipX = function () {\n\t        var $$ = this;\n\t        return $$.config.axis_y_inner ? -1 : $$.getAxisClipX($$.config.axis_rotated);\n\t    };\n\t    c3_chart_internal_fn.getYAxisClipY = function () {\n\t        var $$ = this;\n\t        return $$.getAxisClipY($$.config.axis_rotated);\n\t    };\n\t    c3_chart_internal_fn.getAxisClipWidth = function (forHorizontal) {\n\t        var $$ = this,\n\t            left = Math.max(30, $$.margin.left),\n\t            right = Math.max(30, $$.margin.right);\n\t        // width + axis line width + padding for left/right\n\t        return forHorizontal ? $$.width + 2 + left + right : $$.margin.left + 20;\n\t    };\n\t    c3_chart_internal_fn.getAxisClipHeight = function (forHorizontal) {\n\t        // less than 20 is not enough to show the axis label 'outer' without legend\n\t        return (forHorizontal ? this.margin.bottom : (this.margin.top + this.height)) + 20;\n\t    };\n\t    c3_chart_internal_fn.getXAxisClipWidth = function () {\n\t        var $$ = this;\n\t        return $$.getAxisClipWidth(!$$.config.axis_rotated);\n\t    };\n\t    c3_chart_internal_fn.getXAxisClipHeight = function () {\n\t        var $$ = this;\n\t        return $$.getAxisClipHeight(!$$.config.axis_rotated);\n\t    };\n\t    c3_chart_internal_fn.getYAxisClipWidth = function () {\n\t        var $$ = this;\n\t        return $$.getAxisClipWidth($$.config.axis_rotated) + ($$.config.axis_y_inner ? 20 : 0);\n\t    };\n\t    c3_chart_internal_fn.getYAxisClipHeight = function () {\n\t        var $$ = this;\n\t        return $$.getAxisClipHeight($$.config.axis_rotated);\n\t    };\n\t\n\t    c3_chart_internal_fn.initPie = function () {\n\t        var $$ = this, d3 = $$.d3, config = $$.config;\n\t        $$.pie = d3.layout.pie().value(function (d) {\n\t            return d.values.reduce(function (a, b) { return a + b.value; }, 0);\n\t        });\n\t        if (!config.data_order) {\n\t            $$.pie.sort(null);\n\t        }\n\t    };\n\t\n\t    c3_chart_internal_fn.updateRadius = function () {\n\t        var $$ = this, config = $$.config,\n\t            w = config.gauge_width || config.donut_width;\n\t        $$.radiusExpanded = Math.min($$.arcWidth, $$.arcHeight) / 2;\n\t        $$.radius = $$.radiusExpanded * 0.95;\n\t        $$.innerRadiusRatio = w ? ($$.radius - w) / $$.radius : 0.6;\n\t        $$.innerRadius = $$.hasType('donut') || $$.hasType('gauge') ? $$.radius * $$.innerRadiusRatio : 0;\n\t    };\n\t\n\t    c3_chart_internal_fn.updateArc = function () {\n\t        var $$ = this;\n\t        $$.svgArc = $$.getSvgArc();\n\t        $$.svgArcExpanded = $$.getSvgArcExpanded();\n\t        $$.svgArcExpandedSub = $$.getSvgArcExpanded(0.98);\n\t    };\n\t\n\t    c3_chart_internal_fn.updateAngle = function (d) {\n\t        var $$ = this, config = $$.config,\n\t            found = false, index = 0,\n\t            gMin = config.gauge_min, gMax = config.gauge_max, gTic, gValue;\n\t        $$.pie($$.filterTargetsToShow($$.data.targets)).forEach(function (t) {\n\t            if (! found && t.data.id === d.data.id) {\n\t                found = true;\n\t                d = t;\n\t                d.index = index;\n\t            }\n\t            index++;\n\t        });\n\t        if (isNaN(d.startAngle)) {\n\t            d.startAngle = 0;\n\t        }\n\t        if (isNaN(d.endAngle)) {\n\t            d.endAngle = d.startAngle;\n\t        }\n\t        if ($$.isGaugeType(d.data)) {\n\t            gTic = (Math.PI) / (gMax - gMin);\n\t            gValue = d.value < gMin ? 0 : d.value < gMax ? d.value - gMin : (gMax - gMin);\n\t            d.startAngle = -1 * (Math.PI / 2);\n\t            d.endAngle = d.startAngle + gTic * gValue;\n\t        }\n\t        return found ? d : null;\n\t    };\n\t\n\t    c3_chart_internal_fn.getSvgArc = function () {\n\t        var $$ = this,\n\t            arc = $$.d3.svg.arc().outerRadius($$.radius).innerRadius($$.innerRadius),\n\t            newArc = function (d, withoutUpdate) {\n\t                var updated;\n\t                if (withoutUpdate) { return arc(d); } // for interpolate\n\t                updated = $$.updateAngle(d);\n\t                return updated ? arc(updated) : \"M 0 0\";\n\t            };\n\t        // TODO: extends all function\n\t        newArc.centroid = arc.centroid;\n\t        return newArc;\n\t    };\n\t\n\t    c3_chart_internal_fn.getSvgArcExpanded = function (rate) {\n\t        var $$ = this,\n\t            arc = $$.d3.svg.arc().outerRadius($$.radiusExpanded * (rate ? rate : 1)).innerRadius($$.innerRadius);\n\t        return function (d) {\n\t            var updated = $$.updateAngle(d);\n\t            return updated ? arc(updated) : \"M 0 0\";\n\t        };\n\t    };\n\t\n\t    c3_chart_internal_fn.getArc = function (d, withoutUpdate, force) {\n\t        return force || this.isArcType(d.data) ? this.svgArc(d, withoutUpdate) : \"M 0 0\";\n\t    };\n\t\n\t\n\t    c3_chart_internal_fn.transformForArcLabel = function (d) {\n\t        var $$ = this,\n\t            updated = $$.updateAngle(d), c, x, y, h, ratio, translate = \"\";\n\t        if (updated && !$$.hasType('gauge')) {\n\t            c = this.svgArc.centroid(updated);\n\t            x = isNaN(c[0]) ? 0 : c[0];\n\t            y = isNaN(c[1]) ? 0 : c[1];\n\t            h = Math.sqrt(x * x + y * y);\n\t            // TODO: ratio should be an option?\n\t            ratio = $$.radius && h ? (36 / $$.radius > 0.375 ? 1.175 - 36 / $$.radius : 0.8) * $$.radius / h : 0;\n\t            translate = \"translate(\" + (x * ratio) +  ',' + (y * ratio) +  \")\";\n\t        }\n\t        return translate;\n\t    };\n\t\n\t    c3_chart_internal_fn.getArcRatio = function (d) {\n\t        var $$ = this,\n\t            whole = $$.hasType('gauge') ? Math.PI : (Math.PI * 2);\n\t        return d ? (d.endAngle - d.startAngle) / whole : null;\n\t    };\n\t\n\t    c3_chart_internal_fn.convertToArcData = function (d) {\n\t        return this.addName({\n\t            id: d.data.id,\n\t            value: d.value,\n\t            ratio: this.getArcRatio(d),\n\t            index: d.index\n\t        });\n\t    };\n\t\n\t    c3_chart_internal_fn.textForArcLabel = function (d) {\n\t        var $$ = this,\n\t            updated, value, ratio, id, format;\n\t        if (! $$.shouldShowArcLabel()) { return \"\"; }\n\t        updated = $$.updateAngle(d);\n\t        value = updated ? updated.value : null;\n\t        ratio = $$.getArcRatio(updated);\n\t        id = d.data.id;\n\t        if (! $$.hasType('gauge') && ! $$.meetsArcLabelThreshold(ratio)) { return \"\"; }\n\t        format = $$.getArcLabelFormat();\n\t        return format ? format(value, ratio, id) : $$.defaultArcValueFormat(value, ratio);\n\t    };\n\t\n\t    c3_chart_internal_fn.expandArc = function (targetIds) {\n\t        var $$ = this, interval;\n\t\n\t        // MEMO: avoid to cancel transition\n\t        if ($$.transiting) {\n\t            interval = window.setInterval(function () {\n\t                if (!$$.transiting) {\n\t                    window.clearInterval(interval);\n\t                    if ($$.legend.selectAll('.c3-legend-item-focused').size() > 0) {\n\t                        $$.expandArc(targetIds);\n\t                    }\n\t                }\n\t            }, 10);\n\t            return;\n\t        }\n\t\n\t        targetIds = $$.mapToTargetIds(targetIds);\n\t\n\t        $$.svg.selectAll($$.selectorTargets(targetIds, '.' + CLASS.chartArc)).each(function (d) {\n\t            if (! $$.shouldExpand(d.data.id)) { return; }\n\t            $$.d3.select(this).selectAll('path')\n\t                .transition().duration(50)\n\t                .attr(\"d\", $$.svgArcExpanded)\n\t                .transition().duration(100)\n\t                .attr(\"d\", $$.svgArcExpandedSub)\n\t                .each(function (d) {\n\t                    if ($$.isDonutType(d.data)) {\n\t                        // callback here\n\t                    }\n\t                });\n\t        });\n\t    };\n\t\n\t    c3_chart_internal_fn.unexpandArc = function (targetIds) {\n\t        var $$ = this;\n\t\n\t        if ($$.transiting) { return; }\n\t\n\t        targetIds = $$.mapToTargetIds(targetIds);\n\t\n\t        $$.svg.selectAll($$.selectorTargets(targetIds, '.' + CLASS.chartArc)).selectAll('path')\n\t            .transition().duration(50)\n\t            .attr(\"d\", $$.svgArc);\n\t        $$.svg.selectAll('.' + CLASS.arc)\n\t            .style(\"opacity\", 1);\n\t    };\n\t\n\t    c3_chart_internal_fn.shouldExpand = function (id) {\n\t        var $$ = this, config = $$.config;\n\t        return ($$.isDonutType(id) && config.donut_expand) || ($$.isGaugeType(id) && config.gauge_expand) || ($$.isPieType(id) && config.pie_expand);\n\t    };\n\t\n\t    c3_chart_internal_fn.shouldShowArcLabel = function () {\n\t        var $$ = this, config = $$.config, shouldShow = true;\n\t        if ($$.hasType('donut')) {\n\t            shouldShow = config.donut_label_show;\n\t        } else if ($$.hasType('pie')) {\n\t            shouldShow = config.pie_label_show;\n\t        }\n\t        // when gauge, always true\n\t        return shouldShow;\n\t    };\n\t\n\t    c3_chart_internal_fn.meetsArcLabelThreshold = function (ratio) {\n\t        var $$ = this, config = $$.config,\n\t            threshold = $$.hasType('donut') ? config.donut_label_threshold : config.pie_label_threshold;\n\t        return ratio >= threshold;\n\t    };\n\t\n\t    c3_chart_internal_fn.getArcLabelFormat = function () {\n\t        var $$ = this, config = $$.config,\n\t            format = config.pie_label_format;\n\t        if ($$.hasType('gauge')) {\n\t            format = config.gauge_label_format;\n\t        } else if ($$.hasType('donut')) {\n\t            format = config.donut_label_format;\n\t        }\n\t        return format;\n\t    };\n\t\n\t    c3_chart_internal_fn.getArcTitle = function () {\n\t        var $$ = this;\n\t        return $$.hasType('donut') ? $$.config.donut_title : \"\";\n\t    };\n\t\n\t    c3_chart_internal_fn.updateTargetsForArc = function (targets) {\n\t        var $$ = this, main = $$.main,\n\t            mainPieUpdate, mainPieEnter,\n\t            classChartArc = $$.classChartArc.bind($$),\n\t            classArcs = $$.classArcs.bind($$),\n\t            classFocus = $$.classFocus.bind($$);\n\t        mainPieUpdate = main.select('.' + CLASS.chartArcs).selectAll('.' + CLASS.chartArc)\n\t            .data($$.pie(targets))\n\t            .attr(\"class\", function (d) { return classChartArc(d) + classFocus(d.data); });\n\t        mainPieEnter = mainPieUpdate.enter().append(\"g\")\n\t            .attr(\"class\", classChartArc);\n\t        mainPieEnter.append('g')\n\t            .attr('class', classArcs);\n\t        mainPieEnter.append(\"text\")\n\t            .attr(\"dy\", $$.hasType('gauge') ? \"-.1em\" : \".35em\")\n\t            .style(\"opacity\", 0)\n\t            .style(\"text-anchor\", \"middle\")\n\t            .style(\"pointer-events\", \"none\");\n\t        // MEMO: can not keep same color..., but not bad to update color in redraw\n\t        //mainPieUpdate.exit().remove();\n\t    };\n\t\n\t    c3_chart_internal_fn.initArc = function () {\n\t        var $$ = this;\n\t        $$.arcs = $$.main.select('.' + CLASS.chart).append(\"g\")\n\t            .attr(\"class\", CLASS.chartArcs)\n\t            .attr(\"transform\", $$.getTranslate('arc'));\n\t        $$.arcs.append('text')\n\t            .attr('class', CLASS.chartArcsTitle)\n\t            .style(\"text-anchor\", \"middle\")\n\t            .text($$.getArcTitle());\n\t    };\n\t\n\t    c3_chart_internal_fn.redrawArc = function (duration, durationForExit, withTransform) {\n\t        var $$ = this, d3 = $$.d3, config = $$.config, main = $$.main,\n\t            mainArc;\n\t        mainArc = main.selectAll('.' + CLASS.arcs).selectAll('.' + CLASS.arc)\n\t            .data($$.arcData.bind($$));\n\t        mainArc.enter().append('path')\n\t            .attr(\"class\", $$.classArc.bind($$))\n\t            .style(\"fill\", function (d) { return $$.color(d.data); })\n\t            .style(\"cursor\", function (d) { return config.interaction_enabled && config.data_selection_isselectable(d) ? \"pointer\" : null; })\n\t            .style(\"opacity\", 0)\n\t            .each(function (d) {\n\t                if ($$.isGaugeType(d.data)) {\n\t                    d.startAngle = d.endAngle = -1 * (Math.PI / 2);\n\t                }\n\t                this._current = d;\n\t            });\n\t        mainArc\n\t            .attr(\"transform\", function (d) { return !$$.isGaugeType(d.data) && withTransform ? \"scale(0)\" : \"\"; })\n\t            .style(\"opacity\", function (d) { return d === this._current ? 0 : 1; })\n\t            .on('mouseover', config.interaction_enabled ? function (d) {\n\t                var updated, arcData;\n\t                if ($$.transiting) { // skip while transiting\n\t                    return;\n\t                }\n\t                updated = $$.updateAngle(d);\n\t                arcData = $$.convertToArcData(updated);\n\t                // transitions\n\t                $$.expandArc(updated.data.id);\n\t                $$.api.focus(updated.data.id);\n\t                $$.toggleFocusLegend(updated.data.id, true);\n\t                $$.config.data_onmouseover(arcData, this);\n\t            } : null)\n\t            .on('mousemove', config.interaction_enabled ? function (d) {\n\t                var updated = $$.updateAngle(d),\n\t                    arcData = $$.convertToArcData(updated),\n\t                    selectedData = [arcData];\n\t                $$.showTooltip(selectedData, this);\n\t            } : null)\n\t            .on('mouseout', config.interaction_enabled ? function (d) {\n\t                var updated, arcData;\n\t                if ($$.transiting) { // skip while transiting\n\t                    return;\n\t                }\n\t                updated = $$.updateAngle(d);\n\t                arcData = $$.convertToArcData(updated);\n\t                // transitions\n\t                $$.unexpandArc(updated.data.id);\n\t                $$.api.revert();\n\t                $$.revertLegend();\n\t                $$.hideTooltip();\n\t                $$.config.data_onmouseout(arcData, this);\n\t            } : null)\n\t            .on('click', config.interaction_enabled ? function (d, i) {\n\t                var updated = $$.updateAngle(d),\n\t                    arcData = $$.convertToArcData(updated);\n\t                if ($$.toggleShape) { $$.toggleShape(this, arcData, i); }\n\t                $$.config.data_onclick.call($$.api, arcData, this);\n\t            } : null)\n\t            .each(function () { $$.transiting = true; })\n\t            .transition().duration(duration)\n\t            .attrTween(\"d\", function (d) {\n\t                var updated = $$.updateAngle(d), interpolate;\n\t                if (! updated) {\n\t                    return function () { return \"M 0 0\"; };\n\t                }\n\t                //                if (this._current === d) {\n\t                //                    this._current = {\n\t                //                        startAngle: Math.PI*2,\n\t                //                        endAngle: Math.PI*2,\n\t                //                    };\n\t                //                }\n\t                if (isNaN(this._current.startAngle)) {\n\t                    this._current.startAngle = 0;\n\t                }\n\t                if (isNaN(this._current.endAngle)) {\n\t                    this._current.endAngle = this._current.startAngle;\n\t                }\n\t                interpolate = d3.interpolate(this._current, updated);\n\t                this._current = interpolate(0);\n\t                return function (t) {\n\t                    var interpolated = interpolate(t);\n\t                    interpolated.data = d.data; // data.id will be updated by interporator\n\t                    return $$.getArc(interpolated, true);\n\t                };\n\t            })\n\t            .attr(\"transform\", withTransform ? \"scale(1)\" : \"\")\n\t            .style(\"fill\", function (d) {\n\t                return $$.levelColor ? $$.levelColor(d.data.values[0].value) : $$.color(d.data.id);\n\t            }) // Where gauge reading color would receive customization.\n\t            .style(\"opacity\", 1)\n\t            .call($$.endall, function () {\n\t                $$.transiting = false;\n\t            });\n\t        mainArc.exit().transition().duration(durationForExit)\n\t            .style('opacity', 0)\n\t            .remove();\n\t        main.selectAll('.' + CLASS.chartArc).select('text')\n\t            .style(\"opacity\", 0)\n\t            .attr('class', function (d) { return $$.isGaugeType(d.data) ? CLASS.gaugeValue : ''; })\n\t            .text($$.textForArcLabel.bind($$))\n\t            .attr(\"transform\", $$.transformForArcLabel.bind($$))\n\t            .style('font-size', function (d) { return $$.isGaugeType(d.data) ? Math.round($$.radius / 5) + 'px' : ''; })\n\t          .transition().duration(duration)\n\t            .style(\"opacity\", function (d) { return $$.isTargetToShow(d.data.id) && $$.isArcType(d.data) ? 1 : 0; });\n\t        main.select('.' + CLASS.chartArcsTitle)\n\t            .style(\"opacity\", $$.hasType('donut') || $$.hasType('gauge') ? 1 : 0);\n\t\n\t        if ($$.hasType('gauge')) {\n\t            $$.arcs.select('.' + CLASS.chartArcsBackground)\n\t                .attr(\"d\", function () {\n\t                    var d = {\n\t                        data: [{value: config.gauge_max}],\n\t                        startAngle: -1 * (Math.PI / 2),\n\t                        endAngle: Math.PI / 2\n\t                    };\n\t                    return $$.getArc(d, true, true);\n\t                });\n\t            $$.arcs.select('.' + CLASS.chartArcsGaugeUnit)\n\t                .attr(\"dy\", \".75em\")\n\t                .text(config.gauge_label_show ? config.gauge_units : '');\n\t            $$.arcs.select('.' + CLASS.chartArcsGaugeMin)\n\t                .attr(\"dx\", -1 * ($$.innerRadius + (($$.radius - $$.innerRadius) / 2)) + \"px\")\n\t                .attr(\"dy\", \"1.2em\")\n\t                .text(config.gauge_label_show ? config.gauge_min : '');\n\t            $$.arcs.select('.' + CLASS.chartArcsGaugeMax)\n\t                .attr(\"dx\", $$.innerRadius + (($$.radius - $$.innerRadius) / 2) + \"px\")\n\t                .attr(\"dy\", \"1.2em\")\n\t                .text(config.gauge_label_show ? config.gauge_max : '');\n\t        }\n\t    };\n\t    c3_chart_internal_fn.initGauge = function () {\n\t        var arcs = this.arcs;\n\t        if (this.hasType('gauge')) {\n\t            arcs.append('path')\n\t                .attr(\"class\", CLASS.chartArcsBackground);\n\t            arcs.append(\"text\")\n\t                .attr(\"class\", CLASS.chartArcsGaugeUnit)\n\t                .style(\"text-anchor\", \"middle\")\n\t                .style(\"pointer-events\", \"none\");\n\t            arcs.append(\"text\")\n\t                .attr(\"class\", CLASS.chartArcsGaugeMin)\n\t                .style(\"text-anchor\", \"middle\")\n\t                .style(\"pointer-events\", \"none\");\n\t            arcs.append(\"text\")\n\t                .attr(\"class\", CLASS.chartArcsGaugeMax)\n\t                .style(\"text-anchor\", \"middle\")\n\t                .style(\"pointer-events\", \"none\");\n\t        }\n\t    };\n\t    c3_chart_internal_fn.getGaugeLabelHeight = function () {\n\t        return this.config.gauge_label_show ? 20 : 0;\n\t    };\n\t\n\t    c3_chart_internal_fn.initRegion = function () {\n\t        var $$ = this;\n\t        $$.region = $$.main.append('g')\n\t            .attr(\"clip-path\", $$.clipPath)\n\t            .attr(\"class\", CLASS.regions);\n\t    };\n\t    c3_chart_internal_fn.updateRegion = function (duration) {\n\t        var $$ = this, config = $$.config;\n\t\n\t        // hide if arc type\n\t        $$.region.style('visibility', $$.hasArcType() ? 'hidden' : 'visible');\n\t\n\t        $$.mainRegion = $$.main.select('.' + CLASS.regions).selectAll('.' + CLASS.region)\n\t            .data(config.regions);\n\t        $$.mainRegion.enter().append('g')\n\t            .attr('class', $$.classRegion.bind($$))\n\t          .append('rect')\n\t            .style(\"fill-opacity\", 0);\n\t        $$.mainRegion.exit().transition().duration(duration)\n\t            .style(\"opacity\", 0)\n\t            .remove();\n\t    };\n\t    c3_chart_internal_fn.redrawRegion = function (withTransition) {\n\t        var $$ = this,\n\t            regions = $$.mainRegion.selectAll('rect'),\n\t            x = $$.regionX.bind($$),\n\t            y = $$.regionY.bind($$),\n\t            w = $$.regionWidth.bind($$),\n\t            h = $$.regionHeight.bind($$);\n\t        return [\n\t            (withTransition ? regions.transition() : regions)\n\t                .attr(\"x\", x)\n\t                .attr(\"y\", y)\n\t                .attr(\"width\", w)\n\t                .attr(\"height\", h)\n\t                .style(\"fill-opacity\", function (d) { return isValue(d.opacity) ? d.opacity : 0.1; })\n\t        ];\n\t    };\n\t    c3_chart_internal_fn.regionX = function (d) {\n\t        var $$ = this, config = $$.config,\n\t            xPos, yScale = d.axis === 'y' ? $$.y : $$.y2;\n\t        if (d.axis === 'y' || d.axis === 'y2') {\n\t            xPos = config.axis_rotated ? ('start' in d ? yScale(d.start) : 0) : 0;\n\t        } else {\n\t            xPos = config.axis_rotated ? 0 : ('start' in d ? $$.x($$.isTimeSeries() ? $$.parseDate(d.start) : d.start) : 0);\n\t        }\n\t        return xPos;\n\t    };\n\t    c3_chart_internal_fn.regionY = function (d) {\n\t        var $$ = this, config = $$.config,\n\t            yPos, yScale = d.axis === 'y' ? $$.y : $$.y2;\n\t        if (d.axis === 'y' || d.axis === 'y2') {\n\t            yPos = config.axis_rotated ? 0 : ('end' in d ? yScale(d.end) : 0);\n\t        } else {\n\t            yPos = config.axis_rotated ? ('start' in d ? $$.x($$.isTimeSeries() ? $$.parseDate(d.start) : d.start) : 0) : 0;\n\t        }\n\t        return yPos;\n\t    };\n\t    c3_chart_internal_fn.regionWidth = function (d) {\n\t        var $$ = this, config = $$.config,\n\t            start = $$.regionX(d), end, yScale = d.axis === 'y' ? $$.y : $$.y2;\n\t        if (d.axis === 'y' || d.axis === 'y2') {\n\t            end = config.axis_rotated ? ('end' in d ? yScale(d.end) : $$.width) : $$.width;\n\t        } else {\n\t            end = config.axis_rotated ? $$.width : ('end' in d ? $$.x($$.isTimeSeries() ? $$.parseDate(d.end) : d.end) : $$.width);\n\t        }\n\t        return end < start ? 0 : end - start;\n\t    };\n\t    c3_chart_internal_fn.regionHeight = function (d) {\n\t        var $$ = this, config = $$.config,\n\t            start = this.regionY(d), end, yScale = d.axis === 'y' ? $$.y : $$.y2;\n\t        if (d.axis === 'y' || d.axis === 'y2') {\n\t            end = config.axis_rotated ? $$.height : ('start' in d ? yScale(d.start) : $$.height);\n\t        } else {\n\t            end = config.axis_rotated ? ('end' in d ? $$.x($$.isTimeSeries() ? $$.parseDate(d.end) : d.end) : $$.height) : $$.height;\n\t        }\n\t        return end < start ? 0 : end - start;\n\t    };\n\t    c3_chart_internal_fn.isRegionOnX = function (d) {\n\t        return !d.axis || d.axis === 'x';\n\t    };\n\t\n\t    c3_chart_internal_fn.drag = function (mouse) {\n\t        var $$ = this, config = $$.config, main = $$.main, d3 = $$.d3;\n\t        var sx, sy, mx, my, minX, maxX, minY, maxY;\n\t\n\t        if ($$.hasArcType()) { return; }\n\t        if (! config.data_selection_enabled) { return; } // do nothing if not selectable\n\t        if (config.zoom_enabled && ! $$.zoom.altDomain) { return; } // skip if zoomable because of conflict drag dehavior\n\t        if (!config.data_selection_multiple) { return; } // skip when single selection because drag is used for multiple selection\n\t\n\t        sx = $$.dragStart[0];\n\t        sy = $$.dragStart[1];\n\t        mx = mouse[0];\n\t        my = mouse[1];\n\t        minX = Math.min(sx, mx);\n\t        maxX = Math.max(sx, mx);\n\t        minY = (config.data_selection_grouped) ? $$.margin.top : Math.min(sy, my);\n\t        maxY = (config.data_selection_grouped) ? $$.height : Math.max(sy, my);\n\t\n\t        main.select('.' + CLASS.dragarea)\n\t            .attr('x', minX)\n\t            .attr('y', minY)\n\t            .attr('width', maxX - minX)\n\t            .attr('height', maxY - minY);\n\t        // TODO: binary search when multiple xs\n\t        main.selectAll('.' + CLASS.shapes).selectAll('.' + CLASS.shape)\n\t            .filter(function (d) { return config.data_selection_isselectable(d); })\n\t            .each(function (d, i) {\n\t                var shape = d3.select(this),\n\t                    isSelected = shape.classed(CLASS.SELECTED),\n\t                    isIncluded = shape.classed(CLASS.INCLUDED),\n\t                    _x, _y, _w, _h, toggle, isWithin = false, box;\n\t                if (shape.classed(CLASS.circle)) {\n\t                    _x = shape.attr(\"cx\") * 1;\n\t                    _y = shape.attr(\"cy\") * 1;\n\t                    toggle = $$.togglePoint;\n\t                    isWithin = minX < _x && _x < maxX && minY < _y && _y < maxY;\n\t                }\n\t                else if (shape.classed(CLASS.bar)) {\n\t                    box = getPathBox(this);\n\t                    _x = box.x;\n\t                    _y = box.y;\n\t                    _w = box.width;\n\t                    _h = box.height;\n\t                    toggle = $$.togglePath;\n\t                    isWithin = !(maxX < _x || _x + _w < minX) && !(maxY < _y || _y + _h < minY);\n\t                } else {\n\t                    // line/area selection not supported yet\n\t                    return;\n\t                }\n\t                if (isWithin ^ isIncluded) {\n\t                    shape.classed(CLASS.INCLUDED, !isIncluded);\n\t                    // TODO: included/unincluded callback here\n\t                    shape.classed(CLASS.SELECTED, !isSelected);\n\t                    toggle.call($$, !isSelected, shape, d, i);\n\t                }\n\t            });\n\t    };\n\t\n\t    c3_chart_internal_fn.dragstart = function (mouse) {\n\t        var $$ = this, config = $$.config;\n\t        if ($$.hasArcType()) { return; }\n\t        if (! config.data_selection_enabled) { return; } // do nothing if not selectable\n\t        $$.dragStart = mouse;\n\t        $$.main.select('.' + CLASS.chart).append('rect')\n\t            .attr('class', CLASS.dragarea)\n\t            .style('opacity', 0.1);\n\t        $$.dragging = true;\n\t    };\n\t\n\t    c3_chart_internal_fn.dragend = function () {\n\t        var $$ = this, config = $$.config;\n\t        if ($$.hasArcType()) { return; }\n\t        if (! config.data_selection_enabled) { return; } // do nothing if not selectable\n\t        $$.main.select('.' + CLASS.dragarea)\n\t            .transition().duration(100)\n\t            .style('opacity', 0)\n\t            .remove();\n\t        $$.main.selectAll('.' + CLASS.shape)\n\t            .classed(CLASS.INCLUDED, false);\n\t        $$.dragging = false;\n\t    };\n\t\n\t    c3_chart_internal_fn.selectPoint = function (target, d, i) {\n\t        var $$ = this, config = $$.config,\n\t            cx = (config.axis_rotated ? $$.circleY : $$.circleX).bind($$),\n\t            cy = (config.axis_rotated ? $$.circleX : $$.circleY).bind($$),\n\t            r = $$.pointSelectR.bind($$);\n\t        config.data_onselected.call($$.api, d, target.node());\n\t        // add selected-circle on low layer g\n\t        $$.main.select('.' + CLASS.selectedCircles + $$.getTargetSelectorSuffix(d.id)).selectAll('.' + CLASS.selectedCircle + '-' + i)\n\t            .data([d])\n\t            .enter().append('circle')\n\t            .attr(\"class\", function () { return $$.generateClass(CLASS.selectedCircle, i); })\n\t            .attr(\"cx\", cx)\n\t            .attr(\"cy\", cy)\n\t            .attr(\"stroke\", function () { return $$.color(d); })\n\t            .attr(\"r\", function (d) { return $$.pointSelectR(d) * 1.4; })\n\t            .transition().duration(100)\n\t            .attr(\"r\", r);\n\t    };\n\t    c3_chart_internal_fn.unselectPoint = function (target, d, i) {\n\t        var $$ = this;\n\t        $$.config.data_onunselected(d, target.node());\n\t        // remove selected-circle from low layer g\n\t        $$.main.select('.' + CLASS.selectedCircles + $$.getTargetSelectorSuffix(d.id)).selectAll('.' + CLASS.selectedCircle + '-' + i)\n\t            .transition().duration(100).attr('r', 0)\n\t            .remove();\n\t    };\n\t    c3_chart_internal_fn.togglePoint = function (selected, target, d, i) {\n\t        selected ? this.selectPoint(target, d, i) : this.unselectPoint(target, d, i);\n\t    };\n\t    c3_chart_internal_fn.selectPath = function (target, d) {\n\t        var $$ = this;\n\t        $$.config.data_onselected.call($$, d, target.node());\n\t        target.transition().duration(100)\n\t            .style(\"fill\", function () { return $$.d3.rgb($$.color(d)).brighter(0.75); });\n\t    };\n\t    c3_chart_internal_fn.unselectPath = function (target, d) {\n\t        var $$ = this;\n\t        $$.config.data_onunselected.call($$, d, target.node());\n\t        target.transition().duration(100)\n\t            .style(\"fill\", function () { return $$.color(d); });\n\t    };\n\t    c3_chart_internal_fn.togglePath = function (selected, target, d, i) {\n\t        selected ? this.selectPath(target, d, i) : this.unselectPath(target, d, i);\n\t    };\n\t    c3_chart_internal_fn.getToggle = function (that, d) {\n\t        var $$ = this, toggle;\n\t        if (that.nodeName === 'circle') {\n\t            if ($$.isStepType(d)) {\n\t                // circle is hidden in step chart, so treat as within the click area\n\t                toggle = function () {}; // TODO: how to select step chart?\n\t            } else {\n\t                toggle = $$.togglePoint;\n\t            }\n\t        }\n\t        else if (that.nodeName === 'path') {\n\t            toggle = $$.togglePath;\n\t        }\n\t        return toggle;\n\t    };\n\t    c3_chart_internal_fn.toggleShape = function (that, d, i) {\n\t        var $$ = this, d3 = $$.d3, config = $$.config,\n\t            shape = d3.select(that), isSelected = shape.classed(CLASS.SELECTED),\n\t            toggle = $$.getToggle(that, d).bind($$);\n\t\n\t        if (config.data_selection_enabled && config.data_selection_isselectable(d)) {\n\t            if (!config.data_selection_multiple) {\n\t                $$.main.selectAll('.' + CLASS.shapes + (config.data_selection_grouped ? $$.getTargetSelectorSuffix(d.id) : \"\")).selectAll('.' + CLASS.shape).each(function (d, i) {\n\t                    var shape = d3.select(this);\n\t                    if (shape.classed(CLASS.SELECTED)) { toggle(false, shape.classed(CLASS.SELECTED, false), d, i); }\n\t                });\n\t            }\n\t            shape.classed(CLASS.SELECTED, !isSelected);\n\t            toggle(!isSelected, shape, d, i);\n\t        }\n\t    };\n\t\n\t    c3_chart_internal_fn.initBrush = function () {\n\t        var $$ = this, d3 = $$.d3;\n\t        $$.brush = d3.svg.brush().on(\"brush\", function () { $$.redrawForBrush(); });\n\t        $$.brush.update = function () {\n\t            if ($$.context) { $$.context.select('.' + CLASS.brush).call(this); }\n\t            return this;\n\t        };\n\t        $$.brush.scale = function (scale) {\n\t            return $$.config.axis_rotated ? this.y(scale) : this.x(scale);\n\t        };\n\t    };\n\t    c3_chart_internal_fn.initSubchart = function () {\n\t        var $$ = this, config = $$.config,\n\t            context = $$.context = $$.svg.append(\"g\").attr(\"transform\", $$.getTranslate('context'));\n\t\n\t        context.style('visibility', config.subchart_show ? 'visible' : 'hidden');\n\t\n\t        // Define g for chart area\n\t        context.append('g')\n\t            .attr(\"clip-path\", $$.clipPathForSubchart)\n\t            .attr('class', CLASS.chart);\n\t\n\t        // Define g for bar chart area\n\t        context.select('.' + CLASS.chart).append(\"g\")\n\t            .attr(\"class\", CLASS.chartBars);\n\t\n\t        // Define g for line chart area\n\t        context.select('.' + CLASS.chart).append(\"g\")\n\t            .attr(\"class\", CLASS.chartLines);\n\t\n\t        // Add extent rect for Brush\n\t        context.append(\"g\")\n\t            .attr(\"clip-path\", $$.clipPath)\n\t            .attr(\"class\", CLASS.brush)\n\t            .call($$.brush);\n\t\n\t        // ATTENTION: This must be called AFTER chart added\n\t        // Add Axis\n\t        $$.axes.subx = context.append(\"g\")\n\t            .attr(\"class\", CLASS.axisX)\n\t            .attr(\"transform\", $$.getTranslate('subx'))\n\t            .attr(\"clip-path\", config.axis_rotated ? \"\" : $$.clipPathForXAxis);\n\t    };\n\t    c3_chart_internal_fn.updateTargetsForSubchart = function (targets) {\n\t        var $$ = this, context = $$.context, config = $$.config,\n\t            contextLineEnter, contextLineUpdate, contextBarEnter, contextBarUpdate,\n\t            classChartBar = $$.classChartBar.bind($$),\n\t            classBars = $$.classBars.bind($$),\n\t            classChartLine = $$.classChartLine.bind($$),\n\t            classLines = $$.classLines.bind($$),\n\t            classAreas = $$.classAreas.bind($$);\n\t\n\t        if (config.subchart_show) {\n\t            //-- Bar --//\n\t            contextBarUpdate = context.select('.' + CLASS.chartBars).selectAll('.' + CLASS.chartBar)\n\t                .data(targets)\n\t                .attr('class', classChartBar);\n\t            contextBarEnter = contextBarUpdate.enter().append('g')\n\t                .style('opacity', 0)\n\t                .attr('class', classChartBar);\n\t            // Bars for each data\n\t            contextBarEnter.append('g')\n\t                .attr(\"class\", classBars);\n\t\n\t            //-- Line --//\n\t            contextLineUpdate = context.select('.' + CLASS.chartLines).selectAll('.' + CLASS.chartLine)\n\t                .data(targets)\n\t                .attr('class', classChartLine);\n\t            contextLineEnter = contextLineUpdate.enter().append('g')\n\t                .style('opacity', 0)\n\t                .attr('class', classChartLine);\n\t            // Lines for each data\n\t            contextLineEnter.append(\"g\")\n\t                .attr(\"class\", classLines);\n\t            // Area\n\t            contextLineEnter.append(\"g\")\n\t                .attr(\"class\", classAreas);\n\t\n\t            //-- Brush --//\n\t            context.selectAll('.' + CLASS.brush + ' rect')\n\t                .attr(config.axis_rotated ? \"width\" : \"height\", config.axis_rotated ? $$.width2 : $$.height2);\n\t        }\n\t    };\n\t    c3_chart_internal_fn.updateBarForSubchart = function (durationForExit) {\n\t        var $$ = this;\n\t        $$.contextBar = $$.context.selectAll('.' + CLASS.bars).selectAll('.' + CLASS.bar)\n\t            .data($$.barData.bind($$));\n\t        $$.contextBar.enter().append('path')\n\t            .attr(\"class\", $$.classBar.bind($$))\n\t            .style(\"stroke\", 'none')\n\t            .style(\"fill\", $$.color);\n\t        $$.contextBar\n\t            .style(\"opacity\", $$.initialOpacity.bind($$));\n\t        $$.contextBar.exit().transition().duration(durationForExit)\n\t            .style('opacity', 0)\n\t            .remove();\n\t    };\n\t    c3_chart_internal_fn.redrawBarForSubchart = function (drawBarOnSub, withTransition, duration) {\n\t        (withTransition ? this.contextBar.transition().duration(duration) : this.contextBar)\n\t            .attr('d', drawBarOnSub)\n\t            .style('opacity', 1);\n\t    };\n\t    c3_chart_internal_fn.updateLineForSubchart = function (durationForExit) {\n\t        var $$ = this;\n\t        $$.contextLine = $$.context.selectAll('.' + CLASS.lines).selectAll('.' + CLASS.line)\n\t            .data($$.lineData.bind($$));\n\t        $$.contextLine.enter().append('path')\n\t            .attr('class', $$.classLine.bind($$))\n\t            .style('stroke', $$.color);\n\t        $$.contextLine\n\t            .style(\"opacity\", $$.initialOpacity.bind($$));\n\t        $$.contextLine.exit().transition().duration(durationForExit)\n\t            .style('opacity', 0)\n\t            .remove();\n\t    };\n\t    c3_chart_internal_fn.redrawLineForSubchart = function (drawLineOnSub, withTransition, duration) {\n\t        (withTransition ? this.contextLine.transition().duration(duration) : this.contextLine)\n\t            .attr(\"d\", drawLineOnSub)\n\t            .style('opacity', 1);\n\t    };\n\t    c3_chart_internal_fn.updateAreaForSubchart = function (durationForExit) {\n\t        var $$ = this, d3 = $$.d3;\n\t        $$.contextArea = $$.context.selectAll('.' + CLASS.areas).selectAll('.' + CLASS.area)\n\t            .data($$.lineData.bind($$));\n\t        $$.contextArea.enter().append('path')\n\t            .attr(\"class\", $$.classArea.bind($$))\n\t            .style(\"fill\", $$.color)\n\t            .style(\"opacity\", function () { $$.orgAreaOpacity = +d3.select(this).style('opacity'); return 0; });\n\t        $$.contextArea\n\t            .style(\"opacity\", 0);\n\t        $$.contextArea.exit().transition().duration(durationForExit)\n\t            .style('opacity', 0)\n\t            .remove();\n\t    };\n\t    c3_chart_internal_fn.redrawAreaForSubchart = function (drawAreaOnSub, withTransition, duration) {\n\t        (withTransition ? this.contextArea.transition().duration(duration) : this.contextArea)\n\t            .attr(\"d\", drawAreaOnSub)\n\t            .style(\"fill\", this.color)\n\t            .style(\"opacity\", this.orgAreaOpacity);\n\t    };\n\t    c3_chart_internal_fn.redrawSubchart = function (withSubchart, transitions, duration, durationForExit, areaIndices, barIndices, lineIndices) {\n\t        var $$ = this, d3 = $$.d3, config = $$.config,\n\t            drawAreaOnSub, drawBarOnSub, drawLineOnSub;\n\t\n\t        $$.context.style('visibility', config.subchart_show ? 'visible' : 'hidden');\n\t\n\t        // subchart\n\t        if (config.subchart_show) {\n\t            // reflect main chart to extent on subchart if zoomed\n\t            if (d3.event && d3.event.type === 'zoom') {\n\t                $$.brush.extent($$.x.orgDomain()).update();\n\t            }\n\t            // update subchart elements if needed\n\t            if (withSubchart) {\n\t\n\t                // extent rect\n\t                if (!$$.brush.empty()) {\n\t                    $$.brush.extent($$.x.orgDomain()).update();\n\t                }\n\t                // setup drawer - MEMO: this must be called after axis updated\n\t                drawAreaOnSub = $$.generateDrawArea(areaIndices, true);\n\t                drawBarOnSub = $$.generateDrawBar(barIndices, true);\n\t                drawLineOnSub = $$.generateDrawLine(lineIndices, true);\n\t\n\t                $$.updateBarForSubchart(duration);\n\t                $$.updateLineForSubchart(duration);\n\t                $$.updateAreaForSubchart(duration);\n\t\n\t                $$.redrawBarForSubchart(drawBarOnSub, duration, duration);\n\t                $$.redrawLineForSubchart(drawLineOnSub, duration, duration);\n\t                $$.redrawAreaForSubchart(drawAreaOnSub, duration, duration);\n\t            }\n\t        }\n\t    };\n\t    c3_chart_internal_fn.redrawForBrush = function () {\n\t        var $$ = this, x = $$.x;\n\t        $$.redraw({\n\t            withTransition: false,\n\t            withY: $$.config.zoom_rescale,\n\t            withSubchart: false,\n\t            withUpdateXDomain: true,\n\t            withDimension: false\n\t        });\n\t        $$.config.subchart_onbrush.call($$.api, x.orgDomain());\n\t    };\n\t    c3_chart_internal_fn.transformContext = function (withTransition, transitions) {\n\t        var $$ = this, subXAxis;\n\t        if (transitions && transitions.axisSubX) {\n\t            subXAxis = transitions.axisSubX;\n\t        } else {\n\t            subXAxis = $$.context.select('.' + CLASS.axisX);\n\t            if (withTransition) { subXAxis = subXAxis.transition(); }\n\t        }\n\t        $$.context.attr(\"transform\", $$.getTranslate('context'));\n\t        subXAxis.attr(\"transform\", $$.getTranslate('subx'));\n\t    };\n\t    c3_chart_internal_fn.getDefaultExtent = function () {\n\t        var $$ = this, config = $$.config,\n\t            extent = isFunction(config.axis_x_extent) ? config.axis_x_extent($$.getXDomain($$.data.targets)) : config.axis_x_extent;\n\t        if ($$.isTimeSeries()) {\n\t            extent = [$$.parseDate(extent[0]), $$.parseDate(extent[1])];\n\t        }\n\t        return extent;\n\t    };\n\t\n\t    c3_chart_internal_fn.initZoom = function () {\n\t        var $$ = this, d3 = $$.d3, config = $$.config, startEvent;\n\t\n\t        $$.zoom = d3.behavior.zoom()\n\t            .on(\"zoomstart\", function () {\n\t                startEvent = d3.event.sourceEvent;\n\t                $$.zoom.altDomain = d3.event.sourceEvent.altKey ? $$.x.orgDomain() : null;\n\t                config.zoom_onzoomstart.call($$.api, d3.event.sourceEvent);\n\t            })\n\t            .on(\"zoom\", function () {\n\t                $$.redrawForZoom.call($$);\n\t            })\n\t            .on('zoomend', function () {\n\t                var event = d3.event.sourceEvent;\n\t                // if click, do nothing. otherwise, click interaction will be canceled.\n\t                if (event && startEvent.clientX === event.clientX && startEvent.clientY === event.clientY) {\n\t                    return;\n\t                }\n\t                $$.redrawEventRect();\n\t                $$.updateZoom();\n\t                config.zoom_onzoomend.call($$.api, $$.x.orgDomain());\n\t            });\n\t        $$.zoom.scale = function (scale) {\n\t            return config.axis_rotated ? this.y(scale) : this.x(scale);\n\t        };\n\t        $$.zoom.orgScaleExtent = function () {\n\t            var extent = config.zoom_extent ? config.zoom_extent : [1, 10];\n\t            return [extent[0], Math.max($$.getMaxDataCount() / extent[1], extent[1])];\n\t        };\n\t        $$.zoom.updateScaleExtent = function () {\n\t            var ratio = diffDomain($$.x.orgDomain()) / diffDomain($$.orgXDomain),\n\t                extent = this.orgScaleExtent();\n\t            this.scaleExtent([extent[0] * ratio, extent[1] * ratio]);\n\t            return this;\n\t        };\n\t    };\n\t    c3_chart_internal_fn.updateZoom = function () {\n\t        var $$ = this, z = $$.config.zoom_enabled ? $$.zoom : function () {};\n\t        $$.main.select('.' + CLASS.zoomRect).call(z).on(\"dblclick.zoom\", null);\n\t        $$.main.selectAll('.' + CLASS.eventRect).call(z).on(\"dblclick.zoom\", null);\n\t    };\n\t    c3_chart_internal_fn.redrawForZoom = function () {\n\t        var $$ = this, d3 = $$.d3, config = $$.config, zoom = $$.zoom, x = $$.x;\n\t        if (!config.zoom_enabled) {\n\t            return;\n\t        }\n\t        if ($$.filterTargetsToShow($$.data.targets).length === 0) {\n\t            return;\n\t        }\n\t        if (d3.event.sourceEvent.type === 'mousemove' && zoom.altDomain) {\n\t            x.domain(zoom.altDomain);\n\t            zoom.scale(x).updateScaleExtent();\n\t            return;\n\t        }\n\t        if ($$.isCategorized() && x.orgDomain()[0] === $$.orgXDomain[0]) {\n\t            x.domain([$$.orgXDomain[0] - 1e-10, x.orgDomain()[1]]);\n\t        }\n\t        $$.redraw({\n\t            withTransition: false,\n\t            withY: config.zoom_rescale,\n\t            withSubchart: false,\n\t            withEventRect: false,\n\t            withDimension: false\n\t        });\n\t        if (d3.event.sourceEvent.type === 'mousemove') {\n\t            $$.cancelClick = true;\n\t        }\n\t        config.zoom_onzoom.call($$.api, x.orgDomain());\n\t    };\n\t\n\t    c3_chart_internal_fn.generateColor = function () {\n\t        var $$ = this, config = $$.config, d3 = $$.d3,\n\t            colors = config.data_colors,\n\t            pattern = notEmpty(config.color_pattern) ? config.color_pattern : d3.scale.category10().range(),\n\t            callback = config.data_color,\n\t            ids = [];\n\t\n\t        return function (d) {\n\t            var id = d.id || (d.data && d.data.id) || d, color;\n\t\n\t            // if callback function is provided\n\t            if (colors[id] instanceof Function) {\n\t                color = colors[id](d);\n\t            }\n\t            // if specified, choose that color\n\t            else if (colors[id]) {\n\t                color = colors[id];\n\t            }\n\t            // if not specified, choose from pattern\n\t            else {\n\t                if (ids.indexOf(id) < 0) { ids.push(id); }\n\t                color = pattern[ids.indexOf(id) % pattern.length];\n\t                colors[id] = color;\n\t            }\n\t            return callback instanceof Function ? callback(color, d) : color;\n\t        };\n\t    };\n\t    c3_chart_internal_fn.generateLevelColor = function () {\n\t        var $$ = this, config = $$.config,\n\t            colors = config.color_pattern,\n\t            threshold = config.color_threshold,\n\t            asValue = threshold.unit === 'value',\n\t            values = threshold.values && threshold.values.length ? threshold.values : [],\n\t            max = threshold.max || 100;\n\t        return notEmpty(config.color_threshold) ? function (value) {\n\t            var i, v, color = colors[colors.length - 1];\n\t            for (i = 0; i < values.length; i++) {\n\t                v = asValue ? value : (value * 100 / max);\n\t                if (v < values[i]) {\n\t                    color = colors[i];\n\t                    break;\n\t                }\n\t            }\n\t            return color;\n\t        } : null;\n\t    };\n\t\n\t    c3_chart_internal_fn.getYFormat = function (forArc) {\n\t        var $$ = this,\n\t            formatForY = forArc && !$$.hasType('gauge') ? $$.defaultArcValueFormat : $$.yFormat,\n\t            formatForY2 = forArc && !$$.hasType('gauge') ? $$.defaultArcValueFormat : $$.y2Format;\n\t        return function (v, ratio, id) {\n\t            var format = $$.axis.getId(id) === 'y2' ? formatForY2 : formatForY;\n\t            return format.call($$, v, ratio);\n\t        };\n\t    };\n\t    c3_chart_internal_fn.yFormat = function (v) {\n\t        var $$ = this, config = $$.config,\n\t            format = config.axis_y_tick_format ? config.axis_y_tick_format : $$.defaultValueFormat;\n\t        return format(v);\n\t    };\n\t    c3_chart_internal_fn.y2Format = function (v) {\n\t        var $$ = this, config = $$.config,\n\t            format = config.axis_y2_tick_format ? config.axis_y2_tick_format : $$.defaultValueFormat;\n\t        return format(v);\n\t    };\n\t    c3_chart_internal_fn.defaultValueFormat = function (v) {\n\t        return isValue(v) ? +v : \"\";\n\t    };\n\t    c3_chart_internal_fn.defaultArcValueFormat = function (v, ratio) {\n\t        return (ratio * 100).toFixed(1) + '%';\n\t    };\n\t    c3_chart_internal_fn.dataLabelFormat = function (targetId) {\n\t        var $$ = this, data_labels = $$.config.data_labels,\n\t            format, defaultFormat = function (v) { return isValue(v) ? +v : \"\"; };\n\t        // find format according to axis id\n\t        if (typeof data_labels.format === 'function') {\n\t            format = data_labels.format;\n\t        } else if (typeof data_labels.format === 'object') {\n\t            if (data_labels.format[targetId]) {\n\t                format = data_labels.format[targetId] === true ? defaultFormat : data_labels.format[targetId];\n\t            } else {\n\t                format = function () { return ''; };\n\t            }\n\t        } else {\n\t            format = defaultFormat;\n\t        }\n\t        return format;\n\t    };\n\t\n\t    c3_chart_internal_fn.hasCaches = function (ids) {\n\t        for (var i = 0; i < ids.length; i++) {\n\t            if (! (ids[i] in this.cache)) { return false; }\n\t        }\n\t        return true;\n\t    };\n\t    c3_chart_internal_fn.addCache = function (id, target) {\n\t        this.cache[id] = this.cloneTarget(target);\n\t    };\n\t    c3_chart_internal_fn.getCaches = function (ids) {\n\t        var targets = [], i;\n\t        for (i = 0; i < ids.length; i++) {\n\t            if (ids[i] in this.cache) { targets.push(this.cloneTarget(this.cache[ids[i]])); }\n\t        }\n\t        return targets;\n\t    };\n\t\n\t    var CLASS = c3_chart_internal_fn.CLASS = {\n\t        target: 'c3-target',\n\t        chart: 'c3-chart',\n\t        chartLine: 'c3-chart-line',\n\t        chartLines: 'c3-chart-lines',\n\t        chartBar: 'c3-chart-bar',\n\t        chartBars: 'c3-chart-bars',\n\t        chartText: 'c3-chart-text',\n\t        chartTexts: 'c3-chart-texts',\n\t        chartArc: 'c3-chart-arc',\n\t        chartArcs: 'c3-chart-arcs',\n\t        chartArcsTitle: 'c3-chart-arcs-title',\n\t        chartArcsBackground: 'c3-chart-arcs-background',\n\t        chartArcsGaugeUnit: 'c3-chart-arcs-gauge-unit',\n\t        chartArcsGaugeMax: 'c3-chart-arcs-gauge-max',\n\t        chartArcsGaugeMin: 'c3-chart-arcs-gauge-min',\n\t        selectedCircle: 'c3-selected-circle',\n\t        selectedCircles: 'c3-selected-circles',\n\t        eventRect: 'c3-event-rect',\n\t        eventRects: 'c3-event-rects',\n\t        eventRectsSingle: 'c3-event-rects-single',\n\t        eventRectsMultiple: 'c3-event-rects-multiple',\n\t        zoomRect: 'c3-zoom-rect',\n\t        brush: 'c3-brush',\n\t        focused: 'c3-focused',\n\t        defocused: 'c3-defocused',\n\t        region: 'c3-region',\n\t        regions: 'c3-regions',\n\t        tooltipContainer: 'c3-tooltip-container',\n\t        tooltip: 'c3-tooltip',\n\t        tooltipName: 'c3-tooltip-name',\n\t        shape: 'c3-shape',\n\t        shapes: 'c3-shapes',\n\t        line: 'c3-line',\n\t        lines: 'c3-lines',\n\t        bar: 'c3-bar',\n\t        bars: 'c3-bars',\n\t        circle: 'c3-circle',\n\t        circles: 'c3-circles',\n\t        arc: 'c3-arc',\n\t        arcs: 'c3-arcs',\n\t        area: 'c3-area',\n\t        areas: 'c3-areas',\n\t        empty: 'c3-empty',\n\t        text: 'c3-text',\n\t        texts: 'c3-texts',\n\t        gaugeValue: 'c3-gauge-value',\n\t        grid: 'c3-grid',\n\t        gridLines: 'c3-grid-lines',\n\t        xgrid: 'c3-xgrid',\n\t        xgrids: 'c3-xgrids',\n\t        xgridLine: 'c3-xgrid-line',\n\t        xgridLines: 'c3-xgrid-lines',\n\t        xgridFocus: 'c3-xgrid-focus',\n\t        ygrid: 'c3-ygrid',\n\t        ygrids: 'c3-ygrids',\n\t        ygridLine: 'c3-ygrid-line',\n\t        ygridLines: 'c3-ygrid-lines',\n\t        axis: 'c3-axis',\n\t        axisX: 'c3-axis-x',\n\t        axisXLabel: 'c3-axis-x-label',\n\t        axisY: 'c3-axis-y',\n\t        axisYLabel: 'c3-axis-y-label',\n\t        axisY2: 'c3-axis-y2',\n\t        axisY2Label: 'c3-axis-y2-label',\n\t        legendBackground: 'c3-legend-background',\n\t        legendItem: 'c3-legend-item',\n\t        legendItemEvent: 'c3-legend-item-event',\n\t        legendItemTile: 'c3-legend-item-tile',\n\t        legendItemHidden: 'c3-legend-item-hidden',\n\t        legendItemFocused: 'c3-legend-item-focused',\n\t        dragarea: 'c3-dragarea',\n\t        EXPANDED: '_expanded_',\n\t        SELECTED: '_selected_',\n\t        INCLUDED: '_included_'\n\t    };\n\t    c3_chart_internal_fn.generateClass = function (prefix, targetId) {\n\t        return \" \" + prefix + \" \" + prefix + this.getTargetSelectorSuffix(targetId);\n\t    };\n\t    c3_chart_internal_fn.classText = function (d) {\n\t        return this.generateClass(CLASS.text, d.index);\n\t    };\n\t    c3_chart_internal_fn.classTexts = function (d) {\n\t        return this.generateClass(CLASS.texts, d.id);\n\t    };\n\t    c3_chart_internal_fn.classShape = function (d) {\n\t        return this.generateClass(CLASS.shape, d.index);\n\t    };\n\t    c3_chart_internal_fn.classShapes = function (d) {\n\t        return this.generateClass(CLASS.shapes, d.id);\n\t    };\n\t    c3_chart_internal_fn.classLine = function (d) {\n\t        return this.classShape(d) + this.generateClass(CLASS.line, d.id);\n\t    };\n\t    c3_chart_internal_fn.classLines = function (d) {\n\t        return this.classShapes(d) + this.generateClass(CLASS.lines, d.id);\n\t    };\n\t    c3_chart_internal_fn.classCircle = function (d) {\n\t        return this.classShape(d) + this.generateClass(CLASS.circle, d.index);\n\t    };\n\t    c3_chart_internal_fn.classCircles = function (d) {\n\t        return this.classShapes(d) + this.generateClass(CLASS.circles, d.id);\n\t    };\n\t    c3_chart_internal_fn.classBar = function (d) {\n\t        return this.classShape(d) + this.generateClass(CLASS.bar, d.index);\n\t    };\n\t    c3_chart_internal_fn.classBars = function (d) {\n\t        return this.classShapes(d) + this.generateClass(CLASS.bars, d.id);\n\t    };\n\t    c3_chart_internal_fn.classArc = function (d) {\n\t        return this.classShape(d.data) + this.generateClass(CLASS.arc, d.data.id);\n\t    };\n\t    c3_chart_internal_fn.classArcs = function (d) {\n\t        return this.classShapes(d.data) + this.generateClass(CLASS.arcs, d.data.id);\n\t    };\n\t    c3_chart_internal_fn.classArea = function (d) {\n\t        return this.classShape(d) + this.generateClass(CLASS.area, d.id);\n\t    };\n\t    c3_chart_internal_fn.classAreas = function (d) {\n\t        return this.classShapes(d) + this.generateClass(CLASS.areas, d.id);\n\t    };\n\t    c3_chart_internal_fn.classRegion = function (d, i) {\n\t        return this.generateClass(CLASS.region, i) + ' ' + ('class' in d ? d['class'] : '');\n\t    };\n\t    c3_chart_internal_fn.classEvent = function (d) {\n\t        return this.generateClass(CLASS.eventRect, d.index);\n\t    };\n\t    c3_chart_internal_fn.classTarget = function (id) {\n\t        var $$ = this;\n\t        var additionalClassSuffix = $$.config.data_classes[id], additionalClass = '';\n\t        if (additionalClassSuffix) {\n\t            additionalClass = ' ' + CLASS.target + '-' + additionalClassSuffix;\n\t        }\n\t        return $$.generateClass(CLASS.target, id) + additionalClass;\n\t    };\n\t    c3_chart_internal_fn.classFocus = function (d) {\n\t        return this.classFocused(d) + this.classDefocused(d);\n\t    };\n\t    c3_chart_internal_fn.classFocused = function (d) {\n\t        return ' ' + (this.focusedTargetIds.indexOf(d.id) >= 0 ? CLASS.focused : '');\n\t    };\n\t    c3_chart_internal_fn.classDefocused = function (d) {\n\t        return ' ' + (this.defocusedTargetIds.indexOf(d.id) >= 0 ? CLASS.defocused : '');\n\t    };\n\t    c3_chart_internal_fn.classChartText = function (d) {\n\t        return CLASS.chartText + this.classTarget(d.id);\n\t    };\n\t    c3_chart_internal_fn.classChartLine = function (d) {\n\t        return CLASS.chartLine + this.classTarget(d.id);\n\t    };\n\t    c3_chart_internal_fn.classChartBar = function (d) {\n\t        return CLASS.chartBar + this.classTarget(d.id);\n\t    };\n\t    c3_chart_internal_fn.classChartArc = function (d) {\n\t        return CLASS.chartArc + this.classTarget(d.data.id);\n\t    };\n\t    c3_chart_internal_fn.getTargetSelectorSuffix = function (targetId) {\n\t        return targetId || targetId === 0 ? ('-' + targetId).replace(/[\\s?!@#$%^&*()_=+,.<>'\":;\\[\\]\\/|~`{}\\\\]/g, '-') : '';\n\t    };\n\t    c3_chart_internal_fn.selectorTarget = function (id, prefix) {\n\t        return (prefix || '') + '.' + CLASS.target + this.getTargetSelectorSuffix(id);\n\t    };\n\t    c3_chart_internal_fn.selectorTargets = function (ids, prefix) {\n\t        var $$ = this;\n\t        ids = ids || [];\n\t        return ids.length ? ids.map(function (id) { return $$.selectorTarget(id, prefix); }) : null;\n\t    };\n\t    c3_chart_internal_fn.selectorLegend = function (id) {\n\t        return '.' + CLASS.legendItem + this.getTargetSelectorSuffix(id);\n\t    };\n\t    c3_chart_internal_fn.selectorLegends = function (ids) {\n\t        var $$ = this;\n\t        return ids && ids.length ? ids.map(function (id) { return $$.selectorLegend(id); }) : null;\n\t    };\n\t\n\t    var isValue = c3_chart_internal_fn.isValue = function (v) {\n\t        return v || v === 0;\n\t    },\n\t        isFunction = c3_chart_internal_fn.isFunction = function (o) {\n\t            return typeof o === 'function';\n\t        },\n\t        isString = c3_chart_internal_fn.isString = function (o) {\n\t            return typeof o === 'string';\n\t        },\n\t        isUndefined = c3_chart_internal_fn.isUndefined = function (v) {\n\t            return typeof v === 'undefined';\n\t        },\n\t        isDefined = c3_chart_internal_fn.isDefined = function (v) {\n\t            return typeof v !== 'undefined';\n\t        },\n\t        ceil10 = c3_chart_internal_fn.ceil10 = function (v) {\n\t            return Math.ceil(v / 10) * 10;\n\t        },\n\t        asHalfPixel = c3_chart_internal_fn.asHalfPixel = function (n) {\n\t            return Math.ceil(n) + 0.5;\n\t        },\n\t        diffDomain = c3_chart_internal_fn.diffDomain = function (d) {\n\t            return d[1] - d[0];\n\t        },\n\t        isEmpty = c3_chart_internal_fn.isEmpty = function (o) {\n\t            return !o || (isString(o) && o.length === 0) || (typeof o === 'object' && Object.keys(o).length === 0);\n\t        },\n\t        notEmpty = c3_chart_internal_fn.notEmpty = function (o) {\n\t            return Object.keys(o).length > 0;\n\t        },\n\t        getOption = c3_chart_internal_fn.getOption = function (options, key, defaultValue) {\n\t            return isDefined(options[key]) ? options[key] : defaultValue;\n\t        },\n\t        hasValue = c3_chart_internal_fn.hasValue = function (dict, value) {\n\t            var found = false;\n\t            Object.keys(dict).forEach(function (key) {\n\t                if (dict[key] === value) { found = true; }\n\t            });\n\t            return found;\n\t        },\n\t        getPathBox = c3_chart_internal_fn.getPathBox = function (path) {\n\t            var box = path.getBoundingClientRect(),\n\t                items = [path.pathSegList.getItem(0), path.pathSegList.getItem(1)],\n\t                minX = items[0].x, minY = Math.min(items[0].y, items[1].y);\n\t            return {x: minX, y: minY, width: box.width, height: box.height};\n\t        };\n\t\n\t    c3_chart_fn.focus = function (targetIds) {\n\t        var $$ = this.internal, candidates;\n\t\n\t        targetIds = $$.mapToTargetIds(targetIds);\n\t        candidates = $$.svg.selectAll($$.selectorTargets(targetIds.filter($$.isTargetToShow, $$))),\n\t\n\t        this.revert();\n\t        this.defocus();\n\t        candidates.classed(CLASS.focused, true).classed(CLASS.defocused, false);\n\t        if ($$.hasArcType()) {\n\t            $$.expandArc(targetIds);\n\t        }\n\t        $$.toggleFocusLegend(targetIds, true);\n\t\n\t        $$.focusedTargetIds = targetIds;\n\t        $$.defocusedTargetIds = $$.defocusedTargetIds.filter(function (id) {\n\t            return targetIds.indexOf(id) < 0;\n\t        });\n\t    };\n\t\n\t    c3_chart_fn.defocus = function (targetIds) {\n\t        var $$ = this.internal, candidates;\n\t\n\t        targetIds = $$.mapToTargetIds(targetIds);\n\t        candidates = $$.svg.selectAll($$.selectorTargets(targetIds.filter($$.isTargetToShow, $$))),\n\t\n\t        candidates.classed(CLASS.focused, false).classed(CLASS.defocused, true);\n\t        if ($$.hasArcType()) {\n\t            $$.unexpandArc(targetIds);\n\t        }\n\t        $$.toggleFocusLegend(targetIds, false);\n\t\n\t        $$.focusedTargetIds = $$.focusedTargetIds.filter(function (id) {\n\t            return targetIds.indexOf(id) < 0;\n\t        });\n\t        $$.defocusedTargetIds = targetIds;\n\t    };\n\t\n\t    c3_chart_fn.revert = function (targetIds) {\n\t        var $$ = this.internal, candidates;\n\t\n\t        targetIds = $$.mapToTargetIds(targetIds);\n\t        candidates = $$.svg.selectAll($$.selectorTargets(targetIds)); // should be for all targets\n\t\n\t        candidates.classed(CLASS.focused, false).classed(CLASS.defocused, false);\n\t        if ($$.hasArcType()) {\n\t            $$.unexpandArc(targetIds);\n\t        }\n\t        if ($$.config.legend_show) {\n\t            $$.showLegend(targetIds.filter($$.isLegendToShow.bind($$)));\n\t            $$.legend.selectAll($$.selectorLegends(targetIds))\n\t                .filter(function () {\n\t                    return $$.d3.select(this).classed(CLASS.legendItemFocused);\n\t                })\n\t                .classed(CLASS.legendItemFocused, false);\n\t        }\n\t\n\t        $$.focusedTargetIds = [];\n\t        $$.defocusedTargetIds = [];\n\t    };\n\t\n\t    c3_chart_fn.show = function (targetIds, options) {\n\t        var $$ = this.internal, targets;\n\t\n\t        targetIds = $$.mapToTargetIds(targetIds);\n\t        options = options || {};\n\t\n\t        $$.removeHiddenTargetIds(targetIds);\n\t        targets = $$.svg.selectAll($$.selectorTargets(targetIds));\n\t\n\t        targets.transition()\n\t            .style('opacity', 1, 'important')\n\t            .call($$.endall, function () {\n\t                targets.style('opacity', null).style('opacity', 1);\n\t            });\n\t\n\t        if (options.withLegend) {\n\t            $$.showLegend(targetIds);\n\t        }\n\t\n\t        $$.redraw({withUpdateOrgXDomain: true, withUpdateXDomain: true, withLegend: true});\n\t    };\n\t\n\t    c3_chart_fn.hide = function (targetIds, options) {\n\t        var $$ = this.internal, targets;\n\t\n\t        targetIds = $$.mapToTargetIds(targetIds);\n\t        options = options || {};\n\t\n\t        $$.addHiddenTargetIds(targetIds);\n\t        targets = $$.svg.selectAll($$.selectorTargets(targetIds));\n\t\n\t        targets.transition()\n\t            .style('opacity', 0, 'important')\n\t            .call($$.endall, function () {\n\t                targets.style('opacity', null).style('opacity', 0);\n\t            });\n\t\n\t        if (options.withLegend) {\n\t            $$.hideLegend(targetIds);\n\t        }\n\t\n\t        $$.redraw({withUpdateOrgXDomain: true, withUpdateXDomain: true, withLegend: true});\n\t    };\n\t\n\t    c3_chart_fn.toggle = function (targetIds, options) {\n\t        var that = this, $$ = this.internal;\n\t        $$.mapToTargetIds(targetIds).forEach(function (targetId) {\n\t            $$.isTargetToShow(targetId) ? that.hide(targetId, options) : that.show(targetId, options);\n\t        });\n\t    };\n\t\n\t    c3_chart_fn.zoom = function (domain) {\n\t        var $$ = this.internal;\n\t        if (domain) {\n\t            if ($$.isTimeSeries()) {\n\t                domain = domain.map(function (x) { return $$.parseDate(x); });\n\t            }\n\t            $$.brush.extent(domain);\n\t            $$.redraw({withUpdateXDomain: true, withY: $$.config.zoom_rescale});\n\t            $$.config.zoom_onzoom.call(this, $$.x.orgDomain());\n\t        }\n\t        return $$.brush.extent();\n\t    };\n\t    c3_chart_fn.zoom.enable = function (enabled) {\n\t        var $$ = this.internal;\n\t        $$.config.zoom_enabled = enabled;\n\t        $$.updateAndRedraw();\n\t    };\n\t    c3_chart_fn.unzoom = function () {\n\t        var $$ = this.internal;\n\t        $$.brush.clear().update();\n\t        $$.redraw({withUpdateXDomain: true});\n\t    };\n\t\n\t    c3_chart_fn.load = function (args) {\n\t        var $$ = this.internal, config = $$.config;\n\t        // update xs if specified\n\t        if (args.xs) {\n\t            $$.addXs(args.xs);\n\t        }\n\t        // update classes if exists\n\t        if ('classes' in args) {\n\t            Object.keys(args.classes).forEach(function (id) {\n\t                config.data_classes[id] = args.classes[id];\n\t            });\n\t        }\n\t        // update categories if exists\n\t        if ('categories' in args && $$.isCategorized()) {\n\t            config.axis_x_categories = args.categories;\n\t        }\n\t        // update axes if exists\n\t        if ('axes' in args) {\n\t            Object.keys(args.axes).forEach(function (id) {\n\t                config.data_axes[id] = args.axes[id];\n\t            });\n\t        }\n\t        // update colors if exists\n\t        if ('colors' in args) {\n\t            Object.keys(args.colors).forEach(function (id) {\n\t                config.data_colors[id] = args.colors[id];\n\t            });\n\t        }\n\t        // use cache if exists\n\t        if ('cacheIds' in args && $$.hasCaches(args.cacheIds)) {\n\t            $$.load($$.getCaches(args.cacheIds), args.done);\n\t            return;\n\t        }\n\t        // unload if needed\n\t        if ('unload' in args) {\n\t            // TODO: do not unload if target will load (included in url/rows/columns)\n\t            $$.unload($$.mapToTargetIds((typeof args.unload === 'boolean' && args.unload) ? null : args.unload), function () {\n\t                $$.loadFromArgs(args);\n\t            });\n\t        } else {\n\t            $$.loadFromArgs(args);\n\t        }\n\t    };\n\t\n\t    c3_chart_fn.unload = function (args) {\n\t        var $$ = this.internal;\n\t        args = args || {};\n\t        if (args instanceof Array) {\n\t            args = {ids: args};\n\t        } else if (typeof args === 'string') {\n\t            args = {ids: [args]};\n\t        }\n\t        $$.unload($$.mapToTargetIds(args.ids), function () {\n\t            $$.redraw({withUpdateOrgXDomain: true, withUpdateXDomain: true, withLegend: true});\n\t            if (args.done) { args.done(); }\n\t        });\n\t    };\n\t\n\t    c3_chart_fn.flow = function (args) {\n\t        var $$ = this.internal,\n\t            targets, data, notfoundIds = [], orgDataCount = $$.getMaxDataCount(),\n\t            dataCount, domain, baseTarget, baseValue, length = 0, tail = 0, diff, to;\n\t\n\t        if (args.json) {\n\t            data = $$.convertJsonToData(args.json, args.keys);\n\t        }\n\t        else if (args.rows) {\n\t            data = $$.convertRowsToData(args.rows);\n\t        }\n\t        else if (args.columns) {\n\t            data = $$.convertColumnsToData(args.columns);\n\t        }\n\t        else {\n\t            return;\n\t        }\n\t        targets = $$.convertDataToTargets(data, true);\n\t\n\t        // Update/Add data\n\t        $$.data.targets.forEach(function (t) {\n\t            var found = false, i, j;\n\t            for (i = 0; i < targets.length; i++) {\n\t                if (t.id === targets[i].id) {\n\t                    found = true;\n\t\n\t                    if (t.values[t.values.length - 1]) {\n\t                        tail = t.values[t.values.length - 1].index + 1;\n\t                    }\n\t                    length = targets[i].values.length;\n\t\n\t                    for (j = 0; j < length; j++) {\n\t                        targets[i].values[j].index = tail + j;\n\t                        if (!$$.isTimeSeries()) {\n\t                            targets[i].values[j].x = tail + j;\n\t                        }\n\t                    }\n\t                    t.values = t.values.concat(targets[i].values);\n\t\n\t                    targets.splice(i, 1);\n\t                    break;\n\t                }\n\t            }\n\t            if (!found) { notfoundIds.push(t.id); }\n\t        });\n\t\n\t        // Append null for not found targets\n\t        $$.data.targets.forEach(function (t) {\n\t            var i, j;\n\t            for (i = 0; i < notfoundIds.length; i++) {\n\t                if (t.id === notfoundIds[i]) {\n\t                    tail = t.values[t.values.length - 1].index + 1;\n\t                    for (j = 0; j < length; j++) {\n\t                        t.values.push({\n\t                            id: t.id,\n\t                            index: tail + j,\n\t                            x: $$.isTimeSeries() ? $$.getOtherTargetX(tail + j) : tail + j,\n\t                            value: null\n\t                        });\n\t                    }\n\t                }\n\t            }\n\t        });\n\t\n\t        // Generate null values for new target\n\t        if ($$.data.targets.length) {\n\t            targets.forEach(function (t) {\n\t                var i, missing = [];\n\t                for (i = $$.data.targets[0].values[0].index; i < tail; i++) {\n\t                    missing.push({\n\t                        id: t.id,\n\t                        index: i,\n\t                        x: $$.isTimeSeries() ? $$.getOtherTargetX(i) : i,\n\t                        value: null\n\t                    });\n\t                }\n\t                t.values.forEach(function (v) {\n\t                    v.index += tail;\n\t                    if (!$$.isTimeSeries()) {\n\t                        v.x += tail;\n\t                    }\n\t                });\n\t                t.values = missing.concat(t.values);\n\t            });\n\t        }\n\t        $$.data.targets = $$.data.targets.concat(targets); // add remained\n\t\n\t        // check data count because behavior needs to change when it's only one\n\t        dataCount = $$.getMaxDataCount();\n\t        baseTarget = $$.data.targets[0];\n\t        baseValue = baseTarget.values[0];\n\t\n\t        // Update length to flow if needed\n\t        if (isDefined(args.to)) {\n\t            length = 0;\n\t            to = $$.isTimeSeries() ? $$.parseDate(args.to) : args.to;\n\t            baseTarget.values.forEach(function (v) {\n\t                if (v.x < to) { length++; }\n\t            });\n\t        } else if (isDefined(args.length)) {\n\t            length = args.length;\n\t        }\n\t\n\t        // If only one data, update the domain to flow from left edge of the chart\n\t        if (!orgDataCount) {\n\t            if ($$.isTimeSeries()) {\n\t                if (baseTarget.values.length > 1) {\n\t                    diff = baseTarget.values[baseTarget.values.length - 1].x - baseValue.x;\n\t                } else {\n\t                    diff = baseValue.x - $$.getXDomain($$.data.targets)[0];\n\t                }\n\t            } else {\n\t                diff = 1;\n\t            }\n\t            domain = [baseValue.x - diff, baseValue.x];\n\t            $$.updateXDomain(null, true, true, false, domain);\n\t        } else if (orgDataCount === 1) {\n\t            if ($$.isTimeSeries()) {\n\t                diff = (baseTarget.values[baseTarget.values.length - 1].x - baseValue.x) / 2;\n\t                domain = [new Date(+baseValue.x - diff), new Date(+baseValue.x + diff)];\n\t                $$.updateXDomain(null, true, true, false, domain);\n\t            }\n\t        }\n\t\n\t        // Set targets\n\t        $$.updateTargets($$.data.targets);\n\t\n\t        // Redraw with new targets\n\t        $$.redraw({\n\t            flow: {\n\t                index: baseValue.index,\n\t                length: length,\n\t                duration: isValue(args.duration) ? args.duration : $$.config.transition_duration,\n\t                done: args.done,\n\t                orgDataCount: orgDataCount,\n\t            },\n\t            withLegend: true,\n\t            withTransition: orgDataCount > 1,\n\t            withTrimXDomain: false,\n\t            withUpdateXAxis: true,\n\t        });\n\t    };\n\t\n\t    c3_chart_internal_fn.generateFlow = function (args) {\n\t        var $$ = this, config = $$.config, d3 = $$.d3;\n\t\n\t        return function () {\n\t            var targets = args.targets,\n\t                flow = args.flow,\n\t                drawBar = args.drawBar,\n\t                drawLine = args.drawLine,\n\t                drawArea = args.drawArea,\n\t                cx = args.cx,\n\t                cy = args.cy,\n\t                xv = args.xv,\n\t                xForText = args.xForText,\n\t                yForText = args.yForText,\n\t                duration = args.duration;\n\t\n\t            var translateX, scaleX = 1, transform,\n\t                flowIndex = flow.index,\n\t                flowLength = flow.length,\n\t                flowStart = $$.getValueOnIndex($$.data.targets[0].values, flowIndex),\n\t                flowEnd = $$.getValueOnIndex($$.data.targets[0].values, flowIndex + flowLength),\n\t                orgDomain = $$.x.domain(), domain,\n\t                durationForFlow = flow.duration || duration,\n\t                done = flow.done || function () {},\n\t                wait = $$.generateWait();\n\t\n\t            var xgrid = $$.xgrid || d3.selectAll([]),\n\t                xgridLines = $$.xgridLines || d3.selectAll([]),\n\t                mainRegion = $$.mainRegion || d3.selectAll([]),\n\t                mainText = $$.mainText || d3.selectAll([]),\n\t                mainBar = $$.mainBar || d3.selectAll([]),\n\t                mainLine = $$.mainLine || d3.selectAll([]),\n\t                mainArea = $$.mainArea || d3.selectAll([]),\n\t                mainCircle = $$.mainCircle || d3.selectAll([]);\n\t\n\t            // set flag\n\t            $$.flowing = true;\n\t\n\t            // remove head data after rendered\n\t            $$.data.targets.forEach(function (d) {\n\t                d.values.splice(0, flowLength);\n\t            });\n\t\n\t            // update x domain to generate axis elements for flow\n\t            domain = $$.updateXDomain(targets, true, true);\n\t            // update elements related to x scale\n\t            if ($$.updateXGrid) { $$.updateXGrid(true); }\n\t\n\t            // generate transform to flow\n\t            if (!flow.orgDataCount) { // if empty\n\t                if ($$.data.targets[0].values.length !== 1) {\n\t                    translateX = $$.x(orgDomain[0]) - $$.x(domain[0]);\n\t                } else {\n\t                    if ($$.isTimeSeries()) {\n\t                        flowStart = $$.getValueOnIndex($$.data.targets[0].values, 0);\n\t                        flowEnd = $$.getValueOnIndex($$.data.targets[0].values, $$.data.targets[0].values.length - 1);\n\t                        translateX = $$.x(flowStart.x) - $$.x(flowEnd.x);\n\t                    } else {\n\t                        translateX = diffDomain(domain) / 2;\n\t                    }\n\t                }\n\t            } else if (flow.orgDataCount === 1 || flowStart.x === flowEnd.x) {\n\t                translateX = $$.x(orgDomain[0]) - $$.x(domain[0]);\n\t            } else {\n\t                if ($$.isTimeSeries()) {\n\t                    translateX = ($$.x(orgDomain[0]) - $$.x(domain[0]));\n\t                } else {\n\t                    translateX = ($$.x(flowStart.x) - $$.x(flowEnd.x));\n\t                }\n\t            }\n\t            scaleX = (diffDomain(orgDomain) / diffDomain(domain));\n\t            transform = 'translate(' + translateX + ',0) scale(' + scaleX + ',1)';\n\t\n\t            // hide tooltip\n\t            $$.hideXGridFocus();\n\t            $$.hideTooltip();\n\t\n\t            d3.transition().ease('linear').duration(durationForFlow).each(function () {\n\t                wait.add($$.axes.x.transition().call($$.xAxis));\n\t                wait.add(mainBar.transition().attr('transform', transform));\n\t                wait.add(mainLine.transition().attr('transform', transform));\n\t                wait.add(mainArea.transition().attr('transform', transform));\n\t                wait.add(mainCircle.transition().attr('transform', transform));\n\t                wait.add(mainText.transition().attr('transform', transform));\n\t                wait.add(mainRegion.filter($$.isRegionOnX).transition().attr('transform', transform));\n\t                wait.add(xgrid.transition().attr('transform', transform));\n\t                wait.add(xgridLines.transition().attr('transform', transform));\n\t            })\n\t            .call(wait, function () {\n\t                var i, shapes = [], texts = [], eventRects = [];\n\t\n\t                // remove flowed elements\n\t                if (flowLength) {\n\t                    for (i = 0; i < flowLength; i++) {\n\t                        shapes.push('.' + CLASS.shape + '-' + (flowIndex + i));\n\t                        texts.push('.' + CLASS.text + '-' + (flowIndex + i));\n\t                        eventRects.push('.' + CLASS.eventRect + '-' + (flowIndex + i));\n\t                    }\n\t                    $$.svg.selectAll('.' + CLASS.shapes).selectAll(shapes).remove();\n\t                    $$.svg.selectAll('.' + CLASS.texts).selectAll(texts).remove();\n\t                    $$.svg.selectAll('.' + CLASS.eventRects).selectAll(eventRects).remove();\n\t                    $$.svg.select('.' + CLASS.xgrid).remove();\n\t                }\n\t\n\t                // draw again for removing flowed elements and reverting attr\n\t                xgrid\n\t                    .attr('transform', null)\n\t                    .attr($$.xgridAttr);\n\t                xgridLines\n\t                    .attr('transform', null);\n\t                xgridLines.select('line')\n\t                    .attr(\"x1\", config.axis_rotated ? 0 : xv)\n\t                    .attr(\"x2\", config.axis_rotated ? $$.width : xv);\n\t                xgridLines.select('text')\n\t                    .attr(\"x\", config.axis_rotated ? $$.width : 0)\n\t                    .attr(\"y\", xv);\n\t                mainBar\n\t                    .attr('transform', null)\n\t                    .attr(\"d\", drawBar);\n\t                mainLine\n\t                    .attr('transform', null)\n\t                    .attr(\"d\", drawLine);\n\t                mainArea\n\t                    .attr('transform', null)\n\t                    .attr(\"d\", drawArea);\n\t                mainCircle\n\t                    .attr('transform', null)\n\t                    .attr(\"cx\", cx)\n\t                    .attr(\"cy\", cy);\n\t                mainText\n\t                    .attr('transform', null)\n\t                    .attr('x', xForText)\n\t                    .attr('y', yForText)\n\t                    .style('fill-opacity', $$.opacityForText.bind($$));\n\t                mainRegion\n\t                    .attr('transform', null);\n\t                mainRegion.select('rect').filter($$.isRegionOnX)\n\t                    .attr(\"x\", $$.regionX.bind($$))\n\t                    .attr(\"width\", $$.regionWidth.bind($$));\n\t\n\t                if (config.interaction_enabled) {\n\t                    $$.redrawEventRect();\n\t                }\n\t\n\t                // callback for end of flow\n\t                done();\n\t\n\t                $$.flowing = false;\n\t            });\n\t        };\n\t    };\n\t\n\t    c3_chart_fn.selected = function (targetId) {\n\t        var $$ = this.internal, d3 = $$.d3;\n\t        return d3.merge(\n\t            $$.main.selectAll('.' + CLASS.shapes + $$.getTargetSelectorSuffix(targetId)).selectAll('.' + CLASS.shape)\n\t                .filter(function () { return d3.select(this).classed(CLASS.SELECTED); })\n\t                .map(function (d) { return d.map(function (d) { var data = d.__data__; return data.data ? data.data : data; }); })\n\t        );\n\t    };\n\t    c3_chart_fn.select = function (ids, indices, resetOther) {\n\t        var $$ = this.internal, d3 = $$.d3, config = $$.config;\n\t        if (! config.data_selection_enabled) { return; }\n\t        $$.main.selectAll('.' + CLASS.shapes).selectAll('.' + CLASS.shape).each(function (d, i) {\n\t            var shape = d3.select(this), id = d.data ? d.data.id : d.id,\n\t                toggle = $$.getToggle(this, d).bind($$),\n\t                isTargetId = config.data_selection_grouped || !ids || ids.indexOf(id) >= 0,\n\t                isTargetIndex = !indices || indices.indexOf(i) >= 0,\n\t                isSelected = shape.classed(CLASS.SELECTED);\n\t            // line/area selection not supported yet\n\t            if (shape.classed(CLASS.line) || shape.classed(CLASS.area)) {\n\t                return;\n\t            }\n\t            if (isTargetId && isTargetIndex) {\n\t                if (config.data_selection_isselectable(d) && !isSelected) {\n\t                    toggle(true, shape.classed(CLASS.SELECTED, true), d, i);\n\t                }\n\t            } else if (isDefined(resetOther) && resetOther) {\n\t                if (isSelected) {\n\t                    toggle(false, shape.classed(CLASS.SELECTED, false), d, i);\n\t                }\n\t            }\n\t        });\n\t    };\n\t    c3_chart_fn.unselect = function (ids, indices) {\n\t        var $$ = this.internal, d3 = $$.d3, config = $$.config;\n\t        if (! config.data_selection_enabled) { return; }\n\t        $$.main.selectAll('.' + CLASS.shapes).selectAll('.' + CLASS.shape).each(function (d, i) {\n\t            var shape = d3.select(this), id = d.data ? d.data.id : d.id,\n\t                toggle = $$.getToggle(this, d).bind($$),\n\t                isTargetId = config.data_selection_grouped || !ids || ids.indexOf(id) >= 0,\n\t                isTargetIndex = !indices || indices.indexOf(i) >= 0,\n\t                isSelected = shape.classed(CLASS.SELECTED);\n\t            // line/area selection not supported yet\n\t            if (shape.classed(CLASS.line) || shape.classed(CLASS.area)) {\n\t                return;\n\t            }\n\t            if (isTargetId && isTargetIndex) {\n\t                if (config.data_selection_isselectable(d)) {\n\t                    if (isSelected) {\n\t                        toggle(false, shape.classed(CLASS.SELECTED, false), d, i);\n\t                    }\n\t                }\n\t            }\n\t        });\n\t    };\n\t\n\t    c3_chart_fn.transform = function (type, targetIds) {\n\t        var $$ = this.internal,\n\t            options = ['pie', 'donut'].indexOf(type) >= 0 ? {withTransform: true} : null;\n\t        $$.transformTo(targetIds, type, options);\n\t    };\n\t\n\t    c3_chart_internal_fn.transformTo = function (targetIds, type, optionsForRedraw) {\n\t        var $$ = this,\n\t            withTransitionForAxis = !$$.hasArcType(),\n\t            options = optionsForRedraw || {withTransitionForAxis: withTransitionForAxis};\n\t        options.withTransitionForTransform = false;\n\t        $$.transiting = false;\n\t        $$.setTargetType(targetIds, type);\n\t        $$.updateTargets($$.data.targets); // this is needed when transforming to arc\n\t        $$.updateAndRedraw(options);\n\t    };\n\t\n\t    c3_chart_fn.groups = function (groups) {\n\t        var $$ = this.internal, config = $$.config;\n\t        if (isUndefined(groups)) { return config.data_groups; }\n\t        config.data_groups = groups;\n\t        $$.redraw();\n\t        return config.data_groups;\n\t    };\n\t\n\t    c3_chart_fn.xgrids = function (grids) {\n\t        var $$ = this.internal, config = $$.config;\n\t        if (! grids) { return config.grid_x_lines; }\n\t        config.grid_x_lines = grids;\n\t        $$.redrawWithoutRescale();\n\t        return config.grid_x_lines;\n\t    };\n\t    c3_chart_fn.xgrids.add = function (grids) {\n\t        var $$ = this.internal;\n\t        return this.xgrids($$.config.grid_x_lines.concat(grids ? grids : []));\n\t    };\n\t    c3_chart_fn.xgrids.remove = function (params) { // TODO: multiple\n\t        var $$ = this.internal;\n\t        $$.removeGridLines(params, true);\n\t    };\n\t\n\t    c3_chart_fn.ygrids = function (grids) {\n\t        var $$ = this.internal, config = $$.config;\n\t        if (! grids) { return config.grid_y_lines; }\n\t        config.grid_y_lines = grids;\n\t        $$.redrawWithoutRescale();\n\t        return config.grid_y_lines;\n\t    };\n\t    c3_chart_fn.ygrids.add = function (grids) {\n\t        var $$ = this.internal;\n\t        return this.ygrids($$.config.grid_y_lines.concat(grids ? grids : []));\n\t    };\n\t    c3_chart_fn.ygrids.remove = function (params) { // TODO: multiple\n\t        var $$ = this.internal;\n\t        $$.removeGridLines(params, false);\n\t    };\n\t\n\t    c3_chart_fn.regions = function (regions) {\n\t        var $$ = this.internal, config = $$.config;\n\t        if (!regions) { return config.regions; }\n\t        config.regions = regions;\n\t        $$.redrawWithoutRescale();\n\t        return config.regions;\n\t    };\n\t    c3_chart_fn.regions.add = function (regions) {\n\t        var $$ = this.internal, config = $$.config;\n\t        if (!regions) { return config.regions; }\n\t        config.regions = config.regions.concat(regions);\n\t        $$.redrawWithoutRescale();\n\t        return config.regions;\n\t    };\n\t    c3_chart_fn.regions.remove = function (options) {\n\t        var $$ = this.internal, config = $$.config,\n\t            duration, classes, regions;\n\t\n\t        options = options || {};\n\t        duration = $$.getOption(options, \"duration\", config.transition_duration);\n\t        classes = $$.getOption(options, \"classes\", [CLASS.region]);\n\t\n\t        regions = $$.main.select('.' + CLASS.regions).selectAll(classes.map(function (c) { return '.' + c; }));\n\t        (duration ? regions.transition().duration(duration) : regions)\n\t            .style('opacity', 0)\n\t            .remove();\n\t\n\t        config.regions = config.regions.filter(function (region) {\n\t            var found = false;\n\t            if (!region['class']) {\n\t                return true;\n\t            }\n\t            region['class'].split(' ').forEach(function (c) {\n\t                if (classes.indexOf(c) >= 0) { found = true; }\n\t            });\n\t            return !found;\n\t        });\n\t\n\t        return config.regions;\n\t    };\n\t\n\t    c3_chart_fn.data = function (targetIds) {\n\t        var targets = this.internal.data.targets;\n\t        return typeof targetIds === 'undefined' ? targets : targets.filter(function (t) {\n\t            return [].concat(targetIds).indexOf(t.id) >= 0;\n\t        });\n\t    };\n\t    c3_chart_fn.data.shown = function (targetIds) {\n\t        return this.internal.filterTargetsToShow(this.data(targetIds));\n\t    };\n\t    c3_chart_fn.data.values = function (targetId) {\n\t        var targets, values = null;\n\t        if (targetId) {\n\t            targets = this.data(targetId);\n\t            values = targets[0] ? targets[0].values.map(function (d) { return d.value; }) : null;\n\t        }\n\t        return values;\n\t    };\n\t    c3_chart_fn.data.names = function (names) {\n\t        this.internal.clearLegendItemTextBoxCache();\n\t        return this.internal.updateDataAttributes('names', names);\n\t    };\n\t    c3_chart_fn.data.colors = function (colors) {\n\t        return this.internal.updateDataAttributes('colors', colors);\n\t    };\n\t    c3_chart_fn.data.axes = function (axes) {\n\t        return this.internal.updateDataAttributes('axes', axes);\n\t    };\n\t\n\t    c3_chart_fn.category = function (i, category) {\n\t        var $$ = this.internal, config = $$.config;\n\t        if (arguments.length > 1) {\n\t            config.axis_x_categories[i] = category;\n\t            $$.redraw();\n\t        }\n\t        return config.axis_x_categories[i];\n\t    };\n\t    c3_chart_fn.categories = function (categories) {\n\t        var $$ = this.internal, config = $$.config;\n\t        if (!arguments.length) { return config.axis_x_categories; }\n\t        config.axis_x_categories = categories;\n\t        $$.redraw();\n\t        return config.axis_x_categories;\n\t    };\n\t\n\t    // TODO: fix\n\t    c3_chart_fn.color = function (id) {\n\t        var $$ = this.internal;\n\t        return $$.color(id); // more patterns\n\t    };\n\t\n\t    c3_chart_fn.x = function (x) {\n\t        var $$ = this.internal;\n\t        if (arguments.length) {\n\t            $$.updateTargetX($$.data.targets, x);\n\t            $$.redraw({withUpdateOrgXDomain: true, withUpdateXDomain: true});\n\t        }\n\t        return $$.data.xs;\n\t    };\n\t    c3_chart_fn.xs = function (xs) {\n\t        var $$ = this.internal;\n\t        if (arguments.length) {\n\t            $$.updateTargetXs($$.data.targets, xs);\n\t            $$.redraw({withUpdateOrgXDomain: true, withUpdateXDomain: true});\n\t        }\n\t        return $$.data.xs;\n\t    };\n\t\n\t    c3_chart_fn.axis = function () {};\n\t    c3_chart_fn.axis.labels = function (labels) {\n\t        var $$ = this.internal;\n\t        if (arguments.length) {\n\t            Object.keys(labels).forEach(function (axisId) {\n\t                $$.axis.setLabelText(axisId, labels[axisId]);\n\t            });\n\t            $$.axis.updateLabels();\n\t        }\n\t        // TODO: return some values?\n\t    };\n\t    c3_chart_fn.axis.max = function (max) {\n\t        var $$ = this.internal, config = $$.config;\n\t        if (arguments.length) {\n\t            if (typeof max === 'object') {\n\t                if (isValue(max.x)) { config.axis_x_max = max.x; }\n\t                if (isValue(max.y)) { config.axis_y_max = max.y; }\n\t                if (isValue(max.y2)) { config.axis_y2_max = max.y2; }\n\t            } else {\n\t                config.axis_y_max = config.axis_y2_max = max;\n\t            }\n\t            $$.redraw({withUpdateOrgXDomain: true, withUpdateXDomain: true});\n\t        } else {\n\t            return {\n\t                x: config.axis_x_max,\n\t                y: config.axis_y_max,\n\t                y2: config.axis_y2_max\n\t            };\n\t        }\n\t    };\n\t    c3_chart_fn.axis.min = function (min) {\n\t        var $$ = this.internal, config = $$.config;\n\t        if (arguments.length) {\n\t            if (typeof min === 'object') {\n\t                if (isValue(min.x)) { config.axis_x_min = min.x; }\n\t                if (isValue(min.y)) { config.axis_y_min = min.y; }\n\t                if (isValue(min.y2)) { config.axis_y2_min = min.y2; }\n\t            } else {\n\t                config.axis_y_min = config.axis_y2_min = min;\n\t            }\n\t            $$.redraw({withUpdateOrgXDomain: true, withUpdateXDomain: true});\n\t        } else {\n\t            return {\n\t                x: config.axis_x_min,\n\t                y: config.axis_y_min,\n\t                y2: config.axis_y2_min\n\t            };\n\t        }\n\t    };\n\t    c3_chart_fn.axis.range = function (range) {\n\t        if (arguments.length) {\n\t            if (isDefined(range.max)) { this.axis.max(range.max); }\n\t            if (isDefined(range.min)) { this.axis.min(range.min); }\n\t        } else {\n\t            return {\n\t                max: this.axis.max(),\n\t                min: this.axis.min()\n\t            };\n\t        }\n\t    };\n\t\n\t    c3_chart_fn.legend = function () {};\n\t    c3_chart_fn.legend.show = function (targetIds) {\n\t        var $$ = this.internal;\n\t        $$.showLegend($$.mapToTargetIds(targetIds));\n\t        $$.updateAndRedraw({withLegend: true});\n\t    };\n\t    c3_chart_fn.legend.hide = function (targetIds) {\n\t        var $$ = this.internal;\n\t        $$.hideLegend($$.mapToTargetIds(targetIds));\n\t        $$.updateAndRedraw({withLegend: true});\n\t    };\n\t\n\t    c3_chart_fn.resize = function (size) {\n\t        var $$ = this.internal, config = $$.config;\n\t        config.size_width = size ? size.width : null;\n\t        config.size_height = size ? size.height : null;\n\t        this.flush();\n\t    };\n\t\n\t    c3_chart_fn.flush = function () {\n\t        var $$ = this.internal;\n\t        $$.updateAndRedraw({withLegend: true, withTransition: false, withTransitionForTransform: false});\n\t    };\n\t\n\t    c3_chart_fn.destroy = function () {\n\t        var $$ = this.internal;\n\t\n\t        window.clearInterval($$.intervalForObserveInserted);\n\t        window.onresize = null;\n\t\n\t        $$.selectChart.classed('c3', false).html(\"\");\n\t\n\t        // MEMO: this is needed because the reference of some elements will not be released, then memory leak will happen.\n\t        Object.keys($$).forEach(function (key) {\n\t            $$[key] = null;\n\t        });\n\t\n\t        return null;\n\t    };\n\t\n\t    c3_chart_fn.tooltip = function () {};\n\t    c3_chart_fn.tooltip.show = function (args) {\n\t        var $$ = this.internal, index, mouse;\n\t\n\t        // determine mouse position on the chart\n\t        if (args.mouse) {\n\t            mouse = args.mouse;\n\t        }\n\t\n\t        // determine focus data\n\t        if (args.data) {\n\t            if ($$.isMultipleX()) {\n\t                // if multiple xs, target point will be determined by mouse\n\t                mouse = [$$.x(args.data.x), $$.getYScale(args.data.id)(args.data.value)];\n\t                index = null;\n\t            } else {\n\t                // TODO: when tooltip_grouped = false\n\t                index = isValue(args.data.index) ? args.data.index : $$.getIndexByX(args.data.x);\n\t            }\n\t        }\n\t        else if (typeof args.x !== 'undefined') {\n\t            index = $$.getIndexByX(args.x);\n\t        }\n\t        else if (typeof args.index !== 'undefined') {\n\t            index = args.index;\n\t        }\n\t\n\t        // emulate mouse events to show\n\t        $$.dispatchEvent('mouseover', index, mouse);\n\t        $$.dispatchEvent('mousemove', index, mouse);\n\t    };\n\t    c3_chart_fn.tooltip.hide = function () {\n\t        // TODO: get target data by checking the state of focus\n\t        this.internal.dispatchEvent('mouseout', 0);\n\t    };\n\t\n\t    // Features:\n\t    // 1. category axis\n\t    // 2. ceil values of translate/x/y to int for half pixel antialiasing\n\t    // 3. multiline tick text\n\t    var tickTextCharSize;\n\t    function c3_axis(d3, params) {\n\t        var scale = d3.scale.linear(), orient = \"bottom\", innerTickSize = 6, outerTickSize, tickPadding = 3, tickValues = null, tickFormat, tickArguments;\n\t\n\t        var tickOffset = 0, tickCulling = true, tickCentered;\n\t\n\t        params = params || {};\n\t        outerTickSize = params.withOuterTick ? 6 : 0;\n\t\n\t        function axisX(selection, x) {\n\t            selection.attr(\"transform\", function (d) {\n\t                return \"translate(\" + Math.ceil(x(d) + tickOffset) + \", 0)\";\n\t            });\n\t        }\n\t        function axisY(selection, y) {\n\t            selection.attr(\"transform\", function (d) {\n\t                return \"translate(0,\" + Math.ceil(y(d)) + \")\";\n\t            });\n\t        }\n\t        function scaleExtent(domain) {\n\t            var start = domain[0], stop = domain[domain.length - 1];\n\t            return start < stop ? [ start, stop ] : [ stop, start ];\n\t        }\n\t        function generateTicks(scale) {\n\t            var i, domain, ticks = [];\n\t            if (scale.ticks) {\n\t                return scale.ticks.apply(scale, tickArguments);\n\t            }\n\t            domain = scale.domain();\n\t            for (i = Math.ceil(domain[0]); i < domain[1]; i++) {\n\t                ticks.push(i);\n\t            }\n\t            if (ticks.length > 0 && ticks[0] > 0) {\n\t                ticks.unshift(ticks[0] - (ticks[1] - ticks[0]));\n\t            }\n\t            return ticks;\n\t        }\n\t        function copyScale() {\n\t            var newScale = scale.copy(), domain;\n\t            if (params.isCategory) {\n\t                domain = scale.domain();\n\t                newScale.domain([domain[0], domain[1] - 1]);\n\t            }\n\t            return newScale;\n\t        }\n\t        function textFormatted(v) {\n\t            var formatted = tickFormat ? tickFormat(v) : v;\n\t            return typeof formatted !== 'undefined' ? formatted : '';\n\t        }\n\t        function getSizeFor1Char(tick) {\n\t            if (tickTextCharSize) {\n\t                return tickTextCharSize;\n\t            }\n\t            var size = {\n\t                h: 11.5,\n\t                w: 5.5\n\t            };\n\t            tick.select('text').text(textFormatted).each(function (d) {\n\t                var box = this.getBoundingClientRect(),\n\t                    text = textFormatted(d),\n\t                    h = box.height,\n\t                    w = text ? (box.width / text.length) : undefined;\n\t                if (h && w) {\n\t                    size.h = h;\n\t                    size.w = w;\n\t                }\n\t            }).text('');\n\t            tickTextCharSize = size;\n\t            return size;\n\t        }\n\t        function transitionise(selection) {\n\t            return params.withoutTransition ? selection : d3.transition(selection);\n\t        }\n\t        function axis(g) {\n\t            g.each(function () {\n\t                var g = axis.g = d3.select(this);\n\t\n\t                var scale0 = this.__chart__ || scale, scale1 = this.__chart__ = copyScale();\n\t\n\t                var ticks = tickValues ? tickValues : generateTicks(scale1),\n\t                    tick = g.selectAll(\".tick\").data(ticks, scale1),\n\t                    tickEnter = tick.enter().insert(\"g\", \".domain\").attr(\"class\", \"tick\").style(\"opacity\", 1e-6),\n\t                    // MEMO: No exit transition. The reason is this transition affects max tick width calculation because old tick will be included in the ticks.\n\t                    tickExit = tick.exit().remove(),\n\t                    tickUpdate = transitionise(tick).style(\"opacity\", 1),\n\t                    tickTransform, tickX, tickY;\n\t\n\t                var range = scale.rangeExtent ? scale.rangeExtent() : scaleExtent(scale.range()),\n\t                    path = g.selectAll(\".domain\").data([ 0 ]),\n\t                    pathUpdate = (path.enter().append(\"path\").attr(\"class\", \"domain\"), transitionise(path));\n\t                tickEnter.append(\"line\");\n\t                tickEnter.append(\"text\");\n\t\n\t                var lineEnter = tickEnter.select(\"line\"),\n\t                    lineUpdate = tickUpdate.select(\"line\"),\n\t                    textEnter = tickEnter.select(\"text\"),\n\t                    textUpdate = tickUpdate.select(\"text\");\n\t\n\t                if (params.isCategory) {\n\t                    tickOffset = Math.ceil((scale1(1) - scale1(0)) / 2);\n\t                    tickX = tickCentered ? 0 : tickOffset;\n\t                    tickY = tickCentered ? tickOffset : 0;\n\t                } else {\n\t                    tickOffset = tickX = 0;\n\t                }\n\t\n\t                var text, tspan, sizeFor1Char = getSizeFor1Char(g.select('.tick')), counts = [];\n\t                var tickLength = Math.max(innerTickSize, 0) + tickPadding,\n\t                    isVertical = orient === 'left' || orient === 'right';\n\t\n\t                // this should be called only when category axis\n\t                function splitTickText(d, maxWidth) {\n\t                    var tickText = textFormatted(d),\n\t                        subtext, spaceIndex, textWidth, splitted = [];\n\t\n\t                    if (Object.prototype.toString.call(tickText) === \"[object Array]\") {\n\t                        return tickText;\n\t                    }\n\t\n\t                    if (!maxWidth || maxWidth <= 0) {\n\t                        maxWidth = isVertical ? 95 : params.isCategory ? (Math.ceil(scale1(ticks[1]) - scale1(ticks[0])) - 12) : 110;\n\t                    }\n\t\n\t                    function split(splitted, text) {\n\t                        spaceIndex = undefined;\n\t                        for (var i = 1; i < text.length; i++) {\n\t                            if (text.charAt(i) === ' ') {\n\t                                spaceIndex = i;\n\t                            }\n\t                            subtext = text.substr(0, i + 1);\n\t                            textWidth = sizeFor1Char.w * subtext.length;\n\t                            // if text width gets over tick width, split by space index or crrent index\n\t                            if (maxWidth < textWidth) {\n\t                                return split(\n\t                                    splitted.concat(text.substr(0, spaceIndex ? spaceIndex : i)),\n\t                                    text.slice(spaceIndex ? spaceIndex + 1 : i)\n\t                                );\n\t                            }\n\t                        }\n\t                        return splitted.concat(text);\n\t                    }\n\t\n\t                    return split(splitted, tickText + \"\");\n\t                }\n\t\n\t                function tspanDy(d, i) {\n\t                    var dy = sizeFor1Char.h;\n\t                    if (i === 0) {\n\t                        if (orient === 'left' || orient === 'right') {\n\t                            dy = -((counts[d.index] - 1) * (sizeFor1Char.h / 2) - 3);\n\t                        } else {\n\t                            dy = \".71em\";\n\t                        }\n\t                    }\n\t                    return dy;\n\t                }\n\t\n\t                function tickSize(d) {\n\t                    var tickPosition = scale(d) + (tickCentered ? 0 : tickOffset);\n\t                    return range[0] < tickPosition && tickPosition < range[1] ? innerTickSize : 0;\n\t                }\n\t\n\t                text = tick.select(\"text\");\n\t                tspan = text.selectAll('tspan')\n\t                    .data(function (d, i) {\n\t                        var splitted = params.tickMultiline ? splitTickText(d, params.tickWidth) : [].concat(textFormatted(d));\n\t                        counts[i] = splitted.length;\n\t                        return splitted.map(function (s) {\n\t                            return { index: i, splitted: s };\n\t                        });\n\t                    });\n\t                tspan.enter().append('tspan');\n\t                tspan.exit().remove();\n\t                tspan.text(function (d) { return d.splitted; });\n\t\n\t                var rotate = params.tickTextRotate;\n\t\n\t                function textAnchorForText(rotate) {\n\t                    if (!rotate) {\n\t                        return 'middle';\n\t                    }\n\t                    return rotate > 0 ? \"start\" : \"end\";\n\t                }\n\t                function textTransform(rotate) {\n\t                    if (!rotate) {\n\t                        return '';\n\t                    }\n\t                    return \"rotate(\" + rotate + \")\";\n\t                }\n\t                function dxForText(rotate) {\n\t                    if (!rotate) {\n\t                        return 0;\n\t                    }\n\t                    return 8 * Math.sin(Math.PI * (rotate / 180));\n\t                }\n\t                function yForText(rotate) {\n\t                    if (!rotate) {\n\t                        return tickLength;\n\t                    }\n\t                    return 11.5 - 2.5 * (rotate / 15) * (rotate > 0 ? 1 : -1);\n\t                }\n\t\n\t                switch (orient) {\n\t                case \"bottom\":\n\t                    {\n\t                        tickTransform = axisX;\n\t                        lineEnter.attr(\"y2\", innerTickSize);\n\t                        textEnter.attr(\"y\", tickLength);\n\t                        lineUpdate.attr(\"x1\", tickX).attr(\"x2\", tickX).attr(\"y2\", tickSize);\n\t                        textUpdate.attr(\"x\", 0).attr(\"y\", yForText(rotate))\n\t                            .style(\"text-anchor\", textAnchorForText(rotate))\n\t                            .attr(\"transform\", textTransform(rotate));\n\t                        tspan.attr('x', 0).attr(\"dy\", tspanDy).attr('dx', dxForText(rotate));\n\t                        pathUpdate.attr(\"d\", \"M\" + range[0] + \",\" + outerTickSize + \"V0H\" + range[1] + \"V\" + outerTickSize);\n\t                        break;\n\t                    }\n\t                case \"top\":\n\t                    {\n\t                        // TODO: rotated tick text\n\t                        tickTransform = axisX;\n\t                        lineEnter.attr(\"y2\", -innerTickSize);\n\t                        textEnter.attr(\"y\", -tickLength);\n\t                        lineUpdate.attr(\"x2\", 0).attr(\"y2\", -innerTickSize);\n\t                        textUpdate.attr(\"x\", 0).attr(\"y\", -tickLength);\n\t                        text.style(\"text-anchor\", \"middle\");\n\t                        tspan.attr('x', 0).attr(\"dy\", \"0em\");\n\t                        pathUpdate.attr(\"d\", \"M\" + range[0] + \",\" + -outerTickSize + \"V0H\" + range[1] + \"V\" + -outerTickSize);\n\t                        break;\n\t                    }\n\t                case \"left\":\n\t                    {\n\t                        tickTransform = axisY;\n\t                        lineEnter.attr(\"x2\", -innerTickSize);\n\t                        textEnter.attr(\"x\", -tickLength);\n\t                        lineUpdate.attr(\"x2\", -innerTickSize).attr(\"y1\", tickY).attr(\"y2\", tickY);\n\t                        textUpdate.attr(\"x\", -tickLength).attr(\"y\", tickOffset);\n\t                        text.style(\"text-anchor\", \"end\");\n\t                        tspan.attr('x', -tickLength).attr(\"dy\", tspanDy);\n\t                        pathUpdate.attr(\"d\", \"M\" + -outerTickSize + \",\" + range[0] + \"H0V\" + range[1] + \"H\" + -outerTickSize);\n\t                        break;\n\t                    }\n\t                case \"right\":\n\t                    {\n\t                        tickTransform = axisY;\n\t                        lineEnter.attr(\"x2\", innerTickSize);\n\t                        textEnter.attr(\"x\", tickLength);\n\t                        lineUpdate.attr(\"x2\", innerTickSize).attr(\"y2\", 0);\n\t                        textUpdate.attr(\"x\", tickLength).attr(\"y\", 0);\n\t                        text.style(\"text-anchor\", \"start\");\n\t                        tspan.attr('x', tickLength).attr(\"dy\", tspanDy);\n\t                        pathUpdate.attr(\"d\", \"M\" + outerTickSize + \",\" + range[0] + \"H0V\" + range[1] + \"H\" + outerTickSize);\n\t                        break;\n\t                    }\n\t                }\n\t                if (scale1.rangeBand) {\n\t                    var x = scale1, dx = x.rangeBand() / 2;\n\t                    scale0 = scale1 = function (d) {\n\t                        return x(d) + dx;\n\t                    };\n\t                } else if (scale0.rangeBand) {\n\t                    scale0 = scale1;\n\t                } else {\n\t                    tickExit.call(tickTransform, scale1);\n\t                }\n\t                tickEnter.call(tickTransform, scale0);\n\t                tickUpdate.call(tickTransform, scale1);\n\t            });\n\t        }\n\t        axis.scale = function (x) {\n\t            if (!arguments.length) { return scale; }\n\t            scale = x;\n\t            return axis;\n\t        };\n\t        axis.orient = function (x) {\n\t            if (!arguments.length) { return orient; }\n\t            orient = x in {top: 1, right: 1, bottom: 1, left: 1} ? x + \"\" : \"bottom\";\n\t            return axis;\n\t        };\n\t        axis.tickFormat = function (format) {\n\t            if (!arguments.length) { return tickFormat; }\n\t            tickFormat = format;\n\t            return axis;\n\t        };\n\t        axis.tickCentered = function (isCentered) {\n\t            if (!arguments.length) { return tickCentered; }\n\t            tickCentered = isCentered;\n\t            return axis;\n\t        };\n\t        axis.tickOffset = function () {\n\t            return tickOffset;\n\t        };\n\t        axis.tickInterval = function () {\n\t            var interval, length;\n\t            if (params.isCategory) {\n\t                interval = tickOffset * 2;\n\t            }\n\t            else {\n\t                length = axis.g.select('path.domain').node().getTotalLength() - outerTickSize * 2;\n\t                interval = length / axis.g.selectAll('line').size();\n\t            }\n\t            return interval === Infinity ? 0 : interval;\n\t        };\n\t        axis.ticks = function () {\n\t            if (!arguments.length) { return tickArguments; }\n\t            tickArguments = arguments;\n\t            return axis;\n\t        };\n\t        axis.tickCulling = function (culling) {\n\t            if (!arguments.length) { return tickCulling; }\n\t            tickCulling = culling;\n\t            return axis;\n\t        };\n\t        axis.tickValues = function (x) {\n\t            if (typeof x === 'function') {\n\t                tickValues = function () {\n\t                    return x(scale.domain());\n\t                };\n\t            }\n\t            else {\n\t                if (!arguments.length) { return tickValues; }\n\t                tickValues = x;\n\t            }\n\t            return axis;\n\t        };\n\t        return axis;\n\t    }\n\t\n\t    c3_chart_internal_fn.isSafari = function () {\n\t        var ua = window.navigator.userAgent;\n\t        return ua.indexOf('Safari') >= 0 && ua.indexOf('Chrome') < 0;\n\t    };\n\t    c3_chart_internal_fn.isChrome = function () {\n\t        var ua = window.navigator.userAgent;\n\t        return ua.indexOf('Chrome') >= 0;\n\t    };\n\t\n\t    // PhantomJS doesn't have support for Function.prototype.bind, which has caused confusion. Use\n\t    // this polyfill to avoid the confusion.\n\t    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind#Polyfill\n\t\n\t    if (!Function.prototype.bind) {\n\t      Function.prototype.bind = function(oThis) {\n\t        if (typeof this !== 'function') {\n\t          // closest thing possible to the ECMAScript 5\n\t          // internal IsCallable function\n\t          throw new TypeError('Function.prototype.bind - what is trying to be bound is not callable');\n\t        }\n\t\n\t        var aArgs   = Array.prototype.slice.call(arguments, 1),\n\t            fToBind = this,\n\t            fNOP    = function() {},\n\t            fBound  = function() {\n\t              return fToBind.apply(this instanceof fNOP ? this : oThis, aArgs.concat(Array.prototype.slice.call(arguments)));\n\t            };\n\t\n\t        fNOP.prototype = this.prototype;\n\t        fBound.prototype = new fNOP();\n\t\n\t        return fBound;\n\t      };\n\t    }\n\t\n\t    if (true) {\n\t        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1357)], __WEBPACK_AMD_DEFINE_FACTORY__ = (c3), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t    } else if ('undefined' !== typeof exports && 'undefined' !== typeof module) {\n\t        module.exports = c3;\n\t    } else {\n\t        window.c3 = c3;\n\t    }\n\t\n\t})(window);\n\n\n/***/ },\n\n/***/ 1357:\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;!function() {\n\t  var d3 = {\n\t    version: \"3.5.0\"\n\t  };\n\t  if (!Date.now) Date.now = function() {\n\t    return +new Date();\n\t  };\n\t  var d3_arraySlice = [].slice, d3_array = function(list) {\n\t    return d3_arraySlice.call(list);\n\t  };\n\t  var d3_document = document, d3_documentElement = d3_document.documentElement, d3_window = window;\n\t  try {\n\t    d3_array(d3_documentElement.childNodes)[0].nodeType;\n\t  } catch (e) {\n\t    d3_array = function(list) {\n\t      var i = list.length, array = new Array(i);\n\t      while (i--) array[i] = list[i];\n\t      return array;\n\t    };\n\t  }\n\t  try {\n\t    d3_document.createElement(\"div\").style.setProperty(\"opacity\", 0, \"\");\n\t  } catch (error) {\n\t    var d3_element_prototype = d3_window.Element.prototype, d3_element_setAttribute = d3_element_prototype.setAttribute, d3_element_setAttributeNS = d3_element_prototype.setAttributeNS, d3_style_prototype = d3_window.CSSStyleDeclaration.prototype, d3_style_setProperty = d3_style_prototype.setProperty;\n\t    d3_element_prototype.setAttribute = function(name, value) {\n\t      d3_element_setAttribute.call(this, name, value + \"\");\n\t    };\n\t    d3_element_prototype.setAttributeNS = function(space, local, value) {\n\t      d3_element_setAttributeNS.call(this, space, local, value + \"\");\n\t    };\n\t    d3_style_prototype.setProperty = function(name, value, priority) {\n\t      d3_style_setProperty.call(this, name, value + \"\", priority);\n\t    };\n\t  }\n\t  d3.ascending = d3_ascending;\n\t  function d3_ascending(a, b) {\n\t    return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;\n\t  }\n\t  d3.descending = function(a, b) {\n\t    return b < a ? -1 : b > a ? 1 : b >= a ? 0 : NaN;\n\t  };\n\t  d3.min = function(array, f) {\n\t    var i = -1, n = array.length, a, b;\n\t    if (arguments.length === 1) {\n\t      while (++i < n) if ((b = array[i]) != null && b >= b) {\n\t        a = b;\n\t        break;\n\t      }\n\t      while (++i < n) if ((b = array[i]) != null && a > b) a = b;\n\t    } else {\n\t      while (++i < n) if ((b = f.call(array, array[i], i)) != null && b >= b) {\n\t        a = b;\n\t        break;\n\t      }\n\t      while (++i < n) if ((b = f.call(array, array[i], i)) != null && a > b) a = b;\n\t    }\n\t    return a;\n\t  };\n\t  d3.max = function(array, f) {\n\t    var i = -1, n = array.length, a, b;\n\t    if (arguments.length === 1) {\n\t      while (++i < n) if ((b = array[i]) != null && b >= b) {\n\t        a = b;\n\t        break;\n\t      }\n\t      while (++i < n) if ((b = array[i]) != null && b > a) a = b;\n\t    } else {\n\t      while (++i < n) if ((b = f.call(array, array[i], i)) != null && b >= b) {\n\t        a = b;\n\t        break;\n\t      }\n\t      while (++i < n) if ((b = f.call(array, array[i], i)) != null && b > a) a = b;\n\t    }\n\t    return a;\n\t  };\n\t  d3.extent = function(array, f) {\n\t    var i = -1, n = array.length, a, b, c;\n\t    if (arguments.length === 1) {\n\t      while (++i < n) if ((b = array[i]) != null && b >= b) {\n\t        a = c = b;\n\t        break;\n\t      }\n\t      while (++i < n) if ((b = array[i]) != null) {\n\t        if (a > b) a = b;\n\t        if (c < b) c = b;\n\t      }\n\t    } else {\n\t      while (++i < n) if ((b = f.call(array, array[i], i)) != null && b >= b) {\n\t        a = c = b;\n\t        break;\n\t      }\n\t      while (++i < n) if ((b = f.call(array, array[i], i)) != null) {\n\t        if (a > b) a = b;\n\t        if (c < b) c = b;\n\t      }\n\t    }\n\t    return [ a, c ];\n\t  };\n\t  function d3_number(x) {\n\t    return x === null ? NaN : +x;\n\t  }\n\t  function d3_numeric(x) {\n\t    return !isNaN(x);\n\t  }\n\t  d3.sum = function(array, f) {\n\t    var s = 0, n = array.length, a, i = -1;\n\t    if (arguments.length === 1) {\n\t      while (++i < n) if (d3_numeric(a = +array[i])) s += a;\n\t    } else {\n\t      while (++i < n) if (d3_numeric(a = +f.call(array, array[i], i))) s += a;\n\t    }\n\t    return s;\n\t  };\n\t  d3.mean = function(array, f) {\n\t    var s = 0, n = array.length, a, i = -1, j = n;\n\t    if (arguments.length === 1) {\n\t      while (++i < n) if (d3_numeric(a = d3_number(array[i]))) s += a; else --j;\n\t    } else {\n\t      while (++i < n) if (d3_numeric(a = d3_number(f.call(array, array[i], i)))) s += a; else --j;\n\t    }\n\t    if (j) return s / j;\n\t  };\n\t  d3.quantile = function(values, p) {\n\t    var H = (values.length - 1) * p + 1, h = Math.floor(H), v = +values[h - 1], e = H - h;\n\t    return e ? v + e * (values[h] - v) : v;\n\t  };\n\t  d3.median = function(array, f) {\n\t    var numbers = [], n = array.length, a, i = -1;\n\t    if (arguments.length === 1) {\n\t      while (++i < n) if (d3_numeric(a = d3_number(array[i]))) numbers.push(a);\n\t    } else {\n\t      while (++i < n) if (d3_numeric(a = d3_number(f.call(array, array[i], i)))) numbers.push(a);\n\t    }\n\t    if (numbers.length) return d3.quantile(numbers.sort(d3_ascending), .5);\n\t  };\n\t  function d3_bisector(compare) {\n\t    return {\n\t      left: function(a, x, lo, hi) {\n\t        if (arguments.length < 3) lo = 0;\n\t        if (arguments.length < 4) hi = a.length;\n\t        while (lo < hi) {\n\t          var mid = lo + hi >>> 1;\n\t          if (compare(a[mid], x) < 0) lo = mid + 1; else hi = mid;\n\t        }\n\t        return lo;\n\t      },\n\t      right: function(a, x, lo, hi) {\n\t        if (arguments.length < 3) lo = 0;\n\t        if (arguments.length < 4) hi = a.length;\n\t        while (lo < hi) {\n\t          var mid = lo + hi >>> 1;\n\t          if (compare(a[mid], x) > 0) hi = mid; else lo = mid + 1;\n\t        }\n\t        return lo;\n\t      }\n\t    };\n\t  }\n\t  var d3_bisect = d3_bisector(d3_ascending);\n\t  d3.bisectLeft = d3_bisect.left;\n\t  d3.bisect = d3.bisectRight = d3_bisect.right;\n\t  d3.bisector = function(f) {\n\t    return d3_bisector(f.length === 1 ? function(d, x) {\n\t      return d3_ascending(f(d), x);\n\t    } : f);\n\t  };\n\t  d3.shuffle = function(array, i0, i1) {\n\t    if ((m = arguments.length) < 3) {\n\t      i1 = array.length;\n\t      if (m < 2) i0 = 0;\n\t    }\n\t    var m = i1 - i0, t, i;\n\t    while (m) {\n\t      i = Math.random() * m-- | 0;\n\t      t = array[m + i0], array[m + i0] = array[i + i0], array[i + i0] = t;\n\t    }\n\t    return array;\n\t  };\n\t  d3.permute = function(array, indexes) {\n\t    var i = indexes.length, permutes = new Array(i);\n\t    while (i--) permutes[i] = array[indexes[i]];\n\t    return permutes;\n\t  };\n\t  d3.pairs = function(array) {\n\t    var i = 0, n = array.length - 1, p0, p1 = array[0], pairs = new Array(n < 0 ? 0 : n);\n\t    while (i < n) pairs[i] = [ p0 = p1, p1 = array[++i] ];\n\t    return pairs;\n\t  };\n\t  d3.zip = function() {\n\t    if (!(n = arguments.length)) return [];\n\t    for (var i = -1, m = d3.min(arguments, d3_zipLength), zips = new Array(m); ++i < m; ) {\n\t      for (var j = -1, n, zip = zips[i] = new Array(n); ++j < n; ) {\n\t        zip[j] = arguments[j][i];\n\t      }\n\t    }\n\t    return zips;\n\t  };\n\t  function d3_zipLength(d) {\n\t    return d.length;\n\t  }\n\t  d3.transpose = function(matrix) {\n\t    return d3.zip.apply(d3, matrix);\n\t  };\n\t  d3.keys = function(map) {\n\t    var keys = [];\n\t    for (var key in map) keys.push(key);\n\t    return keys;\n\t  };\n\t  d3.values = function(map) {\n\t    var values = [];\n\t    for (var key in map) values.push(map[key]);\n\t    return values;\n\t  };\n\t  d3.entries = function(map) {\n\t    var entries = [];\n\t    for (var key in map) entries.push({\n\t      key: key,\n\t      value: map[key]\n\t    });\n\t    return entries;\n\t  };\n\t  d3.merge = function(arrays) {\n\t    var n = arrays.length, m, i = -1, j = 0, merged, array;\n\t    while (++i < n) j += arrays[i].length;\n\t    merged = new Array(j);\n\t    while (--n >= 0) {\n\t      array = arrays[n];\n\t      m = array.length;\n\t      while (--m >= 0) {\n\t        merged[--j] = array[m];\n\t      }\n\t    }\n\t    return merged;\n\t  };\n\t  var abs = Math.abs;\n\t  d3.range = function(start, stop, step) {\n\t    if (arguments.length < 3) {\n\t      step = 1;\n\t      if (arguments.length < 2) {\n\t        stop = start;\n\t        start = 0;\n\t      }\n\t    }\n\t    if ((stop - start) / step === Infinity) throw new Error(\"infinite range\");\n\t    var range = [], k = d3_range_integerScale(abs(step)), i = -1, j;\n\t    start *= k, stop *= k, step *= k;\n\t    if (step < 0) while ((j = start + step * ++i) > stop) range.push(j / k); else while ((j = start + step * ++i) < stop) range.push(j / k);\n\t    return range;\n\t  };\n\t  function d3_range_integerScale(x) {\n\t    var k = 1;\n\t    while (x * k % 1) k *= 10;\n\t    return k;\n\t  }\n\t  function d3_class(ctor, properties) {\n\t    for (var key in properties) {\n\t      Object.defineProperty(ctor.prototype, key, {\n\t        value: properties[key],\n\t        enumerable: false\n\t      });\n\t    }\n\t  }\n\t  d3.map = function(object, f) {\n\t    var map = new d3_Map();\n\t    if (object instanceof d3_Map) {\n\t      object.forEach(function(key, value) {\n\t        map.set(key, value);\n\t      });\n\t    } else if (Array.isArray(object)) {\n\t      var i = -1, n = object.length, o;\n\t      if (arguments.length === 1) while (++i < n) map.set(i, object[i]); else while (++i < n) map.set(f.call(object, o = object[i], i), o);\n\t    } else {\n\t      for (var key in object) map.set(key, object[key]);\n\t    }\n\t    return map;\n\t  };\n\t  function d3_Map() {\n\t    this._ = Object.create(null);\n\t  }\n\t  var d3_map_proto = \"__proto__\", d3_map_zero = \"\\x00\";\n\t  d3_class(d3_Map, {\n\t    has: d3_map_has,\n\t    get: function(key) {\n\t      return this._[d3_map_escape(key)];\n\t    },\n\t    set: function(key, value) {\n\t      return this._[d3_map_escape(key)] = value;\n\t    },\n\t    remove: d3_map_remove,\n\t    keys: d3_map_keys,\n\t    values: function() {\n\t      var values = [];\n\t      for (var key in this._) values.push(this._[key]);\n\t      return values;\n\t    },\n\t    entries: function() {\n\t      var entries = [];\n\t      for (var key in this._) entries.push({\n\t        key: d3_map_unescape(key),\n\t        value: this._[key]\n\t      });\n\t      return entries;\n\t    },\n\t    size: d3_map_size,\n\t    empty: d3_map_empty,\n\t    forEach: function(f) {\n\t      for (var key in this._) f.call(this, d3_map_unescape(key), this._[key]);\n\t    }\n\t  });\n\t  function d3_map_escape(key) {\n\t    return (key += \"\") === d3_map_proto || key[0] === d3_map_zero ? d3_map_zero + key : key;\n\t  }\n\t  function d3_map_unescape(key) {\n\t    return (key += \"\")[0] === d3_map_zero ? key.slice(1) : key;\n\t  }\n\t  function d3_map_has(key) {\n\t    return d3_map_escape(key) in this._;\n\t  }\n\t  function d3_map_remove(key) {\n\t    return (key = d3_map_escape(key)) in this._ && delete this._[key];\n\t  }\n\t  function d3_map_keys() {\n\t    var keys = [];\n\t    for (var key in this._) keys.push(d3_map_unescape(key));\n\t    return keys;\n\t  }\n\t  function d3_map_size() {\n\t    var size = 0;\n\t    for (var key in this._) ++size;\n\t    return size;\n\t  }\n\t  function d3_map_empty() {\n\t    for (var key in this._) return false;\n\t    return true;\n\t  }\n\t  d3.nest = function() {\n\t    var nest = {}, keys = [], sortKeys = [], sortValues, rollup;\n\t    function map(mapType, array, depth) {\n\t      if (depth >= keys.length) return rollup ? rollup.call(nest, array) : sortValues ? array.sort(sortValues) : array;\n\t      var i = -1, n = array.length, key = keys[depth++], keyValue, object, setter, valuesByKey = new d3_Map(), values;\n\t      while (++i < n) {\n\t        if (values = valuesByKey.get(keyValue = key(object = array[i]))) {\n\t          values.push(object);\n\t        } else {\n\t          valuesByKey.set(keyValue, [ object ]);\n\t        }\n\t      }\n\t      if (mapType) {\n\t        object = mapType();\n\t        setter = function(keyValue, values) {\n\t          object.set(keyValue, map(mapType, values, depth));\n\t        };\n\t      } else {\n\t        object = {};\n\t        setter = function(keyValue, values) {\n\t          object[keyValue] = map(mapType, values, depth);\n\t        };\n\t      }\n\t      valuesByKey.forEach(setter);\n\t      return object;\n\t    }\n\t    function entries(map, depth) {\n\t      if (depth >= keys.length) return map;\n\t      var array = [], sortKey = sortKeys[depth++];\n\t      map.forEach(function(key, keyMap) {\n\t        array.push({\n\t          key: key,\n\t          values: entries(keyMap, depth)\n\t        });\n\t      });\n\t      return sortKey ? array.sort(function(a, b) {\n\t        return sortKey(a.key, b.key);\n\t      }) : array;\n\t    }\n\t    nest.map = function(array, mapType) {\n\t      return map(mapType, array, 0);\n\t    };\n\t    nest.entries = function(array) {\n\t      return entries(map(d3.map, array, 0), 0);\n\t    };\n\t    nest.key = function(d) {\n\t      keys.push(d);\n\t      return nest;\n\t    };\n\t    nest.sortKeys = function(order) {\n\t      sortKeys[keys.length - 1] = order;\n\t      return nest;\n\t    };\n\t    nest.sortValues = function(order) {\n\t      sortValues = order;\n\t      return nest;\n\t    };\n\t    nest.rollup = function(f) {\n\t      rollup = f;\n\t      return nest;\n\t    };\n\t    return nest;\n\t  };\n\t  d3.set = function(array) {\n\t    var set = new d3_Set();\n\t    if (array) for (var i = 0, n = array.length; i < n; ++i) set.add(array[i]);\n\t    return set;\n\t  };\n\t  function d3_Set() {\n\t    this._ = Object.create(null);\n\t  }\n\t  d3_class(d3_Set, {\n\t    has: d3_map_has,\n\t    add: function(key) {\n\t      this._[d3_map_escape(key += \"\")] = true;\n\t      return key;\n\t    },\n\t    remove: d3_map_remove,\n\t    values: d3_map_keys,\n\t    size: d3_map_size,\n\t    empty: d3_map_empty,\n\t    forEach: function(f) {\n\t      for (var key in this._) f.call(this, d3_map_unescape(key));\n\t    }\n\t  });\n\t  d3.behavior = {};\n\t  d3.rebind = function(target, source) {\n\t    var i = 1, n = arguments.length, method;\n\t    while (++i < n) target[method = arguments[i]] = d3_rebind(target, source, source[method]);\n\t    return target;\n\t  };\n\t  function d3_rebind(target, source, method) {\n\t    return function() {\n\t      var value = method.apply(source, arguments);\n\t      return value === source ? target : value;\n\t    };\n\t  }\n\t  function d3_vendorSymbol(object, name) {\n\t    if (name in object) return name;\n\t    name = name.charAt(0).toUpperCase() + name.slice(1);\n\t    for (var i = 0, n = d3_vendorPrefixes.length; i < n; ++i) {\n\t      var prefixName = d3_vendorPrefixes[i] + name;\n\t      if (prefixName in object) return prefixName;\n\t    }\n\t  }\n\t  var d3_vendorPrefixes = [ \"webkit\", \"ms\", \"moz\", \"Moz\", \"o\", \"O\" ];\n\t  function d3_noop() {}\n\t  d3.dispatch = function() {\n\t    var dispatch = new d3_dispatch(), i = -1, n = arguments.length;\n\t    while (++i < n) dispatch[arguments[i]] = d3_dispatch_event(dispatch);\n\t    return dispatch;\n\t  };\n\t  function d3_dispatch() {}\n\t  d3_dispatch.prototype.on = function(type, listener) {\n\t    var i = type.indexOf(\".\"), name = \"\";\n\t    if (i >= 0) {\n\t      name = type.slice(i + 1);\n\t      type = type.slice(0, i);\n\t    }\n\t    if (type) return arguments.length < 2 ? this[type].on(name) : this[type].on(name, listener);\n\t    if (arguments.length === 2) {\n\t      if (listener == null) for (type in this) {\n\t        if (this.hasOwnProperty(type)) this[type].on(name, null);\n\t      }\n\t      return this;\n\t    }\n\t  };\n\t  function d3_dispatch_event(dispatch) {\n\t    var listeners = [], listenerByName = new d3_Map();\n\t    function event() {\n\t      var z = listeners, i = -1, n = z.length, l;\n\t      while (++i < n) if (l = z[i].on) l.apply(this, arguments);\n\t      return dispatch;\n\t    }\n\t    event.on = function(name, listener) {\n\t      var l = listenerByName.get(name), i;\n\t      if (arguments.length < 2) return l && l.on;\n\t      if (l) {\n\t        l.on = null;\n\t        listeners = listeners.slice(0, i = listeners.indexOf(l)).concat(listeners.slice(i + 1));\n\t        listenerByName.remove(name);\n\t      }\n\t      if (listener) listeners.push(listenerByName.set(name, {\n\t        on: listener\n\t      }));\n\t      return dispatch;\n\t    };\n\t    return event;\n\t  }\n\t  d3.event = null;\n\t  function d3_eventPreventDefault() {\n\t    d3.event.preventDefault();\n\t  }\n\t  function d3_eventSource() {\n\t    var e = d3.event, s;\n\t    while (s = e.sourceEvent) e = s;\n\t    return e;\n\t  }\n\t  function d3_eventDispatch(target) {\n\t    var dispatch = new d3_dispatch(), i = 0, n = arguments.length;\n\t    while (++i < n) dispatch[arguments[i]] = d3_dispatch_event(dispatch);\n\t    dispatch.of = function(thiz, argumentz) {\n\t      return function(e1) {\n\t        try {\n\t          var e0 = e1.sourceEvent = d3.event;\n\t          e1.target = target;\n\t          d3.event = e1;\n\t          dispatch[e1.type].apply(thiz, argumentz);\n\t        } finally {\n\t          d3.event = e0;\n\t        }\n\t      };\n\t    };\n\t    return dispatch;\n\t  }\n\t  d3.requote = function(s) {\n\t    return s.replace(d3_requote_re, \"\\\\$&\");\n\t  };\n\t  var d3_requote_re = /[\\\\\\^\\$\\*\\+\\?\\|\\[\\]\\(\\)\\.\\{\\}]/g;\n\t  var d3_subclass = {}.__proto__ ? function(object, prototype) {\n\t    object.__proto__ = prototype;\n\t  } : function(object, prototype) {\n\t    for (var property in prototype) object[property] = prototype[property];\n\t  };\n\t  function d3_selection(groups) {\n\t    d3_subclass(groups, d3_selectionPrototype);\n\t    return groups;\n\t  }\n\t  var d3_select = function(s, n) {\n\t    return n.querySelector(s);\n\t  }, d3_selectAll = function(s, n) {\n\t    return n.querySelectorAll(s);\n\t  }, d3_selectMatcher = d3_documentElement.matches || d3_documentElement[d3_vendorSymbol(d3_documentElement, \"matchesSelector\")], d3_selectMatches = function(n, s) {\n\t    return d3_selectMatcher.call(n, s);\n\t  };\n\t  if (typeof Sizzle === \"function\") {\n\t    d3_select = function(s, n) {\n\t      return Sizzle(s, n)[0] || null;\n\t    };\n\t    d3_selectAll = Sizzle;\n\t    d3_selectMatches = Sizzle.matchesSelector;\n\t  }\n\t  d3.selection = function() {\n\t    return d3_selectionRoot;\n\t  };\n\t  var d3_selectionPrototype = d3.selection.prototype = [];\n\t  d3_selectionPrototype.select = function(selector) {\n\t    var subgroups = [], subgroup, subnode, group, node;\n\t    selector = d3_selection_selector(selector);\n\t    for (var j = -1, m = this.length; ++j < m; ) {\n\t      subgroups.push(subgroup = []);\n\t      subgroup.parentNode = (group = this[j]).parentNode;\n\t      for (var i = -1, n = group.length; ++i < n; ) {\n\t        if (node = group[i]) {\n\t          subgroup.push(subnode = selector.call(node, node.__data__, i, j));\n\t          if (subnode && \"__data__\" in node) subnode.__data__ = node.__data__;\n\t        } else {\n\t          subgroup.push(null);\n\t        }\n\t      }\n\t    }\n\t    return d3_selection(subgroups);\n\t  };\n\t  function d3_selection_selector(selector) {\n\t    return typeof selector === \"function\" ? selector : function() {\n\t      return d3_select(selector, this);\n\t    };\n\t  }\n\t  d3_selectionPrototype.selectAll = function(selector) {\n\t    var subgroups = [], subgroup, node;\n\t    selector = d3_selection_selectorAll(selector);\n\t    for (var j = -1, m = this.length; ++j < m; ) {\n\t      for (var group = this[j], i = -1, n = group.length; ++i < n; ) {\n\t        if (node = group[i]) {\n\t          subgroups.push(subgroup = d3_array(selector.call(node, node.__data__, i, j)));\n\t          subgroup.parentNode = node;\n\t        }\n\t      }\n\t    }\n\t    return d3_selection(subgroups);\n\t  };\n\t  function d3_selection_selectorAll(selector) {\n\t    return typeof selector === \"function\" ? selector : function() {\n\t      return d3_selectAll(selector, this);\n\t    };\n\t  }\n\t  var d3_nsPrefix = {\n\t    svg: \"http://www.w3.org/2000/svg\",\n\t    xhtml: \"http://www.w3.org/1999/xhtml\",\n\t    xlink: \"http://www.w3.org/1999/xlink\",\n\t    xml: \"http://www.w3.org/XML/1998/namespace\",\n\t    xmlns: \"http://www.w3.org/2000/xmlns/\"\n\t  };\n\t  d3.ns = {\n\t    prefix: d3_nsPrefix,\n\t    qualify: function(name) {\n\t      var i = name.indexOf(\":\"), prefix = name;\n\t      if (i >= 0) {\n\t        prefix = name.slice(0, i);\n\t        name = name.slice(i + 1);\n\t      }\n\t      return d3_nsPrefix.hasOwnProperty(prefix) ? {\n\t        space: d3_nsPrefix[prefix],\n\t        local: name\n\t      } : name;\n\t    }\n\t  };\n\t  d3_selectionPrototype.attr = function(name, value) {\n\t    if (arguments.length < 2) {\n\t      if (typeof name === \"string\") {\n\t        var node = this.node();\n\t        name = d3.ns.qualify(name);\n\t        return name.local ? node.getAttributeNS(name.space, name.local) : node.getAttribute(name);\n\t      }\n\t      for (value in name) this.each(d3_selection_attr(value, name[value]));\n\t      return this;\n\t    }\n\t    return this.each(d3_selection_attr(name, value));\n\t  };\n\t  function d3_selection_attr(name, value) {\n\t    name = d3.ns.qualify(name);\n\t    function attrNull() {\n\t      this.removeAttribute(name);\n\t    }\n\t    function attrNullNS() {\n\t      this.removeAttributeNS(name.space, name.local);\n\t    }\n\t    function attrConstant() {\n\t      this.setAttribute(name, value);\n\t    }\n\t    function attrConstantNS() {\n\t      this.setAttributeNS(name.space, name.local, value);\n\t    }\n\t    function attrFunction() {\n\t      var x = value.apply(this, arguments);\n\t      if (x == null) this.removeAttribute(name); else this.setAttribute(name, x);\n\t    }\n\t    function attrFunctionNS() {\n\t      var x = value.apply(this, arguments);\n\t      if (x == null) this.removeAttributeNS(name.space, name.local); else this.setAttributeNS(name.space, name.local, x);\n\t    }\n\t    return value == null ? name.local ? attrNullNS : attrNull : typeof value === \"function\" ? name.local ? attrFunctionNS : attrFunction : name.local ? attrConstantNS : attrConstant;\n\t  }\n\t  function d3_collapse(s) {\n\t    return s.trim().replace(/\\s+/g, \" \");\n\t  }\n\t  d3_selectionPrototype.classed = function(name, value) {\n\t    if (arguments.length < 2) {\n\t      if (typeof name === \"string\") {\n\t        var node = this.node(), n = (name = d3_selection_classes(name)).length, i = -1;\n\t        if (value = node.classList) {\n\t          while (++i < n) if (!value.contains(name[i])) return false;\n\t        } else {\n\t          value = node.getAttribute(\"class\");\n\t          while (++i < n) if (!d3_selection_classedRe(name[i]).test(value)) return false;\n\t        }\n\t        return true;\n\t      }\n\t      for (value in name) this.each(d3_selection_classed(value, name[value]));\n\t      return this;\n\t    }\n\t    return this.each(d3_selection_classed(name, value));\n\t  };\n\t  function d3_selection_classedRe(name) {\n\t    return new RegExp(\"(?:^|\\\\s+)\" + d3.requote(name) + \"(?:\\\\s+|$)\", \"g\");\n\t  }\n\t  function d3_selection_classes(name) {\n\t    return (name + \"\").trim().split(/^|\\s+/);\n\t  }\n\t  function d3_selection_classed(name, value) {\n\t    name = d3_selection_classes(name).map(d3_selection_classedName);\n\t    var n = name.length;\n\t    function classedConstant() {\n\t      var i = -1;\n\t      while (++i < n) name[i](this, value);\n\t    }\n\t    function classedFunction() {\n\t      var i = -1, x = value.apply(this, arguments);\n\t      while (++i < n) name[i](this, x);\n\t    }\n\t    return typeof value === \"function\" ? classedFunction : classedConstant;\n\t  }\n\t  function d3_selection_classedName(name) {\n\t    var re = d3_selection_classedRe(name);\n\t    return function(node, value) {\n\t      if (c = node.classList) return value ? c.add(name) : c.remove(name);\n\t      var c = node.getAttribute(\"class\") || \"\";\n\t      if (value) {\n\t        re.lastIndex = 0;\n\t        if (!re.test(c)) node.setAttribute(\"class\", d3_collapse(c + \" \" + name));\n\t      } else {\n\t        node.setAttribute(\"class\", d3_collapse(c.replace(re, \" \")));\n\t      }\n\t    };\n\t  }\n\t  d3_selectionPrototype.style = function(name, value, priority) {\n\t    var n = arguments.length;\n\t    if (n < 3) {\n\t      if (typeof name !== \"string\") {\n\t        if (n < 2) value = \"\";\n\t        for (priority in name) this.each(d3_selection_style(priority, name[priority], value));\n\t        return this;\n\t      }\n\t      if (n < 2) return d3_window.getComputedStyle(this.node(), null).getPropertyValue(name);\n\t      priority = \"\";\n\t    }\n\t    return this.each(d3_selection_style(name, value, priority));\n\t  };\n\t  function d3_selection_style(name, value, priority) {\n\t    function styleNull() {\n\t      this.style.removeProperty(name);\n\t    }\n\t    function styleConstant() {\n\t      this.style.setProperty(name, value, priority);\n\t    }\n\t    function styleFunction() {\n\t      var x = value.apply(this, arguments);\n\t      if (x == null) this.style.removeProperty(name); else this.style.setProperty(name, x, priority);\n\t    }\n\t    return value == null ? styleNull : typeof value === \"function\" ? styleFunction : styleConstant;\n\t  }\n\t  d3_selectionPrototype.property = function(name, value) {\n\t    if (arguments.length < 2) {\n\t      if (typeof name === \"string\") return this.node()[name];\n\t      for (value in name) this.each(d3_selection_property(value, name[value]));\n\t      return this;\n\t    }\n\t    return this.each(d3_selection_property(name, value));\n\t  };\n\t  function d3_selection_property(name, value) {\n\t    function propertyNull() {\n\t      delete this[name];\n\t    }\n\t    function propertyConstant() {\n\t      this[name] = value;\n\t    }\n\t    function propertyFunction() {\n\t      var x = value.apply(this, arguments);\n\t      if (x == null) delete this[name]; else this[name] = x;\n\t    }\n\t    return value == null ? propertyNull : typeof value === \"function\" ? propertyFunction : propertyConstant;\n\t  }\n\t  d3_selectionPrototype.text = function(value) {\n\t    return arguments.length ? this.each(typeof value === \"function\" ? function() {\n\t      var v = value.apply(this, arguments);\n\t      this.textContent = v == null ? \"\" : v;\n\t    } : value == null ? function() {\n\t      this.textContent = \"\";\n\t    } : function() {\n\t      this.textContent = value;\n\t    }) : this.node().textContent;\n\t  };\n\t  d3_selectionPrototype.html = function(value) {\n\t    return arguments.length ? this.each(typeof value === \"function\" ? function() {\n\t      var v = value.apply(this, arguments);\n\t      this.innerHTML = v == null ? \"\" : v;\n\t    } : value == null ? function() {\n\t      this.innerHTML = \"\";\n\t    } : function() {\n\t      this.innerHTML = value;\n\t    }) : this.node().innerHTML;\n\t  };\n\t  d3_selectionPrototype.append = function(name) {\n\t    name = d3_selection_creator(name);\n\t    return this.select(function() {\n\t      return this.appendChild(name.apply(this, arguments));\n\t    });\n\t  };\n\t  function d3_selection_creator(name) {\n\t    return typeof name === \"function\" ? name : (name = d3.ns.qualify(name)).local ? function() {\n\t      return this.ownerDocument.createElementNS(name.space, name.local);\n\t    } : function() {\n\t      return this.ownerDocument.createElementNS(this.namespaceURI, name);\n\t    };\n\t  }\n\t  d3_selectionPrototype.insert = function(name, before) {\n\t    name = d3_selection_creator(name);\n\t    before = d3_selection_selector(before);\n\t    return this.select(function() {\n\t      return this.insertBefore(name.apply(this, arguments), before.apply(this, arguments) || null);\n\t    });\n\t  };\n\t  d3_selectionPrototype.remove = function() {\n\t    return this.each(d3_selectionRemove);\n\t  };\n\t  function d3_selectionRemove() {\n\t    var parent = this.parentNode;\n\t    if (parent) parent.removeChild(this);\n\t  }\n\t  d3_selectionPrototype.data = function(value, key) {\n\t    var i = -1, n = this.length, group, node;\n\t    if (!arguments.length) {\n\t      value = new Array(n = (group = this[0]).length);\n\t      while (++i < n) {\n\t        if (node = group[i]) {\n\t          value[i] = node.__data__;\n\t        }\n\t      }\n\t      return value;\n\t    }\n\t    function bind(group, groupData) {\n\t      var i, n = group.length, m = groupData.length, n0 = Math.min(n, m), updateNodes = new Array(m), enterNodes = new Array(m), exitNodes = new Array(n), node, nodeData;\n\t      if (key) {\n\t        var nodeByKeyValue = new d3_Map(), keyValues = new Array(n), keyValue;\n\t        for (i = -1; ++i < n; ) {\n\t          if (nodeByKeyValue.has(keyValue = key.call(node = group[i], node.__data__, i))) {\n\t            exitNodes[i] = node;\n\t          } else {\n\t            nodeByKeyValue.set(keyValue, node);\n\t          }\n\t          keyValues[i] = keyValue;\n\t        }\n\t        for (i = -1; ++i < m; ) {\n\t          if (!(node = nodeByKeyValue.get(keyValue = key.call(groupData, nodeData = groupData[i], i)))) {\n\t            enterNodes[i] = d3_selection_dataNode(nodeData);\n\t          } else if (node !== true) {\n\t            updateNodes[i] = node;\n\t            node.__data__ = nodeData;\n\t          }\n\t          nodeByKeyValue.set(keyValue, true);\n\t        }\n\t        for (i = -1; ++i < n; ) {\n\t          if (nodeByKeyValue.get(keyValues[i]) !== true) {\n\t            exitNodes[i] = group[i];\n\t          }\n\t        }\n\t      } else {\n\t        for (i = -1; ++i < n0; ) {\n\t          node = group[i];\n\t          nodeData = groupData[i];\n\t          if (node) {\n\t            node.__data__ = nodeData;\n\t            updateNodes[i] = node;\n\t          } else {\n\t            enterNodes[i] = d3_selection_dataNode(nodeData);\n\t          }\n\t        }\n\t        for (;i < m; ++i) {\n\t          enterNodes[i] = d3_selection_dataNode(groupData[i]);\n\t        }\n\t        for (;i < n; ++i) {\n\t          exitNodes[i] = group[i];\n\t        }\n\t      }\n\t      enterNodes.update = updateNodes;\n\t      enterNodes.parentNode = updateNodes.parentNode = exitNodes.parentNode = group.parentNode;\n\t      enter.push(enterNodes);\n\t      update.push(updateNodes);\n\t      exit.push(exitNodes);\n\t    }\n\t    var enter = d3_selection_enter([]), update = d3_selection([]), exit = d3_selection([]);\n\t    if (typeof value === \"function\") {\n\t      while (++i < n) {\n\t        bind(group = this[i], value.call(group, group.parentNode.__data__, i));\n\t      }\n\t    } else {\n\t      while (++i < n) {\n\t        bind(group = this[i], value);\n\t      }\n\t    }\n\t    update.enter = function() {\n\t      return enter;\n\t    };\n\t    update.exit = function() {\n\t      return exit;\n\t    };\n\t    return update;\n\t  };\n\t  function d3_selection_dataNode(data) {\n\t    return {\n\t      __data__: data\n\t    };\n\t  }\n\t  d3_selectionPrototype.datum = function(value) {\n\t    return arguments.length ? this.property(\"__data__\", value) : this.property(\"__data__\");\n\t  };\n\t  d3_selectionPrototype.filter = function(filter) {\n\t    var subgroups = [], subgroup, group, node;\n\t    if (typeof filter !== \"function\") filter = d3_selection_filter(filter);\n\t    for (var j = 0, m = this.length; j < m; j++) {\n\t      subgroups.push(subgroup = []);\n\t      subgroup.parentNode = (group = this[j]).parentNode;\n\t      for (var i = 0, n = group.length; i < n; i++) {\n\t        if ((node = group[i]) && filter.call(node, node.__data__, i, j)) {\n\t          subgroup.push(node);\n\t        }\n\t      }\n\t    }\n\t    return d3_selection(subgroups);\n\t  };\n\t  function d3_selection_filter(selector) {\n\t    return function() {\n\t      return d3_selectMatches(this, selector);\n\t    };\n\t  }\n\t  d3_selectionPrototype.order = function() {\n\t    for (var j = -1, m = this.length; ++j < m; ) {\n\t      for (var group = this[j], i = group.length - 1, next = group[i], node; --i >= 0; ) {\n\t        if (node = group[i]) {\n\t          if (next && next !== node.nextSibling) next.parentNode.insertBefore(node, next);\n\t          next = node;\n\t        }\n\t      }\n\t    }\n\t    return this;\n\t  };\n\t  d3_selectionPrototype.sort = function(comparator) {\n\t    comparator = d3_selection_sortComparator.apply(this, arguments);\n\t    for (var j = -1, m = this.length; ++j < m; ) this[j].sort(comparator);\n\t    return this.order();\n\t  };\n\t  function d3_selection_sortComparator(comparator) {\n\t    if (!arguments.length) comparator = d3_ascending;\n\t    return function(a, b) {\n\t      return a && b ? comparator(a.__data__, b.__data__) : !a - !b;\n\t    };\n\t  }\n\t  d3_selectionPrototype.each = function(callback) {\n\t    return d3_selection_each(this, function(node, i, j) {\n\t      callback.call(node, node.__data__, i, j);\n\t    });\n\t  };\n\t  function d3_selection_each(groups, callback) {\n\t    for (var j = 0, m = groups.length; j < m; j++) {\n\t      for (var group = groups[j], i = 0, n = group.length, node; i < n; i++) {\n\t        if (node = group[i]) callback(node, i, j);\n\t      }\n\t    }\n\t    return groups;\n\t  }\n\t  d3_selectionPrototype.call = function(callback) {\n\t    var args = d3_array(arguments);\n\t    callback.apply(args[0] = this, args);\n\t    return this;\n\t  };\n\t  d3_selectionPrototype.empty = function() {\n\t    return !this.node();\n\t  };\n\t  d3_selectionPrototype.node = function() {\n\t    for (var j = 0, m = this.length; j < m; j++) {\n\t      for (var group = this[j], i = 0, n = group.length; i < n; i++) {\n\t        var node = group[i];\n\t        if (node) return node;\n\t      }\n\t    }\n\t    return null;\n\t  };\n\t  d3_selectionPrototype.size = function() {\n\t    var n = 0;\n\t    d3_selection_each(this, function() {\n\t      ++n;\n\t    });\n\t    return n;\n\t  };\n\t  function d3_selection_enter(selection) {\n\t    d3_subclass(selection, d3_selection_enterPrototype);\n\t    return selection;\n\t  }\n\t  var d3_selection_enterPrototype = [];\n\t  d3.selection.enter = d3_selection_enter;\n\t  d3.selection.enter.prototype = d3_selection_enterPrototype;\n\t  d3_selection_enterPrototype.append = d3_selectionPrototype.append;\n\t  d3_selection_enterPrototype.empty = d3_selectionPrototype.empty;\n\t  d3_selection_enterPrototype.node = d3_selectionPrototype.node;\n\t  d3_selection_enterPrototype.call = d3_selectionPrototype.call;\n\t  d3_selection_enterPrototype.size = d3_selectionPrototype.size;\n\t  d3_selection_enterPrototype.select = function(selector) {\n\t    var subgroups = [], subgroup, subnode, upgroup, group, node;\n\t    for (var j = -1, m = this.length; ++j < m; ) {\n\t      upgroup = (group = this[j]).update;\n\t      subgroups.push(subgroup = []);\n\t      subgroup.parentNode = group.parentNode;\n\t      for (var i = -1, n = group.length; ++i < n; ) {\n\t        if (node = group[i]) {\n\t          subgroup.push(upgroup[i] = subnode = selector.call(group.parentNode, node.__data__, i, j));\n\t          subnode.__data__ = node.__data__;\n\t        } else {\n\t          subgroup.push(null);\n\t        }\n\t      }\n\t    }\n\t    return d3_selection(subgroups);\n\t  };\n\t  d3_selection_enterPrototype.insert = function(name, before) {\n\t    if (arguments.length < 2) before = d3_selection_enterInsertBefore(this);\n\t    return d3_selectionPrototype.insert.call(this, name, before);\n\t  };\n\t  function d3_selection_enterInsertBefore(enter) {\n\t    var i0, j0;\n\t    return function(d, i, j) {\n\t      var group = enter[j].update, n = group.length, node;\n\t      if (j != j0) j0 = j, i0 = 0;\n\t      if (i >= i0) i0 = i + 1;\n\t      while (!(node = group[i0]) && ++i0 < n) ;\n\t      return node;\n\t    };\n\t  }\n\t  d3_selectionPrototype.transition = function(name) {\n\t    var id = d3_transitionInheritId || ++d3_transitionId, ns = d3_transitionNamespace(name), subgroups = [], subgroup, node, transition = d3_transitionInherit || {\n\t      time: Date.now(),\n\t      ease: d3_ease_cubicInOut,\n\t      delay: 0,\n\t      duration: 250\n\t    };\n\t    for (var j = -1, m = this.length; ++j < m; ) {\n\t      subgroups.push(subgroup = []);\n\t      for (var group = this[j], i = -1, n = group.length; ++i < n; ) {\n\t        if (node = group[i]) d3_transitionNode(node, i, ns, id, transition);\n\t        subgroup.push(node);\n\t      }\n\t    }\n\t    return d3_transition(subgroups, ns, id);\n\t  };\n\t  d3_selectionPrototype.interrupt = function(name) {\n\t    var ns = d3_transitionNamespace(name);\n\t    return this.each(function() {\n\t      var lock = this[ns];\n\t      if (lock) ++lock.active;\n\t    });\n\t  };\n\t  function d3_selection_interrupt(that) {\n\t    var lock = that.__transition__;\n\t    if (lock) ++lock.active;\n\t  }\n\t  d3.select = function(node) {\n\t    var group = [ typeof node === \"string\" ? d3_select(node, d3_document) : node ];\n\t    group.parentNode = d3_documentElement;\n\t    return d3_selection([ group ]);\n\t  };\n\t  d3.selectAll = function(nodes) {\n\t    var group = d3_array(typeof nodes === \"string\" ? d3_selectAll(nodes, d3_document) : nodes);\n\t    group.parentNode = d3_documentElement;\n\t    return d3_selection([ group ]);\n\t  };\n\t  var d3_selectionRoot = d3.select(d3_documentElement);\n\t  d3_selectionPrototype.on = function(type, listener, capture) {\n\t    var n = arguments.length;\n\t    if (n < 3) {\n\t      if (typeof type !== \"string\") {\n\t        if (n < 2) listener = false;\n\t        for (capture in type) this.each(d3_selection_on(capture, type[capture], listener));\n\t        return this;\n\t      }\n\t      if (n < 2) return (n = this.node()[\"__on\" + type]) && n._;\n\t      capture = false;\n\t    }\n\t    return this.each(d3_selection_on(type, listener, capture));\n\t  };\n\t  function d3_selection_on(type, listener, capture) {\n\t    var name = \"__on\" + type, i = type.indexOf(\".\"), wrap = d3_selection_onListener;\n\t    if (i > 0) type = type.slice(0, i);\n\t    var filter = d3_selection_onFilters.get(type);\n\t    if (filter) type = filter, wrap = d3_selection_onFilter;\n\t    function onRemove() {\n\t      var l = this[name];\n\t      if (l) {\n\t        this.removeEventListener(type, l, l.$);\n\t        delete this[name];\n\t      }\n\t    }\n\t    function onAdd() {\n\t      var l = wrap(listener, d3_array(arguments));\n\t      onRemove.call(this);\n\t      this.addEventListener(type, this[name] = l, l.$ = capture);\n\t      l._ = listener;\n\t    }\n\t    function removeAll() {\n\t      var re = new RegExp(\"^__on([^.]+)\" + d3.requote(type) + \"$\"), match;\n\t      for (var name in this) {\n\t        if (match = name.match(re)) {\n\t          var l = this[name];\n\t          this.removeEventListener(match[1], l, l.$);\n\t          delete this[name];\n\t        }\n\t      }\n\t    }\n\t    return i ? listener ? onAdd : onRemove : listener ? d3_noop : removeAll;\n\t  }\n\t  var d3_selection_onFilters = d3.map({\n\t    mouseenter: \"mouseover\",\n\t    mouseleave: \"mouseout\"\n\t  });\n\t  d3_selection_onFilters.forEach(function(k) {\n\t    if (\"on\" + k in d3_document) d3_selection_onFilters.remove(k);\n\t  });\n\t  function d3_selection_onListener(listener, argumentz) {\n\t    return function(e) {\n\t      var o = d3.event;\n\t      d3.event = e;\n\t      argumentz[0] = this.__data__;\n\t      try {\n\t        listener.apply(this, argumentz);\n\t      } finally {\n\t        d3.event = o;\n\t      }\n\t    };\n\t  }\n\t  function d3_selection_onFilter(listener, argumentz) {\n\t    var l = d3_selection_onListener(listener, argumentz);\n\t    return function(e) {\n\t      var target = this, related = e.relatedTarget;\n\t      if (!related || related !== target && !(related.compareDocumentPosition(target) & 8)) {\n\t        l.call(target, e);\n\t      }\n\t    };\n\t  }\n\t  var d3_event_dragSelect = \"onselectstart\" in d3_document ? null : d3_vendorSymbol(d3_documentElement.style, \"userSelect\"), d3_event_dragId = 0;\n\t  function d3_event_dragSuppress() {\n\t    var name = \".dragsuppress-\" + ++d3_event_dragId, click = \"click\" + name, w = d3.select(d3_window).on(\"touchmove\" + name, d3_eventPreventDefault).on(\"dragstart\" + name, d3_eventPreventDefault).on(\"selectstart\" + name, d3_eventPreventDefault);\n\t    if (d3_event_dragSelect) {\n\t      var style = d3_documentElement.style, select = style[d3_event_dragSelect];\n\t      style[d3_event_dragSelect] = \"none\";\n\t    }\n\t    return function(suppressClick) {\n\t      w.on(name, null);\n\t      if (d3_event_dragSelect) style[d3_event_dragSelect] = select;\n\t      if (suppressClick) {\n\t        var off = function() {\n\t          w.on(click, null);\n\t        };\n\t        w.on(click, function() {\n\t          d3_eventPreventDefault();\n\t          off();\n\t        }, true);\n\t        setTimeout(off, 0);\n\t      }\n\t    };\n\t  }\n\t  d3.mouse = function(container) {\n\t    return d3_mousePoint(container, d3_eventSource());\n\t  };\n\t  var d3_mouse_bug44083 = /WebKit/.test(d3_window.navigator.userAgent) ? -1 : 0;\n\t  function d3_mousePoint(container, e) {\n\t    if (e.changedTouches) e = e.changedTouches[0];\n\t    var svg = container.ownerSVGElement || container;\n\t    if (svg.createSVGPoint) {\n\t      var point = svg.createSVGPoint();\n\t      if (d3_mouse_bug44083 < 0 && (d3_window.scrollX || d3_window.scrollY)) {\n\t        svg = d3.select(\"body\").append(\"svg\").style({\n\t          position: \"absolute\",\n\t          top: 0,\n\t          left: 0,\n\t          margin: 0,\n\t          padding: 0,\n\t          border: \"none\"\n\t        }, \"important\");\n\t        var ctm = svg[0][0].getScreenCTM();\n\t        d3_mouse_bug44083 = !(ctm.f || ctm.e);\n\t        svg.remove();\n\t      }\n\t      if (d3_mouse_bug44083) point.x = e.pageX, point.y = e.pageY; else point.x = e.clientX, \n\t      point.y = e.clientY;\n\t      point = point.matrixTransform(container.getScreenCTM().inverse());\n\t      return [ point.x, point.y ];\n\t    }\n\t    var rect = container.getBoundingClientRect();\n\t    return [ e.clientX - rect.left - container.clientLeft, e.clientY - rect.top - container.clientTop ];\n\t  }\n\t  d3.touch = function(container, touches, identifier) {\n\t    if (arguments.length < 3) identifier = touches, touches = d3_eventSource().changedTouches;\n\t    if (touches) for (var i = 0, n = touches.length, touch; i < n; ++i) {\n\t      if ((touch = touches[i]).identifier === identifier) {\n\t        return d3_mousePoint(container, touch);\n\t      }\n\t    }\n\t  };\n\t  d3.behavior.drag = function() {\n\t    var event = d3_eventDispatch(drag, \"drag\", \"dragstart\", \"dragend\"), origin = null, mousedown = dragstart(d3_noop, d3.mouse, d3_behavior_dragMouseSubject, \"mousemove\", \"mouseup\"), touchstart = dragstart(d3_behavior_dragTouchId, d3.touch, d3_behavior_dragTouchSubject, \"touchmove\", \"touchend\");\n\t    function drag() {\n\t      this.on(\"mousedown.drag\", mousedown).on(\"touchstart.drag\", touchstart);\n\t    }\n\t    function dragstart(id, position, subject, move, end) {\n\t      return function() {\n\t        var that = this, target = d3.event.target, parent = that.parentNode, dispatch = event.of(that, arguments), dragged = 0, dragId = id(), dragName = \".drag\" + (dragId == null ? \"\" : \"-\" + dragId), dragOffset, dragSubject = d3.select(subject()).on(move + dragName, moved).on(end + dragName, ended), dragRestore = d3_event_dragSuppress(), position0 = position(parent, dragId);\n\t        if (origin) {\n\t          dragOffset = origin.apply(that, arguments);\n\t          dragOffset = [ dragOffset.x - position0[0], dragOffset.y - position0[1] ];\n\t        } else {\n\t          dragOffset = [ 0, 0 ];\n\t        }\n\t        dispatch({\n\t          type: \"dragstart\"\n\t        });\n\t        function moved() {\n\t          var position1 = position(parent, dragId), dx, dy;\n\t          if (!position1) return;\n\t          dx = position1[0] - position0[0];\n\t          dy = position1[1] - position0[1];\n\t          dragged |= dx | dy;\n\t          position0 = position1;\n\t          dispatch({\n\t            type: \"drag\",\n\t            x: position1[0] + dragOffset[0],\n\t            y: position1[1] + dragOffset[1],\n\t            dx: dx,\n\t            dy: dy\n\t          });\n\t        }\n\t        function ended() {\n\t          if (!position(parent, dragId)) return;\n\t          dragSubject.on(move + dragName, null).on(end + dragName, null);\n\t          dragRestore(dragged && d3.event.target === target);\n\t          dispatch({\n\t            type: \"dragend\"\n\t          });\n\t        }\n\t      };\n\t    }\n\t    drag.origin = function(x) {\n\t      if (!arguments.length) return origin;\n\t      origin = x;\n\t      return drag;\n\t    };\n\t    return d3.rebind(drag, event, \"on\");\n\t  };\n\t  function d3_behavior_dragTouchId() {\n\t    return d3.event.changedTouches[0].identifier;\n\t  }\n\t  function d3_behavior_dragTouchSubject() {\n\t    return d3.event.target;\n\t  }\n\t  function d3_behavior_dragMouseSubject() {\n\t    return d3_window;\n\t  }\n\t  d3.touches = function(container, touches) {\n\t    if (arguments.length < 2) touches = d3_eventSource().touches;\n\t    return touches ? d3_array(touches).map(function(touch) {\n\t      var point = d3_mousePoint(container, touch);\n\t      point.identifier = touch.identifier;\n\t      return point;\n\t    }) : [];\n\t  };\n\t  var ε = 1e-6, ε2 = ε * ε, π = Math.PI, τ = 2 * π, τε = τ - ε, halfπ = π / 2, d3_radians = π / 180, d3_degrees = 180 / π;\n\t  function d3_sgn(x) {\n\t    return x > 0 ? 1 : x < 0 ? -1 : 0;\n\t  }\n\t  function d3_cross2d(a, b, c) {\n\t    return (b[0] - a[0]) * (c[1] - a[1]) - (b[1] - a[1]) * (c[0] - a[0]);\n\t  }\n\t  function d3_acos(x) {\n\t    return x > 1 ? 0 : x < -1 ? π : Math.acos(x);\n\t  }\n\t  function d3_asin(x) {\n\t    return x > 1 ? halfπ : x < -1 ? -halfπ : Math.asin(x);\n\t  }\n\t  function d3_sinh(x) {\n\t    return ((x = Math.exp(x)) - 1 / x) / 2;\n\t  }\n\t  function d3_cosh(x) {\n\t    return ((x = Math.exp(x)) + 1 / x) / 2;\n\t  }\n\t  function d3_tanh(x) {\n\t    return ((x = Math.exp(2 * x)) - 1) / (x + 1);\n\t  }\n\t  function d3_haversin(x) {\n\t    return (x = Math.sin(x / 2)) * x;\n\t  }\n\t  var ρ = Math.SQRT2, ρ2 = 2, ρ4 = 4;\n\t  d3.interpolateZoom = function(p0, p1) {\n\t    var ux0 = p0[0], uy0 = p0[1], w0 = p0[2], ux1 = p1[0], uy1 = p1[1], w1 = p1[2];\n\t    var dx = ux1 - ux0, dy = uy1 - uy0, d2 = dx * dx + dy * dy, d1 = Math.sqrt(d2), b0 = (w1 * w1 - w0 * w0 + ρ4 * d2) / (2 * w0 * ρ2 * d1), b1 = (w1 * w1 - w0 * w0 - ρ4 * d2) / (2 * w1 * ρ2 * d1), r0 = Math.log(Math.sqrt(b0 * b0 + 1) - b0), r1 = Math.log(Math.sqrt(b1 * b1 + 1) - b1), dr = r1 - r0, S = (dr || Math.log(w1 / w0)) / ρ;\n\t    function interpolate(t) {\n\t      var s = t * S;\n\t      if (dr) {\n\t        var coshr0 = d3_cosh(r0), u = w0 / (ρ2 * d1) * (coshr0 * d3_tanh(ρ * s + r0) - d3_sinh(r0));\n\t        return [ ux0 + u * dx, uy0 + u * dy, w0 * coshr0 / d3_cosh(ρ * s + r0) ];\n\t      }\n\t      return [ ux0 + t * dx, uy0 + t * dy, w0 * Math.exp(ρ * s) ];\n\t    }\n\t    interpolate.duration = S * 1e3;\n\t    return interpolate;\n\t  };\n\t  d3.behavior.zoom = function() {\n\t    var view = {\n\t      x: 0,\n\t      y: 0,\n\t      k: 1\n\t    }, translate0, center0, center, size = [ 960, 500 ], scaleExtent = d3_behavior_zoomInfinity, duration = 250, zooming = 0, mousedown = \"mousedown.zoom\", mousemove = \"mousemove.zoom\", mouseup = \"mouseup.zoom\", mousewheelTimer, touchstart = \"touchstart.zoom\", touchtime, event = d3_eventDispatch(zoom, \"zoomstart\", \"zoom\", \"zoomend\"), x0, x1, y0, y1;\n\t    function zoom(g) {\n\t      g.on(mousedown, mousedowned).on(d3_behavior_zoomWheel + \".zoom\", mousewheeled).on(\"dblclick.zoom\", dblclicked).on(touchstart, touchstarted);\n\t    }\n\t    zoom.event = function(g) {\n\t      g.each(function() {\n\t        var dispatch = event.of(this, arguments), view1 = view;\n\t        if (d3_transitionInheritId) {\n\t          d3.select(this).transition().each(\"start.zoom\", function() {\n\t            view = this.__chart__ || {\n\t              x: 0,\n\t              y: 0,\n\t              k: 1\n\t            };\n\t            zoomstarted(dispatch);\n\t          }).tween(\"zoom:zoom\", function() {\n\t            var dx = size[0], dy = size[1], cx = center0 ? center0[0] : dx / 2, cy = center0 ? center0[1] : dy / 2, i = d3.interpolateZoom([ (cx - view.x) / view.k, (cy - view.y) / view.k, dx / view.k ], [ (cx - view1.x) / view1.k, (cy - view1.y) / view1.k, dx / view1.k ]);\n\t            return function(t) {\n\t              var l = i(t), k = dx / l[2];\n\t              this.__chart__ = view = {\n\t                x: cx - l[0] * k,\n\t                y: cy - l[1] * k,\n\t                k: k\n\t              };\n\t              zoomed(dispatch);\n\t            };\n\t          }).each(\"interrupt.zoom\", function() {\n\t            zoomended(dispatch);\n\t          }).each(\"end.zoom\", function() {\n\t            zoomended(dispatch);\n\t          });\n\t        } else {\n\t          this.__chart__ = view;\n\t          zoomstarted(dispatch);\n\t          zoomed(dispatch);\n\t          zoomended(dispatch);\n\t        }\n\t      });\n\t    };\n\t    zoom.translate = function(_) {\n\t      if (!arguments.length) return [ view.x, view.y ];\n\t      view = {\n\t        x: +_[0],\n\t        y: +_[1],\n\t        k: view.k\n\t      };\n\t      rescale();\n\t      return zoom;\n\t    };\n\t    zoom.scale = function(_) {\n\t      if (!arguments.length) return view.k;\n\t      view = {\n\t        x: view.x,\n\t        y: view.y,\n\t        k: +_\n\t      };\n\t      rescale();\n\t      return zoom;\n\t    };\n\t    zoom.scaleExtent = function(_) {\n\t      if (!arguments.length) return scaleExtent;\n\t      scaleExtent = _ == null ? d3_behavior_zoomInfinity : [ +_[0], +_[1] ];\n\t      return zoom;\n\t    };\n\t    zoom.center = function(_) {\n\t      if (!arguments.length) return center;\n\t      center = _ && [ +_[0], +_[1] ];\n\t      return zoom;\n\t    };\n\t    zoom.size = function(_) {\n\t      if (!arguments.length) return size;\n\t      size = _ && [ +_[0], +_[1] ];\n\t      return zoom;\n\t    };\n\t    zoom.duration = function(_) {\n\t      if (!arguments.length) return duration;\n\t      duration = +_;\n\t      return zoom;\n\t    };\n\t    zoom.x = function(z) {\n\t      if (!arguments.length) return x1;\n\t      x1 = z;\n\t      x0 = z.copy();\n\t      view = {\n\t        x: 0,\n\t        y: 0,\n\t        k: 1\n\t      };\n\t      return zoom;\n\t    };\n\t    zoom.y = function(z) {\n\t      if (!arguments.length) return y1;\n\t      y1 = z;\n\t      y0 = z.copy();\n\t      view = {\n\t        x: 0,\n\t        y: 0,\n\t        k: 1\n\t      };\n\t      return zoom;\n\t    };\n\t    function location(p) {\n\t      return [ (p[0] - view.x) / view.k, (p[1] - view.y) / view.k ];\n\t    }\n\t    function point(l) {\n\t      return [ l[0] * view.k + view.x, l[1] * view.k + view.y ];\n\t    }\n\t    function scaleTo(s) {\n\t      view.k = Math.max(scaleExtent[0], Math.min(scaleExtent[1], s));\n\t    }\n\t    function translateTo(p, l) {\n\t      l = point(l);\n\t      view.x += p[0] - l[0];\n\t      view.y += p[1] - l[1];\n\t    }\n\t    function zoomTo(that, p, l, k) {\n\t      that.__chart__ = {\n\t        x: view.x,\n\t        y: view.y,\n\t        k: view.k\n\t      };\n\t      scaleTo(Math.pow(2, k));\n\t      translateTo(center0 = p, l);\n\t      that = d3.select(that);\n\t      if (duration > 0) that = that.transition().duration(duration);\n\t      that.call(zoom.event);\n\t    }\n\t    function rescale() {\n\t      if (x1) x1.domain(x0.range().map(function(x) {\n\t        return (x - view.x) / view.k;\n\t      }).map(x0.invert));\n\t      if (y1) y1.domain(y0.range().map(function(y) {\n\t        return (y - view.y) / view.k;\n\t      }).map(y0.invert));\n\t    }\n\t    function zoomstarted(dispatch) {\n\t      if (!zooming++) dispatch({\n\t        type: \"zoomstart\"\n\t      });\n\t    }\n\t    function zoomed(dispatch) {\n\t      rescale();\n\t      dispatch({\n\t        type: \"zoom\",\n\t        scale: view.k,\n\t        translate: [ view.x, view.y ]\n\t      });\n\t    }\n\t    function zoomended(dispatch) {\n\t      if (!--zooming) dispatch({\n\t        type: \"zoomend\"\n\t      });\n\t      center0 = null;\n\t    }\n\t    function mousedowned() {\n\t      var that = this, target = d3.event.target, dispatch = event.of(that, arguments), dragged = 0, subject = d3.select(d3_window).on(mousemove, moved).on(mouseup, ended), location0 = location(d3.mouse(that)), dragRestore = d3_event_dragSuppress();\n\t      d3_selection_interrupt(that);\n\t      zoomstarted(dispatch);\n\t      function moved() {\n\t        dragged = 1;\n\t        translateTo(d3.mouse(that), location0);\n\t        zoomed(dispatch);\n\t      }\n\t      function ended() {\n\t        subject.on(mousemove, null).on(mouseup, null);\n\t        dragRestore(dragged && d3.event.target === target);\n\t        zoomended(dispatch);\n\t      }\n\t    }\n\t    function touchstarted() {\n\t      var that = this, dispatch = event.of(that, arguments), locations0 = {}, distance0 = 0, scale0, zoomName = \".zoom-\" + d3.event.changedTouches[0].identifier, touchmove = \"touchmove\" + zoomName, touchend = \"touchend\" + zoomName, targets = [], subject = d3.select(that), dragRestore = d3_event_dragSuppress();\n\t      started();\n\t      zoomstarted(dispatch);\n\t      subject.on(mousedown, null).on(touchstart, started);\n\t      function relocate() {\n\t        var touches = d3.touches(that);\n\t        scale0 = view.k;\n\t        touches.forEach(function(t) {\n\t          if (t.identifier in locations0) locations0[t.identifier] = location(t);\n\t        });\n\t        return touches;\n\t      }\n\t      function started() {\n\t        var target = d3.event.target;\n\t        d3.select(target).on(touchmove, moved).on(touchend, ended);\n\t        targets.push(target);\n\t        var changed = d3.event.changedTouches;\n\t        for (var i = 0, n = changed.length; i < n; ++i) {\n\t          locations0[changed[i].identifier] = null;\n\t        }\n\t        var touches = relocate(), now = Date.now();\n\t        if (touches.length === 1) {\n\t          if (now - touchtime < 500) {\n\t            var p = touches[0];\n\t            zoomTo(that, p, locations0[p.identifier], Math.floor(Math.log(view.k) / Math.LN2) + 1);\n\t            d3_eventPreventDefault();\n\t          }\n\t          touchtime = now;\n\t        } else if (touches.length > 1) {\n\t          var p = touches[0], q = touches[1], dx = p[0] - q[0], dy = p[1] - q[1];\n\t          distance0 = dx * dx + dy * dy;\n\t        }\n\t      }\n\t      function moved() {\n\t        var touches = d3.touches(that), p0, l0, p1, l1;\n\t        d3_selection_interrupt(that);\n\t        for (var i = 0, n = touches.length; i < n; ++i, l1 = null) {\n\t          p1 = touches[i];\n\t          if (l1 = locations0[p1.identifier]) {\n\t            if (l0) break;\n\t            p0 = p1, l0 = l1;\n\t          }\n\t        }\n\t        if (l1) {\n\t          var distance1 = (distance1 = p1[0] - p0[0]) * distance1 + (distance1 = p1[1] - p0[1]) * distance1, scale1 = distance0 && Math.sqrt(distance1 / distance0);\n\t          p0 = [ (p0[0] + p1[0]) / 2, (p0[1] + p1[1]) / 2 ];\n\t          l0 = [ (l0[0] + l1[0]) / 2, (l0[1] + l1[1]) / 2 ];\n\t          scaleTo(scale1 * scale0);\n\t        }\n\t        touchtime = null;\n\t        translateTo(p0, l0);\n\t        zoomed(dispatch);\n\t      }\n\t      function ended() {\n\t        if (d3.event.touches.length) {\n\t          var changed = d3.event.changedTouches;\n\t          for (var i = 0, n = changed.length; i < n; ++i) {\n\t            delete locations0[changed[i].identifier];\n\t          }\n\t          for (var identifier in locations0) {\n\t            return void relocate();\n\t          }\n\t        }\n\t        d3.selectAll(targets).on(zoomName, null);\n\t        subject.on(mousedown, mousedowned).on(touchstart, touchstarted);\n\t        dragRestore();\n\t        zoomended(dispatch);\n\t      }\n\t    }\n\t    function mousewheeled() {\n\t      var dispatch = event.of(this, arguments);\n\t      if (mousewheelTimer) clearTimeout(mousewheelTimer); else translate0 = location(center0 = center || d3.mouse(this)), \n\t      d3_selection_interrupt(this), zoomstarted(dispatch);\n\t      mousewheelTimer = setTimeout(function() {\n\t        mousewheelTimer = null;\n\t        zoomended(dispatch);\n\t      }, 50);\n\t      d3_eventPreventDefault();\n\t      scaleTo(Math.pow(2, d3_behavior_zoomDelta() * .002) * view.k);\n\t      translateTo(center0, translate0);\n\t      zoomed(dispatch);\n\t    }\n\t    function dblclicked() {\n\t      var p = d3.mouse(this), k = Math.log(view.k) / Math.LN2;\n\t      zoomTo(this, p, location(p), d3.event.shiftKey ? Math.ceil(k) - 1 : Math.floor(k) + 1);\n\t    }\n\t    return d3.rebind(zoom, event, \"on\");\n\t  };\n\t  var d3_behavior_zoomInfinity = [ 0, Infinity ];\n\t  var d3_behavior_zoomDelta, d3_behavior_zoomWheel = \"onwheel\" in d3_document ? (d3_behavior_zoomDelta = function() {\n\t    return -d3.event.deltaY * (d3.event.deltaMode ? 120 : 1);\n\t  }, \"wheel\") : \"onmousewheel\" in d3_document ? (d3_behavior_zoomDelta = function() {\n\t    return d3.event.wheelDelta;\n\t  }, \"mousewheel\") : (d3_behavior_zoomDelta = function() {\n\t    return -d3.event.detail;\n\t  }, \"MozMousePixelScroll\");\n\t  d3.color = d3_color;\n\t  function d3_color() {}\n\t  d3_color.prototype.toString = function() {\n\t    return this.rgb() + \"\";\n\t  };\n\t  d3.hsl = d3_hsl;\n\t  function d3_hsl(h, s, l) {\n\t    return this instanceof d3_hsl ? void (this.h = +h, this.s = +s, this.l = +l) : arguments.length < 2 ? h instanceof d3_hsl ? new d3_hsl(h.h, h.s, h.l) : d3_rgb_parse(\"\" + h, d3_rgb_hsl, d3_hsl) : new d3_hsl(h, s, l);\n\t  }\n\t  var d3_hslPrototype = d3_hsl.prototype = new d3_color();\n\t  d3_hslPrototype.brighter = function(k) {\n\t    k = Math.pow(.7, arguments.length ? k : 1);\n\t    return new d3_hsl(this.h, this.s, this.l / k);\n\t  };\n\t  d3_hslPrototype.darker = function(k) {\n\t    k = Math.pow(.7, arguments.length ? k : 1);\n\t    return new d3_hsl(this.h, this.s, k * this.l);\n\t  };\n\t  d3_hslPrototype.rgb = function() {\n\t    return d3_hsl_rgb(this.h, this.s, this.l);\n\t  };\n\t  function d3_hsl_rgb(h, s, l) {\n\t    var m1, m2;\n\t    h = isNaN(h) ? 0 : (h %= 360) < 0 ? h + 360 : h;\n\t    s = isNaN(s) ? 0 : s < 0 ? 0 : s > 1 ? 1 : s;\n\t    l = l < 0 ? 0 : l > 1 ? 1 : l;\n\t    m2 = l <= .5 ? l * (1 + s) : l + s - l * s;\n\t    m1 = 2 * l - m2;\n\t    function v(h) {\n\t      if (h > 360) h -= 360; else if (h < 0) h += 360;\n\t      if (h < 60) return m1 + (m2 - m1) * h / 60;\n\t      if (h < 180) return m2;\n\t      if (h < 240) return m1 + (m2 - m1) * (240 - h) / 60;\n\t      return m1;\n\t    }\n\t    function vv(h) {\n\t      return Math.round(v(h) * 255);\n\t    }\n\t    return new d3_rgb(vv(h + 120), vv(h), vv(h - 120));\n\t  }\n\t  d3.hcl = d3_hcl;\n\t  function d3_hcl(h, c, l) {\n\t    return this instanceof d3_hcl ? void (this.h = +h, this.c = +c, this.l = +l) : arguments.length < 2 ? h instanceof d3_hcl ? new d3_hcl(h.h, h.c, h.l) : h instanceof d3_lab ? d3_lab_hcl(h.l, h.a, h.b) : d3_lab_hcl((h = d3_rgb_lab((h = d3.rgb(h)).r, h.g, h.b)).l, h.a, h.b) : new d3_hcl(h, c, l);\n\t  }\n\t  var d3_hclPrototype = d3_hcl.prototype = new d3_color();\n\t  d3_hclPrototype.brighter = function(k) {\n\t    return new d3_hcl(this.h, this.c, Math.min(100, this.l + d3_lab_K * (arguments.length ? k : 1)));\n\t  };\n\t  d3_hclPrototype.darker = function(k) {\n\t    return new d3_hcl(this.h, this.c, Math.max(0, this.l - d3_lab_K * (arguments.length ? k : 1)));\n\t  };\n\t  d3_hclPrototype.rgb = function() {\n\t    return d3_hcl_lab(this.h, this.c, this.l).rgb();\n\t  };\n\t  function d3_hcl_lab(h, c, l) {\n\t    if (isNaN(h)) h = 0;\n\t    if (isNaN(c)) c = 0;\n\t    return new d3_lab(l, Math.cos(h *= d3_radians) * c, Math.sin(h) * c);\n\t  }\n\t  d3.lab = d3_lab;\n\t  function d3_lab(l, a, b) {\n\t    return this instanceof d3_lab ? void (this.l = +l, this.a = +a, this.b = +b) : arguments.length < 2 ? l instanceof d3_lab ? new d3_lab(l.l, l.a, l.b) : l instanceof d3_hcl ? d3_hcl_lab(l.h, l.c, l.l) : d3_rgb_lab((l = d3_rgb(l)).r, l.g, l.b) : new d3_lab(l, a, b);\n\t  }\n\t  var d3_lab_K = 18;\n\t  var d3_lab_X = .95047, d3_lab_Y = 1, d3_lab_Z = 1.08883;\n\t  var d3_labPrototype = d3_lab.prototype = new d3_color();\n\t  d3_labPrototype.brighter = function(k) {\n\t    return new d3_lab(Math.min(100, this.l + d3_lab_K * (arguments.length ? k : 1)), this.a, this.b);\n\t  };\n\t  d3_labPrototype.darker = function(k) {\n\t    return new d3_lab(Math.max(0, this.l - d3_lab_K * (arguments.length ? k : 1)), this.a, this.b);\n\t  };\n\t  d3_labPrototype.rgb = function() {\n\t    return d3_lab_rgb(this.l, this.a, this.b);\n\t  };\n\t  function d3_lab_rgb(l, a, b) {\n\t    var y = (l + 16) / 116, x = y + a / 500, z = y - b / 200;\n\t    x = d3_lab_xyz(x) * d3_lab_X;\n\t    y = d3_lab_xyz(y) * d3_lab_Y;\n\t    z = d3_lab_xyz(z) * d3_lab_Z;\n\t    return new d3_rgb(d3_xyz_rgb(3.2404542 * x - 1.5371385 * y - .4985314 * z), d3_xyz_rgb(-.969266 * x + 1.8760108 * y + .041556 * z), d3_xyz_rgb(.0556434 * x - .2040259 * y + 1.0572252 * z));\n\t  }\n\t  function d3_lab_hcl(l, a, b) {\n\t    return l > 0 ? new d3_hcl(Math.atan2(b, a) * d3_degrees, Math.sqrt(a * a + b * b), l) : new d3_hcl(NaN, NaN, l);\n\t  }\n\t  function d3_lab_xyz(x) {\n\t    return x > .206893034 ? x * x * x : (x - 4 / 29) / 7.787037;\n\t  }\n\t  function d3_xyz_lab(x) {\n\t    return x > .008856 ? Math.pow(x, 1 / 3) : 7.787037 * x + 4 / 29;\n\t  }\n\t  function d3_xyz_rgb(r) {\n\t    return Math.round(255 * (r <= .00304 ? 12.92 * r : 1.055 * Math.pow(r, 1 / 2.4) - .055));\n\t  }\n\t  d3.rgb = d3_rgb;\n\t  function d3_rgb(r, g, b) {\n\t    return this instanceof d3_rgb ? void (this.r = ~~r, this.g = ~~g, this.b = ~~b) : arguments.length < 2 ? r instanceof d3_rgb ? new d3_rgb(r.r, r.g, r.b) : d3_rgb_parse(\"\" + r, d3_rgb, d3_hsl_rgb) : new d3_rgb(r, g, b);\n\t  }\n\t  function d3_rgbNumber(value) {\n\t    return new d3_rgb(value >> 16, value >> 8 & 255, value & 255);\n\t  }\n\t  function d3_rgbString(value) {\n\t    return d3_rgbNumber(value) + \"\";\n\t  }\n\t  var d3_rgbPrototype = d3_rgb.prototype = new d3_color();\n\t  d3_rgbPrototype.brighter = function(k) {\n\t    k = Math.pow(.7, arguments.length ? k : 1);\n\t    var r = this.r, g = this.g, b = this.b, i = 30;\n\t    if (!r && !g && !b) return new d3_rgb(i, i, i);\n\t    if (r && r < i) r = i;\n\t    if (g && g < i) g = i;\n\t    if (b && b < i) b = i;\n\t    return new d3_rgb(Math.min(255, r / k), Math.min(255, g / k), Math.min(255, b / k));\n\t  };\n\t  d3_rgbPrototype.darker = function(k) {\n\t    k = Math.pow(.7, arguments.length ? k : 1);\n\t    return new d3_rgb(k * this.r, k * this.g, k * this.b);\n\t  };\n\t  d3_rgbPrototype.hsl = function() {\n\t    return d3_rgb_hsl(this.r, this.g, this.b);\n\t  };\n\t  d3_rgbPrototype.toString = function() {\n\t    return \"#\" + d3_rgb_hex(this.r) + d3_rgb_hex(this.g) + d3_rgb_hex(this.b);\n\t  };\n\t  function d3_rgb_hex(v) {\n\t    return v < 16 ? \"0\" + Math.max(0, v).toString(16) : Math.min(255, v).toString(16);\n\t  }\n\t  function d3_rgb_parse(format, rgb, hsl) {\n\t    var r = 0, g = 0, b = 0, m1, m2, color;\n\t    m1 = /([a-z]+)\\((.*)\\)/i.exec(format);\n\t    if (m1) {\n\t      m2 = m1[2].split(\",\");\n\t      switch (m1[1]) {\n\t       case \"hsl\":\n\t        {\n\t          return hsl(parseFloat(m2[0]), parseFloat(m2[1]) / 100, parseFloat(m2[2]) / 100);\n\t        }\n\t\n\t       case \"rgb\":\n\t        {\n\t          return rgb(d3_rgb_parseNumber(m2[0]), d3_rgb_parseNumber(m2[1]), d3_rgb_parseNumber(m2[2]));\n\t        }\n\t      }\n\t    }\n\t    if (color = d3_rgb_names.get(format)) return rgb(color.r, color.g, color.b);\n\t    if (format != null && format.charAt(0) === \"#\" && !isNaN(color = parseInt(format.slice(1), 16))) {\n\t      if (format.length === 4) {\n\t        r = (color & 3840) >> 4;\n\t        r = r >> 4 | r;\n\t        g = color & 240;\n\t        g = g >> 4 | g;\n\t        b = color & 15;\n\t        b = b << 4 | b;\n\t      } else if (format.length === 7) {\n\t        r = (color & 16711680) >> 16;\n\t        g = (color & 65280) >> 8;\n\t        b = color & 255;\n\t      }\n\t    }\n\t    return rgb(r, g, b);\n\t  }\n\t  function d3_rgb_hsl(r, g, b) {\n\t    var min = Math.min(r /= 255, g /= 255, b /= 255), max = Math.max(r, g, b), d = max - min, h, s, l = (max + min) / 2;\n\t    if (d) {\n\t      s = l < .5 ? d / (max + min) : d / (2 - max - min);\n\t      if (r == max) h = (g - b) / d + (g < b ? 6 : 0); else if (g == max) h = (b - r) / d + 2; else h = (r - g) / d + 4;\n\t      h *= 60;\n\t    } else {\n\t      h = NaN;\n\t      s = l > 0 && l < 1 ? 0 : h;\n\t    }\n\t    return new d3_hsl(h, s, l);\n\t  }\n\t  function d3_rgb_lab(r, g, b) {\n\t    r = d3_rgb_xyz(r);\n\t    g = d3_rgb_xyz(g);\n\t    b = d3_rgb_xyz(b);\n\t    var x = d3_xyz_lab((.4124564 * r + .3575761 * g + .1804375 * b) / d3_lab_X), y = d3_xyz_lab((.2126729 * r + .7151522 * g + .072175 * b) / d3_lab_Y), z = d3_xyz_lab((.0193339 * r + .119192 * g + .9503041 * b) / d3_lab_Z);\n\t    return d3_lab(116 * y - 16, 500 * (x - y), 200 * (y - z));\n\t  }\n\t  function d3_rgb_xyz(r) {\n\t    return (r /= 255) <= .04045 ? r / 12.92 : Math.pow((r + .055) / 1.055, 2.4);\n\t  }\n\t  function d3_rgb_parseNumber(c) {\n\t    var f = parseFloat(c);\n\t    return c.charAt(c.length - 1) === \"%\" ? Math.round(f * 2.55) : f;\n\t  }\n\t  var d3_rgb_names = d3.map({\n\t    aliceblue: 15792383,\n\t    antiquewhite: 16444375,\n\t    aqua: 65535,\n\t    aquamarine: 8388564,\n\t    azure: 15794175,\n\t    beige: 16119260,\n\t    bisque: 16770244,\n\t    black: 0,\n\t    blanchedalmond: 16772045,\n\t    blue: 255,\n\t    blueviolet: 9055202,\n\t    brown: 10824234,\n\t    burlywood: 14596231,\n\t    cadetblue: 6266528,\n\t    chartreuse: 8388352,\n\t    chocolate: 13789470,\n\t    coral: 16744272,\n\t    cornflowerblue: 6591981,\n\t    cornsilk: 16775388,\n\t    crimson: 14423100,\n\t    cyan: 65535,\n\t    darkblue: 139,\n\t    darkcyan: 35723,\n\t    darkgoldenrod: 12092939,\n\t    darkgray: 11119017,\n\t    darkgreen: 25600,\n\t    darkgrey: 11119017,\n\t    darkkhaki: 12433259,\n\t    darkmagenta: 9109643,\n\t    darkolivegreen: 5597999,\n\t    darkorange: 16747520,\n\t    darkorchid: 10040012,\n\t    darkred: 9109504,\n\t    darksalmon: 15308410,\n\t    darkseagreen: 9419919,\n\t    darkslateblue: 4734347,\n\t    darkslategray: 3100495,\n\t    darkslategrey: 3100495,\n\t    darkturquoise: 52945,\n\t    darkviolet: 9699539,\n\t    deeppink: 16716947,\n\t    deepskyblue: 49151,\n\t    dimgray: 6908265,\n\t    dimgrey: 6908265,\n\t    dodgerblue: 2003199,\n\t    firebrick: 11674146,\n\t    floralwhite: 16775920,\n\t    forestgreen: 2263842,\n\t    fuchsia: 16711935,\n\t    gainsboro: 14474460,\n\t    ghostwhite: 16316671,\n\t    gold: 16766720,\n\t    goldenrod: 14329120,\n\t    gray: 8421504,\n\t    green: 32768,\n\t    greenyellow: 11403055,\n\t    grey: 8421504,\n\t    honeydew: 15794160,\n\t    hotpink: 16738740,\n\t    indianred: 13458524,\n\t    indigo: 4915330,\n\t    ivory: 16777200,\n\t    khaki: 15787660,\n\t    lavender: 15132410,\n\t    lavenderblush: 16773365,\n\t    lawngreen: 8190976,\n\t    lemonchiffon: 16775885,\n\t    lightblue: 11393254,\n\t    lightcoral: 15761536,\n\t    lightcyan: 14745599,\n\t    lightgoldenrodyellow: 16448210,\n\t    lightgray: 13882323,\n\t    lightgreen: 9498256,\n\t    lightgrey: 13882323,\n\t    lightpink: 16758465,\n\t    lightsalmon: 16752762,\n\t    lightseagreen: 2142890,\n\t    lightskyblue: 8900346,\n\t    lightslategray: 7833753,\n\t    lightslategrey: 7833753,\n\t    lightsteelblue: 11584734,\n\t    lightyellow: 16777184,\n\t    lime: 65280,\n\t    limegreen: 3329330,\n\t    linen: 16445670,\n\t    magenta: 16711935,\n\t    maroon: 8388608,\n\t    mediumaquamarine: 6737322,\n\t    mediumblue: 205,\n\t    mediumorchid: 12211667,\n\t    mediumpurple: 9662683,\n\t    mediumseagreen: 3978097,\n\t    mediumslateblue: 8087790,\n\t    mediumspringgreen: 64154,\n\t    mediumturquoise: 4772300,\n\t    mediumvioletred: 13047173,\n\t    midnightblue: 1644912,\n\t    mintcream: 16121850,\n\t    mistyrose: 16770273,\n\t    moccasin: 16770229,\n\t    navajowhite: 16768685,\n\t    navy: 128,\n\t    oldlace: 16643558,\n\t    olive: 8421376,\n\t    olivedrab: 7048739,\n\t    orange: 16753920,\n\t    orangered: 16729344,\n\t    orchid: 14315734,\n\t    palegoldenrod: 15657130,\n\t    palegreen: 10025880,\n\t    paleturquoise: 11529966,\n\t    palevioletred: 14381203,\n\t    papayawhip: 16773077,\n\t    peachpuff: 16767673,\n\t    peru: 13468991,\n\t    pink: 16761035,\n\t    plum: 14524637,\n\t    powderblue: 11591910,\n\t    purple: 8388736,\n\t    red: 16711680,\n\t    rosybrown: 12357519,\n\t    royalblue: 4286945,\n\t    saddlebrown: 9127187,\n\t    salmon: 16416882,\n\t    sandybrown: 16032864,\n\t    seagreen: 3050327,\n\t    seashell: 16774638,\n\t    sienna: 10506797,\n\t    silver: 12632256,\n\t    skyblue: 8900331,\n\t    slateblue: 6970061,\n\t    slategray: 7372944,\n\t    slategrey: 7372944,\n\t    snow: 16775930,\n\t    springgreen: 65407,\n\t    steelblue: 4620980,\n\t    tan: 13808780,\n\t    teal: 32896,\n\t    thistle: 14204888,\n\t    tomato: 16737095,\n\t    turquoise: 4251856,\n\t    violet: 15631086,\n\t    wheat: 16113331,\n\t    white: 16777215,\n\t    whitesmoke: 16119285,\n\t    yellow: 16776960,\n\t    yellowgreen: 10145074\n\t  });\n\t  d3_rgb_names.forEach(function(key, value) {\n\t    d3_rgb_names.set(key, d3_rgbNumber(value));\n\t  });\n\t  function d3_functor(v) {\n\t    return typeof v === \"function\" ? v : function() {\n\t      return v;\n\t    };\n\t  }\n\t  d3.functor = d3_functor;\n\t  function d3_identity(d) {\n\t    return d;\n\t  }\n\t  d3.xhr = d3_xhrType(d3_identity);\n\t  function d3_xhrType(response) {\n\t    return function(url, mimeType, callback) {\n\t      if (arguments.length === 2 && typeof mimeType === \"function\") callback = mimeType, \n\t      mimeType = null;\n\t      return d3_xhr(url, mimeType, response, callback);\n\t    };\n\t  }\n\t  function d3_xhr(url, mimeType, response, callback) {\n\t    var xhr = {}, dispatch = d3.dispatch(\"beforesend\", \"progress\", \"load\", \"error\"), headers = {}, request = new XMLHttpRequest(), responseType = null;\n\t    if (d3_window.XDomainRequest && !(\"withCredentials\" in request) && /^(http(s)?:)?\\/\\//.test(url)) request = new XDomainRequest();\n\t    \"onload\" in request ? request.onload = request.onerror = respond : request.onreadystatechange = function() {\n\t      request.readyState > 3 && respond();\n\t    };\n\t    function respond() {\n\t      var status = request.status, result;\n\t      if (!status && d3_xhrHasResponse(request) || status >= 200 && status < 300 || status === 304) {\n\t        try {\n\t          result = response.call(xhr, request);\n\t        } catch (e) {\n\t          dispatch.error.call(xhr, e);\n\t          return;\n\t        }\n\t        dispatch.load.call(xhr, result);\n\t      } else {\n\t        dispatch.error.call(xhr, request);\n\t      }\n\t    }\n\t    request.onprogress = function(event) {\n\t      var o = d3.event;\n\t      d3.event = event;\n\t      try {\n\t        dispatch.progress.call(xhr, request);\n\t      } finally {\n\t        d3.event = o;\n\t      }\n\t    };\n\t    xhr.header = function(name, value) {\n\t      name = (name + \"\").toLowerCase();\n\t      if (arguments.length < 2) return headers[name];\n\t      if (value == null) delete headers[name]; else headers[name] = value + \"\";\n\t      return xhr;\n\t    };\n\t    xhr.mimeType = function(value) {\n\t      if (!arguments.length) return mimeType;\n\t      mimeType = value == null ? null : value + \"\";\n\t      return xhr;\n\t    };\n\t    xhr.responseType = function(value) {\n\t      if (!arguments.length) return responseType;\n\t      responseType = value;\n\t      return xhr;\n\t    };\n\t    xhr.response = function(value) {\n\t      response = value;\n\t      return xhr;\n\t    };\n\t    [ \"get\", \"post\" ].forEach(function(method) {\n\t      xhr[method] = function() {\n\t        return xhr.send.apply(xhr, [ method ].concat(d3_array(arguments)));\n\t      };\n\t    });\n\t    xhr.send = function(method, data, callback) {\n\t      if (arguments.length === 2 && typeof data === \"function\") callback = data, data = null;\n\t      request.open(method, url, true);\n\t      if (mimeType != null && !(\"accept\" in headers)) headers[\"accept\"] = mimeType + \",*/*\";\n\t      if (request.setRequestHeader) for (var name in headers) request.setRequestHeader(name, headers[name]);\n\t      if (mimeType != null && request.overrideMimeType) request.overrideMimeType(mimeType);\n\t      if (responseType != null) request.responseType = responseType;\n\t      if (callback != null) xhr.on(\"error\", callback).on(\"load\", function(request) {\n\t        callback(null, request);\n\t      });\n\t      dispatch.beforesend.call(xhr, request);\n\t      request.send(data == null ? null : data);\n\t      return xhr;\n\t    };\n\t    xhr.abort = function() {\n\t      request.abort();\n\t      return xhr;\n\t    };\n\t    d3.rebind(xhr, dispatch, \"on\");\n\t    return callback == null ? xhr : xhr.get(d3_xhr_fixCallback(callback));\n\t  }\n\t  function d3_xhr_fixCallback(callback) {\n\t    return callback.length === 1 ? function(error, request) {\n\t      callback(error == null ? request : null);\n\t    } : callback;\n\t  }\n\t  function d3_xhrHasResponse(request) {\n\t    var type = request.responseType;\n\t    return type && type !== \"text\" ? request.response : request.responseText;\n\t  }\n\t  d3.dsv = function(delimiter, mimeType) {\n\t    var reFormat = new RegExp('[\"' + delimiter + \"\\n]\"), delimiterCode = delimiter.charCodeAt(0);\n\t    function dsv(url, row, callback) {\n\t      if (arguments.length < 3) callback = row, row = null;\n\t      var xhr = d3_xhr(url, mimeType, row == null ? response : typedResponse(row), callback);\n\t      xhr.row = function(_) {\n\t        return arguments.length ? xhr.response((row = _) == null ? response : typedResponse(_)) : row;\n\t      };\n\t      return xhr;\n\t    }\n\t    function response(request) {\n\t      return dsv.parse(request.responseText);\n\t    }\n\t    function typedResponse(f) {\n\t      return function(request) {\n\t        return dsv.parse(request.responseText, f);\n\t      };\n\t    }\n\t    dsv.parse = function(text, f) {\n\t      var o;\n\t      return dsv.parseRows(text, function(row, i) {\n\t        if (o) return o(row, i - 1);\n\t        var a = new Function(\"d\", \"return {\" + row.map(function(name, i) {\n\t          return JSON.stringify(name) + \": d[\" + i + \"]\";\n\t        }).join(\",\") + \"}\");\n\t        o = f ? function(row, i) {\n\t          return f(a(row), i);\n\t        } : a;\n\t      });\n\t    };\n\t    dsv.parseRows = function(text, f) {\n\t      var EOL = {}, EOF = {}, rows = [], N = text.length, I = 0, n = 0, t, eol;\n\t      function token() {\n\t        if (I >= N) return EOF;\n\t        if (eol) return eol = false, EOL;\n\t        var j = I;\n\t        if (text.charCodeAt(j) === 34) {\n\t          var i = j;\n\t          while (i++ < N) {\n\t            if (text.charCodeAt(i) === 34) {\n\t              if (text.charCodeAt(i + 1) !== 34) break;\n\t              ++i;\n\t            }\n\t          }\n\t          I = i + 2;\n\t          var c = text.charCodeAt(i + 1);\n\t          if (c === 13) {\n\t            eol = true;\n\t            if (text.charCodeAt(i + 2) === 10) ++I;\n\t          } else if (c === 10) {\n\t            eol = true;\n\t          }\n\t          return text.slice(j + 1, i).replace(/\"\"/g, '\"');\n\t        }\n\t        while (I < N) {\n\t          var c = text.charCodeAt(I++), k = 1;\n\t          if (c === 10) eol = true; else if (c === 13) {\n\t            eol = true;\n\t            if (text.charCodeAt(I) === 10) ++I, ++k;\n\t          } else if (c !== delimiterCode) continue;\n\t          return text.slice(j, I - k);\n\t        }\n\t        return text.slice(j);\n\t      }\n\t      while ((t = token()) !== EOF) {\n\t        var a = [];\n\t        while (t !== EOL && t !== EOF) {\n\t          a.push(t);\n\t          t = token();\n\t        }\n\t        if (f && (a = f(a, n++)) == null) continue;\n\t        rows.push(a);\n\t      }\n\t      return rows;\n\t    };\n\t    dsv.format = function(rows) {\n\t      if (Array.isArray(rows[0])) return dsv.formatRows(rows);\n\t      var fieldSet = new d3_Set(), fields = [];\n\t      rows.forEach(function(row) {\n\t        for (var field in row) {\n\t          if (!fieldSet.has(field)) {\n\t            fields.push(fieldSet.add(field));\n\t          }\n\t        }\n\t      });\n\t      return [ fields.map(formatValue).join(delimiter) ].concat(rows.map(function(row) {\n\t        return fields.map(function(field) {\n\t          return formatValue(row[field]);\n\t        }).join(delimiter);\n\t      })).join(\"\\n\");\n\t    };\n\t    dsv.formatRows = function(rows) {\n\t      return rows.map(formatRow).join(\"\\n\");\n\t    };\n\t    function formatRow(row) {\n\t      return row.map(formatValue).join(delimiter);\n\t    }\n\t    function formatValue(text) {\n\t      return reFormat.test(text) ? '\"' + text.replace(/\\\"/g, '\"\"') + '\"' : text;\n\t    }\n\t    return dsv;\n\t  };\n\t  d3.csv = d3.dsv(\",\", \"text/csv\");\n\t  d3.tsv = d3.dsv(\"\t\", \"text/tab-separated-values\");\n\t  var d3_timer_queueHead, d3_timer_queueTail, d3_timer_interval, d3_timer_timeout, d3_timer_active, d3_timer_frame = d3_window[d3_vendorSymbol(d3_window, \"requestAnimationFrame\")] || function(callback) {\n\t    setTimeout(callback, 17);\n\t  };\n\t  d3.timer = function(callback, delay, then) {\n\t    var n = arguments.length;\n\t    if (n < 2) delay = 0;\n\t    if (n < 3) then = Date.now();\n\t    var time = then + delay, timer = {\n\t      c: callback,\n\t      t: time,\n\t      f: false,\n\t      n: null\n\t    };\n\t    if (d3_timer_queueTail) d3_timer_queueTail.n = timer; else d3_timer_queueHead = timer;\n\t    d3_timer_queueTail = timer;\n\t    if (!d3_timer_interval) {\n\t      d3_timer_timeout = clearTimeout(d3_timer_timeout);\n\t      d3_timer_interval = 1;\n\t      d3_timer_frame(d3_timer_step);\n\t    }\n\t  };\n\t  function d3_timer_step() {\n\t    var now = d3_timer_mark(), delay = d3_timer_sweep() - now;\n\t    if (delay > 24) {\n\t      if (isFinite(delay)) {\n\t        clearTimeout(d3_timer_timeout);\n\t        d3_timer_timeout = setTimeout(d3_timer_step, delay);\n\t      }\n\t      d3_timer_interval = 0;\n\t    } else {\n\t      d3_timer_interval = 1;\n\t      d3_timer_frame(d3_timer_step);\n\t    }\n\t  }\n\t  d3.timer.flush = function() {\n\t    d3_timer_mark();\n\t    d3_timer_sweep();\n\t  };\n\t  function d3_timer_mark() {\n\t    var now = Date.now();\n\t    d3_timer_active = d3_timer_queueHead;\n\t    while (d3_timer_active) {\n\t      if (now >= d3_timer_active.t) d3_timer_active.f = d3_timer_active.c(now - d3_timer_active.t);\n\t      d3_timer_active = d3_timer_active.n;\n\t    }\n\t    return now;\n\t  }\n\t  function d3_timer_sweep() {\n\t    var t0, t1 = d3_timer_queueHead, time = Infinity;\n\t    while (t1) {\n\t      if (t1.f) {\n\t        t1 = t0 ? t0.n = t1.n : d3_timer_queueHead = t1.n;\n\t      } else {\n\t        if (t1.t < time) time = t1.t;\n\t        t1 = (t0 = t1).n;\n\t      }\n\t    }\n\t    d3_timer_queueTail = t0;\n\t    return time;\n\t  }\n\t  function d3_format_precision(x, p) {\n\t    return p - (x ? Math.ceil(Math.log(x) / Math.LN10) : 1);\n\t  }\n\t  d3.round = function(x, n) {\n\t    return n ? Math.round(x * (n = Math.pow(10, n))) / n : Math.round(x);\n\t  };\n\t  var d3_formatPrefixes = [ \"y\", \"z\", \"a\", \"f\", \"p\", \"n\", \"µ\", \"m\", \"\", \"k\", \"M\", \"G\", \"T\", \"P\", \"E\", \"Z\", \"Y\" ].map(d3_formatPrefix);\n\t  d3.formatPrefix = function(value, precision) {\n\t    var i = 0;\n\t    if (value) {\n\t      if (value < 0) value *= -1;\n\t      if (precision) value = d3.round(value, d3_format_precision(value, precision));\n\t      i = 1 + Math.floor(1e-12 + Math.log(value) / Math.LN10);\n\t      i = Math.max(-24, Math.min(24, Math.floor((i - 1) / 3) * 3));\n\t    }\n\t    return d3_formatPrefixes[8 + i / 3];\n\t  };\n\t  function d3_formatPrefix(d, i) {\n\t    var k = Math.pow(10, abs(8 - i) * 3);\n\t    return {\n\t      scale: i > 8 ? function(d) {\n\t        return d / k;\n\t      } : function(d) {\n\t        return d * k;\n\t      },\n\t      symbol: d\n\t    };\n\t  }\n\t  function d3_locale_numberFormat(locale) {\n\t    var locale_decimal = locale.decimal, locale_thousands = locale.thousands, locale_grouping = locale.grouping, locale_currency = locale.currency, formatGroup = locale_grouping && locale_thousands ? function(value, width) {\n\t      var i = value.length, t = [], j = 0, g = locale_grouping[0], length = 0;\n\t      while (i > 0 && g > 0) {\n\t        if (length + g + 1 > width) g = Math.max(1, width - length);\n\t        t.push(value.substring(i -= g, i + g));\n\t        if ((length += g + 1) > width) break;\n\t        g = locale_grouping[j = (j + 1) % locale_grouping.length];\n\t      }\n\t      return t.reverse().join(locale_thousands);\n\t    } : d3_identity;\n\t    return function(specifier) {\n\t      var match = d3_format_re.exec(specifier), fill = match[1] || \" \", align = match[2] || \">\", sign = match[3] || \"-\", symbol = match[4] || \"\", zfill = match[5], width = +match[6], comma = match[7], precision = match[8], type = match[9], scale = 1, prefix = \"\", suffix = \"\", integer = false, exponent = true;\n\t      if (precision) precision = +precision.substring(1);\n\t      if (zfill || fill === \"0\" && align === \"=\") {\n\t        zfill = fill = \"0\";\n\t        align = \"=\";\n\t      }\n\t      switch (type) {\n\t       case \"n\":\n\t        comma = true;\n\t        type = \"g\";\n\t        break;\n\t\n\t       case \"%\":\n\t        scale = 100;\n\t        suffix = \"%\";\n\t        type = \"f\";\n\t        break;\n\t\n\t       case \"p\":\n\t        scale = 100;\n\t        suffix = \"%\";\n\t        type = \"r\";\n\t        break;\n\t\n\t       case \"b\":\n\t       case \"o\":\n\t       case \"x\":\n\t       case \"X\":\n\t        if (symbol === \"#\") prefix = \"0\" + type.toLowerCase();\n\t\n\t       case \"c\":\n\t        exponent = false;\n\t\n\t       case \"d\":\n\t        integer = true;\n\t        precision = 0;\n\t        break;\n\t\n\t       case \"s\":\n\t        scale = -1;\n\t        type = \"r\";\n\t        break;\n\t      }\n\t      if (symbol === \"$\") prefix = locale_currency[0], suffix = locale_currency[1];\n\t      if (type == \"r\" && !precision) type = \"g\";\n\t      if (precision != null) {\n\t        if (type == \"g\") precision = Math.max(1, Math.min(21, precision)); else if (type == \"e\" || type == \"f\") precision = Math.max(0, Math.min(20, precision));\n\t      }\n\t      type = d3_format_types.get(type) || d3_format_typeDefault;\n\t      var zcomma = zfill && comma;\n\t      return function(value) {\n\t        var fullSuffix = suffix;\n\t        if (integer && value % 1) return \"\";\n\t        var negative = value < 0 || value === 0 && 1 / value < 0 ? (value = -value, \"-\") : sign === \"-\" ? \"\" : sign;\n\t        if (scale < 0) {\n\t          var unit = d3.formatPrefix(value, precision);\n\t          value = unit.scale(value);\n\t          fullSuffix = unit.symbol + suffix;\n\t        } else {\n\t          value *= scale;\n\t        }\n\t        value = type(value, precision);\n\t        var i = value.lastIndexOf(\".\"), before, after;\n\t        if (i < 0) {\n\t          var j = exponent ? value.lastIndexOf(\"e\") : -1;\n\t          if (j < 0) before = value, after = \"\"; else before = value.substring(0, j), after = value.substring(j);\n\t        } else {\n\t          before = value.substring(0, i);\n\t          after = locale_decimal + value.substring(i + 1);\n\t        }\n\t        if (!zfill && comma) before = formatGroup(before, Infinity);\n\t        var length = prefix.length + before.length + after.length + (zcomma ? 0 : negative.length), padding = length < width ? new Array(length = width - length + 1).join(fill) : \"\";\n\t        if (zcomma) before = formatGroup(padding + before, padding.length ? width - after.length : Infinity);\n\t        negative += prefix;\n\t        value = before + after;\n\t        return (align === \"<\" ? negative + value + padding : align === \">\" ? padding + negative + value : align === \"^\" ? padding.substring(0, length >>= 1) + negative + value + padding.substring(length) : negative + (zcomma ? value : padding + value)) + fullSuffix;\n\t      };\n\t    };\n\t  }\n\t  var d3_format_re = /(?:([^{])?([<>=^]))?([+\\- ])?([$#])?(0)?(\\d+)?(,)?(\\.-?\\d+)?([a-z%])?/i;\n\t  var d3_format_types = d3.map({\n\t    b: function(x) {\n\t      return x.toString(2);\n\t    },\n\t    c: function(x) {\n\t      return String.fromCharCode(x);\n\t    },\n\t    o: function(x) {\n\t      return x.toString(8);\n\t    },\n\t    x: function(x) {\n\t      return x.toString(16);\n\t    },\n\t    X: function(x) {\n\t      return x.toString(16).toUpperCase();\n\t    },\n\t    g: function(x, p) {\n\t      return x.toPrecision(p);\n\t    },\n\t    e: function(x, p) {\n\t      return x.toExponential(p);\n\t    },\n\t    f: function(x, p) {\n\t      return x.toFixed(p);\n\t    },\n\t    r: function(x, p) {\n\t      return (x = d3.round(x, d3_format_precision(x, p))).toFixed(Math.max(0, Math.min(20, d3_format_precision(x * (1 + 1e-15), p))));\n\t    }\n\t  });\n\t  function d3_format_typeDefault(x) {\n\t    return x + \"\";\n\t  }\n\t  var d3_time = d3.time = {}, d3_date = Date;\n\t  function d3_date_utc() {\n\t    this._ = new Date(arguments.length > 1 ? Date.UTC.apply(this, arguments) : arguments[0]);\n\t  }\n\t  d3_date_utc.prototype = {\n\t    getDate: function() {\n\t      return this._.getUTCDate();\n\t    },\n\t    getDay: function() {\n\t      return this._.getUTCDay();\n\t    },\n\t    getFullYear: function() {\n\t      return this._.getUTCFullYear();\n\t    },\n\t    getHours: function() {\n\t      return this._.getUTCHours();\n\t    },\n\t    getMilliseconds: function() {\n\t      return this._.getUTCMilliseconds();\n\t    },\n\t    getMinutes: function() {\n\t      return this._.getUTCMinutes();\n\t    },\n\t    getMonth: function() {\n\t      return this._.getUTCMonth();\n\t    },\n\t    getSeconds: function() {\n\t      return this._.getUTCSeconds();\n\t    },\n\t    getTime: function() {\n\t      return this._.getTime();\n\t    },\n\t    getTimezoneOffset: function() {\n\t      return 0;\n\t    },\n\t    valueOf: function() {\n\t      return this._.valueOf();\n\t    },\n\t    setDate: function() {\n\t      d3_time_prototype.setUTCDate.apply(this._, arguments);\n\t    },\n\t    setDay: function() {\n\t      d3_time_prototype.setUTCDay.apply(this._, arguments);\n\t    },\n\t    setFullYear: function() {\n\t      d3_time_prototype.setUTCFullYear.apply(this._, arguments);\n\t    },\n\t    setHours: function() {\n\t      d3_time_prototype.setUTCHours.apply(this._, arguments);\n\t    },\n\t    setMilliseconds: function() {\n\t      d3_time_prototype.setUTCMilliseconds.apply(this._, arguments);\n\t    },\n\t    setMinutes: function() {\n\t      d3_time_prototype.setUTCMinutes.apply(this._, arguments);\n\t    },\n\t    setMonth: function() {\n\t      d3_time_prototype.setUTCMonth.apply(this._, arguments);\n\t    },\n\t    setSeconds: function() {\n\t      d3_time_prototype.setUTCSeconds.apply(this._, arguments);\n\t    },\n\t    setTime: function() {\n\t      d3_time_prototype.setTime.apply(this._, arguments);\n\t    }\n\t  };\n\t  var d3_time_prototype = Date.prototype;\n\t  function d3_time_interval(local, step, number) {\n\t    function round(date) {\n\t      var d0 = local(date), d1 = offset(d0, 1);\n\t      return date - d0 < d1 - date ? d0 : d1;\n\t    }\n\t    function ceil(date) {\n\t      step(date = local(new d3_date(date - 1)), 1);\n\t      return date;\n\t    }\n\t    function offset(date, k) {\n\t      step(date = new d3_date(+date), k);\n\t      return date;\n\t    }\n\t    function range(t0, t1, dt) {\n\t      var time = ceil(t0), times = [];\n\t      if (dt > 1) {\n\t        while (time < t1) {\n\t          if (!(number(time) % dt)) times.push(new Date(+time));\n\t          step(time, 1);\n\t        }\n\t      } else {\n\t        while (time < t1) times.push(new Date(+time)), step(time, 1);\n\t      }\n\t      return times;\n\t    }\n\t    function range_utc(t0, t1, dt) {\n\t      try {\n\t        d3_date = d3_date_utc;\n\t        var utc = new d3_date_utc();\n\t        utc._ = t0;\n\t        return range(utc, t1, dt);\n\t      } finally {\n\t        d3_date = Date;\n\t      }\n\t    }\n\t    local.floor = local;\n\t    local.round = round;\n\t    local.ceil = ceil;\n\t    local.offset = offset;\n\t    local.range = range;\n\t    var utc = local.utc = d3_time_interval_utc(local);\n\t    utc.floor = utc;\n\t    utc.round = d3_time_interval_utc(round);\n\t    utc.ceil = d3_time_interval_utc(ceil);\n\t    utc.offset = d3_time_interval_utc(offset);\n\t    utc.range = range_utc;\n\t    return local;\n\t  }\n\t  function d3_time_interval_utc(method) {\n\t    return function(date, k) {\n\t      try {\n\t        d3_date = d3_date_utc;\n\t        var utc = new d3_date_utc();\n\t        utc._ = date;\n\t        return method(utc, k)._;\n\t      } finally {\n\t        d3_date = Date;\n\t      }\n\t    };\n\t  }\n\t  d3_time.year = d3_time_interval(function(date) {\n\t    date = d3_time.day(date);\n\t    date.setMonth(0, 1);\n\t    return date;\n\t  }, function(date, offset) {\n\t    date.setFullYear(date.getFullYear() + offset);\n\t  }, function(date) {\n\t    return date.getFullYear();\n\t  });\n\t  d3_time.years = d3_time.year.range;\n\t  d3_time.years.utc = d3_time.year.utc.range;\n\t  d3_time.day = d3_time_interval(function(date) {\n\t    var day = new d3_date(2e3, 0);\n\t    day.setFullYear(date.getFullYear(), date.getMonth(), date.getDate());\n\t    return day;\n\t  }, function(date, offset) {\n\t    date.setDate(date.getDate() + offset);\n\t  }, function(date) {\n\t    return date.getDate() - 1;\n\t  });\n\t  d3_time.days = d3_time.day.range;\n\t  d3_time.days.utc = d3_time.day.utc.range;\n\t  d3_time.dayOfYear = function(date) {\n\t    var year = d3_time.year(date);\n\t    return Math.floor((date - year - (date.getTimezoneOffset() - year.getTimezoneOffset()) * 6e4) / 864e5);\n\t  };\n\t  [ \"sunday\", \"monday\", \"tuesday\", \"wednesday\", \"thursday\", \"friday\", \"saturday\" ].forEach(function(day, i) {\n\t    i = 7 - i;\n\t    var interval = d3_time[day] = d3_time_interval(function(date) {\n\t      (date = d3_time.day(date)).setDate(date.getDate() - (date.getDay() + i) % 7);\n\t      return date;\n\t    }, function(date, offset) {\n\t      date.setDate(date.getDate() + Math.floor(offset) * 7);\n\t    }, function(date) {\n\t      var day = d3_time.year(date).getDay();\n\t      return Math.floor((d3_time.dayOfYear(date) + (day + i) % 7) / 7) - (day !== i);\n\t    });\n\t    d3_time[day + \"s\"] = interval.range;\n\t    d3_time[day + \"s\"].utc = interval.utc.range;\n\t    d3_time[day + \"OfYear\"] = function(date) {\n\t      var day = d3_time.year(date).getDay();\n\t      return Math.floor((d3_time.dayOfYear(date) + (day + i) % 7) / 7);\n\t    };\n\t  });\n\t  d3_time.week = d3_time.sunday;\n\t  d3_time.weeks = d3_time.sunday.range;\n\t  d3_time.weeks.utc = d3_time.sunday.utc.range;\n\t  d3_time.weekOfYear = d3_time.sundayOfYear;\n\t  function d3_locale_timeFormat(locale) {\n\t    var locale_dateTime = locale.dateTime, locale_date = locale.date, locale_time = locale.time, locale_periods = locale.periods, locale_days = locale.days, locale_shortDays = locale.shortDays, locale_months = locale.months, locale_shortMonths = locale.shortMonths;\n\t    function d3_time_format(template) {\n\t      var n = template.length;\n\t      function format(date) {\n\t        var string = [], i = -1, j = 0, c, p, f;\n\t        while (++i < n) {\n\t          if (template.charCodeAt(i) === 37) {\n\t            string.push(template.slice(j, i));\n\t            if ((p = d3_time_formatPads[c = template.charAt(++i)]) != null) c = template.charAt(++i);\n\t            if (f = d3_time_formats[c]) c = f(date, p == null ? c === \"e\" ? \" \" : \"0\" : p);\n\t            string.push(c);\n\t            j = i + 1;\n\t          }\n\t        }\n\t        string.push(template.slice(j, i));\n\t        return string.join(\"\");\n\t      }\n\t      format.parse = function(string) {\n\t        var d = {\n\t          y: 1900,\n\t          m: 0,\n\t          d: 1,\n\t          H: 0,\n\t          M: 0,\n\t          S: 0,\n\t          L: 0,\n\t          Z: null\n\t        }, i = d3_time_parse(d, template, string, 0);\n\t        if (i != string.length) return null;\n\t        if (\"p\" in d) d.H = d.H % 12 + d.p * 12;\n\t        var localZ = d.Z != null && d3_date !== d3_date_utc, date = new (localZ ? d3_date_utc : d3_date)();\n\t        if (\"j\" in d) date.setFullYear(d.y, 0, d.j); else if (\"w\" in d && (\"W\" in d || \"U\" in d)) {\n\t          date.setFullYear(d.y, 0, 1);\n\t          date.setFullYear(d.y, 0, \"W\" in d ? (d.w + 6) % 7 + d.W * 7 - (date.getDay() + 5) % 7 : d.w + d.U * 7 - (date.getDay() + 6) % 7);\n\t        } else date.setFullYear(d.y, d.m, d.d);\n\t        date.setHours(d.H + (d.Z / 100 | 0), d.M + d.Z % 100, d.S, d.L);\n\t        return localZ ? date._ : date;\n\t      };\n\t      format.toString = function() {\n\t        return template;\n\t      };\n\t      return format;\n\t    }\n\t    function d3_time_parse(date, template, string, j) {\n\t      var c, p, t, i = 0, n = template.length, m = string.length;\n\t      while (i < n) {\n\t        if (j >= m) return -1;\n\t        c = template.charCodeAt(i++);\n\t        if (c === 37) {\n\t          t = template.charAt(i++);\n\t          p = d3_time_parsers[t in d3_time_formatPads ? template.charAt(i++) : t];\n\t          if (!p || (j = p(date, string, j)) < 0) return -1;\n\t        } else if (c != string.charCodeAt(j++)) {\n\t          return -1;\n\t        }\n\t      }\n\t      return j;\n\t    }\n\t    d3_time_format.utc = function(template) {\n\t      var local = d3_time_format(template);\n\t      function format(date) {\n\t        try {\n\t          d3_date = d3_date_utc;\n\t          var utc = new d3_date();\n\t          utc._ = date;\n\t          return local(utc);\n\t        } finally {\n\t          d3_date = Date;\n\t        }\n\t      }\n\t      format.parse = function(string) {\n\t        try {\n\t          d3_date = d3_date_utc;\n\t          var date = local.parse(string);\n\t          return date && date._;\n\t        } finally {\n\t          d3_date = Date;\n\t        }\n\t      };\n\t      format.toString = local.toString;\n\t      return format;\n\t    };\n\t    d3_time_format.multi = d3_time_format.utc.multi = d3_time_formatMulti;\n\t    var d3_time_periodLookup = d3.map(), d3_time_dayRe = d3_time_formatRe(locale_days), d3_time_dayLookup = d3_time_formatLookup(locale_days), d3_time_dayAbbrevRe = d3_time_formatRe(locale_shortDays), d3_time_dayAbbrevLookup = d3_time_formatLookup(locale_shortDays), d3_time_monthRe = d3_time_formatRe(locale_months), d3_time_monthLookup = d3_time_formatLookup(locale_months), d3_time_monthAbbrevRe = d3_time_formatRe(locale_shortMonths), d3_time_monthAbbrevLookup = d3_time_formatLookup(locale_shortMonths);\n\t    locale_periods.forEach(function(p, i) {\n\t      d3_time_periodLookup.set(p.toLowerCase(), i);\n\t    });\n\t    var d3_time_formats = {\n\t      a: function(d) {\n\t        return locale_shortDays[d.getDay()];\n\t      },\n\t      A: function(d) {\n\t        return locale_days[d.getDay()];\n\t      },\n\t      b: function(d) {\n\t        return locale_shortMonths[d.getMonth()];\n\t      },\n\t      B: function(d) {\n\t        return locale_months[d.getMonth()];\n\t      },\n\t      c: d3_time_format(locale_dateTime),\n\t      d: function(d, p) {\n\t        return d3_time_formatPad(d.getDate(), p, 2);\n\t      },\n\t      e: function(d, p) {\n\t        return d3_time_formatPad(d.getDate(), p, 2);\n\t      },\n\t      H: function(d, p) {\n\t        return d3_time_formatPad(d.getHours(), p, 2);\n\t      },\n\t      I: function(d, p) {\n\t        return d3_time_formatPad(d.getHours() % 12 || 12, p, 2);\n\t      },\n\t      j: function(d, p) {\n\t        return d3_time_formatPad(1 + d3_time.dayOfYear(d), p, 3);\n\t      },\n\t      L: function(d, p) {\n\t        return d3_time_formatPad(d.getMilliseconds(), p, 3);\n\t      },\n\t      m: function(d, p) {\n\t        return d3_time_formatPad(d.getMonth() + 1, p, 2);\n\t      },\n\t      M: function(d, p) {\n\t        return d3_time_formatPad(d.getMinutes(), p, 2);\n\t      },\n\t      p: function(d) {\n\t        return locale_periods[+(d.getHours() >= 12)];\n\t      },\n\t      S: function(d, p) {\n\t        return d3_time_formatPad(d.getSeconds(), p, 2);\n\t      },\n\t      U: function(d, p) {\n\t        return d3_time_formatPad(d3_time.sundayOfYear(d), p, 2);\n\t      },\n\t      w: function(d) {\n\t        return d.getDay();\n\t      },\n\t      W: function(d, p) {\n\t        return d3_time_formatPad(d3_time.mondayOfYear(d), p, 2);\n\t      },\n\t      x: d3_time_format(locale_date),\n\t      X: d3_time_format(locale_time),\n\t      y: function(d, p) {\n\t        return d3_time_formatPad(d.getFullYear() % 100, p, 2);\n\t      },\n\t      Y: function(d, p) {\n\t        return d3_time_formatPad(d.getFullYear() % 1e4, p, 4);\n\t      },\n\t      Z: d3_time_zone,\n\t      \"%\": function() {\n\t        return \"%\";\n\t      }\n\t    };\n\t    var d3_time_parsers = {\n\t      a: d3_time_parseWeekdayAbbrev,\n\t      A: d3_time_parseWeekday,\n\t      b: d3_time_parseMonthAbbrev,\n\t      B: d3_time_parseMonth,\n\t      c: d3_time_parseLocaleFull,\n\t      d: d3_time_parseDay,\n\t      e: d3_time_parseDay,\n\t      H: d3_time_parseHour24,\n\t      I: d3_time_parseHour24,\n\t      j: d3_time_parseDayOfYear,\n\t      L: d3_time_parseMilliseconds,\n\t      m: d3_time_parseMonthNumber,\n\t      M: d3_time_parseMinutes,\n\t      p: d3_time_parseAmPm,\n\t      S: d3_time_parseSeconds,\n\t      U: d3_time_parseWeekNumberSunday,\n\t      w: d3_time_parseWeekdayNumber,\n\t      W: d3_time_parseWeekNumberMonday,\n\t      x: d3_time_parseLocaleDate,\n\t      X: d3_time_parseLocaleTime,\n\t      y: d3_time_parseYear,\n\t      Y: d3_time_parseFullYear,\n\t      Z: d3_time_parseZone,\n\t      \"%\": d3_time_parseLiteralPercent\n\t    };\n\t    function d3_time_parseWeekdayAbbrev(date, string, i) {\n\t      d3_time_dayAbbrevRe.lastIndex = 0;\n\t      var n = d3_time_dayAbbrevRe.exec(string.slice(i));\n\t      return n ? (date.w = d3_time_dayAbbrevLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;\n\t    }\n\t    function d3_time_parseWeekday(date, string, i) {\n\t      d3_time_dayRe.lastIndex = 0;\n\t      var n = d3_time_dayRe.exec(string.slice(i));\n\t      return n ? (date.w = d3_time_dayLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;\n\t    }\n\t    function d3_time_parseMonthAbbrev(date, string, i) {\n\t      d3_time_monthAbbrevRe.lastIndex = 0;\n\t      var n = d3_time_monthAbbrevRe.exec(string.slice(i));\n\t      return n ? (date.m = d3_time_monthAbbrevLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;\n\t    }\n\t    function d3_time_parseMonth(date, string, i) {\n\t      d3_time_monthRe.lastIndex = 0;\n\t      var n = d3_time_monthRe.exec(string.slice(i));\n\t      return n ? (date.m = d3_time_monthLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;\n\t    }\n\t    function d3_time_parseLocaleFull(date, string, i) {\n\t      return d3_time_parse(date, d3_time_formats.c.toString(), string, i);\n\t    }\n\t    function d3_time_parseLocaleDate(date, string, i) {\n\t      return d3_time_parse(date, d3_time_formats.x.toString(), string, i);\n\t    }\n\t    function d3_time_parseLocaleTime(date, string, i) {\n\t      return d3_time_parse(date, d3_time_formats.X.toString(), string, i);\n\t    }\n\t    function d3_time_parseAmPm(date, string, i) {\n\t      var n = d3_time_periodLookup.get(string.slice(i, i += 2).toLowerCase());\n\t      return n == null ? -1 : (date.p = n, i);\n\t    }\n\t    return d3_time_format;\n\t  }\n\t  var d3_time_formatPads = {\n\t    \"-\": \"\",\n\t    _: \" \",\n\t    \"0\": \"0\"\n\t  }, d3_time_numberRe = /^\\s*\\d+/, d3_time_percentRe = /^%/;\n\t  function d3_time_formatPad(value, fill, width) {\n\t    var sign = value < 0 ? \"-\" : \"\", string = (sign ? -value : value) + \"\", length = string.length;\n\t    return sign + (length < width ? new Array(width - length + 1).join(fill) + string : string);\n\t  }\n\t  function d3_time_formatRe(names) {\n\t    return new RegExp(\"^(?:\" + names.map(d3.requote).join(\"|\") + \")\", \"i\");\n\t  }\n\t  function d3_time_formatLookup(names) {\n\t    var map = new d3_Map(), i = -1, n = names.length;\n\t    while (++i < n) map.set(names[i].toLowerCase(), i);\n\t    return map;\n\t  }\n\t  function d3_time_parseWeekdayNumber(date, string, i) {\n\t    d3_time_numberRe.lastIndex = 0;\n\t    var n = d3_time_numberRe.exec(string.slice(i, i + 1));\n\t    return n ? (date.w = +n[0], i + n[0].length) : -1;\n\t  }\n\t  function d3_time_parseWeekNumberSunday(date, string, i) {\n\t    d3_time_numberRe.lastIndex = 0;\n\t    var n = d3_time_numberRe.exec(string.slice(i));\n\t    return n ? (date.U = +n[0], i + n[0].length) : -1;\n\t  }\n\t  function d3_time_parseWeekNumberMonday(date, string, i) {\n\t    d3_time_numberRe.lastIndex = 0;\n\t    var n = d3_time_numberRe.exec(string.slice(i));\n\t    return n ? (date.W = +n[0], i + n[0].length) : -1;\n\t  }\n\t  function d3_time_parseFullYear(date, string, i) {\n\t    d3_time_numberRe.lastIndex = 0;\n\t    var n = d3_time_numberRe.exec(string.slice(i, i + 4));\n\t    return n ? (date.y = +n[0], i + n[0].length) : -1;\n\t  }\n\t  function d3_time_parseYear(date, string, i) {\n\t    d3_time_numberRe.lastIndex = 0;\n\t    var n = d3_time_numberRe.exec(string.slice(i, i + 2));\n\t    return n ? (date.y = d3_time_expandYear(+n[0]), i + n[0].length) : -1;\n\t  }\n\t  function d3_time_parseZone(date, string, i) {\n\t    return /^[+-]\\d{4}$/.test(string = string.slice(i, i + 5)) ? (date.Z = -string, \n\t    i + 5) : -1;\n\t  }\n\t  function d3_time_expandYear(d) {\n\t    return d + (d > 68 ? 1900 : 2e3);\n\t  }\n\t  function d3_time_parseMonthNumber(date, string, i) {\n\t    d3_time_numberRe.lastIndex = 0;\n\t    var n = d3_time_numberRe.exec(string.slice(i, i + 2));\n\t    return n ? (date.m = n[0] - 1, i + n[0].length) : -1;\n\t  }\n\t  function d3_time_parseDay(date, string, i) {\n\t    d3_time_numberRe.lastIndex = 0;\n\t    var n = d3_time_numberRe.exec(string.slice(i, i + 2));\n\t    return n ? (date.d = +n[0], i + n[0].length) : -1;\n\t  }\n\t  function d3_time_parseDayOfYear(date, string, i) {\n\t    d3_time_numberRe.lastIndex = 0;\n\t    var n = d3_time_numberRe.exec(string.slice(i, i + 3));\n\t    return n ? (date.j = +n[0], i + n[0].length) : -1;\n\t  }\n\t  function d3_time_parseHour24(date, string, i) {\n\t    d3_time_numberRe.lastIndex = 0;\n\t    var n = d3_time_numberRe.exec(string.slice(i, i + 2));\n\t    return n ? (date.H = +n[0], i + n[0].length) : -1;\n\t  }\n\t  function d3_time_parseMinutes(date, string, i) {\n\t    d3_time_numberRe.lastIndex = 0;\n\t    var n = d3_time_numberRe.exec(string.slice(i, i + 2));\n\t    return n ? (date.M = +n[0], i + n[0].length) : -1;\n\t  }\n\t  function d3_time_parseSeconds(date, string, i) {\n\t    d3_time_numberRe.lastIndex = 0;\n\t    var n = d3_time_numberRe.exec(string.slice(i, i + 2));\n\t    return n ? (date.S = +n[0], i + n[0].length) : -1;\n\t  }\n\t  function d3_time_parseMilliseconds(date, string, i) {\n\t    d3_time_numberRe.lastIndex = 0;\n\t    var n = d3_time_numberRe.exec(string.slice(i, i + 3));\n\t    return n ? (date.L = +n[0], i + n[0].length) : -1;\n\t  }\n\t  function d3_time_zone(d) {\n\t    var z = d.getTimezoneOffset(), zs = z > 0 ? \"-\" : \"+\", zh = abs(z) / 60 | 0, zm = abs(z) % 60;\n\t    return zs + d3_time_formatPad(zh, \"0\", 2) + d3_time_formatPad(zm, \"0\", 2);\n\t  }\n\t  function d3_time_parseLiteralPercent(date, string, i) {\n\t    d3_time_percentRe.lastIndex = 0;\n\t    var n = d3_time_percentRe.exec(string.slice(i, i + 1));\n\t    return n ? i + n[0].length : -1;\n\t  }\n\t  function d3_time_formatMulti(formats) {\n\t    var n = formats.length, i = -1;\n\t    while (++i < n) formats[i][0] = this(formats[i][0]);\n\t    return function(date) {\n\t      var i = 0, f = formats[i];\n\t      while (!f[1](date)) f = formats[++i];\n\t      return f[0](date);\n\t    };\n\t  }\n\t  d3.locale = function(locale) {\n\t    return {\n\t      numberFormat: d3_locale_numberFormat(locale),\n\t      timeFormat: d3_locale_timeFormat(locale)\n\t    };\n\t  };\n\t  var d3_locale_enUS = d3.locale({\n\t    decimal: \".\",\n\t    thousands: \",\",\n\t    grouping: [ 3 ],\n\t    currency: [ \"$\", \"\" ],\n\t    dateTime: \"%a %b %e %X %Y\",\n\t    date: \"%m/%d/%Y\",\n\t    time: \"%H:%M:%S\",\n\t    periods: [ \"AM\", \"PM\" ],\n\t    days: [ \"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\" ],\n\t    shortDays: [ \"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\" ],\n\t    months: [ \"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\" ],\n\t    shortMonths: [ \"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\" ]\n\t  });\n\t  d3.format = d3_locale_enUS.numberFormat;\n\t  d3.geo = {};\n\t  function d3_adder() {}\n\t  d3_adder.prototype = {\n\t    s: 0,\n\t    t: 0,\n\t    add: function(y) {\n\t      d3_adderSum(y, this.t, d3_adderTemp);\n\t      d3_adderSum(d3_adderTemp.s, this.s, this);\n\t      if (this.s) this.t += d3_adderTemp.t; else this.s = d3_adderTemp.t;\n\t    },\n\t    reset: function() {\n\t      this.s = this.t = 0;\n\t    },\n\t    valueOf: function() {\n\t      return this.s;\n\t    }\n\t  };\n\t  var d3_adderTemp = new d3_adder();\n\t  function d3_adderSum(a, b, o) {\n\t    var x = o.s = a + b, bv = x - a, av = x - bv;\n\t    o.t = a - av + (b - bv);\n\t  }\n\t  d3.geo.stream = function(object, listener) {\n\t    if (object && d3_geo_streamObjectType.hasOwnProperty(object.type)) {\n\t      d3_geo_streamObjectType[object.type](object, listener);\n\t    } else {\n\t      d3_geo_streamGeometry(object, listener);\n\t    }\n\t  };\n\t  function d3_geo_streamGeometry(geometry, listener) {\n\t    if (geometry && d3_geo_streamGeometryType.hasOwnProperty(geometry.type)) {\n\t      d3_geo_streamGeometryType[geometry.type](geometry, listener);\n\t    }\n\t  }\n\t  var d3_geo_streamObjectType = {\n\t    Feature: function(feature, listener) {\n\t      d3_geo_streamGeometry(feature.geometry, listener);\n\t    },\n\t    FeatureCollection: function(object, listener) {\n\t      var features = object.features, i = -1, n = features.length;\n\t      while (++i < n) d3_geo_streamGeometry(features[i].geometry, listener);\n\t    }\n\t  };\n\t  var d3_geo_streamGeometryType = {\n\t    Sphere: function(object, listener) {\n\t      listener.sphere();\n\t    },\n\t    Point: function(object, listener) {\n\t      object = object.coordinates;\n\t      listener.point(object[0], object[1], object[2]);\n\t    },\n\t    MultiPoint: function(object, listener) {\n\t      var coordinates = object.coordinates, i = -1, n = coordinates.length;\n\t      while (++i < n) object = coordinates[i], listener.point(object[0], object[1], object[2]);\n\t    },\n\t    LineString: function(object, listener) {\n\t      d3_geo_streamLine(object.coordinates, listener, 0);\n\t    },\n\t    MultiLineString: function(object, listener) {\n\t      var coordinates = object.coordinates, i = -1, n = coordinates.length;\n\t      while (++i < n) d3_geo_streamLine(coordinates[i], listener, 0);\n\t    },\n\t    Polygon: function(object, listener) {\n\t      d3_geo_streamPolygon(object.coordinates, listener);\n\t    },\n\t    MultiPolygon: function(object, listener) {\n\t      var coordinates = object.coordinates, i = -1, n = coordinates.length;\n\t      while (++i < n) d3_geo_streamPolygon(coordinates[i], listener);\n\t    },\n\t    GeometryCollection: function(object, listener) {\n\t      var geometries = object.geometries, i = -1, n = geometries.length;\n\t      while (++i < n) d3_geo_streamGeometry(geometries[i], listener);\n\t    }\n\t  };\n\t  function d3_geo_streamLine(coordinates, listener, closed) {\n\t    var i = -1, n = coordinates.length - closed, coordinate;\n\t    listener.lineStart();\n\t    while (++i < n) coordinate = coordinates[i], listener.point(coordinate[0], coordinate[1], coordinate[2]);\n\t    listener.lineEnd();\n\t  }\n\t  function d3_geo_streamPolygon(coordinates, listener) {\n\t    var i = -1, n = coordinates.length;\n\t    listener.polygonStart();\n\t    while (++i < n) d3_geo_streamLine(coordinates[i], listener, 1);\n\t    listener.polygonEnd();\n\t  }\n\t  d3.geo.area = function(object) {\n\t    d3_geo_areaSum = 0;\n\t    d3.geo.stream(object, d3_geo_area);\n\t    return d3_geo_areaSum;\n\t  };\n\t  var d3_geo_areaSum, d3_geo_areaRingSum = new d3_adder();\n\t  var d3_geo_area = {\n\t    sphere: function() {\n\t      d3_geo_areaSum += 4 * π;\n\t    },\n\t    point: d3_noop,\n\t    lineStart: d3_noop,\n\t    lineEnd: d3_noop,\n\t    polygonStart: function() {\n\t      d3_geo_areaRingSum.reset();\n\t      d3_geo_area.lineStart = d3_geo_areaRingStart;\n\t    },\n\t    polygonEnd: function() {\n\t      var area = 2 * d3_geo_areaRingSum;\n\t      d3_geo_areaSum += area < 0 ? 4 * π + area : area;\n\t      d3_geo_area.lineStart = d3_geo_area.lineEnd = d3_geo_area.point = d3_noop;\n\t    }\n\t  };\n\t  function d3_geo_areaRingStart() {\n\t    var λ00, φ00, λ0, cosφ0, sinφ0;\n\t    d3_geo_area.point = function(λ, φ) {\n\t      d3_geo_area.point = nextPoint;\n\t      λ0 = (λ00 = λ) * d3_radians, cosφ0 = Math.cos(φ = (φ00 = φ) * d3_radians / 2 + π / 4), \n\t      sinφ0 = Math.sin(φ);\n\t    };\n\t    function nextPoint(λ, φ) {\n\t      λ *= d3_radians;\n\t      φ = φ * d3_radians / 2 + π / 4;\n\t      var dλ = λ - λ0, sdλ = dλ >= 0 ? 1 : -1, adλ = sdλ * dλ, cosφ = Math.cos(φ), sinφ = Math.sin(φ), k = sinφ0 * sinφ, u = cosφ0 * cosφ + k * Math.cos(adλ), v = k * sdλ * Math.sin(adλ);\n\t      d3_geo_areaRingSum.add(Math.atan2(v, u));\n\t      λ0 = λ, cosφ0 = cosφ, sinφ0 = sinφ;\n\t    }\n\t    d3_geo_area.lineEnd = function() {\n\t      nextPoint(λ00, φ00);\n\t    };\n\t  }\n\t  function d3_geo_cartesian(spherical) {\n\t    var λ = spherical[0], φ = spherical[1], cosφ = Math.cos(φ);\n\t    return [ cosφ * Math.cos(λ), cosφ * Math.sin(λ), Math.sin(φ) ];\n\t  }\n\t  function d3_geo_cartesianDot(a, b) {\n\t    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n\t  }\n\t  function d3_geo_cartesianCross(a, b) {\n\t    return [ a[1] * b[2] - a[2] * b[1], a[2] * b[0] - a[0] * b[2], a[0] * b[1] - a[1] * b[0] ];\n\t  }\n\t  function d3_geo_cartesianAdd(a, b) {\n\t    a[0] += b[0];\n\t    a[1] += b[1];\n\t    a[2] += b[2];\n\t  }\n\t  function d3_geo_cartesianScale(vector, k) {\n\t    return [ vector[0] * k, vector[1] * k, vector[2] * k ];\n\t  }\n\t  function d3_geo_cartesianNormalize(d) {\n\t    var l = Math.sqrt(d[0] * d[0] + d[1] * d[1] + d[2] * d[2]);\n\t    d[0] /= l;\n\t    d[1] /= l;\n\t    d[2] /= l;\n\t  }\n\t  function d3_geo_spherical(cartesian) {\n\t    return [ Math.atan2(cartesian[1], cartesian[0]), d3_asin(cartesian[2]) ];\n\t  }\n\t  function d3_geo_sphericalEqual(a, b) {\n\t    return abs(a[0] - b[0]) < ε && abs(a[1] - b[1]) < ε;\n\t  }\n\t  d3.geo.bounds = function() {\n\t    var λ0, φ0, λ1, φ1, λ_, λ__, φ__, p0, dλSum, ranges, range;\n\t    var bound = {\n\t      point: point,\n\t      lineStart: lineStart,\n\t      lineEnd: lineEnd,\n\t      polygonStart: function() {\n\t        bound.point = ringPoint;\n\t        bound.lineStart = ringStart;\n\t        bound.lineEnd = ringEnd;\n\t        dλSum = 0;\n\t        d3_geo_area.polygonStart();\n\t      },\n\t      polygonEnd: function() {\n\t        d3_geo_area.polygonEnd();\n\t        bound.point = point;\n\t        bound.lineStart = lineStart;\n\t        bound.lineEnd = lineEnd;\n\t        if (d3_geo_areaRingSum < 0) λ0 = -(λ1 = 180), φ0 = -(φ1 = 90); else if (dλSum > ε) φ1 = 90; else if (dλSum < -ε) φ0 = -90;\n\t        range[0] = λ0, range[1] = λ1;\n\t      }\n\t    };\n\t    function point(λ, φ) {\n\t      ranges.push(range = [ λ0 = λ, λ1 = λ ]);\n\t      if (φ < φ0) φ0 = φ;\n\t      if (φ > φ1) φ1 = φ;\n\t    }\n\t    function linePoint(λ, φ) {\n\t      var p = d3_geo_cartesian([ λ * d3_radians, φ * d3_radians ]);\n\t      if (p0) {\n\t        var normal = d3_geo_cartesianCross(p0, p), equatorial = [ normal[1], -normal[0], 0 ], inflection = d3_geo_cartesianCross(equatorial, normal);\n\t        d3_geo_cartesianNormalize(inflection);\n\t        inflection = d3_geo_spherical(inflection);\n\t        var dλ = λ - λ_, s = dλ > 0 ? 1 : -1, λi = inflection[0] * d3_degrees * s, antimeridian = abs(dλ) > 180;\n\t        if (antimeridian ^ (s * λ_ < λi && λi < s * λ)) {\n\t          var φi = inflection[1] * d3_degrees;\n\t          if (φi > φ1) φ1 = φi;\n\t        } else if (λi = (λi + 360) % 360 - 180, antimeridian ^ (s * λ_ < λi && λi < s * λ)) {\n\t          var φi = -inflection[1] * d3_degrees;\n\t          if (φi < φ0) φ0 = φi;\n\t        } else {\n\t          if (φ < φ0) φ0 = φ;\n\t          if (φ > φ1) φ1 = φ;\n\t        }\n\t        if (antimeridian) {\n\t          if (λ < λ_) {\n\t            if (angle(λ0, λ) > angle(λ0, λ1)) λ1 = λ;\n\t          } else {\n\t            if (angle(λ, λ1) > angle(λ0, λ1)) λ0 = λ;\n\t          }\n\t        } else {\n\t          if (λ1 >= λ0) {\n\t            if (λ < λ0) λ0 = λ;\n\t            if (λ > λ1) λ1 = λ;\n\t          } else {\n\t            if (λ > λ_) {\n\t              if (angle(λ0, λ) > angle(λ0, λ1)) λ1 = λ;\n\t            } else {\n\t              if (angle(λ, λ1) > angle(λ0, λ1)) λ0 = λ;\n\t            }\n\t          }\n\t        }\n\t      } else {\n\t        point(λ, φ);\n\t      }\n\t      p0 = p, λ_ = λ;\n\t    }\n\t    function lineStart() {\n\t      bound.point = linePoint;\n\t    }\n\t    function lineEnd() {\n\t      range[0] = λ0, range[1] = λ1;\n\t      bound.point = point;\n\t      p0 = null;\n\t    }\n\t    function ringPoint(λ, φ) {\n\t      if (p0) {\n\t        var dλ = λ - λ_;\n\t        dλSum += abs(dλ) > 180 ? dλ + (dλ > 0 ? 360 : -360) : dλ;\n\t      } else λ__ = λ, φ__ = φ;\n\t      d3_geo_area.point(λ, φ);\n\t      linePoint(λ, φ);\n\t    }\n\t    function ringStart() {\n\t      d3_geo_area.lineStart();\n\t    }\n\t    function ringEnd() {\n\t      ringPoint(λ__, φ__);\n\t      d3_geo_area.lineEnd();\n\t      if (abs(dλSum) > ε) λ0 = -(λ1 = 180);\n\t      range[0] = λ0, range[1] = λ1;\n\t      p0 = null;\n\t    }\n\t    function angle(λ0, λ1) {\n\t      return (λ1 -= λ0) < 0 ? λ1 + 360 : λ1;\n\t    }\n\t    function compareRanges(a, b) {\n\t      return a[0] - b[0];\n\t    }\n\t    function withinRange(x, range) {\n\t      return range[0] <= range[1] ? range[0] <= x && x <= range[1] : x < range[0] || range[1] < x;\n\t    }\n\t    return function(feature) {\n\t      φ1 = λ1 = -(λ0 = φ0 = Infinity);\n\t      ranges = [];\n\t      d3.geo.stream(feature, bound);\n\t      var n = ranges.length;\n\t      if (n) {\n\t        ranges.sort(compareRanges);\n\t        for (var i = 1, a = ranges[0], b, merged = [ a ]; i < n; ++i) {\n\t          b = ranges[i];\n\t          if (withinRange(b[0], a) || withinRange(b[1], a)) {\n\t            if (angle(a[0], b[1]) > angle(a[0], a[1])) a[1] = b[1];\n\t            if (angle(b[0], a[1]) > angle(a[0], a[1])) a[0] = b[0];\n\t          } else {\n\t            merged.push(a = b);\n\t          }\n\t        }\n\t        var best = -Infinity, dλ;\n\t        for (var n = merged.length - 1, i = 0, a = merged[n], b; i <= n; a = b, ++i) {\n\t          b = merged[i];\n\t          if ((dλ = angle(a[1], b[0])) > best) best = dλ, λ0 = b[0], λ1 = a[1];\n\t        }\n\t      }\n\t      ranges = range = null;\n\t      return λ0 === Infinity || φ0 === Infinity ? [ [ NaN, NaN ], [ NaN, NaN ] ] : [ [ λ0, φ0 ], [ λ1, φ1 ] ];\n\t    };\n\t  }();\n\t  d3.geo.centroid = function(object) {\n\t    d3_geo_centroidW0 = d3_geo_centroidW1 = d3_geo_centroidX0 = d3_geo_centroidY0 = d3_geo_centroidZ0 = d3_geo_centroidX1 = d3_geo_centroidY1 = d3_geo_centroidZ1 = d3_geo_centroidX2 = d3_geo_centroidY2 = d3_geo_centroidZ2 = 0;\n\t    d3.geo.stream(object, d3_geo_centroid);\n\t    var x = d3_geo_centroidX2, y = d3_geo_centroidY2, z = d3_geo_centroidZ2, m = x * x + y * y + z * z;\n\t    if (m < ε2) {\n\t      x = d3_geo_centroidX1, y = d3_geo_centroidY1, z = d3_geo_centroidZ1;\n\t      if (d3_geo_centroidW1 < ε) x = d3_geo_centroidX0, y = d3_geo_centroidY0, z = d3_geo_centroidZ0;\n\t      m = x * x + y * y + z * z;\n\t      if (m < ε2) return [ NaN, NaN ];\n\t    }\n\t    return [ Math.atan2(y, x) * d3_degrees, d3_asin(z / Math.sqrt(m)) * d3_degrees ];\n\t  };\n\t  var d3_geo_centroidW0, d3_geo_centroidW1, d3_geo_centroidX0, d3_geo_centroidY0, d3_geo_centroidZ0, d3_geo_centroidX1, d3_geo_centroidY1, d3_geo_centroidZ1, d3_geo_centroidX2, d3_geo_centroidY2, d3_geo_centroidZ2;\n\t  var d3_geo_centroid = {\n\t    sphere: d3_noop,\n\t    point: d3_geo_centroidPoint,\n\t    lineStart: d3_geo_centroidLineStart,\n\t    lineEnd: d3_geo_centroidLineEnd,\n\t    polygonStart: function() {\n\t      d3_geo_centroid.lineStart = d3_geo_centroidRingStart;\n\t    },\n\t    polygonEnd: function() {\n\t      d3_geo_centroid.lineStart = d3_geo_centroidLineStart;\n\t    }\n\t  };\n\t  function d3_geo_centroidPoint(λ, φ) {\n\t    λ *= d3_radians;\n\t    var cosφ = Math.cos(φ *= d3_radians);\n\t    d3_geo_centroidPointXYZ(cosφ * Math.cos(λ), cosφ * Math.sin(λ), Math.sin(φ));\n\t  }\n\t  function d3_geo_centroidPointXYZ(x, y, z) {\n\t    ++d3_geo_centroidW0;\n\t    d3_geo_centroidX0 += (x - d3_geo_centroidX0) / d3_geo_centroidW0;\n\t    d3_geo_centroidY0 += (y - d3_geo_centroidY0) / d3_geo_centroidW0;\n\t    d3_geo_centroidZ0 += (z - d3_geo_centroidZ0) / d3_geo_centroidW0;\n\t  }\n\t  function d3_geo_centroidLineStart() {\n\t    var x0, y0, z0;\n\t    d3_geo_centroid.point = function(λ, φ) {\n\t      λ *= d3_radians;\n\t      var cosφ = Math.cos(φ *= d3_radians);\n\t      x0 = cosφ * Math.cos(λ);\n\t      y0 = cosφ * Math.sin(λ);\n\t      z0 = Math.sin(φ);\n\t      d3_geo_centroid.point = nextPoint;\n\t      d3_geo_centroidPointXYZ(x0, y0, z0);\n\t    };\n\t    function nextPoint(λ, φ) {\n\t      λ *= d3_radians;\n\t      var cosφ = Math.cos(φ *= d3_radians), x = cosφ * Math.cos(λ), y = cosφ * Math.sin(λ), z = Math.sin(φ), w = Math.atan2(Math.sqrt((w = y0 * z - z0 * y) * w + (w = z0 * x - x0 * z) * w + (w = x0 * y - y0 * x) * w), x0 * x + y0 * y + z0 * z);\n\t      d3_geo_centroidW1 += w;\n\t      d3_geo_centroidX1 += w * (x0 + (x0 = x));\n\t      d3_geo_centroidY1 += w * (y0 + (y0 = y));\n\t      d3_geo_centroidZ1 += w * (z0 + (z0 = z));\n\t      d3_geo_centroidPointXYZ(x0, y0, z0);\n\t    }\n\t  }\n\t  function d3_geo_centroidLineEnd() {\n\t    d3_geo_centroid.point = d3_geo_centroidPoint;\n\t  }\n\t  function d3_geo_centroidRingStart() {\n\t    var λ00, φ00, x0, y0, z0;\n\t    d3_geo_centroid.point = function(λ, φ) {\n\t      λ00 = λ, φ00 = φ;\n\t      d3_geo_centroid.point = nextPoint;\n\t      λ *= d3_radians;\n\t      var cosφ = Math.cos(φ *= d3_radians);\n\t      x0 = cosφ * Math.cos(λ);\n\t      y0 = cosφ * Math.sin(λ);\n\t      z0 = Math.sin(φ);\n\t      d3_geo_centroidPointXYZ(x0, y0, z0);\n\t    };\n\t    d3_geo_centroid.lineEnd = function() {\n\t      nextPoint(λ00, φ00);\n\t      d3_geo_centroid.lineEnd = d3_geo_centroidLineEnd;\n\t      d3_geo_centroid.point = d3_geo_centroidPoint;\n\t    };\n\t    function nextPoint(λ, φ) {\n\t      λ *= d3_radians;\n\t      var cosφ = Math.cos(φ *= d3_radians), x = cosφ * Math.cos(λ), y = cosφ * Math.sin(λ), z = Math.sin(φ), cx = y0 * z - z0 * y, cy = z0 * x - x0 * z, cz = x0 * y - y0 * x, m = Math.sqrt(cx * cx + cy * cy + cz * cz), u = x0 * x + y0 * y + z0 * z, v = m && -d3_acos(u) / m, w = Math.atan2(m, u);\n\t      d3_geo_centroidX2 += v * cx;\n\t      d3_geo_centroidY2 += v * cy;\n\t      d3_geo_centroidZ2 += v * cz;\n\t      d3_geo_centroidW1 += w;\n\t      d3_geo_centroidX1 += w * (x0 + (x0 = x));\n\t      d3_geo_centroidY1 += w * (y0 + (y0 = y));\n\t      d3_geo_centroidZ1 += w * (z0 + (z0 = z));\n\t      d3_geo_centroidPointXYZ(x0, y0, z0);\n\t    }\n\t  }\n\t  function d3_geo_compose(a, b) {\n\t    function compose(x, y) {\n\t      return x = a(x, y), b(x[0], x[1]);\n\t    }\n\t    if (a.invert && b.invert) compose.invert = function(x, y) {\n\t      return x = b.invert(x, y), x && a.invert(x[0], x[1]);\n\t    };\n\t    return compose;\n\t  }\n\t  function d3_true() {\n\t    return true;\n\t  }\n\t  function d3_geo_clipPolygon(segments, compare, clipStartInside, interpolate, listener) {\n\t    var subject = [], clip = [];\n\t    segments.forEach(function(segment) {\n\t      if ((n = segment.length - 1) <= 0) return;\n\t      var n, p0 = segment[0], p1 = segment[n];\n\t      if (d3_geo_sphericalEqual(p0, p1)) {\n\t        listener.lineStart();\n\t        for (var i = 0; i < n; ++i) listener.point((p0 = segment[i])[0], p0[1]);\n\t        listener.lineEnd();\n\t        return;\n\t      }\n\t      var a = new d3_geo_clipPolygonIntersection(p0, segment, null, true), b = new d3_geo_clipPolygonIntersection(p0, null, a, false);\n\t      a.o = b;\n\t      subject.push(a);\n\t      clip.push(b);\n\t      a = new d3_geo_clipPolygonIntersection(p1, segment, null, false);\n\t      b = new d3_geo_clipPolygonIntersection(p1, null, a, true);\n\t      a.o = b;\n\t      subject.push(a);\n\t      clip.push(b);\n\t    });\n\t    clip.sort(compare);\n\t    d3_geo_clipPolygonLinkCircular(subject);\n\t    d3_geo_clipPolygonLinkCircular(clip);\n\t    if (!subject.length) return;\n\t    for (var i = 0, entry = clipStartInside, n = clip.length; i < n; ++i) {\n\t      clip[i].e = entry = !entry;\n\t    }\n\t    var start = subject[0], points, point;\n\t    while (1) {\n\t      var current = start, isSubject = true;\n\t      while (current.v) if ((current = current.n) === start) return;\n\t      points = current.z;\n\t      listener.lineStart();\n\t      do {\n\t        current.v = current.o.v = true;\n\t        if (current.e) {\n\t          if (isSubject) {\n\t            for (var i = 0, n = points.length; i < n; ++i) listener.point((point = points[i])[0], point[1]);\n\t          } else {\n\t            interpolate(current.x, current.n.x, 1, listener);\n\t          }\n\t          current = current.n;\n\t        } else {\n\t          if (isSubject) {\n\t            points = current.p.z;\n\t            for (var i = points.length - 1; i >= 0; --i) listener.point((point = points[i])[0], point[1]);\n\t          } else {\n\t            interpolate(current.x, current.p.x, -1, listener);\n\t          }\n\t          current = current.p;\n\t        }\n\t        current = current.o;\n\t        points = current.z;\n\t        isSubject = !isSubject;\n\t      } while (!current.v);\n\t      listener.lineEnd();\n\t    }\n\t  }\n\t  function d3_geo_clipPolygonLinkCircular(array) {\n\t    if (!(n = array.length)) return;\n\t    var n, i = 0, a = array[0], b;\n\t    while (++i < n) {\n\t      a.n = b = array[i];\n\t      b.p = a;\n\t      a = b;\n\t    }\n\t    a.n = b = array[0];\n\t    b.p = a;\n\t  }\n\t  function d3_geo_clipPolygonIntersection(point, points, other, entry) {\n\t    this.x = point;\n\t    this.z = points;\n\t    this.o = other;\n\t    this.e = entry;\n\t    this.v = false;\n\t    this.n = this.p = null;\n\t  }\n\t  function d3_geo_clip(pointVisible, clipLine, interpolate, clipStart) {\n\t    return function(rotate, listener) {\n\t      var line = clipLine(listener), rotatedClipStart = rotate.invert(clipStart[0], clipStart[1]);\n\t      var clip = {\n\t        point: point,\n\t        lineStart: lineStart,\n\t        lineEnd: lineEnd,\n\t        polygonStart: function() {\n\t          clip.point = pointRing;\n\t          clip.lineStart = ringStart;\n\t          clip.lineEnd = ringEnd;\n\t          segments = [];\n\t          polygon = [];\n\t        },\n\t        polygonEnd: function() {\n\t          clip.point = point;\n\t          clip.lineStart = lineStart;\n\t          clip.lineEnd = lineEnd;\n\t          segments = d3.merge(segments);\n\t          var clipStartInside = d3_geo_pointInPolygon(rotatedClipStart, polygon);\n\t          if (segments.length) {\n\t            if (!polygonStarted) listener.polygonStart(), polygonStarted = true;\n\t            d3_geo_clipPolygon(segments, d3_geo_clipSort, clipStartInside, interpolate, listener);\n\t          } else if (clipStartInside) {\n\t            if (!polygonStarted) listener.polygonStart(), polygonStarted = true;\n\t            listener.lineStart();\n\t            interpolate(null, null, 1, listener);\n\t            listener.lineEnd();\n\t          }\n\t          if (polygonStarted) listener.polygonEnd(), polygonStarted = false;\n\t          segments = polygon = null;\n\t        },\n\t        sphere: function() {\n\t          listener.polygonStart();\n\t          listener.lineStart();\n\t          interpolate(null, null, 1, listener);\n\t          listener.lineEnd();\n\t          listener.polygonEnd();\n\t        }\n\t      };\n\t      function point(λ, φ) {\n\t        var point = rotate(λ, φ);\n\t        if (pointVisible(λ = point[0], φ = point[1])) listener.point(λ, φ);\n\t      }\n\t      function pointLine(λ, φ) {\n\t        var point = rotate(λ, φ);\n\t        line.point(point[0], point[1]);\n\t      }\n\t      function lineStart() {\n\t        clip.point = pointLine;\n\t        line.lineStart();\n\t      }\n\t      function lineEnd() {\n\t        clip.point = point;\n\t        line.lineEnd();\n\t      }\n\t      var segments;\n\t      var buffer = d3_geo_clipBufferListener(), ringListener = clipLine(buffer), polygonStarted = false, polygon, ring;\n\t      function pointRing(λ, φ) {\n\t        ring.push([ λ, φ ]);\n\t        var point = rotate(λ, φ);\n\t        ringListener.point(point[0], point[1]);\n\t      }\n\t      function ringStart() {\n\t        ringListener.lineStart();\n\t        ring = [];\n\t      }\n\t      function ringEnd() {\n\t        pointRing(ring[0][0], ring[0][1]);\n\t        ringListener.lineEnd();\n\t        var clean = ringListener.clean(), ringSegments = buffer.buffer(), segment, n = ringSegments.length;\n\t        ring.pop();\n\t        polygon.push(ring);\n\t        ring = null;\n\t        if (!n) return;\n\t        if (clean & 1) {\n\t          segment = ringSegments[0];\n\t          var n = segment.length - 1, i = -1, point;\n\t          if (n > 0) {\n\t            if (!polygonStarted) listener.polygonStart(), polygonStarted = true;\n\t            listener.lineStart();\n\t            while (++i < n) listener.point((point = segment[i])[0], point[1]);\n\t            listener.lineEnd();\n\t          }\n\t          return;\n\t        }\n\t        if (n > 1 && clean & 2) ringSegments.push(ringSegments.pop().concat(ringSegments.shift()));\n\t        segments.push(ringSegments.filter(d3_geo_clipSegmentLength1));\n\t      }\n\t      return clip;\n\t    };\n\t  }\n\t  function d3_geo_clipSegmentLength1(segment) {\n\t    return segment.length > 1;\n\t  }\n\t  function d3_geo_clipBufferListener() {\n\t    var lines = [], line;\n\t    return {\n\t      lineStart: function() {\n\t        lines.push(line = []);\n\t      },\n\t      point: function(λ, φ) {\n\t        line.push([ λ, φ ]);\n\t      },\n\t      lineEnd: d3_noop,\n\t      buffer: function() {\n\t        var buffer = lines;\n\t        lines = [];\n\t        line = null;\n\t        return buffer;\n\t      },\n\t      rejoin: function() {\n\t        if (lines.length > 1) lines.push(lines.pop().concat(lines.shift()));\n\t      }\n\t    };\n\t  }\n\t  function d3_geo_clipSort(a, b) {\n\t    return ((a = a.x)[0] < 0 ? a[1] - halfπ - ε : halfπ - a[1]) - ((b = b.x)[0] < 0 ? b[1] - halfπ - ε : halfπ - b[1]);\n\t  }\n\t  var d3_geo_clipAntimeridian = d3_geo_clip(d3_true, d3_geo_clipAntimeridianLine, d3_geo_clipAntimeridianInterpolate, [ -π, -π / 2 ]);\n\t  function d3_geo_clipAntimeridianLine(listener) {\n\t    var λ0 = NaN, φ0 = NaN, sλ0 = NaN, clean;\n\t    return {\n\t      lineStart: function() {\n\t        listener.lineStart();\n\t        clean = 1;\n\t      },\n\t      point: function(λ1, φ1) {\n\t        var sλ1 = λ1 > 0 ? π : -π, dλ = abs(λ1 - λ0);\n\t        if (abs(dλ - π) < ε) {\n\t          listener.point(λ0, φ0 = (φ0 + φ1) / 2 > 0 ? halfπ : -halfπ);\n\t          listener.point(sλ0, φ0);\n\t          listener.lineEnd();\n\t          listener.lineStart();\n\t          listener.point(sλ1, φ0);\n\t          listener.point(λ1, φ0);\n\t          clean = 0;\n\t        } else if (sλ0 !== sλ1 && dλ >= π) {\n\t          if (abs(λ0 - sλ0) < ε) λ0 -= sλ0 * ε;\n\t          if (abs(λ1 - sλ1) < ε) λ1 -= sλ1 * ε;\n\t          φ0 = d3_geo_clipAntimeridianIntersect(λ0, φ0, λ1, φ1);\n\t          listener.point(sλ0, φ0);\n\t          listener.lineEnd();\n\t          listener.lineStart();\n\t          listener.point(sλ1, φ0);\n\t          clean = 0;\n\t        }\n\t        listener.point(λ0 = λ1, φ0 = φ1);\n\t        sλ0 = sλ1;\n\t      },\n\t      lineEnd: function() {\n\t        listener.lineEnd();\n\t        λ0 = φ0 = NaN;\n\t      },\n\t      clean: function() {\n\t        return 2 - clean;\n\t      }\n\t    };\n\t  }\n\t  function d3_geo_clipAntimeridianIntersect(λ0, φ0, λ1, φ1) {\n\t    var cosφ0, cosφ1, sinλ0_λ1 = Math.sin(λ0 - λ1);\n\t    return abs(sinλ0_λ1) > ε ? Math.atan((Math.sin(φ0) * (cosφ1 = Math.cos(φ1)) * Math.sin(λ1) - Math.sin(φ1) * (cosφ0 = Math.cos(φ0)) * Math.sin(λ0)) / (cosφ0 * cosφ1 * sinλ0_λ1)) : (φ0 + φ1) / 2;\n\t  }\n\t  function d3_geo_clipAntimeridianInterpolate(from, to, direction, listener) {\n\t    var φ;\n\t    if (from == null) {\n\t      φ = direction * halfπ;\n\t      listener.point(-π, φ);\n\t      listener.point(0, φ);\n\t      listener.point(π, φ);\n\t      listener.point(π, 0);\n\t      listener.point(π, -φ);\n\t      listener.point(0, -φ);\n\t      listener.point(-π, -φ);\n\t      listener.point(-π, 0);\n\t      listener.point(-π, φ);\n\t    } else if (abs(from[0] - to[0]) > ε) {\n\t      var s = from[0] < to[0] ? π : -π;\n\t      φ = direction * s / 2;\n\t      listener.point(-s, φ);\n\t      listener.point(0, φ);\n\t      listener.point(s, φ);\n\t    } else {\n\t      listener.point(to[0], to[1]);\n\t    }\n\t  }\n\t  function d3_geo_pointInPolygon(point, polygon) {\n\t    var meridian = point[0], parallel = point[1], meridianNormal = [ Math.sin(meridian), -Math.cos(meridian), 0 ], polarAngle = 0, winding = 0;\n\t    d3_geo_areaRingSum.reset();\n\t    for (var i = 0, n = polygon.length; i < n; ++i) {\n\t      var ring = polygon[i], m = ring.length;\n\t      if (!m) continue;\n\t      var point0 = ring[0], λ0 = point0[0], φ0 = point0[1] / 2 + π / 4, sinφ0 = Math.sin(φ0), cosφ0 = Math.cos(φ0), j = 1;\n\t      while (true) {\n\t        if (j === m) j = 0;\n\t        point = ring[j];\n\t        var λ = point[0], φ = point[1] / 2 + π / 4, sinφ = Math.sin(φ), cosφ = Math.cos(φ), dλ = λ - λ0, sdλ = dλ >= 0 ? 1 : -1, adλ = sdλ * dλ, antimeridian = adλ > π, k = sinφ0 * sinφ;\n\t        d3_geo_areaRingSum.add(Math.atan2(k * sdλ * Math.sin(adλ), cosφ0 * cosφ + k * Math.cos(adλ)));\n\t        polarAngle += antimeridian ? dλ + sdλ * τ : dλ;\n\t        if (antimeridian ^ λ0 >= meridian ^ λ >= meridian) {\n\t          var arc = d3_geo_cartesianCross(d3_geo_cartesian(point0), d3_geo_cartesian(point));\n\t          d3_geo_cartesianNormalize(arc);\n\t          var intersection = d3_geo_cartesianCross(meridianNormal, arc);\n\t          d3_geo_cartesianNormalize(intersection);\n\t          var φarc = (antimeridian ^ dλ >= 0 ? -1 : 1) * d3_asin(intersection[2]);\n\t          if (parallel > φarc || parallel === φarc && (arc[0] || arc[1])) {\n\t            winding += antimeridian ^ dλ >= 0 ? 1 : -1;\n\t          }\n\t        }\n\t        if (!j++) break;\n\t        λ0 = λ, sinφ0 = sinφ, cosφ0 = cosφ, point0 = point;\n\t      }\n\t    }\n\t    return (polarAngle < -ε || polarAngle < ε && d3_geo_areaRingSum < 0) ^ winding & 1;\n\t  }\n\t  function d3_geo_clipCircle(radius) {\n\t    var cr = Math.cos(radius), smallRadius = cr > 0, notHemisphere = abs(cr) > ε, interpolate = d3_geo_circleInterpolate(radius, 6 * d3_radians);\n\t    return d3_geo_clip(visible, clipLine, interpolate, smallRadius ? [ 0, -radius ] : [ -π, radius - π ]);\n\t    function visible(λ, φ) {\n\t      return Math.cos(λ) * Math.cos(φ) > cr;\n\t    }\n\t    function clipLine(listener) {\n\t      var point0, c0, v0, v00, clean;\n\t      return {\n\t        lineStart: function() {\n\t          v00 = v0 = false;\n\t          clean = 1;\n\t        },\n\t        point: function(λ, φ) {\n\t          var point1 = [ λ, φ ], point2, v = visible(λ, φ), c = smallRadius ? v ? 0 : code(λ, φ) : v ? code(λ + (λ < 0 ? π : -π), φ) : 0;\n\t          if (!point0 && (v00 = v0 = v)) listener.lineStart();\n\t          if (v !== v0) {\n\t            point2 = intersect(point0, point1);\n\t            if (d3_geo_sphericalEqual(point0, point2) || d3_geo_sphericalEqual(point1, point2)) {\n\t              point1[0] += ε;\n\t              point1[1] += ε;\n\t              v = visible(point1[0], point1[1]);\n\t            }\n\t          }\n\t          if (v !== v0) {\n\t            clean = 0;\n\t            if (v) {\n\t              listener.lineStart();\n\t              point2 = intersect(point1, point0);\n\t              listener.point(point2[0], point2[1]);\n\t            } else {\n\t              point2 = intersect(point0, point1);\n\t              listener.point(point2[0], point2[1]);\n\t              listener.lineEnd();\n\t            }\n\t            point0 = point2;\n\t          } else if (notHemisphere && point0 && smallRadius ^ v) {\n\t            var t;\n\t            if (!(c & c0) && (t = intersect(point1, point0, true))) {\n\t              clean = 0;\n\t              if (smallRadius) {\n\t                listener.lineStart();\n\t                listener.point(t[0][0], t[0][1]);\n\t                listener.point(t[1][0], t[1][1]);\n\t                listener.lineEnd();\n\t              } else {\n\t                listener.point(t[1][0], t[1][1]);\n\t                listener.lineEnd();\n\t                listener.lineStart();\n\t                listener.point(t[0][0], t[0][1]);\n\t              }\n\t            }\n\t          }\n\t          if (v && (!point0 || !d3_geo_sphericalEqual(point0, point1))) {\n\t            listener.point(point1[0], point1[1]);\n\t          }\n\t          point0 = point1, v0 = v, c0 = c;\n\t        },\n\t        lineEnd: function() {\n\t          if (v0) listener.lineEnd();\n\t          point0 = null;\n\t        },\n\t        clean: function() {\n\t          return clean | (v00 && v0) << 1;\n\t        }\n\t      };\n\t    }\n\t    function intersect(a, b, two) {\n\t      var pa = d3_geo_cartesian(a), pb = d3_geo_cartesian(b);\n\t      var n1 = [ 1, 0, 0 ], n2 = d3_geo_cartesianCross(pa, pb), n2n2 = d3_geo_cartesianDot(n2, n2), n1n2 = n2[0], determinant = n2n2 - n1n2 * n1n2;\n\t      if (!determinant) return !two && a;\n\t      var c1 = cr * n2n2 / determinant, c2 = -cr * n1n2 / determinant, n1xn2 = d3_geo_cartesianCross(n1, n2), A = d3_geo_cartesianScale(n1, c1), B = d3_geo_cartesianScale(n2, c2);\n\t      d3_geo_cartesianAdd(A, B);\n\t      var u = n1xn2, w = d3_geo_cartesianDot(A, u), uu = d3_geo_cartesianDot(u, u), t2 = w * w - uu * (d3_geo_cartesianDot(A, A) - 1);\n\t      if (t2 < 0) return;\n\t      var t = Math.sqrt(t2), q = d3_geo_cartesianScale(u, (-w - t) / uu);\n\t      d3_geo_cartesianAdd(q, A);\n\t      q = d3_geo_spherical(q);\n\t      if (!two) return q;\n\t      var λ0 = a[0], λ1 = b[0], φ0 = a[1], φ1 = b[1], z;\n\t      if (λ1 < λ0) z = λ0, λ0 = λ1, λ1 = z;\n\t      var δλ = λ1 - λ0, polar = abs(δλ - π) < ε, meridian = polar || δλ < ε;\n\t      if (!polar && φ1 < φ0) z = φ0, φ0 = φ1, φ1 = z;\n\t      if (meridian ? polar ? φ0 + φ1 > 0 ^ q[1] < (abs(q[0] - λ0) < ε ? φ0 : φ1) : φ0 <= q[1] && q[1] <= φ1 : δλ > π ^ (λ0 <= q[0] && q[0] <= λ1)) {\n\t        var q1 = d3_geo_cartesianScale(u, (-w + t) / uu);\n\t        d3_geo_cartesianAdd(q1, A);\n\t        return [ q, d3_geo_spherical(q1) ];\n\t      }\n\t    }\n\t    function code(λ, φ) {\n\t      var r = smallRadius ? radius : π - radius, code = 0;\n\t      if (λ < -r) code |= 1; else if (λ > r) code |= 2;\n\t      if (φ < -r) code |= 4; else if (φ > r) code |= 8;\n\t      return code;\n\t    }\n\t  }\n\t  function d3_geom_clipLine(x0, y0, x1, y1) {\n\t    return function(line) {\n\t      var a = line.a, b = line.b, ax = a.x, ay = a.y, bx = b.x, by = b.y, t0 = 0, t1 = 1, dx = bx - ax, dy = by - ay, r;\n\t      r = x0 - ax;\n\t      if (!dx && r > 0) return;\n\t      r /= dx;\n\t      if (dx < 0) {\n\t        if (r < t0) return;\n\t        if (r < t1) t1 = r;\n\t      } else if (dx > 0) {\n\t        if (r > t1) return;\n\t        if (r > t0) t0 = r;\n\t      }\n\t      r = x1 - ax;\n\t      if (!dx && r < 0) return;\n\t      r /= dx;\n\t      if (dx < 0) {\n\t        if (r > t1) return;\n\t        if (r > t0) t0 = r;\n\t      } else if (dx > 0) {\n\t        if (r < t0) return;\n\t        if (r < t1) t1 = r;\n\t      }\n\t      r = y0 - ay;\n\t      if (!dy && r > 0) return;\n\t      r /= dy;\n\t      if (dy < 0) {\n\t        if (r < t0) return;\n\t        if (r < t1) t1 = r;\n\t      } else if (dy > 0) {\n\t        if (r > t1) return;\n\t        if (r > t0) t0 = r;\n\t      }\n\t      r = y1 - ay;\n\t      if (!dy && r < 0) return;\n\t      r /= dy;\n\t      if (dy < 0) {\n\t        if (r > t1) return;\n\t        if (r > t0) t0 = r;\n\t      } else if (dy > 0) {\n\t        if (r < t0) return;\n\t        if (r < t1) t1 = r;\n\t      }\n\t      if (t0 > 0) line.a = {\n\t        x: ax + t0 * dx,\n\t        y: ay + t0 * dy\n\t      };\n\t      if (t1 < 1) line.b = {\n\t        x: ax + t1 * dx,\n\t        y: ay + t1 * dy\n\t      };\n\t      return line;\n\t    };\n\t  }\n\t  var d3_geo_clipExtentMAX = 1e9;\n\t  d3.geo.clipExtent = function() {\n\t    var x0, y0, x1, y1, stream, clip, clipExtent = {\n\t      stream: function(output) {\n\t        if (stream) stream.valid = false;\n\t        stream = clip(output);\n\t        stream.valid = true;\n\t        return stream;\n\t      },\n\t      extent: function(_) {\n\t        if (!arguments.length) return [ [ x0, y0 ], [ x1, y1 ] ];\n\t        clip = d3_geo_clipExtent(x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]);\n\t        if (stream) stream.valid = false, stream = null;\n\t        return clipExtent;\n\t      }\n\t    };\n\t    return clipExtent.extent([ [ 0, 0 ], [ 960, 500 ] ]);\n\t  };\n\t  function d3_geo_clipExtent(x0, y0, x1, y1) {\n\t    return function(listener) {\n\t      var listener_ = listener, bufferListener = d3_geo_clipBufferListener(), clipLine = d3_geom_clipLine(x0, y0, x1, y1), segments, polygon, ring;\n\t      var clip = {\n\t        point: point,\n\t        lineStart: lineStart,\n\t        lineEnd: lineEnd,\n\t        polygonStart: function() {\n\t          listener = bufferListener;\n\t          segments = [];\n\t          polygon = [];\n\t          clean = true;\n\t        },\n\t        polygonEnd: function() {\n\t          listener = listener_;\n\t          segments = d3.merge(segments);\n\t          var clipStartInside = insidePolygon([ x0, y1 ]), inside = clean && clipStartInside, visible = segments.length;\n\t          if (inside || visible) {\n\t            listener.polygonStart();\n\t            if (inside) {\n\t              listener.lineStart();\n\t              interpolate(null, null, 1, listener);\n\t              listener.lineEnd();\n\t            }\n\t            if (visible) {\n\t              d3_geo_clipPolygon(segments, compare, clipStartInside, interpolate, listener);\n\t            }\n\t            listener.polygonEnd();\n\t          }\n\t          segments = polygon = ring = null;\n\t        }\n\t      };\n\t      function insidePolygon(p) {\n\t        var wn = 0, n = polygon.length, y = p[1];\n\t        for (var i = 0; i < n; ++i) {\n\t          for (var j = 1, v = polygon[i], m = v.length, a = v[0], b; j < m; ++j) {\n\t            b = v[j];\n\t            if (a[1] <= y) {\n\t              if (b[1] > y && d3_cross2d(a, b, p) > 0) ++wn;\n\t            } else {\n\t              if (b[1] <= y && d3_cross2d(a, b, p) < 0) --wn;\n\t            }\n\t            a = b;\n\t          }\n\t        }\n\t        return wn !== 0;\n\t      }\n\t      function interpolate(from, to, direction, listener) {\n\t        var a = 0, a1 = 0;\n\t        if (from == null || (a = corner(from, direction)) !== (a1 = corner(to, direction)) || comparePoints(from, to) < 0 ^ direction > 0) {\n\t          do {\n\t            listener.point(a === 0 || a === 3 ? x0 : x1, a > 1 ? y1 : y0);\n\t          } while ((a = (a + direction + 4) % 4) !== a1);\n\t        } else {\n\t          listener.point(to[0], to[1]);\n\t        }\n\t      }\n\t      function pointVisible(x, y) {\n\t        return x0 <= x && x <= x1 && y0 <= y && y <= y1;\n\t      }\n\t      function point(x, y) {\n\t        if (pointVisible(x, y)) listener.point(x, y);\n\t      }\n\t      var x__, y__, v__, x_, y_, v_, first, clean;\n\t      function lineStart() {\n\t        clip.point = linePoint;\n\t        if (polygon) polygon.push(ring = []);\n\t        first = true;\n\t        v_ = false;\n\t        x_ = y_ = NaN;\n\t      }\n\t      function lineEnd() {\n\t        if (segments) {\n\t          linePoint(x__, y__);\n\t          if (v__ && v_) bufferListener.rejoin();\n\t          segments.push(bufferListener.buffer());\n\t        }\n\t        clip.point = point;\n\t        if (v_) listener.lineEnd();\n\t      }\n\t      function linePoint(x, y) {\n\t        x = Math.max(-d3_geo_clipExtentMAX, Math.min(d3_geo_clipExtentMAX, x));\n\t        y = Math.max(-d3_geo_clipExtentMAX, Math.min(d3_geo_clipExtentMAX, y));\n\t        var v = pointVisible(x, y);\n\t        if (polygon) ring.push([ x, y ]);\n\t        if (first) {\n\t          x__ = x, y__ = y, v__ = v;\n\t          first = false;\n\t          if (v) {\n\t            listener.lineStart();\n\t            listener.point(x, y);\n\t          }\n\t        } else {\n\t          if (v && v_) listener.point(x, y); else {\n\t            var l = {\n\t              a: {\n\t                x: x_,\n\t                y: y_\n\t              },\n\t              b: {\n\t                x: x,\n\t                y: y\n\t              }\n\t            };\n\t            if (clipLine(l)) {\n\t              if (!v_) {\n\t                listener.lineStart();\n\t                listener.point(l.a.x, l.a.y);\n\t              }\n\t              listener.point(l.b.x, l.b.y);\n\t              if (!v) listener.lineEnd();\n\t              clean = false;\n\t            } else if (v) {\n\t              listener.lineStart();\n\t              listener.point(x, y);\n\t              clean = false;\n\t            }\n\t          }\n\t        }\n\t        x_ = x, y_ = y, v_ = v;\n\t      }\n\t      return clip;\n\t    };\n\t    function corner(p, direction) {\n\t      return abs(p[0] - x0) < ε ? direction > 0 ? 0 : 3 : abs(p[0] - x1) < ε ? direction > 0 ? 2 : 1 : abs(p[1] - y0) < ε ? direction > 0 ? 1 : 0 : direction > 0 ? 3 : 2;\n\t    }\n\t    function compare(a, b) {\n\t      return comparePoints(a.x, b.x);\n\t    }\n\t    function comparePoints(a, b) {\n\t      var ca = corner(a, 1), cb = corner(b, 1);\n\t      return ca !== cb ? ca - cb : ca === 0 ? b[1] - a[1] : ca === 1 ? a[0] - b[0] : ca === 2 ? a[1] - b[1] : b[0] - a[0];\n\t    }\n\t  }\n\t  function d3_geo_conic(projectAt) {\n\t    var φ0 = 0, φ1 = π / 3, m = d3_geo_projectionMutator(projectAt), p = m(φ0, φ1);\n\t    p.parallels = function(_) {\n\t      if (!arguments.length) return [ φ0 / π * 180, φ1 / π * 180 ];\n\t      return m(φ0 = _[0] * π / 180, φ1 = _[1] * π / 180);\n\t    };\n\t    return p;\n\t  }\n\t  function d3_geo_conicEqualArea(φ0, φ1) {\n\t    var sinφ0 = Math.sin(φ0), n = (sinφ0 + Math.sin(φ1)) / 2, C = 1 + sinφ0 * (2 * n - sinφ0), ρ0 = Math.sqrt(C) / n;\n\t    function forward(λ, φ) {\n\t      var ρ = Math.sqrt(C - 2 * n * Math.sin(φ)) / n;\n\t      return [ ρ * Math.sin(λ *= n), ρ0 - ρ * Math.cos(λ) ];\n\t    }\n\t    forward.invert = function(x, y) {\n\t      var ρ0_y = ρ0 - y;\n\t      return [ Math.atan2(x, ρ0_y) / n, d3_asin((C - (x * x + ρ0_y * ρ0_y) * n * n) / (2 * n)) ];\n\t    };\n\t    return forward;\n\t  }\n\t  (d3.geo.conicEqualArea = function() {\n\t    return d3_geo_conic(d3_geo_conicEqualArea);\n\t  }).raw = d3_geo_conicEqualArea;\n\t  d3.geo.albers = function() {\n\t    return d3.geo.conicEqualArea().rotate([ 96, 0 ]).center([ -.6, 38.7 ]).parallels([ 29.5, 45.5 ]).scale(1070);\n\t  };\n\t  d3.geo.albersUsa = function() {\n\t    var lower48 = d3.geo.albers();\n\t    var alaska = d3.geo.conicEqualArea().rotate([ 154, 0 ]).center([ -2, 58.5 ]).parallels([ 55, 65 ]);\n\t    var hawaii = d3.geo.conicEqualArea().rotate([ 157, 0 ]).center([ -3, 19.9 ]).parallels([ 8, 18 ]);\n\t    var point, pointStream = {\n\t      point: function(x, y) {\n\t        point = [ x, y ];\n\t      }\n\t    }, lower48Point, alaskaPoint, hawaiiPoint;\n\t    function albersUsa(coordinates) {\n\t      var x = coordinates[0], y = coordinates[1];\n\t      point = null;\n\t      (lower48Point(x, y), point) || (alaskaPoint(x, y), point) || hawaiiPoint(x, y);\n\t      return point;\n\t    }\n\t    albersUsa.invert = function(coordinates) {\n\t      var k = lower48.scale(), t = lower48.translate(), x = (coordinates[0] - t[0]) / k, y = (coordinates[1] - t[1]) / k;\n\t      return (y >= .12 && y < .234 && x >= -.425 && x < -.214 ? alaska : y >= .166 && y < .234 && x >= -.214 && x < -.115 ? hawaii : lower48).invert(coordinates);\n\t    };\n\t    albersUsa.stream = function(stream) {\n\t      var lower48Stream = lower48.stream(stream), alaskaStream = alaska.stream(stream), hawaiiStream = hawaii.stream(stream);\n\t      return {\n\t        point: function(x, y) {\n\t          lower48Stream.point(x, y);\n\t          alaskaStream.point(x, y);\n\t          hawaiiStream.point(x, y);\n\t        },\n\t        sphere: function() {\n\t          lower48Stream.sphere();\n\t          alaskaStream.sphere();\n\t          hawaiiStream.sphere();\n\t        },\n\t        lineStart: function() {\n\t          lower48Stream.lineStart();\n\t          alaskaStream.lineStart();\n\t          hawaiiStream.lineStart();\n\t        },\n\t        lineEnd: function() {\n\t          lower48Stream.lineEnd();\n\t          alaskaStream.lineEnd();\n\t          hawaiiStream.lineEnd();\n\t        },\n\t        polygonStart: function() {\n\t          lower48Stream.polygonStart();\n\t          alaskaStream.polygonStart();\n\t          hawaiiStream.polygonStart();\n\t        },\n\t        polygonEnd: function() {\n\t          lower48Stream.polygonEnd();\n\t          alaskaStream.polygonEnd();\n\t          hawaiiStream.polygonEnd();\n\t        }\n\t      };\n\t    };\n\t    albersUsa.precision = function(_) {\n\t      if (!arguments.length) return lower48.precision();\n\t      lower48.precision(_);\n\t      alaska.precision(_);\n\t      hawaii.precision(_);\n\t      return albersUsa;\n\t    };\n\t    albersUsa.scale = function(_) {\n\t      if (!arguments.length) return lower48.scale();\n\t      lower48.scale(_);\n\t      alaska.scale(_ * .35);\n\t      hawaii.scale(_);\n\t      return albersUsa.translate(lower48.translate());\n\t    };\n\t    albersUsa.translate = function(_) {\n\t      if (!arguments.length) return lower48.translate();\n\t      var k = lower48.scale(), x = +_[0], y = +_[1];\n\t      lower48Point = lower48.translate(_).clipExtent([ [ x - .455 * k, y - .238 * k ], [ x + .455 * k, y + .238 * k ] ]).stream(pointStream).point;\n\t      alaskaPoint = alaska.translate([ x - .307 * k, y + .201 * k ]).clipExtent([ [ x - .425 * k + ε, y + .12 * k + ε ], [ x - .214 * k - ε, y + .234 * k - ε ] ]).stream(pointStream).point;\n\t      hawaiiPoint = hawaii.translate([ x - .205 * k, y + .212 * k ]).clipExtent([ [ x - .214 * k + ε, y + .166 * k + ε ], [ x - .115 * k - ε, y + .234 * k - ε ] ]).stream(pointStream).point;\n\t      return albersUsa;\n\t    };\n\t    return albersUsa.scale(1070);\n\t  };\n\t  var d3_geo_pathAreaSum, d3_geo_pathAreaPolygon, d3_geo_pathArea = {\n\t    point: d3_noop,\n\t    lineStart: d3_noop,\n\t    lineEnd: d3_noop,\n\t    polygonStart: function() {\n\t      d3_geo_pathAreaPolygon = 0;\n\t      d3_geo_pathArea.lineStart = d3_geo_pathAreaRingStart;\n\t    },\n\t    polygonEnd: function() {\n\t      d3_geo_pathArea.lineStart = d3_geo_pathArea.lineEnd = d3_geo_pathArea.point = d3_noop;\n\t      d3_geo_pathAreaSum += abs(d3_geo_pathAreaPolygon / 2);\n\t    }\n\t  };\n\t  function d3_geo_pathAreaRingStart() {\n\t    var x00, y00, x0, y0;\n\t    d3_geo_pathArea.point = function(x, y) {\n\t      d3_geo_pathArea.point = nextPoint;\n\t      x00 = x0 = x, y00 = y0 = y;\n\t    };\n\t    function nextPoint(x, y) {\n\t      d3_geo_pathAreaPolygon += y0 * x - x0 * y;\n\t      x0 = x, y0 = y;\n\t    }\n\t    d3_geo_pathArea.lineEnd = function() {\n\t      nextPoint(x00, y00);\n\t    };\n\t  }\n\t  var d3_geo_pathBoundsX0, d3_geo_pathBoundsY0, d3_geo_pathBoundsX1, d3_geo_pathBoundsY1;\n\t  var d3_geo_pathBounds = {\n\t    point: d3_geo_pathBoundsPoint,\n\t    lineStart: d3_noop,\n\t    lineEnd: d3_noop,\n\t    polygonStart: d3_noop,\n\t    polygonEnd: d3_noop\n\t  };\n\t  function d3_geo_pathBoundsPoint(x, y) {\n\t    if (x < d3_geo_pathBoundsX0) d3_geo_pathBoundsX0 = x;\n\t    if (x > d3_geo_pathBoundsX1) d3_geo_pathBoundsX1 = x;\n\t    if (y < d3_geo_pathBoundsY0) d3_geo_pathBoundsY0 = y;\n\t    if (y > d3_geo_pathBoundsY1) d3_geo_pathBoundsY1 = y;\n\t  }\n\t  function d3_geo_pathBuffer() {\n\t    var pointCircle = d3_geo_pathBufferCircle(4.5), buffer = [];\n\t    var stream = {\n\t      point: point,\n\t      lineStart: function() {\n\t        stream.point = pointLineStart;\n\t      },\n\t      lineEnd: lineEnd,\n\t      polygonStart: function() {\n\t        stream.lineEnd = lineEndPolygon;\n\t      },\n\t      polygonEnd: function() {\n\t        stream.lineEnd = lineEnd;\n\t        stream.point = point;\n\t      },\n\t      pointRadius: function(_) {\n\t        pointCircle = d3_geo_pathBufferCircle(_);\n\t        return stream;\n\t      },\n\t      result: function() {\n\t        if (buffer.length) {\n\t          var result = buffer.join(\"\");\n\t          buffer = [];\n\t          return result;\n\t        }\n\t      }\n\t    };\n\t    function point(x, y) {\n\t      buffer.push(\"M\", x, \",\", y, pointCircle);\n\t    }\n\t    function pointLineStart(x, y) {\n\t      buffer.push(\"M\", x, \",\", y);\n\t      stream.point = pointLine;\n\t    }\n\t    function pointLine(x, y) {\n\t      buffer.push(\"L\", x, \",\", y);\n\t    }\n\t    function lineEnd() {\n\t      stream.point = point;\n\t    }\n\t    function lineEndPolygon() {\n\t      buffer.push(\"Z\");\n\t    }\n\t    return stream;\n\t  }\n\t  function d3_geo_pathBufferCircle(radius) {\n\t    return \"m0,\" + radius + \"a\" + radius + \",\" + radius + \" 0 1,1 0,\" + -2 * radius + \"a\" + radius + \",\" + radius + \" 0 1,1 0,\" + 2 * radius + \"z\";\n\t  }\n\t  var d3_geo_pathCentroid = {\n\t    point: d3_geo_pathCentroidPoint,\n\t    lineStart: d3_geo_pathCentroidLineStart,\n\t    lineEnd: d3_geo_pathCentroidLineEnd,\n\t    polygonStart: function() {\n\t      d3_geo_pathCentroid.lineStart = d3_geo_pathCentroidRingStart;\n\t    },\n\t    polygonEnd: function() {\n\t      d3_geo_pathCentroid.point = d3_geo_pathCentroidPoint;\n\t      d3_geo_pathCentroid.lineStart = d3_geo_pathCentroidLineStart;\n\t      d3_geo_pathCentroid.lineEnd = d3_geo_pathCentroidLineEnd;\n\t    }\n\t  };\n\t  function d3_geo_pathCentroidPoint(x, y) {\n\t    d3_geo_centroidX0 += x;\n\t    d3_geo_centroidY0 += y;\n\t    ++d3_geo_centroidZ0;\n\t  }\n\t  function d3_geo_pathCentroidLineStart() {\n\t    var x0, y0;\n\t    d3_geo_pathCentroid.point = function(x, y) {\n\t      d3_geo_pathCentroid.point = nextPoint;\n\t      d3_geo_pathCentroidPoint(x0 = x, y0 = y);\n\t    };\n\t    function nextPoint(x, y) {\n\t      var dx = x - x0, dy = y - y0, z = Math.sqrt(dx * dx + dy * dy);\n\t      d3_geo_centroidX1 += z * (x0 + x) / 2;\n\t      d3_geo_centroidY1 += z * (y0 + y) / 2;\n\t      d3_geo_centroidZ1 += z;\n\t      d3_geo_pathCentroidPoint(x0 = x, y0 = y);\n\t    }\n\t  }\n\t  function d3_geo_pathCentroidLineEnd() {\n\t    d3_geo_pathCentroid.point = d3_geo_pathCentroidPoint;\n\t  }\n\t  function d3_geo_pathCentroidRingStart() {\n\t    var x00, y00, x0, y0;\n\t    d3_geo_pathCentroid.point = function(x, y) {\n\t      d3_geo_pathCentroid.point = nextPoint;\n\t      d3_geo_pathCentroidPoint(x00 = x0 = x, y00 = y0 = y);\n\t    };\n\t    function nextPoint(x, y) {\n\t      var dx = x - x0, dy = y - y0, z = Math.sqrt(dx * dx + dy * dy);\n\t      d3_geo_centroidX1 += z * (x0 + x) / 2;\n\t      d3_geo_centroidY1 += z * (y0 + y) / 2;\n\t      d3_geo_centroidZ1 += z;\n\t      z = y0 * x - x0 * y;\n\t      d3_geo_centroidX2 += z * (x0 + x);\n\t      d3_geo_centroidY2 += z * (y0 + y);\n\t      d3_geo_centroidZ2 += z * 3;\n\t      d3_geo_pathCentroidPoint(x0 = x, y0 = y);\n\t    }\n\t    d3_geo_pathCentroid.lineEnd = function() {\n\t      nextPoint(x00, y00);\n\t    };\n\t  }\n\t  function d3_geo_pathContext(context) {\n\t    var pointRadius = 4.5;\n\t    var stream = {\n\t      point: point,\n\t      lineStart: function() {\n\t        stream.point = pointLineStart;\n\t      },\n\t      lineEnd: lineEnd,\n\t      polygonStart: function() {\n\t        stream.lineEnd = lineEndPolygon;\n\t      },\n\t      polygonEnd: function() {\n\t        stream.lineEnd = lineEnd;\n\t        stream.point = point;\n\t      },\n\t      pointRadius: function(_) {\n\t        pointRadius = _;\n\t        return stream;\n\t      },\n\t      result: d3_noop\n\t    };\n\t    function point(x, y) {\n\t      context.moveTo(x + pointRadius, y);\n\t      context.arc(x, y, pointRadius, 0, τ);\n\t    }\n\t    function pointLineStart(x, y) {\n\t      context.moveTo(x, y);\n\t      stream.point = pointLine;\n\t    }\n\t    function pointLine(x, y) {\n\t      context.lineTo(x, y);\n\t    }\n\t    function lineEnd() {\n\t      stream.point = point;\n\t    }\n\t    function lineEndPolygon() {\n\t      context.closePath();\n\t    }\n\t    return stream;\n\t  }\n\t  function d3_geo_resample(project) {\n\t    var δ2 = .5, cosMinDistance = Math.cos(30 * d3_radians), maxDepth = 16;\n\t    function resample(stream) {\n\t      return (maxDepth ? resampleRecursive : resampleNone)(stream);\n\t    }\n\t    function resampleNone(stream) {\n\t      return d3_geo_transformPoint(stream, function(x, y) {\n\t        x = project(x, y);\n\t        stream.point(x[0], x[1]);\n\t      });\n\t    }\n\t    function resampleRecursive(stream) {\n\t      var λ00, φ00, x00, y00, a00, b00, c00, λ0, x0, y0, a0, b0, c0;\n\t      var resample = {\n\t        point: point,\n\t        lineStart: lineStart,\n\t        lineEnd: lineEnd,\n\t        polygonStart: function() {\n\t          stream.polygonStart();\n\t          resample.lineStart = ringStart;\n\t        },\n\t        polygonEnd: function() {\n\t          stream.polygonEnd();\n\t          resample.lineStart = lineStart;\n\t        }\n\t      };\n\t      function point(x, y) {\n\t        x = project(x, y);\n\t        stream.point(x[0], x[1]);\n\t      }\n\t      function lineStart() {\n\t        x0 = NaN;\n\t        resample.point = linePoint;\n\t        stream.lineStart();\n\t      }\n\t      function linePoint(λ, φ) {\n\t        var c = d3_geo_cartesian([ λ, φ ]), p = project(λ, φ);\n\t        resampleLineTo(x0, y0, λ0, a0, b0, c0, x0 = p[0], y0 = p[1], λ0 = λ, a0 = c[0], b0 = c[1], c0 = c[2], maxDepth, stream);\n\t        stream.point(x0, y0);\n\t      }\n\t      function lineEnd() {\n\t        resample.point = point;\n\t        stream.lineEnd();\n\t      }\n\t      function ringStart() {\n\t        lineStart();\n\t        resample.point = ringPoint;\n\t        resample.lineEnd = ringEnd;\n\t      }\n\t      function ringPoint(λ, φ) {\n\t        linePoint(λ00 = λ, φ00 = φ), x00 = x0, y00 = y0, a00 = a0, b00 = b0, c00 = c0;\n\t        resample.point = linePoint;\n\t      }\n\t      function ringEnd() {\n\t        resampleLineTo(x0, y0, λ0, a0, b0, c0, x00, y00, λ00, a00, b00, c00, maxDepth, stream);\n\t        resample.lineEnd = lineEnd;\n\t        lineEnd();\n\t      }\n\t      return resample;\n\t    }\n\t    function resampleLineTo(x0, y0, λ0, a0, b0, c0, x1, y1, λ1, a1, b1, c1, depth, stream) {\n\t      var dx = x1 - x0, dy = y1 - y0, d2 = dx * dx + dy * dy;\n\t      if (d2 > 4 * δ2 && depth--) {\n\t        var a = a0 + a1, b = b0 + b1, c = c0 + c1, m = Math.sqrt(a * a + b * b + c * c), φ2 = Math.asin(c /= m), λ2 = abs(abs(c) - 1) < ε || abs(λ0 - λ1) < ε ? (λ0 + λ1) / 2 : Math.atan2(b, a), p = project(λ2, φ2), x2 = p[0], y2 = p[1], dx2 = x2 - x0, dy2 = y2 - y0, dz = dy * dx2 - dx * dy2;\n\t        if (dz * dz / d2 > δ2 || abs((dx * dx2 + dy * dy2) / d2 - .5) > .3 || a0 * a1 + b0 * b1 + c0 * c1 < cosMinDistance) {\n\t          resampleLineTo(x0, y0, λ0, a0, b0, c0, x2, y2, λ2, a /= m, b /= m, c, depth, stream);\n\t          stream.point(x2, y2);\n\t          resampleLineTo(x2, y2, λ2, a, b, c, x1, y1, λ1, a1, b1, c1, depth, stream);\n\t        }\n\t      }\n\t    }\n\t    resample.precision = function(_) {\n\t      if (!arguments.length) return Math.sqrt(δ2);\n\t      maxDepth = (δ2 = _ * _) > 0 && 16;\n\t      return resample;\n\t    };\n\t    return resample;\n\t  }\n\t  d3.geo.path = function() {\n\t    var pointRadius = 4.5, projection, context, projectStream, contextStream, cacheStream;\n\t    function path(object) {\n\t      if (object) {\n\t        if (typeof pointRadius === \"function\") contextStream.pointRadius(+pointRadius.apply(this, arguments));\n\t        if (!cacheStream || !cacheStream.valid) cacheStream = projectStream(contextStream);\n\t        d3.geo.stream(object, cacheStream);\n\t      }\n\t      return contextStream.result();\n\t    }\n\t    path.area = function(object) {\n\t      d3_geo_pathAreaSum = 0;\n\t      d3.geo.stream(object, projectStream(d3_geo_pathArea));\n\t      return d3_geo_pathAreaSum;\n\t    };\n\t    path.centroid = function(object) {\n\t      d3_geo_centroidX0 = d3_geo_centroidY0 = d3_geo_centroidZ0 = d3_geo_centroidX1 = d3_geo_centroidY1 = d3_geo_centroidZ1 = d3_geo_centroidX2 = d3_geo_centroidY2 = d3_geo_centroidZ2 = 0;\n\t      d3.geo.stream(object, projectStream(d3_geo_pathCentroid));\n\t      return d3_geo_centroidZ2 ? [ d3_geo_centroidX2 / d3_geo_centroidZ2, d3_geo_centroidY2 / d3_geo_centroidZ2 ] : d3_geo_centroidZ1 ? [ d3_geo_centroidX1 / d3_geo_centroidZ1, d3_geo_centroidY1 / d3_geo_centroidZ1 ] : d3_geo_centroidZ0 ? [ d3_geo_centroidX0 / d3_geo_centroidZ0, d3_geo_centroidY0 / d3_geo_centroidZ0 ] : [ NaN, NaN ];\n\t    };\n\t    path.bounds = function(object) {\n\t      d3_geo_pathBoundsX1 = d3_geo_pathBoundsY1 = -(d3_geo_pathBoundsX0 = d3_geo_pathBoundsY0 = Infinity);\n\t      d3.geo.stream(object, projectStream(d3_geo_pathBounds));\n\t      return [ [ d3_geo_pathBoundsX0, d3_geo_pathBoundsY0 ], [ d3_geo_pathBoundsX1, d3_geo_pathBoundsY1 ] ];\n\t    };\n\t    path.projection = function(_) {\n\t      if (!arguments.length) return projection;\n\t      projectStream = (projection = _) ? _.stream || d3_geo_pathProjectStream(_) : d3_identity;\n\t      return reset();\n\t    };\n\t    path.context = function(_) {\n\t      if (!arguments.length) return context;\n\t      contextStream = (context = _) == null ? new d3_geo_pathBuffer() : new d3_geo_pathContext(_);\n\t      if (typeof pointRadius !== \"function\") contextStream.pointRadius(pointRadius);\n\t      return reset();\n\t    };\n\t    path.pointRadius = function(_) {\n\t      if (!arguments.length) return pointRadius;\n\t      pointRadius = typeof _ === \"function\" ? _ : (contextStream.pointRadius(+_), +_);\n\t      return path;\n\t    };\n\t    function reset() {\n\t      cacheStream = null;\n\t      return path;\n\t    }\n\t    return path.projection(d3.geo.albersUsa()).context(null);\n\t  };\n\t  function d3_geo_pathProjectStream(project) {\n\t    var resample = d3_geo_resample(function(x, y) {\n\t      return project([ x * d3_degrees, y * d3_degrees ]);\n\t    });\n\t    return function(stream) {\n\t      return d3_geo_projectionRadians(resample(stream));\n\t    };\n\t  }\n\t  d3.geo.transform = function(methods) {\n\t    return {\n\t      stream: function(stream) {\n\t        var transform = new d3_geo_transform(stream);\n\t        for (var k in methods) transform[k] = methods[k];\n\t        return transform;\n\t      }\n\t    };\n\t  };\n\t  function d3_geo_transform(stream) {\n\t    this.stream = stream;\n\t  }\n\t  d3_geo_transform.prototype = {\n\t    point: function(x, y) {\n\t      this.stream.point(x, y);\n\t    },\n\t    sphere: function() {\n\t      this.stream.sphere();\n\t    },\n\t    lineStart: function() {\n\t      this.stream.lineStart();\n\t    },\n\t    lineEnd: function() {\n\t      this.stream.lineEnd();\n\t    },\n\t    polygonStart: function() {\n\t      this.stream.polygonStart();\n\t    },\n\t    polygonEnd: function() {\n\t      this.stream.polygonEnd();\n\t    }\n\t  };\n\t  function d3_geo_transformPoint(stream, point) {\n\t    return {\n\t      point: point,\n\t      sphere: function() {\n\t        stream.sphere();\n\t      },\n\t      lineStart: function() {\n\t        stream.lineStart();\n\t      },\n\t      lineEnd: function() {\n\t        stream.lineEnd();\n\t      },\n\t      polygonStart: function() {\n\t        stream.polygonStart();\n\t      },\n\t      polygonEnd: function() {\n\t        stream.polygonEnd();\n\t      }\n\t    };\n\t  }\n\t  d3.geo.projection = d3_geo_projection;\n\t  d3.geo.projectionMutator = d3_geo_projectionMutator;\n\t  function d3_geo_projection(project) {\n\t    return d3_geo_projectionMutator(function() {\n\t      return project;\n\t    })();\n\t  }\n\t  function d3_geo_projectionMutator(projectAt) {\n\t    var project, rotate, projectRotate, projectResample = d3_geo_resample(function(x, y) {\n\t      x = project(x, y);\n\t      return [ x[0] * k + δx, δy - x[1] * k ];\n\t    }), k = 150, x = 480, y = 250, λ = 0, φ = 0, δλ = 0, δφ = 0, δγ = 0, δx, δy, preclip = d3_geo_clipAntimeridian, postclip = d3_identity, clipAngle = null, clipExtent = null, stream;\n\t    function projection(point) {\n\t      point = projectRotate(point[0] * d3_radians, point[1] * d3_radians);\n\t      return [ point[0] * k + δx, δy - point[1] * k ];\n\t    }\n\t    function invert(point) {\n\t      point = projectRotate.invert((point[0] - δx) / k, (δy - point[1]) / k);\n\t      return point && [ point[0] * d3_degrees, point[1] * d3_degrees ];\n\t    }\n\t    projection.stream = function(output) {\n\t      if (stream) stream.valid = false;\n\t      stream = d3_geo_projectionRadians(preclip(rotate, projectResample(postclip(output))));\n\t      stream.valid = true;\n\t      return stream;\n\t    };\n\t    projection.clipAngle = function(_) {\n\t      if (!arguments.length) return clipAngle;\n\t      preclip = _ == null ? (clipAngle = _, d3_geo_clipAntimeridian) : d3_geo_clipCircle((clipAngle = +_) * d3_radians);\n\t      return invalidate();\n\t    };\n\t    projection.clipExtent = function(_) {\n\t      if (!arguments.length) return clipExtent;\n\t      clipExtent = _;\n\t      postclip = _ ? d3_geo_clipExtent(_[0][0], _[0][1], _[1][0], _[1][1]) : d3_identity;\n\t      return invalidate();\n\t    };\n\t    projection.scale = function(_) {\n\t      if (!arguments.length) return k;\n\t      k = +_;\n\t      return reset();\n\t    };\n\t    projection.translate = function(_) {\n\t      if (!arguments.length) return [ x, y ];\n\t      x = +_[0];\n\t      y = +_[1];\n\t      return reset();\n\t    };\n\t    projection.center = function(_) {\n\t      if (!arguments.length) return [ λ * d3_degrees, φ * d3_degrees ];\n\t      λ = _[0] % 360 * d3_radians;\n\t      φ = _[1] % 360 * d3_radians;\n\t      return reset();\n\t    };\n\t    projection.rotate = function(_) {\n\t      if (!arguments.length) return [ δλ * d3_degrees, δφ * d3_degrees, δγ * d3_degrees ];\n\t      δλ = _[0] % 360 * d3_radians;\n\t      δφ = _[1] % 360 * d3_radians;\n\t      δγ = _.length > 2 ? _[2] % 360 * d3_radians : 0;\n\t      return reset();\n\t    };\n\t    d3.rebind(projection, projectResample, \"precision\");\n\t    function reset() {\n\t      projectRotate = d3_geo_compose(rotate = d3_geo_rotation(δλ, δφ, δγ), project);\n\t      var center = project(λ, φ);\n\t      δx = x - center[0] * k;\n\t      δy = y + center[1] * k;\n\t      return invalidate();\n\t    }\n\t    function invalidate() {\n\t      if (stream) stream.valid = false, stream = null;\n\t      return projection;\n\t    }\n\t    return function() {\n\t      project = projectAt.apply(this, arguments);\n\t      projection.invert = project.invert && invert;\n\t      return reset();\n\t    };\n\t  }\n\t  function d3_geo_projectionRadians(stream) {\n\t    return d3_geo_transformPoint(stream, function(x, y) {\n\t      stream.point(x * d3_radians, y * d3_radians);\n\t    });\n\t  }\n\t  function d3_geo_equirectangular(λ, φ) {\n\t    return [ λ, φ ];\n\t  }\n\t  (d3.geo.equirectangular = function() {\n\t    return d3_geo_projection(d3_geo_equirectangular);\n\t  }).raw = d3_geo_equirectangular.invert = d3_geo_equirectangular;\n\t  d3.geo.rotation = function(rotate) {\n\t    rotate = d3_geo_rotation(rotate[0] % 360 * d3_radians, rotate[1] * d3_radians, rotate.length > 2 ? rotate[2] * d3_radians : 0);\n\t    function forward(coordinates) {\n\t      coordinates = rotate(coordinates[0] * d3_radians, coordinates[1] * d3_radians);\n\t      return coordinates[0] *= d3_degrees, coordinates[1] *= d3_degrees, coordinates;\n\t    }\n\t    forward.invert = function(coordinates) {\n\t      coordinates = rotate.invert(coordinates[0] * d3_radians, coordinates[1] * d3_radians);\n\t      return coordinates[0] *= d3_degrees, coordinates[1] *= d3_degrees, coordinates;\n\t    };\n\t    return forward;\n\t  };\n\t  function d3_geo_identityRotation(λ, φ) {\n\t    return [ λ > π ? λ - τ : λ < -π ? λ + τ : λ, φ ];\n\t  }\n\t  d3_geo_identityRotation.invert = d3_geo_equirectangular;\n\t  function d3_geo_rotation(δλ, δφ, δγ) {\n\t    return δλ ? δφ || δγ ? d3_geo_compose(d3_geo_rotationλ(δλ), d3_geo_rotationφγ(δφ, δγ)) : d3_geo_rotationλ(δλ) : δφ || δγ ? d3_geo_rotationφγ(δφ, δγ) : d3_geo_identityRotation;\n\t  }\n\t  function d3_geo_forwardRotationλ(δλ) {\n\t    return function(λ, φ) {\n\t      return λ += δλ, [ λ > π ? λ - τ : λ < -π ? λ + τ : λ, φ ];\n\t    };\n\t  }\n\t  function d3_geo_rotationλ(δλ) {\n\t    var rotation = d3_geo_forwardRotationλ(δλ);\n\t    rotation.invert = d3_geo_forwardRotationλ(-δλ);\n\t    return rotation;\n\t  }\n\t  function d3_geo_rotationφγ(δφ, δγ) {\n\t    var cosδφ = Math.cos(δφ), sinδφ = Math.sin(δφ), cosδγ = Math.cos(δγ), sinδγ = Math.sin(δγ);\n\t    function rotation(λ, φ) {\n\t      var cosφ = Math.cos(φ), x = Math.cos(λ) * cosφ, y = Math.sin(λ) * cosφ, z = Math.sin(φ), k = z * cosδφ + x * sinδφ;\n\t      return [ Math.atan2(y * cosδγ - k * sinδγ, x * cosδφ - z * sinδφ), d3_asin(k * cosδγ + y * sinδγ) ];\n\t    }\n\t    rotation.invert = function(λ, φ) {\n\t      var cosφ = Math.cos(φ), x = Math.cos(λ) * cosφ, y = Math.sin(λ) * cosφ, z = Math.sin(φ), k = z * cosδγ - y * sinδγ;\n\t      return [ Math.atan2(y * cosδγ + z * sinδγ, x * cosδφ + k * sinδφ), d3_asin(k * cosδφ - x * sinδφ) ];\n\t    };\n\t    return rotation;\n\t  }\n\t  d3.geo.circle = function() {\n\t    var origin = [ 0, 0 ], angle, precision = 6, interpolate;\n\t    function circle() {\n\t      var center = typeof origin === \"function\" ? origin.apply(this, arguments) : origin, rotate = d3_geo_rotation(-center[0] * d3_radians, -center[1] * d3_radians, 0).invert, ring = [];\n\t      interpolate(null, null, 1, {\n\t        point: function(x, y) {\n\t          ring.push(x = rotate(x, y));\n\t          x[0] *= d3_degrees, x[1] *= d3_degrees;\n\t        }\n\t      });\n\t      return {\n\t        type: \"Polygon\",\n\t        coordinates: [ ring ]\n\t      };\n\t    }\n\t    circle.origin = function(x) {\n\t      if (!arguments.length) return origin;\n\t      origin = x;\n\t      return circle;\n\t    };\n\t    circle.angle = function(x) {\n\t      if (!arguments.length) return angle;\n\t      interpolate = d3_geo_circleInterpolate((angle = +x) * d3_radians, precision * d3_radians);\n\t      return circle;\n\t    };\n\t    circle.precision = function(_) {\n\t      if (!arguments.length) return precision;\n\t      interpolate = d3_geo_circleInterpolate(angle * d3_radians, (precision = +_) * d3_radians);\n\t      return circle;\n\t    };\n\t    return circle.angle(90);\n\t  };\n\t  function d3_geo_circleInterpolate(radius, precision) {\n\t    var cr = Math.cos(radius), sr = Math.sin(radius);\n\t    return function(from, to, direction, listener) {\n\t      var step = direction * precision;\n\t      if (from != null) {\n\t        from = d3_geo_circleAngle(cr, from);\n\t        to = d3_geo_circleAngle(cr, to);\n\t        if (direction > 0 ? from < to : from > to) from += direction * τ;\n\t      } else {\n\t        from = radius + direction * τ;\n\t        to = radius - .5 * step;\n\t      }\n\t      for (var point, t = from; direction > 0 ? t > to : t < to; t -= step) {\n\t        listener.point((point = d3_geo_spherical([ cr, -sr * Math.cos(t), -sr * Math.sin(t) ]))[0], point[1]);\n\t      }\n\t    };\n\t  }\n\t  function d3_geo_circleAngle(cr, point) {\n\t    var a = d3_geo_cartesian(point);\n\t    a[0] -= cr;\n\t    d3_geo_cartesianNormalize(a);\n\t    var angle = d3_acos(-a[1]);\n\t    return ((-a[2] < 0 ? -angle : angle) + 2 * Math.PI - ε) % (2 * Math.PI);\n\t  }\n\t  d3.geo.distance = function(a, b) {\n\t    var Δλ = (b[0] - a[0]) * d3_radians, φ0 = a[1] * d3_radians, φ1 = b[1] * d3_radians, sinΔλ = Math.sin(Δλ), cosΔλ = Math.cos(Δλ), sinφ0 = Math.sin(φ0), cosφ0 = Math.cos(φ0), sinφ1 = Math.sin(φ1), cosφ1 = Math.cos(φ1), t;\n\t    return Math.atan2(Math.sqrt((t = cosφ1 * sinΔλ) * t + (t = cosφ0 * sinφ1 - sinφ0 * cosφ1 * cosΔλ) * t), sinφ0 * sinφ1 + cosφ0 * cosφ1 * cosΔλ);\n\t  };\n\t  d3.geo.graticule = function() {\n\t    var x1, x0, X1, X0, y1, y0, Y1, Y0, dx = 10, dy = dx, DX = 90, DY = 360, x, y, X, Y, precision = 2.5;\n\t    function graticule() {\n\t      return {\n\t        type: \"MultiLineString\",\n\t        coordinates: lines()\n\t      };\n\t    }\n\t    function lines() {\n\t      return d3.range(Math.ceil(X0 / DX) * DX, X1, DX).map(X).concat(d3.range(Math.ceil(Y0 / DY) * DY, Y1, DY).map(Y)).concat(d3.range(Math.ceil(x0 / dx) * dx, x1, dx).filter(function(x) {\n\t        return abs(x % DX) > ε;\n\t      }).map(x)).concat(d3.range(Math.ceil(y0 / dy) * dy, y1, dy).filter(function(y) {\n\t        return abs(y % DY) > ε;\n\t      }).map(y));\n\t    }\n\t    graticule.lines = function() {\n\t      return lines().map(function(coordinates) {\n\t        return {\n\t          type: \"LineString\",\n\t          coordinates: coordinates\n\t        };\n\t      });\n\t    };\n\t    graticule.outline = function() {\n\t      return {\n\t        type: \"Polygon\",\n\t        coordinates: [ X(X0).concat(Y(Y1).slice(1), X(X1).reverse().slice(1), Y(Y0).reverse().slice(1)) ]\n\t      };\n\t    };\n\t    graticule.extent = function(_) {\n\t      if (!arguments.length) return graticule.minorExtent();\n\t      return graticule.majorExtent(_).minorExtent(_);\n\t    };\n\t    graticule.majorExtent = function(_) {\n\t      if (!arguments.length) return [ [ X0, Y0 ], [ X1, Y1 ] ];\n\t      X0 = +_[0][0], X1 = +_[1][0];\n\t      Y0 = +_[0][1], Y1 = +_[1][1];\n\t      if (X0 > X1) _ = X0, X0 = X1, X1 = _;\n\t      if (Y0 > Y1) _ = Y0, Y0 = Y1, Y1 = _;\n\t      return graticule.precision(precision);\n\t    };\n\t    graticule.minorExtent = function(_) {\n\t      if (!arguments.length) return [ [ x0, y0 ], [ x1, y1 ] ];\n\t      x0 = +_[0][0], x1 = +_[1][0];\n\t      y0 = +_[0][1], y1 = +_[1][1];\n\t      if (x0 > x1) _ = x0, x0 = x1, x1 = _;\n\t      if (y0 > y1) _ = y0, y0 = y1, y1 = _;\n\t      return graticule.precision(precision);\n\t    };\n\t    graticule.step = function(_) {\n\t      if (!arguments.length) return graticule.minorStep();\n\t      return graticule.majorStep(_).minorStep(_);\n\t    };\n\t    graticule.majorStep = function(_) {\n\t      if (!arguments.length) return [ DX, DY ];\n\t      DX = +_[0], DY = +_[1];\n\t      return graticule;\n\t    };\n\t    graticule.minorStep = function(_) {\n\t      if (!arguments.length) return [ dx, dy ];\n\t      dx = +_[0], dy = +_[1];\n\t      return graticule;\n\t    };\n\t    graticule.precision = function(_) {\n\t      if (!arguments.length) return precision;\n\t      precision = +_;\n\t      x = d3_geo_graticuleX(y0, y1, 90);\n\t      y = d3_geo_graticuleY(x0, x1, precision);\n\t      X = d3_geo_graticuleX(Y0, Y1, 90);\n\t      Y = d3_geo_graticuleY(X0, X1, precision);\n\t      return graticule;\n\t    };\n\t    return graticule.majorExtent([ [ -180, -90 + ε ], [ 180, 90 - ε ] ]).minorExtent([ [ -180, -80 - ε ], [ 180, 80 + ε ] ]);\n\t  };\n\t  function d3_geo_graticuleX(y0, y1, dy) {\n\t    var y = d3.range(y0, y1 - ε, dy).concat(y1);\n\t    return function(x) {\n\t      return y.map(function(y) {\n\t        return [ x, y ];\n\t      });\n\t    };\n\t  }\n\t  function d3_geo_graticuleY(x0, x1, dx) {\n\t    var x = d3.range(x0, x1 - ε, dx).concat(x1);\n\t    return function(y) {\n\t      return x.map(function(x) {\n\t        return [ x, y ];\n\t      });\n\t    };\n\t  }\n\t  function d3_source(d) {\n\t    return d.source;\n\t  }\n\t  function d3_target(d) {\n\t    return d.target;\n\t  }\n\t  d3.geo.greatArc = function() {\n\t    var source = d3_source, source_, target = d3_target, target_;\n\t    function greatArc() {\n\t      return {\n\t        type: \"LineString\",\n\t        coordinates: [ source_ || source.apply(this, arguments), target_ || target.apply(this, arguments) ]\n\t      };\n\t    }\n\t    greatArc.distance = function() {\n\t      return d3.geo.distance(source_ || source.apply(this, arguments), target_ || target.apply(this, arguments));\n\t    };\n\t    greatArc.source = function(_) {\n\t      if (!arguments.length) return source;\n\t      source = _, source_ = typeof _ === \"function\" ? null : _;\n\t      return greatArc;\n\t    };\n\t    greatArc.target = function(_) {\n\t      if (!arguments.length) return target;\n\t      target = _, target_ = typeof _ === \"function\" ? null : _;\n\t      return greatArc;\n\t    };\n\t    greatArc.precision = function() {\n\t      return arguments.length ? greatArc : 0;\n\t    };\n\t    return greatArc;\n\t  };\n\t  d3.geo.interpolate = function(source, target) {\n\t    return d3_geo_interpolate(source[0] * d3_radians, source[1] * d3_radians, target[0] * d3_radians, target[1] * d3_radians);\n\t  };\n\t  function d3_geo_interpolate(x0, y0, x1, y1) {\n\t    var cy0 = Math.cos(y0), sy0 = Math.sin(y0), cy1 = Math.cos(y1), sy1 = Math.sin(y1), kx0 = cy0 * Math.cos(x0), ky0 = cy0 * Math.sin(x0), kx1 = cy1 * Math.cos(x1), ky1 = cy1 * Math.sin(x1), d = 2 * Math.asin(Math.sqrt(d3_haversin(y1 - y0) + cy0 * cy1 * d3_haversin(x1 - x0))), k = 1 / Math.sin(d);\n\t    var interpolate = d ? function(t) {\n\t      var B = Math.sin(t *= d) * k, A = Math.sin(d - t) * k, x = A * kx0 + B * kx1, y = A * ky0 + B * ky1, z = A * sy0 + B * sy1;\n\t      return [ Math.atan2(y, x) * d3_degrees, Math.atan2(z, Math.sqrt(x * x + y * y)) * d3_degrees ];\n\t    } : function() {\n\t      return [ x0 * d3_degrees, y0 * d3_degrees ];\n\t    };\n\t    interpolate.distance = d;\n\t    return interpolate;\n\t  }\n\t  d3.geo.length = function(object) {\n\t    d3_geo_lengthSum = 0;\n\t    d3.geo.stream(object, d3_geo_length);\n\t    return d3_geo_lengthSum;\n\t  };\n\t  var d3_geo_lengthSum;\n\t  var d3_geo_length = {\n\t    sphere: d3_noop,\n\t    point: d3_noop,\n\t    lineStart: d3_geo_lengthLineStart,\n\t    lineEnd: d3_noop,\n\t    polygonStart: d3_noop,\n\t    polygonEnd: d3_noop\n\t  };\n\t  function d3_geo_lengthLineStart() {\n\t    var λ0, sinφ0, cosφ0;\n\t    d3_geo_length.point = function(λ, φ) {\n\t      λ0 = λ * d3_radians, sinφ0 = Math.sin(φ *= d3_radians), cosφ0 = Math.cos(φ);\n\t      d3_geo_length.point = nextPoint;\n\t    };\n\t    d3_geo_length.lineEnd = function() {\n\t      d3_geo_length.point = d3_geo_length.lineEnd = d3_noop;\n\t    };\n\t    function nextPoint(λ, φ) {\n\t      var sinφ = Math.sin(φ *= d3_radians), cosφ = Math.cos(φ), t = abs((λ *= d3_radians) - λ0), cosΔλ = Math.cos(t);\n\t      d3_geo_lengthSum += Math.atan2(Math.sqrt((t = cosφ * Math.sin(t)) * t + (t = cosφ0 * sinφ - sinφ0 * cosφ * cosΔλ) * t), sinφ0 * sinφ + cosφ0 * cosφ * cosΔλ);\n\t      λ0 = λ, sinφ0 = sinφ, cosφ0 = cosφ;\n\t    }\n\t  }\n\t  function d3_geo_azimuthal(scale, angle) {\n\t    function azimuthal(λ, φ) {\n\t      var cosλ = Math.cos(λ), cosφ = Math.cos(φ), k = scale(cosλ * cosφ);\n\t      return [ k * cosφ * Math.sin(λ), k * Math.sin(φ) ];\n\t    }\n\t    azimuthal.invert = function(x, y) {\n\t      var ρ = Math.sqrt(x * x + y * y), c = angle(ρ), sinc = Math.sin(c), cosc = Math.cos(c);\n\t      return [ Math.atan2(x * sinc, ρ * cosc), Math.asin(ρ && y * sinc / ρ) ];\n\t    };\n\t    return azimuthal;\n\t  }\n\t  var d3_geo_azimuthalEqualArea = d3_geo_azimuthal(function(cosλcosφ) {\n\t    return Math.sqrt(2 / (1 + cosλcosφ));\n\t  }, function(ρ) {\n\t    return 2 * Math.asin(ρ / 2);\n\t  });\n\t  (d3.geo.azimuthalEqualArea = function() {\n\t    return d3_geo_projection(d3_geo_azimuthalEqualArea);\n\t  }).raw = d3_geo_azimuthalEqualArea;\n\t  var d3_geo_azimuthalEquidistant = d3_geo_azimuthal(function(cosλcosφ) {\n\t    var c = Math.acos(cosλcosφ);\n\t    return c && c / Math.sin(c);\n\t  }, d3_identity);\n\t  (d3.geo.azimuthalEquidistant = function() {\n\t    return d3_geo_projection(d3_geo_azimuthalEquidistant);\n\t  }).raw = d3_geo_azimuthalEquidistant;\n\t  function d3_geo_conicConformal(φ0, φ1) {\n\t    var cosφ0 = Math.cos(φ0), t = function(φ) {\n\t      return Math.tan(π / 4 + φ / 2);\n\t    }, n = φ0 === φ1 ? Math.sin(φ0) : Math.log(cosφ0 / Math.cos(φ1)) / Math.log(t(φ1) / t(φ0)), F = cosφ0 * Math.pow(t(φ0), n) / n;\n\t    if (!n) return d3_geo_mercator;\n\t    function forward(λ, φ) {\n\t      if (F > 0) {\n\t        if (φ < -halfπ + ε) φ = -halfπ + ε;\n\t      } else {\n\t        if (φ > halfπ - ε) φ = halfπ - ε;\n\t      }\n\t      var ρ = F / Math.pow(t(φ), n);\n\t      return [ ρ * Math.sin(n * λ), F - ρ * Math.cos(n * λ) ];\n\t    }\n\t    forward.invert = function(x, y) {\n\t      var ρ0_y = F - y, ρ = d3_sgn(n) * Math.sqrt(x * x + ρ0_y * ρ0_y);\n\t      return [ Math.atan2(x, ρ0_y) / n, 2 * Math.atan(Math.pow(F / ρ, 1 / n)) - halfπ ];\n\t    };\n\t    return forward;\n\t  }\n\t  (d3.geo.conicConformal = function() {\n\t    return d3_geo_conic(d3_geo_conicConformal);\n\t  }).raw = d3_geo_conicConformal;\n\t  function d3_geo_conicEquidistant(φ0, φ1) {\n\t    var cosφ0 = Math.cos(φ0), n = φ0 === φ1 ? Math.sin(φ0) : (cosφ0 - Math.cos(φ1)) / (φ1 - φ0), G = cosφ0 / n + φ0;\n\t    if (abs(n) < ε) return d3_geo_equirectangular;\n\t    function forward(λ, φ) {\n\t      var ρ = G - φ;\n\t      return [ ρ * Math.sin(n * λ), G - ρ * Math.cos(n * λ) ];\n\t    }\n\t    forward.invert = function(x, y) {\n\t      var ρ0_y = G - y;\n\t      return [ Math.atan2(x, ρ0_y) / n, G - d3_sgn(n) * Math.sqrt(x * x + ρ0_y * ρ0_y) ];\n\t    };\n\t    return forward;\n\t  }\n\t  (d3.geo.conicEquidistant = function() {\n\t    return d3_geo_conic(d3_geo_conicEquidistant);\n\t  }).raw = d3_geo_conicEquidistant;\n\t  var d3_geo_gnomonic = d3_geo_azimuthal(function(cosλcosφ) {\n\t    return 1 / cosλcosφ;\n\t  }, Math.atan);\n\t  (d3.geo.gnomonic = function() {\n\t    return d3_geo_projection(d3_geo_gnomonic);\n\t  }).raw = d3_geo_gnomonic;\n\t  function d3_geo_mercator(λ, φ) {\n\t    return [ λ, Math.log(Math.tan(π / 4 + φ / 2)) ];\n\t  }\n\t  d3_geo_mercator.invert = function(x, y) {\n\t    return [ x, 2 * Math.atan(Math.exp(y)) - halfπ ];\n\t  };\n\t  function d3_geo_mercatorProjection(project) {\n\t    var m = d3_geo_projection(project), scale = m.scale, translate = m.translate, clipExtent = m.clipExtent, clipAuto;\n\t    m.scale = function() {\n\t      var v = scale.apply(m, arguments);\n\t      return v === m ? clipAuto ? m.clipExtent(null) : m : v;\n\t    };\n\t    m.translate = function() {\n\t      var v = translate.apply(m, arguments);\n\t      return v === m ? clipAuto ? m.clipExtent(null) : m : v;\n\t    };\n\t    m.clipExtent = function(_) {\n\t      var v = clipExtent.apply(m, arguments);\n\t      if (v === m) {\n\t        if (clipAuto = _ == null) {\n\t          var k = π * scale(), t = translate();\n\t          clipExtent([ [ t[0] - k, t[1] - k ], [ t[0] + k, t[1] + k ] ]);\n\t        }\n\t      } else if (clipAuto) {\n\t        v = null;\n\t      }\n\t      return v;\n\t    };\n\t    return m.clipExtent(null);\n\t  }\n\t  (d3.geo.mercator = function() {\n\t    return d3_geo_mercatorProjection(d3_geo_mercator);\n\t  }).raw = d3_geo_mercator;\n\t  var d3_geo_orthographic = d3_geo_azimuthal(function() {\n\t    return 1;\n\t  }, Math.asin);\n\t  (d3.geo.orthographic = function() {\n\t    return d3_geo_projection(d3_geo_orthographic);\n\t  }).raw = d3_geo_orthographic;\n\t  var d3_geo_stereographic = d3_geo_azimuthal(function(cosλcosφ) {\n\t    return 1 / (1 + cosλcosφ);\n\t  }, function(ρ) {\n\t    return 2 * Math.atan(ρ);\n\t  });\n\t  (d3.geo.stereographic = function() {\n\t    return d3_geo_projection(d3_geo_stereographic);\n\t  }).raw = d3_geo_stereographic;\n\t  function d3_geo_transverseMercator(λ, φ) {\n\t    return [ Math.log(Math.tan(π / 4 + φ / 2)), -λ ];\n\t  }\n\t  d3_geo_transverseMercator.invert = function(x, y) {\n\t    return [ -y, 2 * Math.atan(Math.exp(x)) - halfπ ];\n\t  };\n\t  (d3.geo.transverseMercator = function() {\n\t    var projection = d3_geo_mercatorProjection(d3_geo_transverseMercator), center = projection.center, rotate = projection.rotate;\n\t    projection.center = function(_) {\n\t      return _ ? center([ -_[1], _[0] ]) : (_ = center(), [ _[1], -_[0] ]);\n\t    };\n\t    projection.rotate = function(_) {\n\t      return _ ? rotate([ _[0], _[1], _.length > 2 ? _[2] + 90 : 90 ]) : (_ = rotate(), \n\t      [ _[0], _[1], _[2] - 90 ]);\n\t    };\n\t    return rotate([ 0, 0, 90 ]);\n\t  }).raw = d3_geo_transverseMercator;\n\t  d3.geom = {};\n\t  function d3_geom_pointX(d) {\n\t    return d[0];\n\t  }\n\t  function d3_geom_pointY(d) {\n\t    return d[1];\n\t  }\n\t  d3.geom.hull = function(vertices) {\n\t    var x = d3_geom_pointX, y = d3_geom_pointY;\n\t    if (arguments.length) return hull(vertices);\n\t    function hull(data) {\n\t      if (data.length < 3) return [];\n\t      var fx = d3_functor(x), fy = d3_functor(y), i, n = data.length, points = [], flippedPoints = [];\n\t      for (i = 0; i < n; i++) {\n\t        points.push([ +fx.call(this, data[i], i), +fy.call(this, data[i], i), i ]);\n\t      }\n\t      points.sort(d3_geom_hullOrder);\n\t      for (i = 0; i < n; i++) flippedPoints.push([ points[i][0], -points[i][1] ]);\n\t      var upper = d3_geom_hullUpper(points), lower = d3_geom_hullUpper(flippedPoints);\n\t      var skipLeft = lower[0] === upper[0], skipRight = lower[lower.length - 1] === upper[upper.length - 1], polygon = [];\n\t      for (i = upper.length - 1; i >= 0; --i) polygon.push(data[points[upper[i]][2]]);\n\t      for (i = +skipLeft; i < lower.length - skipRight; ++i) polygon.push(data[points[lower[i]][2]]);\n\t      return polygon;\n\t    }\n\t    hull.x = function(_) {\n\t      return arguments.length ? (x = _, hull) : x;\n\t    };\n\t    hull.y = function(_) {\n\t      return arguments.length ? (y = _, hull) : y;\n\t    };\n\t    return hull;\n\t  };\n\t  function d3_geom_hullUpper(points) {\n\t    var n = points.length, hull = [ 0, 1 ], hs = 2;\n\t    for (var i = 2; i < n; i++) {\n\t      while (hs > 1 && d3_cross2d(points[hull[hs - 2]], points[hull[hs - 1]], points[i]) <= 0) --hs;\n\t      hull[hs++] = i;\n\t    }\n\t    return hull.slice(0, hs);\n\t  }\n\t  function d3_geom_hullOrder(a, b) {\n\t    return a[0] - b[0] || a[1] - b[1];\n\t  }\n\t  d3.geom.polygon = function(coordinates) {\n\t    d3_subclass(coordinates, d3_geom_polygonPrototype);\n\t    return coordinates;\n\t  };\n\t  var d3_geom_polygonPrototype = d3.geom.polygon.prototype = [];\n\t  d3_geom_polygonPrototype.area = function() {\n\t    var i = -1, n = this.length, a, b = this[n - 1], area = 0;\n\t    while (++i < n) {\n\t      a = b;\n\t      b = this[i];\n\t      area += a[1] * b[0] - a[0] * b[1];\n\t    }\n\t    return area * .5;\n\t  };\n\t  d3_geom_polygonPrototype.centroid = function(k) {\n\t    var i = -1, n = this.length, x = 0, y = 0, a, b = this[n - 1], c;\n\t    if (!arguments.length) k = -1 / (6 * this.area());\n\t    while (++i < n) {\n\t      a = b;\n\t      b = this[i];\n\t      c = a[0] * b[1] - b[0] * a[1];\n\t      x += (a[0] + b[0]) * c;\n\t      y += (a[1] + b[1]) * c;\n\t    }\n\t    return [ x * k, y * k ];\n\t  };\n\t  d3_geom_polygonPrototype.clip = function(subject) {\n\t    var input, closed = d3_geom_polygonClosed(subject), i = -1, n = this.length - d3_geom_polygonClosed(this), j, m, a = this[n - 1], b, c, d;\n\t    while (++i < n) {\n\t      input = subject.slice();\n\t      subject.length = 0;\n\t      b = this[i];\n\t      c = input[(m = input.length - closed) - 1];\n\t      j = -1;\n\t      while (++j < m) {\n\t        d = input[j];\n\t        if (d3_geom_polygonInside(d, a, b)) {\n\t          if (!d3_geom_polygonInside(c, a, b)) {\n\t            subject.push(d3_geom_polygonIntersect(c, d, a, b));\n\t          }\n\t          subject.push(d);\n\t        } else if (d3_geom_polygonInside(c, a, b)) {\n\t          subject.push(d3_geom_polygonIntersect(c, d, a, b));\n\t        }\n\t        c = d;\n\t      }\n\t      if (closed) subject.push(subject[0]);\n\t      a = b;\n\t    }\n\t    return subject;\n\t  };\n\t  function d3_geom_polygonInside(p, a, b) {\n\t    return (b[0] - a[0]) * (p[1] - a[1]) < (b[1] - a[1]) * (p[0] - a[0]);\n\t  }\n\t  function d3_geom_polygonIntersect(c, d, a, b) {\n\t    var x1 = c[0], x3 = a[0], x21 = d[0] - x1, x43 = b[0] - x3, y1 = c[1], y3 = a[1], y21 = d[1] - y1, y43 = b[1] - y3, ua = (x43 * (y1 - y3) - y43 * (x1 - x3)) / (y43 * x21 - x43 * y21);\n\t    return [ x1 + ua * x21, y1 + ua * y21 ];\n\t  }\n\t  function d3_geom_polygonClosed(coordinates) {\n\t    var a = coordinates[0], b = coordinates[coordinates.length - 1];\n\t    return !(a[0] - b[0] || a[1] - b[1]);\n\t  }\n\t  var d3_geom_voronoiEdges, d3_geom_voronoiCells, d3_geom_voronoiBeaches, d3_geom_voronoiBeachPool = [], d3_geom_voronoiFirstCircle, d3_geom_voronoiCircles, d3_geom_voronoiCirclePool = [];\n\t  function d3_geom_voronoiBeach() {\n\t    d3_geom_voronoiRedBlackNode(this);\n\t    this.edge = this.site = this.circle = null;\n\t  }\n\t  function d3_geom_voronoiCreateBeach(site) {\n\t    var beach = d3_geom_voronoiBeachPool.pop() || new d3_geom_voronoiBeach();\n\t    beach.site = site;\n\t    return beach;\n\t  }\n\t  function d3_geom_voronoiDetachBeach(beach) {\n\t    d3_geom_voronoiDetachCircle(beach);\n\t    d3_geom_voronoiBeaches.remove(beach);\n\t    d3_geom_voronoiBeachPool.push(beach);\n\t    d3_geom_voronoiRedBlackNode(beach);\n\t  }\n\t  function d3_geom_voronoiRemoveBeach(beach) {\n\t    var circle = beach.circle, x = circle.x, y = circle.cy, vertex = {\n\t      x: x,\n\t      y: y\n\t    }, previous = beach.P, next = beach.N, disappearing = [ beach ];\n\t    d3_geom_voronoiDetachBeach(beach);\n\t    var lArc = previous;\n\t    while (lArc.circle && abs(x - lArc.circle.x) < ε && abs(y - lArc.circle.cy) < ε) {\n\t      previous = lArc.P;\n\t      disappearing.unshift(lArc);\n\t      d3_geom_voronoiDetachBeach(lArc);\n\t      lArc = previous;\n\t    }\n\t    disappearing.unshift(lArc);\n\t    d3_geom_voronoiDetachCircle(lArc);\n\t    var rArc = next;\n\t    while (rArc.circle && abs(x - rArc.circle.x) < ε && abs(y - rArc.circle.cy) < ε) {\n\t      next = rArc.N;\n\t      disappearing.push(rArc);\n\t      d3_geom_voronoiDetachBeach(rArc);\n\t      rArc = next;\n\t    }\n\t    disappearing.push(rArc);\n\t    d3_geom_voronoiDetachCircle(rArc);\n\t    var nArcs = disappearing.length, iArc;\n\t    for (iArc = 1; iArc < nArcs; ++iArc) {\n\t      rArc = disappearing[iArc];\n\t      lArc = disappearing[iArc - 1];\n\t      d3_geom_voronoiSetEdgeEnd(rArc.edge, lArc.site, rArc.site, vertex);\n\t    }\n\t    lArc = disappearing[0];\n\t    rArc = disappearing[nArcs - 1];\n\t    rArc.edge = d3_geom_voronoiCreateEdge(lArc.site, rArc.site, null, vertex);\n\t    d3_geom_voronoiAttachCircle(lArc);\n\t    d3_geom_voronoiAttachCircle(rArc);\n\t  }\n\t  function d3_geom_voronoiAddBeach(site) {\n\t    var x = site.x, directrix = site.y, lArc, rArc, dxl, dxr, node = d3_geom_voronoiBeaches._;\n\t    while (node) {\n\t      dxl = d3_geom_voronoiLeftBreakPoint(node, directrix) - x;\n\t      if (dxl > ε) node = node.L; else {\n\t        dxr = x - d3_geom_voronoiRightBreakPoint(node, directrix);\n\t        if (dxr > ε) {\n\t          if (!node.R) {\n\t            lArc = node;\n\t            break;\n\t          }\n\t          node = node.R;\n\t        } else {\n\t          if (dxl > -ε) {\n\t            lArc = node.P;\n\t            rArc = node;\n\t          } else if (dxr > -ε) {\n\t            lArc = node;\n\t            rArc = node.N;\n\t          } else {\n\t            lArc = rArc = node;\n\t          }\n\t          break;\n\t        }\n\t      }\n\t    }\n\t    var newArc = d3_geom_voronoiCreateBeach(site);\n\t    d3_geom_voronoiBeaches.insert(lArc, newArc);\n\t    if (!lArc && !rArc) return;\n\t    if (lArc === rArc) {\n\t      d3_geom_voronoiDetachCircle(lArc);\n\t      rArc = d3_geom_voronoiCreateBeach(lArc.site);\n\t      d3_geom_voronoiBeaches.insert(newArc, rArc);\n\t      newArc.edge = rArc.edge = d3_geom_voronoiCreateEdge(lArc.site, newArc.site);\n\t      d3_geom_voronoiAttachCircle(lArc);\n\t      d3_geom_voronoiAttachCircle(rArc);\n\t      return;\n\t    }\n\t    if (!rArc) {\n\t      newArc.edge = d3_geom_voronoiCreateEdge(lArc.site, newArc.site);\n\t      return;\n\t    }\n\t    d3_geom_voronoiDetachCircle(lArc);\n\t    d3_geom_voronoiDetachCircle(rArc);\n\t    var lSite = lArc.site, ax = lSite.x, ay = lSite.y, bx = site.x - ax, by = site.y - ay, rSite = rArc.site, cx = rSite.x - ax, cy = rSite.y - ay, d = 2 * (bx * cy - by * cx), hb = bx * bx + by * by, hc = cx * cx + cy * cy, vertex = {\n\t      x: (cy * hb - by * hc) / d + ax,\n\t      y: (bx * hc - cx * hb) / d + ay\n\t    };\n\t    d3_geom_voronoiSetEdgeEnd(rArc.edge, lSite, rSite, vertex);\n\t    newArc.edge = d3_geom_voronoiCreateEdge(lSite, site, null, vertex);\n\t    rArc.edge = d3_geom_voronoiCreateEdge(site, rSite, null, vertex);\n\t    d3_geom_voronoiAttachCircle(lArc);\n\t    d3_geom_voronoiAttachCircle(rArc);\n\t  }\n\t  function d3_geom_voronoiLeftBreakPoint(arc, directrix) {\n\t    var site = arc.site, rfocx = site.x, rfocy = site.y, pby2 = rfocy - directrix;\n\t    if (!pby2) return rfocx;\n\t    var lArc = arc.P;\n\t    if (!lArc) return -Infinity;\n\t    site = lArc.site;\n\t    var lfocx = site.x, lfocy = site.y, plby2 = lfocy - directrix;\n\t    if (!plby2) return lfocx;\n\t    var hl = lfocx - rfocx, aby2 = 1 / pby2 - 1 / plby2, b = hl / plby2;\n\t    if (aby2) return (-b + Math.sqrt(b * b - 2 * aby2 * (hl * hl / (-2 * plby2) - lfocy + plby2 / 2 + rfocy - pby2 / 2))) / aby2 + rfocx;\n\t    return (rfocx + lfocx) / 2;\n\t  }\n\t  function d3_geom_voronoiRightBreakPoint(arc, directrix) {\n\t    var rArc = arc.N;\n\t    if (rArc) return d3_geom_voronoiLeftBreakPoint(rArc, directrix);\n\t    var site = arc.site;\n\t    return site.y === directrix ? site.x : Infinity;\n\t  }\n\t  function d3_geom_voronoiCell(site) {\n\t    this.site = site;\n\t    this.edges = [];\n\t  }\n\t  d3_geom_voronoiCell.prototype.prepare = function() {\n\t    var halfEdges = this.edges, iHalfEdge = halfEdges.length, edge;\n\t    while (iHalfEdge--) {\n\t      edge = halfEdges[iHalfEdge].edge;\n\t      if (!edge.b || !edge.a) halfEdges.splice(iHalfEdge, 1);\n\t    }\n\t    halfEdges.sort(d3_geom_voronoiHalfEdgeOrder);\n\t    return halfEdges.length;\n\t  };\n\t  function d3_geom_voronoiCloseCells(extent) {\n\t    var x0 = extent[0][0], x1 = extent[1][0], y0 = extent[0][1], y1 = extent[1][1], x2, y2, x3, y3, cells = d3_geom_voronoiCells, iCell = cells.length, cell, iHalfEdge, halfEdges, nHalfEdges, start, end;\n\t    while (iCell--) {\n\t      cell = cells[iCell];\n\t      if (!cell || !cell.prepare()) continue;\n\t      halfEdges = cell.edges;\n\t      nHalfEdges = halfEdges.length;\n\t      iHalfEdge = 0;\n\t      while (iHalfEdge < nHalfEdges) {\n\t        end = halfEdges[iHalfEdge].end(), x3 = end.x, y3 = end.y;\n\t        start = halfEdges[++iHalfEdge % nHalfEdges].start(), x2 = start.x, y2 = start.y;\n\t        if (abs(x3 - x2) > ε || abs(y3 - y2) > ε) {\n\t          halfEdges.splice(iHalfEdge, 0, new d3_geom_voronoiHalfEdge(d3_geom_voronoiCreateBorderEdge(cell.site, end, abs(x3 - x0) < ε && y1 - y3 > ε ? {\n\t            x: x0,\n\t            y: abs(x2 - x0) < ε ? y2 : y1\n\t          } : abs(y3 - y1) < ε && x1 - x3 > ε ? {\n\t            x: abs(y2 - y1) < ε ? x2 : x1,\n\t            y: y1\n\t          } : abs(x3 - x1) < ε && y3 - y0 > ε ? {\n\t            x: x1,\n\t            y: abs(x2 - x1) < ε ? y2 : y0\n\t          } : abs(y3 - y0) < ε && x3 - x0 > ε ? {\n\t            x: abs(y2 - y0) < ε ? x2 : x0,\n\t            y: y0\n\t          } : null), cell.site, null));\n\t          ++nHalfEdges;\n\t        }\n\t      }\n\t    }\n\t  }\n\t  function d3_geom_voronoiHalfEdgeOrder(a, b) {\n\t    return b.angle - a.angle;\n\t  }\n\t  function d3_geom_voronoiCircle() {\n\t    d3_geom_voronoiRedBlackNode(this);\n\t    this.x = this.y = this.arc = this.site = this.cy = null;\n\t  }\n\t  function d3_geom_voronoiAttachCircle(arc) {\n\t    var lArc = arc.P, rArc = arc.N;\n\t    if (!lArc || !rArc) return;\n\t    var lSite = lArc.site, cSite = arc.site, rSite = rArc.site;\n\t    if (lSite === rSite) return;\n\t    var bx = cSite.x, by = cSite.y, ax = lSite.x - bx, ay = lSite.y - by, cx = rSite.x - bx, cy = rSite.y - by;\n\t    var d = 2 * (ax * cy - ay * cx);\n\t    if (d >= -ε2) return;\n\t    var ha = ax * ax + ay * ay, hc = cx * cx + cy * cy, x = (cy * ha - ay * hc) / d, y = (ax * hc - cx * ha) / d, cy = y + by;\n\t    var circle = d3_geom_voronoiCirclePool.pop() || new d3_geom_voronoiCircle();\n\t    circle.arc = arc;\n\t    circle.site = cSite;\n\t    circle.x = x + bx;\n\t    circle.y = cy + Math.sqrt(x * x + y * y);\n\t    circle.cy = cy;\n\t    arc.circle = circle;\n\t    var before = null, node = d3_geom_voronoiCircles._;\n\t    while (node) {\n\t      if (circle.y < node.y || circle.y === node.y && circle.x <= node.x) {\n\t        if (node.L) node = node.L; else {\n\t          before = node.P;\n\t          break;\n\t        }\n\t      } else {\n\t        if (node.R) node = node.R; else {\n\t          before = node;\n\t          break;\n\t        }\n\t      }\n\t    }\n\t    d3_geom_voronoiCircles.insert(before, circle);\n\t    if (!before) d3_geom_voronoiFirstCircle = circle;\n\t  }\n\t  function d3_geom_voronoiDetachCircle(arc) {\n\t    var circle = arc.circle;\n\t    if (circle) {\n\t      if (!circle.P) d3_geom_voronoiFirstCircle = circle.N;\n\t      d3_geom_voronoiCircles.remove(circle);\n\t      d3_geom_voronoiCirclePool.push(circle);\n\t      d3_geom_voronoiRedBlackNode(circle);\n\t      arc.circle = null;\n\t    }\n\t  }\n\t  function d3_geom_voronoiClipEdges(extent) {\n\t    var edges = d3_geom_voronoiEdges, clip = d3_geom_clipLine(extent[0][0], extent[0][1], extent[1][0], extent[1][1]), i = edges.length, e;\n\t    while (i--) {\n\t      e = edges[i];\n\t      if (!d3_geom_voronoiConnectEdge(e, extent) || !clip(e) || abs(e.a.x - e.b.x) < ε && abs(e.a.y - e.b.y) < ε) {\n\t        e.a = e.b = null;\n\t        edges.splice(i, 1);\n\t      }\n\t    }\n\t  }\n\t  function d3_geom_voronoiConnectEdge(edge, extent) {\n\t    var vb = edge.b;\n\t    if (vb) return true;\n\t    var va = edge.a, x0 = extent[0][0], x1 = extent[1][0], y0 = extent[0][1], y1 = extent[1][1], lSite = edge.l, rSite = edge.r, lx = lSite.x, ly = lSite.y, rx = rSite.x, ry = rSite.y, fx = (lx + rx) / 2, fy = (ly + ry) / 2, fm, fb;\n\t    if (ry === ly) {\n\t      if (fx < x0 || fx >= x1) return;\n\t      if (lx > rx) {\n\t        if (!va) va = {\n\t          x: fx,\n\t          y: y0\n\t        }; else if (va.y >= y1) return;\n\t        vb = {\n\t          x: fx,\n\t          y: y1\n\t        };\n\t      } else {\n\t        if (!va) va = {\n\t          x: fx,\n\t          y: y1\n\t        }; else if (va.y < y0) return;\n\t        vb = {\n\t          x: fx,\n\t          y: y0\n\t        };\n\t      }\n\t    } else {\n\t      fm = (lx - rx) / (ry - ly);\n\t      fb = fy - fm * fx;\n\t      if (fm < -1 || fm > 1) {\n\t        if (lx > rx) {\n\t          if (!va) va = {\n\t            x: (y0 - fb) / fm,\n\t            y: y0\n\t          }; else if (va.y >= y1) return;\n\t          vb = {\n\t            x: (y1 - fb) / fm,\n\t            y: y1\n\t          };\n\t        } else {\n\t          if (!va) va = {\n\t            x: (y1 - fb) / fm,\n\t            y: y1\n\t          }; else if (va.y < y0) return;\n\t          vb = {\n\t            x: (y0 - fb) / fm,\n\t            y: y0\n\t          };\n\t        }\n\t      } else {\n\t        if (ly < ry) {\n\t          if (!va) va = {\n\t            x: x0,\n\t            y: fm * x0 + fb\n\t          }; else if (va.x >= x1) return;\n\t          vb = {\n\t            x: x1,\n\t            y: fm * x1 + fb\n\t          };\n\t        } else {\n\t          if (!va) va = {\n\t            x: x1,\n\t            y: fm * x1 + fb\n\t          }; else if (va.x < x0) return;\n\t          vb = {\n\t            x: x0,\n\t            y: fm * x0 + fb\n\t          };\n\t        }\n\t      }\n\t    }\n\t    edge.a = va;\n\t    edge.b = vb;\n\t    return true;\n\t  }\n\t  function d3_geom_voronoiEdge(lSite, rSite) {\n\t    this.l = lSite;\n\t    this.r = rSite;\n\t    this.a = this.b = null;\n\t  }\n\t  function d3_geom_voronoiCreateEdge(lSite, rSite, va, vb) {\n\t    var edge = new d3_geom_voronoiEdge(lSite, rSite);\n\t    d3_geom_voronoiEdges.push(edge);\n\t    if (va) d3_geom_voronoiSetEdgeEnd(edge, lSite, rSite, va);\n\t    if (vb) d3_geom_voronoiSetEdgeEnd(edge, rSite, lSite, vb);\n\t    d3_geom_voronoiCells[lSite.i].edges.push(new d3_geom_voronoiHalfEdge(edge, lSite, rSite));\n\t    d3_geom_voronoiCells[rSite.i].edges.push(new d3_geom_voronoiHalfEdge(edge, rSite, lSite));\n\t    return edge;\n\t  }\n\t  function d3_geom_voronoiCreateBorderEdge(lSite, va, vb) {\n\t    var edge = new d3_geom_voronoiEdge(lSite, null);\n\t    edge.a = va;\n\t    edge.b = vb;\n\t    d3_geom_voronoiEdges.push(edge);\n\t    return edge;\n\t  }\n\t  function d3_geom_voronoiSetEdgeEnd(edge, lSite, rSite, vertex) {\n\t    if (!edge.a && !edge.b) {\n\t      edge.a = vertex;\n\t      edge.l = lSite;\n\t      edge.r = rSite;\n\t    } else if (edge.l === rSite) {\n\t      edge.b = vertex;\n\t    } else {\n\t      edge.a = vertex;\n\t    }\n\t  }\n\t  function d3_geom_voronoiHalfEdge(edge, lSite, rSite) {\n\t    var va = edge.a, vb = edge.b;\n\t    this.edge = edge;\n\t    this.site = lSite;\n\t    this.angle = rSite ? Math.atan2(rSite.y - lSite.y, rSite.x - lSite.x) : edge.l === lSite ? Math.atan2(vb.x - va.x, va.y - vb.y) : Math.atan2(va.x - vb.x, vb.y - va.y);\n\t  }\n\t  d3_geom_voronoiHalfEdge.prototype = {\n\t    start: function() {\n\t      return this.edge.l === this.site ? this.edge.a : this.edge.b;\n\t    },\n\t    end: function() {\n\t      return this.edge.l === this.site ? this.edge.b : this.edge.a;\n\t    }\n\t  };\n\t  function d3_geom_voronoiRedBlackTree() {\n\t    this._ = null;\n\t  }\n\t  function d3_geom_voronoiRedBlackNode(node) {\n\t    node.U = node.C = node.L = node.R = node.P = node.N = null;\n\t  }\n\t  d3_geom_voronoiRedBlackTree.prototype = {\n\t    insert: function(after, node) {\n\t      var parent, grandpa, uncle;\n\t      if (after) {\n\t        node.P = after;\n\t        node.N = after.N;\n\t        if (after.N) after.N.P = node;\n\t        after.N = node;\n\t        if (after.R) {\n\t          after = after.R;\n\t          while (after.L) after = after.L;\n\t          after.L = node;\n\t        } else {\n\t          after.R = node;\n\t        }\n\t        parent = after;\n\t      } else if (this._) {\n\t        after = d3_geom_voronoiRedBlackFirst(this._);\n\t        node.P = null;\n\t        node.N = after;\n\t        after.P = after.L = node;\n\t        parent = after;\n\t      } else {\n\t        node.P = node.N = null;\n\t        this._ = node;\n\t        parent = null;\n\t      }\n\t      node.L = node.R = null;\n\t      node.U = parent;\n\t      node.C = true;\n\t      after = node;\n\t      while (parent && parent.C) {\n\t        grandpa = parent.U;\n\t        if (parent === grandpa.L) {\n\t          uncle = grandpa.R;\n\t          if (uncle && uncle.C) {\n\t            parent.C = uncle.C = false;\n\t            grandpa.C = true;\n\t            after = grandpa;\n\t          } else {\n\t            if (after === parent.R) {\n\t              d3_geom_voronoiRedBlackRotateLeft(this, parent);\n\t              after = parent;\n\t              parent = after.U;\n\t            }\n\t            parent.C = false;\n\t            grandpa.C = true;\n\t            d3_geom_voronoiRedBlackRotateRight(this, grandpa);\n\t          }\n\t        } else {\n\t          uncle = grandpa.L;\n\t          if (uncle && uncle.C) {\n\t            parent.C = uncle.C = false;\n\t            grandpa.C = true;\n\t            after = grandpa;\n\t          } else {\n\t            if (after === parent.L) {\n\t              d3_geom_voronoiRedBlackRotateRight(this, parent);\n\t              after = parent;\n\t              parent = after.U;\n\t            }\n\t            parent.C = false;\n\t            grandpa.C = true;\n\t            d3_geom_voronoiRedBlackRotateLeft(this, grandpa);\n\t          }\n\t        }\n\t        parent = after.U;\n\t      }\n\t      this._.C = false;\n\t    },\n\t    remove: function(node) {\n\t      if (node.N) node.N.P = node.P;\n\t      if (node.P) node.P.N = node.N;\n\t      node.N = node.P = null;\n\t      var parent = node.U, sibling, left = node.L, right = node.R, next, red;\n\t      if (!left) next = right; else if (!right) next = left; else next = d3_geom_voronoiRedBlackFirst(right);\n\t      if (parent) {\n\t        if (parent.L === node) parent.L = next; else parent.R = next;\n\t      } else {\n\t        this._ = next;\n\t      }\n\t      if (left && right) {\n\t        red = next.C;\n\t        next.C = node.C;\n\t        next.L = left;\n\t        left.U = next;\n\t        if (next !== right) {\n\t          parent = next.U;\n\t          next.U = node.U;\n\t          node = next.R;\n\t          parent.L = node;\n\t          next.R = right;\n\t          right.U = next;\n\t        } else {\n\t          next.U = parent;\n\t          parent = next;\n\t          node = next.R;\n\t        }\n\t      } else {\n\t        red = node.C;\n\t        node = next;\n\t      }\n\t      if (node) node.U = parent;\n\t      if (red) return;\n\t      if (node && node.C) {\n\t        node.C = false;\n\t        return;\n\t      }\n\t      do {\n\t        if (node === this._) break;\n\t        if (node === parent.L) {\n\t          sibling = parent.R;\n\t          if (sibling.C) {\n\t            sibling.C = false;\n\t            parent.C = true;\n\t            d3_geom_voronoiRedBlackRotateLeft(this, parent);\n\t            sibling = parent.R;\n\t          }\n\t          if (sibling.L && sibling.L.C || sibling.R && sibling.R.C) {\n\t            if (!sibling.R || !sibling.R.C) {\n\t              sibling.L.C = false;\n\t              sibling.C = true;\n\t              d3_geom_voronoiRedBlackRotateRight(this, sibling);\n\t              sibling = parent.R;\n\t            }\n\t            sibling.C = parent.C;\n\t            parent.C = sibling.R.C = false;\n\t            d3_geom_voronoiRedBlackRotateLeft(this, parent);\n\t            node = this._;\n\t            break;\n\t          }\n\t        } else {\n\t          sibling = parent.L;\n\t          if (sibling.C) {\n\t            sibling.C = false;\n\t            parent.C = true;\n\t            d3_geom_voronoiRedBlackRotateRight(this, parent);\n\t            sibling = parent.L;\n\t          }\n\t          if (sibling.L && sibling.L.C || sibling.R && sibling.R.C) {\n\t            if (!sibling.L || !sibling.L.C) {\n\t              sibling.R.C = false;\n\t              sibling.C = true;\n\t              d3_geom_voronoiRedBlackRotateLeft(this, sibling);\n\t              sibling = parent.L;\n\t            }\n\t            sibling.C = parent.C;\n\t            parent.C = sibling.L.C = false;\n\t            d3_geom_voronoiRedBlackRotateRight(this, parent);\n\t            node = this._;\n\t            break;\n\t          }\n\t        }\n\t        sibling.C = true;\n\t        node = parent;\n\t        parent = parent.U;\n\t      } while (!node.C);\n\t      if (node) node.C = false;\n\t    }\n\t  };\n\t  function d3_geom_voronoiRedBlackRotateLeft(tree, node) {\n\t    var p = node, q = node.R, parent = p.U;\n\t    if (parent) {\n\t      if (parent.L === p) parent.L = q; else parent.R = q;\n\t    } else {\n\t      tree._ = q;\n\t    }\n\t    q.U = parent;\n\t    p.U = q;\n\t    p.R = q.L;\n\t    if (p.R) p.R.U = p;\n\t    q.L = p;\n\t  }\n\t  function d3_geom_voronoiRedBlackRotateRight(tree, node) {\n\t    var p = node, q = node.L, parent = p.U;\n\t    if (parent) {\n\t      if (parent.L === p) parent.L = q; else parent.R = q;\n\t    } else {\n\t      tree._ = q;\n\t    }\n\t    q.U = parent;\n\t    p.U = q;\n\t    p.L = q.R;\n\t    if (p.L) p.L.U = p;\n\t    q.R = p;\n\t  }\n\t  function d3_geom_voronoiRedBlackFirst(node) {\n\t    while (node.L) node = node.L;\n\t    return node;\n\t  }\n\t  function d3_geom_voronoi(sites, bbox) {\n\t    var site = sites.sort(d3_geom_voronoiVertexOrder).pop(), x0, y0, circle;\n\t    d3_geom_voronoiEdges = [];\n\t    d3_geom_voronoiCells = new Array(sites.length);\n\t    d3_geom_voronoiBeaches = new d3_geom_voronoiRedBlackTree();\n\t    d3_geom_voronoiCircles = new d3_geom_voronoiRedBlackTree();\n\t    while (true) {\n\t      circle = d3_geom_voronoiFirstCircle;\n\t      if (site && (!circle || site.y < circle.y || site.y === circle.y && site.x < circle.x)) {\n\t        if (site.x !== x0 || site.y !== y0) {\n\t          d3_geom_voronoiCells[site.i] = new d3_geom_voronoiCell(site);\n\t          d3_geom_voronoiAddBeach(site);\n\t          x0 = site.x, y0 = site.y;\n\t        }\n\t        site = sites.pop();\n\t      } else if (circle) {\n\t        d3_geom_voronoiRemoveBeach(circle.arc);\n\t      } else {\n\t        break;\n\t      }\n\t    }\n\t    if (bbox) d3_geom_voronoiClipEdges(bbox), d3_geom_voronoiCloseCells(bbox);\n\t    var diagram = {\n\t      cells: d3_geom_voronoiCells,\n\t      edges: d3_geom_voronoiEdges\n\t    };\n\t    d3_geom_voronoiBeaches = d3_geom_voronoiCircles = d3_geom_voronoiEdges = d3_geom_voronoiCells = null;\n\t    return diagram;\n\t  }\n\t  function d3_geom_voronoiVertexOrder(a, b) {\n\t    return b.y - a.y || b.x - a.x;\n\t  }\n\t  d3.geom.voronoi = function(points) {\n\t    var x = d3_geom_pointX, y = d3_geom_pointY, fx = x, fy = y, clipExtent = d3_geom_voronoiClipExtent;\n\t    if (points) return voronoi(points);\n\t    function voronoi(data) {\n\t      var polygons = new Array(data.length), x0 = clipExtent[0][0], y0 = clipExtent[0][1], x1 = clipExtent[1][0], y1 = clipExtent[1][1];\n\t      d3_geom_voronoi(sites(data), clipExtent).cells.forEach(function(cell, i) {\n\t        var edges = cell.edges, site = cell.site, polygon = polygons[i] = edges.length ? edges.map(function(e) {\n\t          var s = e.start();\n\t          return [ s.x, s.y ];\n\t        }) : site.x >= x0 && site.x <= x1 && site.y >= y0 && site.y <= y1 ? [ [ x0, y1 ], [ x1, y1 ], [ x1, y0 ], [ x0, y0 ] ] : [];\n\t        polygon.point = data[i];\n\t      });\n\t      return polygons;\n\t    }\n\t    function sites(data) {\n\t      return data.map(function(d, i) {\n\t        return {\n\t          x: Math.round(fx(d, i) / ε) * ε,\n\t          y: Math.round(fy(d, i) / ε) * ε,\n\t          i: i\n\t        };\n\t      });\n\t    }\n\t    voronoi.links = function(data) {\n\t      return d3_geom_voronoi(sites(data)).edges.filter(function(edge) {\n\t        return edge.l && edge.r;\n\t      }).map(function(edge) {\n\t        return {\n\t          source: data[edge.l.i],\n\t          target: data[edge.r.i]\n\t        };\n\t      });\n\t    };\n\t    voronoi.triangles = function(data) {\n\t      var triangles = [];\n\t      d3_geom_voronoi(sites(data)).cells.forEach(function(cell, i) {\n\t        var site = cell.site, edges = cell.edges.sort(d3_geom_voronoiHalfEdgeOrder), j = -1, m = edges.length, e0, s0, e1 = edges[m - 1].edge, s1 = e1.l === site ? e1.r : e1.l;\n\t        while (++j < m) {\n\t          e0 = e1;\n\t          s0 = s1;\n\t          e1 = edges[j].edge;\n\t          s1 = e1.l === site ? e1.r : e1.l;\n\t          if (i < s0.i && i < s1.i && d3_geom_voronoiTriangleArea(site, s0, s1) < 0) {\n\t            triangles.push([ data[i], data[s0.i], data[s1.i] ]);\n\t          }\n\t        }\n\t      });\n\t      return triangles;\n\t    };\n\t    voronoi.x = function(_) {\n\t      return arguments.length ? (fx = d3_functor(x = _), voronoi) : x;\n\t    };\n\t    voronoi.y = function(_) {\n\t      return arguments.length ? (fy = d3_functor(y = _), voronoi) : y;\n\t    };\n\t    voronoi.clipExtent = function(_) {\n\t      if (!arguments.length) return clipExtent === d3_geom_voronoiClipExtent ? null : clipExtent;\n\t      clipExtent = _ == null ? d3_geom_voronoiClipExtent : _;\n\t      return voronoi;\n\t    };\n\t    voronoi.size = function(_) {\n\t      if (!arguments.length) return clipExtent === d3_geom_voronoiClipExtent ? null : clipExtent && clipExtent[1];\n\t      return voronoi.clipExtent(_ && [ [ 0, 0 ], _ ]);\n\t    };\n\t    return voronoi;\n\t  };\n\t  var d3_geom_voronoiClipExtent = [ [ -1e6, -1e6 ], [ 1e6, 1e6 ] ];\n\t  function d3_geom_voronoiTriangleArea(a, b, c) {\n\t    return (a.x - c.x) * (b.y - a.y) - (a.x - b.x) * (c.y - a.y);\n\t  }\n\t  d3.geom.delaunay = function(vertices) {\n\t    return d3.geom.voronoi().triangles(vertices);\n\t  };\n\t  d3.geom.quadtree = function(points, x1, y1, x2, y2) {\n\t    var x = d3_geom_pointX, y = d3_geom_pointY, compat;\n\t    if (compat = arguments.length) {\n\t      x = d3_geom_quadtreeCompatX;\n\t      y = d3_geom_quadtreeCompatY;\n\t      if (compat === 3) {\n\t        y2 = y1;\n\t        x2 = x1;\n\t        y1 = x1 = 0;\n\t      }\n\t      return quadtree(points);\n\t    }\n\t    function quadtree(data) {\n\t      var d, fx = d3_functor(x), fy = d3_functor(y), xs, ys, i, n, x1_, y1_, x2_, y2_;\n\t      if (x1 != null) {\n\t        x1_ = x1, y1_ = y1, x2_ = x2, y2_ = y2;\n\t      } else {\n\t        x2_ = y2_ = -(x1_ = y1_ = Infinity);\n\t        xs = [], ys = [];\n\t        n = data.length;\n\t        if (compat) for (i = 0; i < n; ++i) {\n\t          d = data[i];\n\t          if (d.x < x1_) x1_ = d.x;\n\t          if (d.y < y1_) y1_ = d.y;\n\t          if (d.x > x2_) x2_ = d.x;\n\t          if (d.y > y2_) y2_ = d.y;\n\t          xs.push(d.x);\n\t          ys.push(d.y);\n\t        } else for (i = 0; i < n; ++i) {\n\t          var x_ = +fx(d = data[i], i), y_ = +fy(d, i);\n\t          if (x_ < x1_) x1_ = x_;\n\t          if (y_ < y1_) y1_ = y_;\n\t          if (x_ > x2_) x2_ = x_;\n\t          if (y_ > y2_) y2_ = y_;\n\t          xs.push(x_);\n\t          ys.push(y_);\n\t        }\n\t      }\n\t      var dx = x2_ - x1_, dy = y2_ - y1_;\n\t      if (dx > dy) y2_ = y1_ + dx; else x2_ = x1_ + dy;\n\t      function insert(n, d, x, y, x1, y1, x2, y2) {\n\t        if (isNaN(x) || isNaN(y)) return;\n\t        if (n.leaf) {\n\t          var nx = n.x, ny = n.y;\n\t          if (nx != null) {\n\t            if (abs(nx - x) + abs(ny - y) < .01) {\n\t              insertChild(n, d, x, y, x1, y1, x2, y2);\n\t            } else {\n\t              var nPoint = n.point;\n\t              n.x = n.y = n.point = null;\n\t              insertChild(n, nPoint, nx, ny, x1, y1, x2, y2);\n\t              insertChild(n, d, x, y, x1, y1, x2, y2);\n\t            }\n\t          } else {\n\t            n.x = x, n.y = y, n.point = d;\n\t          }\n\t        } else {\n\t          insertChild(n, d, x, y, x1, y1, x2, y2);\n\t        }\n\t      }\n\t      function insertChild(n, d, x, y, x1, y1, x2, y2) {\n\t        var xm = (x1 + x2) * .5, ym = (y1 + y2) * .5, right = x >= xm, below = y >= ym, i = below << 1 | right;\n\t        n.leaf = false;\n\t        n = n.nodes[i] || (n.nodes[i] = d3_geom_quadtreeNode());\n\t        if (right) x1 = xm; else x2 = xm;\n\t        if (below) y1 = ym; else y2 = ym;\n\t        insert(n, d, x, y, x1, y1, x2, y2);\n\t      }\n\t      var root = d3_geom_quadtreeNode();\n\t      root.add = function(d) {\n\t        insert(root, d, +fx(d, ++i), +fy(d, i), x1_, y1_, x2_, y2_);\n\t      };\n\t      root.visit = function(f) {\n\t        d3_geom_quadtreeVisit(f, root, x1_, y1_, x2_, y2_);\n\t      };\n\t      root.find = function(point) {\n\t        return d3_geom_quadtreeFind(root, point[0], point[1], x1_, y1_, x2_, y2_);\n\t      };\n\t      i = -1;\n\t      if (x1 == null) {\n\t        while (++i < n) {\n\t          insert(root, data[i], xs[i], ys[i], x1_, y1_, x2_, y2_);\n\t        }\n\t        --i;\n\t      } else data.forEach(root.add);\n\t      xs = ys = data = d = null;\n\t      return root;\n\t    }\n\t    quadtree.x = function(_) {\n\t      return arguments.length ? (x = _, quadtree) : x;\n\t    };\n\t    quadtree.y = function(_) {\n\t      return arguments.length ? (y = _, quadtree) : y;\n\t    };\n\t    quadtree.extent = function(_) {\n\t      if (!arguments.length) return x1 == null ? null : [ [ x1, y1 ], [ x2, y2 ] ];\n\t      if (_ == null) x1 = y1 = x2 = y2 = null; else x1 = +_[0][0], y1 = +_[0][1], x2 = +_[1][0], \n\t      y2 = +_[1][1];\n\t      return quadtree;\n\t    };\n\t    quadtree.size = function(_) {\n\t      if (!arguments.length) return x1 == null ? null : [ x2 - x1, y2 - y1 ];\n\t      if (_ == null) x1 = y1 = x2 = y2 = null; else x1 = y1 = 0, x2 = +_[0], y2 = +_[1];\n\t      return quadtree;\n\t    };\n\t    return quadtree;\n\t  };\n\t  function d3_geom_quadtreeCompatX(d) {\n\t    return d.x;\n\t  }\n\t  function d3_geom_quadtreeCompatY(d) {\n\t    return d.y;\n\t  }\n\t  function d3_geom_quadtreeNode() {\n\t    return {\n\t      leaf: true,\n\t      nodes: [],\n\t      point: null,\n\t      x: null,\n\t      y: null\n\t    };\n\t  }\n\t  function d3_geom_quadtreeVisit(f, node, x1, y1, x2, y2) {\n\t    if (!f(node, x1, y1, x2, y2)) {\n\t      var sx = (x1 + x2) * .5, sy = (y1 + y2) * .5, children = node.nodes;\n\t      if (children[0]) d3_geom_quadtreeVisit(f, children[0], x1, y1, sx, sy);\n\t      if (children[1]) d3_geom_quadtreeVisit(f, children[1], sx, y1, x2, sy);\n\t      if (children[2]) d3_geom_quadtreeVisit(f, children[2], x1, sy, sx, y2);\n\t      if (children[3]) d3_geom_quadtreeVisit(f, children[3], sx, sy, x2, y2);\n\t    }\n\t  }\n\t  function d3_geom_quadtreeFind(root, x, y, x0, y0, x3, y3) {\n\t    var minDistance2 = Infinity, closestPoint;\n\t    (function find(node, x1, y1, x2, y2) {\n\t      if (x1 > x3 || y1 > y3 || x2 < x0 || y2 < y0) return;\n\t      if (point = node.point) {\n\t        var point, dx = x - point[0], dy = y - point[1], distance2 = dx * dx + dy * dy;\n\t        if (distance2 < minDistance2) {\n\t          var distance = Math.sqrt(minDistance2 = distance2);\n\t          x0 = x - distance, y0 = y - distance;\n\t          x3 = x + distance, y3 = y + distance;\n\t          closestPoint = point;\n\t        }\n\t      }\n\t      var children = node.nodes, xm = (x1 + x2) * .5, ym = (y1 + y2) * .5, right = x >= xm, below = y >= ym;\n\t      for (var i = below << 1 | right, j = i + 4; i < j; ++i) {\n\t        if (node = children[i & 3]) switch (i & 3) {\n\t         case 0:\n\t          find(node, x1, y1, xm, ym);\n\t          break;\n\t\n\t         case 1:\n\t          find(node, xm, y1, x2, ym);\n\t          break;\n\t\n\t         case 2:\n\t          find(node, x1, ym, xm, y2);\n\t          break;\n\t\n\t         case 3:\n\t          find(node, xm, ym, x2, y2);\n\t          break;\n\t        }\n\t      }\n\t    })(root, x0, y0, x3, y3);\n\t    return closestPoint;\n\t  }\n\t  d3.interpolateRgb = d3_interpolateRgb;\n\t  function d3_interpolateRgb(a, b) {\n\t    a = d3.rgb(a);\n\t    b = d3.rgb(b);\n\t    var ar = a.r, ag = a.g, ab = a.b, br = b.r - ar, bg = b.g - ag, bb = b.b - ab;\n\t    return function(t) {\n\t      return \"#\" + d3_rgb_hex(Math.round(ar + br * t)) + d3_rgb_hex(Math.round(ag + bg * t)) + d3_rgb_hex(Math.round(ab + bb * t));\n\t    };\n\t  }\n\t  d3.interpolateObject = d3_interpolateObject;\n\t  function d3_interpolateObject(a, b) {\n\t    var i = {}, c = {}, k;\n\t    for (k in a) {\n\t      if (k in b) {\n\t        i[k] = d3_interpolate(a[k], b[k]);\n\t      } else {\n\t        c[k] = a[k];\n\t      }\n\t    }\n\t    for (k in b) {\n\t      if (!(k in a)) {\n\t        c[k] = b[k];\n\t      }\n\t    }\n\t    return function(t) {\n\t      for (k in i) c[k] = i[k](t);\n\t      return c;\n\t    };\n\t  }\n\t  d3.interpolateNumber = d3_interpolateNumber;\n\t  function d3_interpolateNumber(a, b) {\n\t    a = +a, b = +b;\n\t    return function(t) {\n\t      return a * (1 - t) + b * t;\n\t    };\n\t  }\n\t  d3.interpolateString = d3_interpolateString;\n\t  function d3_interpolateString(a, b) {\n\t    var bi = d3_interpolate_numberA.lastIndex = d3_interpolate_numberB.lastIndex = 0, am, bm, bs, i = -1, s = [], q = [];\n\t    a = a + \"\", b = b + \"\";\n\t    while ((am = d3_interpolate_numberA.exec(a)) && (bm = d3_interpolate_numberB.exec(b))) {\n\t      if ((bs = bm.index) > bi) {\n\t        bs = b.slice(bi, bs);\n\t        if (s[i]) s[i] += bs; else s[++i] = bs;\n\t      }\n\t      if ((am = am[0]) === (bm = bm[0])) {\n\t        if (s[i]) s[i] += bm; else s[++i] = bm;\n\t      } else {\n\t        s[++i] = null;\n\t        q.push({\n\t          i: i,\n\t          x: d3_interpolateNumber(am, bm)\n\t        });\n\t      }\n\t      bi = d3_interpolate_numberB.lastIndex;\n\t    }\n\t    if (bi < b.length) {\n\t      bs = b.slice(bi);\n\t      if (s[i]) s[i] += bs; else s[++i] = bs;\n\t    }\n\t    return s.length < 2 ? q[0] ? (b = q[0].x, function(t) {\n\t      return b(t) + \"\";\n\t    }) : function() {\n\t      return b;\n\t    } : (b = q.length, function(t) {\n\t      for (var i = 0, o; i < b; ++i) s[(o = q[i]).i] = o.x(t);\n\t      return s.join(\"\");\n\t    });\n\t  }\n\t  var d3_interpolate_numberA = /[-+]?(?:\\d+\\.?\\d*|\\.?\\d+)(?:[eE][-+]?\\d+)?/g, d3_interpolate_numberB = new RegExp(d3_interpolate_numberA.source, \"g\");\n\t  d3.interpolate = d3_interpolate;\n\t  function d3_interpolate(a, b) {\n\t    var i = d3.interpolators.length, f;\n\t    while (--i >= 0 && !(f = d3.interpolators[i](a, b))) ;\n\t    return f;\n\t  }\n\t  d3.interpolators = [ function(a, b) {\n\t    var t = typeof b;\n\t    return (t === \"string\" ? d3_rgb_names.has(b) || /^(#|rgb\\(|hsl\\()/.test(b) ? d3_interpolateRgb : d3_interpolateString : b instanceof d3_color ? d3_interpolateRgb : Array.isArray(b) ? d3_interpolateArray : t === \"object\" && isNaN(b) ? d3_interpolateObject : d3_interpolateNumber)(a, b);\n\t  } ];\n\t  d3.interpolateArray = d3_interpolateArray;\n\t  function d3_interpolateArray(a, b) {\n\t    var x = [], c = [], na = a.length, nb = b.length, n0 = Math.min(a.length, b.length), i;\n\t    for (i = 0; i < n0; ++i) x.push(d3_interpolate(a[i], b[i]));\n\t    for (;i < na; ++i) c[i] = a[i];\n\t    for (;i < nb; ++i) c[i] = b[i];\n\t    return function(t) {\n\t      for (i = 0; i < n0; ++i) c[i] = x[i](t);\n\t      return c;\n\t    };\n\t  }\n\t  var d3_ease_default = function() {\n\t    return d3_identity;\n\t  };\n\t  var d3_ease = d3.map({\n\t    linear: d3_ease_default,\n\t    poly: d3_ease_poly,\n\t    quad: function() {\n\t      return d3_ease_quad;\n\t    },\n\t    cubic: function() {\n\t      return d3_ease_cubic;\n\t    },\n\t    sin: function() {\n\t      return d3_ease_sin;\n\t    },\n\t    exp: function() {\n\t      return d3_ease_exp;\n\t    },\n\t    circle: function() {\n\t      return d3_ease_circle;\n\t    },\n\t    elastic: d3_ease_elastic,\n\t    back: d3_ease_back,\n\t    bounce: function() {\n\t      return d3_ease_bounce;\n\t    }\n\t  });\n\t  var d3_ease_mode = d3.map({\n\t    \"in\": d3_identity,\n\t    out: d3_ease_reverse,\n\t    \"in-out\": d3_ease_reflect,\n\t    \"out-in\": function(f) {\n\t      return d3_ease_reflect(d3_ease_reverse(f));\n\t    }\n\t  });\n\t  d3.ease = function(name) {\n\t    var i = name.indexOf(\"-\"), t = i >= 0 ? name.slice(0, i) : name, m = i >= 0 ? name.slice(i + 1) : \"in\";\n\t    t = d3_ease.get(t) || d3_ease_default;\n\t    m = d3_ease_mode.get(m) || d3_identity;\n\t    return d3_ease_clamp(m(t.apply(null, d3_arraySlice.call(arguments, 1))));\n\t  };\n\t  function d3_ease_clamp(f) {\n\t    return function(t) {\n\t      return t <= 0 ? 0 : t >= 1 ? 1 : f(t);\n\t    };\n\t  }\n\t  function d3_ease_reverse(f) {\n\t    return function(t) {\n\t      return 1 - f(1 - t);\n\t    };\n\t  }\n\t  function d3_ease_reflect(f) {\n\t    return function(t) {\n\t      return .5 * (t < .5 ? f(2 * t) : 2 - f(2 - 2 * t));\n\t    };\n\t  }\n\t  function d3_ease_quad(t) {\n\t    return t * t;\n\t  }\n\t  function d3_ease_cubic(t) {\n\t    return t * t * t;\n\t  }\n\t  function d3_ease_cubicInOut(t) {\n\t    if (t <= 0) return 0;\n\t    if (t >= 1) return 1;\n\t    var t2 = t * t, t3 = t2 * t;\n\t    return 4 * (t < .5 ? t3 : 3 * (t - t2) + t3 - .75);\n\t  }\n\t  function d3_ease_poly(e) {\n\t    return function(t) {\n\t      return Math.pow(t, e);\n\t    };\n\t  }\n\t  function d3_ease_sin(t) {\n\t    return 1 - Math.cos(t * halfπ);\n\t  }\n\t  function d3_ease_exp(t) {\n\t    return Math.pow(2, 10 * (t - 1));\n\t  }\n\t  function d3_ease_circle(t) {\n\t    return 1 - Math.sqrt(1 - t * t);\n\t  }\n\t  function d3_ease_elastic(a, p) {\n\t    var s;\n\t    if (arguments.length < 2) p = .45;\n\t    if (arguments.length) s = p / τ * Math.asin(1 / a); else a = 1, s = p / 4;\n\t    return function(t) {\n\t      return 1 + a * Math.pow(2, -10 * t) * Math.sin((t - s) * τ / p);\n\t    };\n\t  }\n\t  function d3_ease_back(s) {\n\t    if (!s) s = 1.70158;\n\t    return function(t) {\n\t      return t * t * ((s + 1) * t - s);\n\t    };\n\t  }\n\t  function d3_ease_bounce(t) {\n\t    return t < 1 / 2.75 ? 7.5625 * t * t : t < 2 / 2.75 ? 7.5625 * (t -= 1.5 / 2.75) * t + .75 : t < 2.5 / 2.75 ? 7.5625 * (t -= 2.25 / 2.75) * t + .9375 : 7.5625 * (t -= 2.625 / 2.75) * t + .984375;\n\t  }\n\t  d3.interpolateHcl = d3_interpolateHcl;\n\t  function d3_interpolateHcl(a, b) {\n\t    a = d3.hcl(a);\n\t    b = d3.hcl(b);\n\t    var ah = a.h, ac = a.c, al = a.l, bh = b.h - ah, bc = b.c - ac, bl = b.l - al;\n\t    if (isNaN(bc)) bc = 0, ac = isNaN(ac) ? b.c : ac;\n\t    if (isNaN(bh)) bh = 0, ah = isNaN(ah) ? b.h : ah; else if (bh > 180) bh -= 360; else if (bh < -180) bh += 360;\n\t    return function(t) {\n\t      return d3_hcl_lab(ah + bh * t, ac + bc * t, al + bl * t) + \"\";\n\t    };\n\t  }\n\t  d3.interpolateHsl = d3_interpolateHsl;\n\t  function d3_interpolateHsl(a, b) {\n\t    a = d3.hsl(a);\n\t    b = d3.hsl(b);\n\t    var ah = a.h, as = a.s, al = a.l, bh = b.h - ah, bs = b.s - as, bl = b.l - al;\n\t    if (isNaN(bs)) bs = 0, as = isNaN(as) ? b.s : as;\n\t    if (isNaN(bh)) bh = 0, ah = isNaN(ah) ? b.h : ah; else if (bh > 180) bh -= 360; else if (bh < -180) bh += 360;\n\t    return function(t) {\n\t      return d3_hsl_rgb(ah + bh * t, as + bs * t, al + bl * t) + \"\";\n\t    };\n\t  }\n\t  d3.interpolateLab = d3_interpolateLab;\n\t  function d3_interpolateLab(a, b) {\n\t    a = d3.lab(a);\n\t    b = d3.lab(b);\n\t    var al = a.l, aa = a.a, ab = a.b, bl = b.l - al, ba = b.a - aa, bb = b.b - ab;\n\t    return function(t) {\n\t      return d3_lab_rgb(al + bl * t, aa + ba * t, ab + bb * t) + \"\";\n\t    };\n\t  }\n\t  d3.interpolateRound = d3_interpolateRound;\n\t  function d3_interpolateRound(a, b) {\n\t    b -= a;\n\t    return function(t) {\n\t      return Math.round(a + b * t);\n\t    };\n\t  }\n\t  d3.transform = function(string) {\n\t    var g = d3_document.createElementNS(d3.ns.prefix.svg, \"g\");\n\t    return (d3.transform = function(string) {\n\t      if (string != null) {\n\t        g.setAttribute(\"transform\", string);\n\t        var t = g.transform.baseVal.consolidate();\n\t      }\n\t      return new d3_transform(t ? t.matrix : d3_transformIdentity);\n\t    })(string);\n\t  };\n\t  function d3_transform(m) {\n\t    var r0 = [ m.a, m.b ], r1 = [ m.c, m.d ], kx = d3_transformNormalize(r0), kz = d3_transformDot(r0, r1), ky = d3_transformNormalize(d3_transformCombine(r1, r0, -kz)) || 0;\n\t    if (r0[0] * r1[1] < r1[0] * r0[1]) {\n\t      r0[0] *= -1;\n\t      r0[1] *= -1;\n\t      kx *= -1;\n\t      kz *= -1;\n\t    }\n\t    this.rotate = (kx ? Math.atan2(r0[1], r0[0]) : Math.atan2(-r1[0], r1[1])) * d3_degrees;\n\t    this.translate = [ m.e, m.f ];\n\t    this.scale = [ kx, ky ];\n\t    this.skew = ky ? Math.atan2(kz, ky) * d3_degrees : 0;\n\t  }\n\t  d3_transform.prototype.toString = function() {\n\t    return \"translate(\" + this.translate + \")rotate(\" + this.rotate + \")skewX(\" + this.skew + \")scale(\" + this.scale + \")\";\n\t  };\n\t  function d3_transformDot(a, b) {\n\t    return a[0] * b[0] + a[1] * b[1];\n\t  }\n\t  function d3_transformNormalize(a) {\n\t    var k = Math.sqrt(d3_transformDot(a, a));\n\t    if (k) {\n\t      a[0] /= k;\n\t      a[1] /= k;\n\t    }\n\t    return k;\n\t  }\n\t  function d3_transformCombine(a, b, k) {\n\t    a[0] += k * b[0];\n\t    a[1] += k * b[1];\n\t    return a;\n\t  }\n\t  var d3_transformIdentity = {\n\t    a: 1,\n\t    b: 0,\n\t    c: 0,\n\t    d: 1,\n\t    e: 0,\n\t    f: 0\n\t  };\n\t  d3.interpolateTransform = d3_interpolateTransform;\n\t  function d3_interpolateTransform(a, b) {\n\t    var s = [], q = [], n, A = d3.transform(a), B = d3.transform(b), ta = A.translate, tb = B.translate, ra = A.rotate, rb = B.rotate, wa = A.skew, wb = B.skew, ka = A.scale, kb = B.scale;\n\t    if (ta[0] != tb[0] || ta[1] != tb[1]) {\n\t      s.push(\"translate(\", null, \",\", null, \")\");\n\t      q.push({\n\t        i: 1,\n\t        x: d3_interpolateNumber(ta[0], tb[0])\n\t      }, {\n\t        i: 3,\n\t        x: d3_interpolateNumber(ta[1], tb[1])\n\t      });\n\t    } else if (tb[0] || tb[1]) {\n\t      s.push(\"translate(\" + tb + \")\");\n\t    } else {\n\t      s.push(\"\");\n\t    }\n\t    if (ra != rb) {\n\t      if (ra - rb > 180) rb += 360; else if (rb - ra > 180) ra += 360;\n\t      q.push({\n\t        i: s.push(s.pop() + \"rotate(\", null, \")\") - 2,\n\t        x: d3_interpolateNumber(ra, rb)\n\t      });\n\t    } else if (rb) {\n\t      s.push(s.pop() + \"rotate(\" + rb + \")\");\n\t    }\n\t    if (wa != wb) {\n\t      q.push({\n\t        i: s.push(s.pop() + \"skewX(\", null, \")\") - 2,\n\t        x: d3_interpolateNumber(wa, wb)\n\t      });\n\t    } else if (wb) {\n\t      s.push(s.pop() + \"skewX(\" + wb + \")\");\n\t    }\n\t    if (ka[0] != kb[0] || ka[1] != kb[1]) {\n\t      n = s.push(s.pop() + \"scale(\", null, \",\", null, \")\");\n\t      q.push({\n\t        i: n - 4,\n\t        x: d3_interpolateNumber(ka[0], kb[0])\n\t      }, {\n\t        i: n - 2,\n\t        x: d3_interpolateNumber(ka[1], kb[1])\n\t      });\n\t    } else if (kb[0] != 1 || kb[1] != 1) {\n\t      s.push(s.pop() + \"scale(\" + kb + \")\");\n\t    }\n\t    n = q.length;\n\t    return function(t) {\n\t      var i = -1, o;\n\t      while (++i < n) s[(o = q[i]).i] = o.x(t);\n\t      return s.join(\"\");\n\t    };\n\t  }\n\t  function d3_uninterpolateNumber(a, b) {\n\t    b = (b -= a = +a) || 1 / b;\n\t    return function(x) {\n\t      return (x - a) / b;\n\t    };\n\t  }\n\t  function d3_uninterpolateClamp(a, b) {\n\t    b = (b -= a = +a) || 1 / b;\n\t    return function(x) {\n\t      return Math.max(0, Math.min(1, (x - a) / b));\n\t    };\n\t  }\n\t  d3.layout = {};\n\t  d3.layout.bundle = function() {\n\t    return function(links) {\n\t      var paths = [], i = -1, n = links.length;\n\t      while (++i < n) paths.push(d3_layout_bundlePath(links[i]));\n\t      return paths;\n\t    };\n\t  };\n\t  function d3_layout_bundlePath(link) {\n\t    var start = link.source, end = link.target, lca = d3_layout_bundleLeastCommonAncestor(start, end), points = [ start ];\n\t    while (start !== lca) {\n\t      start = start.parent;\n\t      points.push(start);\n\t    }\n\t    var k = points.length;\n\t    while (end !== lca) {\n\t      points.splice(k, 0, end);\n\t      end = end.parent;\n\t    }\n\t    return points;\n\t  }\n\t  function d3_layout_bundleAncestors(node) {\n\t    var ancestors = [], parent = node.parent;\n\t    while (parent != null) {\n\t      ancestors.push(node);\n\t      node = parent;\n\t      parent = parent.parent;\n\t    }\n\t    ancestors.push(node);\n\t    return ancestors;\n\t  }\n\t  function d3_layout_bundleLeastCommonAncestor(a, b) {\n\t    if (a === b) return a;\n\t    var aNodes = d3_layout_bundleAncestors(a), bNodes = d3_layout_bundleAncestors(b), aNode = aNodes.pop(), bNode = bNodes.pop(), sharedNode = null;\n\t    while (aNode === bNode) {\n\t      sharedNode = aNode;\n\t      aNode = aNodes.pop();\n\t      bNode = bNodes.pop();\n\t    }\n\t    return sharedNode;\n\t  }\n\t  d3.layout.chord = function() {\n\t    var chord = {}, chords, groups, matrix, n, padding = 0, sortGroups, sortSubgroups, sortChords;\n\t    function relayout() {\n\t      var subgroups = {}, groupSums = [], groupIndex = d3.range(n), subgroupIndex = [], k, x, x0, i, j;\n\t      chords = [];\n\t      groups = [];\n\t      k = 0, i = -1;\n\t      while (++i < n) {\n\t        x = 0, j = -1;\n\t        while (++j < n) {\n\t          x += matrix[i][j];\n\t        }\n\t        groupSums.push(x);\n\t        subgroupIndex.push(d3.range(n));\n\t        k += x;\n\t      }\n\t      if (sortGroups) {\n\t        groupIndex.sort(function(a, b) {\n\t          return sortGroups(groupSums[a], groupSums[b]);\n\t        });\n\t      }\n\t      if (sortSubgroups) {\n\t        subgroupIndex.forEach(function(d, i) {\n\t          d.sort(function(a, b) {\n\t            return sortSubgroups(matrix[i][a], matrix[i][b]);\n\t          });\n\t        });\n\t      }\n\t      k = (τ - padding * n) / k;\n\t      x = 0, i = -1;\n\t      while (++i < n) {\n\t        x0 = x, j = -1;\n\t        while (++j < n) {\n\t          var di = groupIndex[i], dj = subgroupIndex[di][j], v = matrix[di][dj], a0 = x, a1 = x += v * k;\n\t          subgroups[di + \"-\" + dj] = {\n\t            index: di,\n\t            subindex: dj,\n\t            startAngle: a0,\n\t            endAngle: a1,\n\t            value: v\n\t          };\n\t        }\n\t        groups[di] = {\n\t          index: di,\n\t          startAngle: x0,\n\t          endAngle: x,\n\t          value: (x - x0) / k\n\t        };\n\t        x += padding;\n\t      }\n\t      i = -1;\n\t      while (++i < n) {\n\t        j = i - 1;\n\t        while (++j < n) {\n\t          var source = subgroups[i + \"-\" + j], target = subgroups[j + \"-\" + i];\n\t          if (source.value || target.value) {\n\t            chords.push(source.value < target.value ? {\n\t              source: target,\n\t              target: source\n\t            } : {\n\t              source: source,\n\t              target: target\n\t            });\n\t          }\n\t        }\n\t      }\n\t      if (sortChords) resort();\n\t    }\n\t    function resort() {\n\t      chords.sort(function(a, b) {\n\t        return sortChords((a.source.value + a.target.value) / 2, (b.source.value + b.target.value) / 2);\n\t      });\n\t    }\n\t    chord.matrix = function(x) {\n\t      if (!arguments.length) return matrix;\n\t      n = (matrix = x) && matrix.length;\n\t      chords = groups = null;\n\t      return chord;\n\t    };\n\t    chord.padding = function(x) {\n\t      if (!arguments.length) return padding;\n\t      padding = x;\n\t      chords = groups = null;\n\t      return chord;\n\t    };\n\t    chord.sortGroups = function(x) {\n\t      if (!arguments.length) return sortGroups;\n\t      sortGroups = x;\n\t      chords = groups = null;\n\t      return chord;\n\t    };\n\t    chord.sortSubgroups = function(x) {\n\t      if (!arguments.length) return sortSubgroups;\n\t      sortSubgroups = x;\n\t      chords = null;\n\t      return chord;\n\t    };\n\t    chord.sortChords = function(x) {\n\t      if (!arguments.length) return sortChords;\n\t      sortChords = x;\n\t      if (chords) resort();\n\t      return chord;\n\t    };\n\t    chord.chords = function() {\n\t      if (!chords) relayout();\n\t      return chords;\n\t    };\n\t    chord.groups = function() {\n\t      if (!groups) relayout();\n\t      return groups;\n\t    };\n\t    return chord;\n\t  };\n\t  d3.layout.force = function() {\n\t    var force = {}, event = d3.dispatch(\"start\", \"tick\", \"end\"), size = [ 1, 1 ], drag, alpha, friction = .9, linkDistance = d3_layout_forceLinkDistance, linkStrength = d3_layout_forceLinkStrength, charge = -30, chargeDistance2 = d3_layout_forceChargeDistance2, gravity = .1, theta2 = .64, nodes = [], links = [], distances, strengths, charges;\n\t    function repulse(node) {\n\t      return function(quad, x1, _, x2) {\n\t        if (quad.point !== node) {\n\t          var dx = quad.cx - node.x, dy = quad.cy - node.y, dw = x2 - x1, dn = dx * dx + dy * dy;\n\t          if (dw * dw / theta2 < dn) {\n\t            if (dn < chargeDistance2) {\n\t              var k = quad.charge / dn;\n\t              node.px -= dx * k;\n\t              node.py -= dy * k;\n\t            }\n\t            return true;\n\t          }\n\t          if (quad.point && dn && dn < chargeDistance2) {\n\t            var k = quad.pointCharge / dn;\n\t            node.px -= dx * k;\n\t            node.py -= dy * k;\n\t          }\n\t        }\n\t        return !quad.charge;\n\t      };\n\t    }\n\t    force.tick = function() {\n\t      if ((alpha *= .99) < .005) {\n\t        event.end({\n\t          type: \"end\",\n\t          alpha: alpha = 0\n\t        });\n\t        return true;\n\t      }\n\t      var n = nodes.length, m = links.length, q, i, o, s, t, l, k, x, y;\n\t      for (i = 0; i < m; ++i) {\n\t        o = links[i];\n\t        s = o.source;\n\t        t = o.target;\n\t        x = t.x - s.x;\n\t        y = t.y - s.y;\n\t        if (l = x * x + y * y) {\n\t          l = alpha * strengths[i] * ((l = Math.sqrt(l)) - distances[i]) / l;\n\t          x *= l;\n\t          y *= l;\n\t          t.x -= x * (k = s.weight / (t.weight + s.weight));\n\t          t.y -= y * k;\n\t          s.x += x * (k = 1 - k);\n\t          s.y += y * k;\n\t        }\n\t      }\n\t      if (k = alpha * gravity) {\n\t        x = size[0] / 2;\n\t        y = size[1] / 2;\n\t        i = -1;\n\t        if (k) while (++i < n) {\n\t          o = nodes[i];\n\t          o.x += (x - o.x) * k;\n\t          o.y += (y - o.y) * k;\n\t        }\n\t      }\n\t      if (charge) {\n\t        d3_layout_forceAccumulate(q = d3.geom.quadtree(nodes), alpha, charges);\n\t        i = -1;\n\t        while (++i < n) {\n\t          if (!(o = nodes[i]).fixed) {\n\t            q.visit(repulse(o));\n\t          }\n\t        }\n\t      }\n\t      i = -1;\n\t      while (++i < n) {\n\t        o = nodes[i];\n\t        if (o.fixed) {\n\t          o.x = o.px;\n\t          o.y = o.py;\n\t        } else {\n\t          o.x -= (o.px - (o.px = o.x)) * friction;\n\t          o.y -= (o.py - (o.py = o.y)) * friction;\n\t        }\n\t      }\n\t      event.tick({\n\t        type: \"tick\",\n\t        alpha: alpha\n\t      });\n\t    };\n\t    force.nodes = function(x) {\n\t      if (!arguments.length) return nodes;\n\t      nodes = x;\n\t      return force;\n\t    };\n\t    force.links = function(x) {\n\t      if (!arguments.length) return links;\n\t      links = x;\n\t      return force;\n\t    };\n\t    force.size = function(x) {\n\t      if (!arguments.length) return size;\n\t      size = x;\n\t      return force;\n\t    };\n\t    force.linkDistance = function(x) {\n\t      if (!arguments.length) return linkDistance;\n\t      linkDistance = typeof x === \"function\" ? x : +x;\n\t      return force;\n\t    };\n\t    force.distance = force.linkDistance;\n\t    force.linkStrength = function(x) {\n\t      if (!arguments.length) return linkStrength;\n\t      linkStrength = typeof x === \"function\" ? x : +x;\n\t      return force;\n\t    };\n\t    force.friction = function(x) {\n\t      if (!arguments.length) return friction;\n\t      friction = +x;\n\t      return force;\n\t    };\n\t    force.charge = function(x) {\n\t      if (!arguments.length) return charge;\n\t      charge = typeof x === \"function\" ? x : +x;\n\t      return force;\n\t    };\n\t    force.chargeDistance = function(x) {\n\t      if (!arguments.length) return Math.sqrt(chargeDistance2);\n\t      chargeDistance2 = x * x;\n\t      return force;\n\t    };\n\t    force.gravity = function(x) {\n\t      if (!arguments.length) return gravity;\n\t      gravity = +x;\n\t      return force;\n\t    };\n\t    force.theta = function(x) {\n\t      if (!arguments.length) return Math.sqrt(theta2);\n\t      theta2 = x * x;\n\t      return force;\n\t    };\n\t    force.alpha = function(x) {\n\t      if (!arguments.length) return alpha;\n\t      x = +x;\n\t      if (alpha) {\n\t        if (x > 0) alpha = x; else alpha = 0;\n\t      } else if (x > 0) {\n\t        event.start({\n\t          type: \"start\",\n\t          alpha: alpha = x\n\t        });\n\t        d3.timer(force.tick);\n\t      }\n\t      return force;\n\t    };\n\t    force.start = function() {\n\t      var i, n = nodes.length, m = links.length, w = size[0], h = size[1], neighbors, o;\n\t      for (i = 0; i < n; ++i) {\n\t        (o = nodes[i]).index = i;\n\t        o.weight = 0;\n\t      }\n\t      for (i = 0; i < m; ++i) {\n\t        o = links[i];\n\t        if (typeof o.source == \"number\") o.source = nodes[o.source];\n\t        if (typeof o.target == \"number\") o.target = nodes[o.target];\n\t        ++o.source.weight;\n\t        ++o.target.weight;\n\t      }\n\t      for (i = 0; i < n; ++i) {\n\t        o = nodes[i];\n\t        if (isNaN(o.x)) o.x = position(\"x\", w);\n\t        if (isNaN(o.y)) o.y = position(\"y\", h);\n\t        if (isNaN(o.px)) o.px = o.x;\n\t        if (isNaN(o.py)) o.py = o.y;\n\t      }\n\t      distances = [];\n\t      if (typeof linkDistance === \"function\") for (i = 0; i < m; ++i) distances[i] = +linkDistance.call(this, links[i], i); else for (i = 0; i < m; ++i) distances[i] = linkDistance;\n\t      strengths = [];\n\t      if (typeof linkStrength === \"function\") for (i = 0; i < m; ++i) strengths[i] = +linkStrength.call(this, links[i], i); else for (i = 0; i < m; ++i) strengths[i] = linkStrength;\n\t      charges = [];\n\t      if (typeof charge === \"function\") for (i = 0; i < n; ++i) charges[i] = +charge.call(this, nodes[i], i); else for (i = 0; i < n; ++i) charges[i] = charge;\n\t      function position(dimension, size) {\n\t        if (!neighbors) {\n\t          neighbors = new Array(n);\n\t          for (j = 0; j < n; ++j) {\n\t            neighbors[j] = [];\n\t          }\n\t          for (j = 0; j < m; ++j) {\n\t            var o = links[j];\n\t            neighbors[o.source.index].push(o.target);\n\t            neighbors[o.target.index].push(o.source);\n\t          }\n\t        }\n\t        var candidates = neighbors[i], j = -1, m = candidates.length, x;\n\t        while (++j < m) if (!isNaN(x = candidates[j][dimension])) return x;\n\t        return Math.random() * size;\n\t      }\n\t      return force.resume();\n\t    };\n\t    force.resume = function() {\n\t      return force.alpha(.1);\n\t    };\n\t    force.stop = function() {\n\t      return force.alpha(0);\n\t    };\n\t    force.drag = function() {\n\t      if (!drag) drag = d3.behavior.drag().origin(d3_identity).on(\"dragstart.force\", d3_layout_forceDragstart).on(\"drag.force\", dragmove).on(\"dragend.force\", d3_layout_forceDragend);\n\t      if (!arguments.length) return drag;\n\t      this.on(\"mouseover.force\", d3_layout_forceMouseover).on(\"mouseout.force\", d3_layout_forceMouseout).call(drag);\n\t    };\n\t    function dragmove(d) {\n\t      d.px = d3.event.x, d.py = d3.event.y;\n\t      force.resume();\n\t    }\n\t    return d3.rebind(force, event, \"on\");\n\t  };\n\t  function d3_layout_forceDragstart(d) {\n\t    d.fixed |= 2;\n\t  }\n\t  function d3_layout_forceDragend(d) {\n\t    d.fixed &= ~6;\n\t  }\n\t  function d3_layout_forceMouseover(d) {\n\t    d.fixed |= 4;\n\t    d.px = d.x, d.py = d.y;\n\t  }\n\t  function d3_layout_forceMouseout(d) {\n\t    d.fixed &= ~4;\n\t  }\n\t  function d3_layout_forceAccumulate(quad, alpha, charges) {\n\t    var cx = 0, cy = 0;\n\t    quad.charge = 0;\n\t    if (!quad.leaf) {\n\t      var nodes = quad.nodes, n = nodes.length, i = -1, c;\n\t      while (++i < n) {\n\t        c = nodes[i];\n\t        if (c == null) continue;\n\t        d3_layout_forceAccumulate(c, alpha, charges);\n\t        quad.charge += c.charge;\n\t        cx += c.charge * c.cx;\n\t        cy += c.charge * c.cy;\n\t      }\n\t    }\n\t    if (quad.point) {\n\t      if (!quad.leaf) {\n\t        quad.point.x += Math.random() - .5;\n\t        quad.point.y += Math.random() - .5;\n\t      }\n\t      var k = alpha * charges[quad.point.index];\n\t      quad.charge += quad.pointCharge = k;\n\t      cx += k * quad.point.x;\n\t      cy += k * quad.point.y;\n\t    }\n\t    quad.cx = cx / quad.charge;\n\t    quad.cy = cy / quad.charge;\n\t  }\n\t  var d3_layout_forceLinkDistance = 20, d3_layout_forceLinkStrength = 1, d3_layout_forceChargeDistance2 = Infinity;\n\t  d3.layout.hierarchy = function() {\n\t    var sort = d3_layout_hierarchySort, children = d3_layout_hierarchyChildren, value = d3_layout_hierarchyValue;\n\t    function hierarchy(root) {\n\t      var stack = [ root ], nodes = [], node;\n\t      root.depth = 0;\n\t      while ((node = stack.pop()) != null) {\n\t        nodes.push(node);\n\t        if ((childs = children.call(hierarchy, node, node.depth)) && (n = childs.length)) {\n\t          var n, childs, child;\n\t          while (--n >= 0) {\n\t            stack.push(child = childs[n]);\n\t            child.parent = node;\n\t            child.depth = node.depth + 1;\n\t          }\n\t          if (value) node.value = 0;\n\t          node.children = childs;\n\t        } else {\n\t          if (value) node.value = +value.call(hierarchy, node, node.depth) || 0;\n\t          delete node.children;\n\t        }\n\t      }\n\t      d3_layout_hierarchyVisitAfter(root, function(node) {\n\t        var childs, parent;\n\t        if (sort && (childs = node.children)) childs.sort(sort);\n\t        if (value && (parent = node.parent)) parent.value += node.value;\n\t      });\n\t      return nodes;\n\t    }\n\t    hierarchy.sort = function(x) {\n\t      if (!arguments.length) return sort;\n\t      sort = x;\n\t      return hierarchy;\n\t    };\n\t    hierarchy.children = function(x) {\n\t      if (!arguments.length) return children;\n\t      children = x;\n\t      return hierarchy;\n\t    };\n\t    hierarchy.value = function(x) {\n\t      if (!arguments.length) return value;\n\t      value = x;\n\t      return hierarchy;\n\t    };\n\t    hierarchy.revalue = function(root) {\n\t      if (value) {\n\t        d3_layout_hierarchyVisitBefore(root, function(node) {\n\t          if (node.children) node.value = 0;\n\t        });\n\t        d3_layout_hierarchyVisitAfter(root, function(node) {\n\t          var parent;\n\t          if (!node.children) node.value = +value.call(hierarchy, node, node.depth) || 0;\n\t          if (parent = node.parent) parent.value += node.value;\n\t        });\n\t      }\n\t      return root;\n\t    };\n\t    return hierarchy;\n\t  };\n\t  function d3_layout_hierarchyRebind(object, hierarchy) {\n\t    d3.rebind(object, hierarchy, \"sort\", \"children\", \"value\");\n\t    object.nodes = object;\n\t    object.links = d3_layout_hierarchyLinks;\n\t    return object;\n\t  }\n\t  function d3_layout_hierarchyVisitBefore(node, callback) {\n\t    var nodes = [ node ];\n\t    while ((node = nodes.pop()) != null) {\n\t      callback(node);\n\t      if ((children = node.children) && (n = children.length)) {\n\t        var n, children;\n\t        while (--n >= 0) nodes.push(children[n]);\n\t      }\n\t    }\n\t  }\n\t  function d3_layout_hierarchyVisitAfter(node, callback) {\n\t    var nodes = [ node ], nodes2 = [];\n\t    while ((node = nodes.pop()) != null) {\n\t      nodes2.push(node);\n\t      if ((children = node.children) && (n = children.length)) {\n\t        var i = -1, n, children;\n\t        while (++i < n) nodes.push(children[i]);\n\t      }\n\t    }\n\t    while ((node = nodes2.pop()) != null) {\n\t      callback(node);\n\t    }\n\t  }\n\t  function d3_layout_hierarchyChildren(d) {\n\t    return d.children;\n\t  }\n\t  function d3_layout_hierarchyValue(d) {\n\t    return d.value;\n\t  }\n\t  function d3_layout_hierarchySort(a, b) {\n\t    return b.value - a.value;\n\t  }\n\t  function d3_layout_hierarchyLinks(nodes) {\n\t    return d3.merge(nodes.map(function(parent) {\n\t      return (parent.children || []).map(function(child) {\n\t        return {\n\t          source: parent,\n\t          target: child\n\t        };\n\t      });\n\t    }));\n\t  }\n\t  d3.layout.partition = function() {\n\t    var hierarchy = d3.layout.hierarchy(), size = [ 1, 1 ];\n\t    function position(node, x, dx, dy) {\n\t      var children = node.children;\n\t      node.x = x;\n\t      node.y = node.depth * dy;\n\t      node.dx = dx;\n\t      node.dy = dy;\n\t      if (children && (n = children.length)) {\n\t        var i = -1, n, c, d;\n\t        dx = node.value ? dx / node.value : 0;\n\t        while (++i < n) {\n\t          position(c = children[i], x, d = c.value * dx, dy);\n\t          x += d;\n\t        }\n\t      }\n\t    }\n\t    function depth(node) {\n\t      var children = node.children, d = 0;\n\t      if (children && (n = children.length)) {\n\t        var i = -1, n;\n\t        while (++i < n) d = Math.max(d, depth(children[i]));\n\t      }\n\t      return 1 + d;\n\t    }\n\t    function partition(d, i) {\n\t      var nodes = hierarchy.call(this, d, i);\n\t      position(nodes[0], 0, size[0], size[1] / depth(nodes[0]));\n\t      return nodes;\n\t    }\n\t    partition.size = function(x) {\n\t      if (!arguments.length) return size;\n\t      size = x;\n\t      return partition;\n\t    };\n\t    return d3_layout_hierarchyRebind(partition, hierarchy);\n\t  };\n\t  d3.layout.pie = function() {\n\t    var value = Number, sort = d3_layout_pieSortByValue, startAngle = 0, endAngle = τ, padAngle = 0;\n\t    function pie(data) {\n\t      var n = data.length, values = data.map(function(d, i) {\n\t        return +value.call(pie, d, i);\n\t      }), a = +(typeof startAngle === \"function\" ? startAngle.apply(this, arguments) : startAngle), da = (typeof endAngle === \"function\" ? endAngle.apply(this, arguments) : endAngle) - a, p = Math.min(Math.abs(da) / n, +(typeof padAngle === \"function\" ? padAngle.apply(this, arguments) : padAngle)), pa = p * (da < 0 ? -1 : 1), k = (da - n * pa) / d3.sum(values), index = d3.range(n), arcs = [], v;\n\t      if (sort != null) index.sort(sort === d3_layout_pieSortByValue ? function(i, j) {\n\t        return values[j] - values[i];\n\t      } : function(i, j) {\n\t        return sort(data[i], data[j]);\n\t      });\n\t      index.forEach(function(i) {\n\t        arcs[i] = {\n\t          data: data[i],\n\t          value: v = values[i],\n\t          startAngle: a,\n\t          endAngle: a += v * k + pa,\n\t          padAngle: p\n\t        };\n\t      });\n\t      return arcs;\n\t    }\n\t    pie.value = function(_) {\n\t      if (!arguments.length) return value;\n\t      value = _;\n\t      return pie;\n\t    };\n\t    pie.sort = function(_) {\n\t      if (!arguments.length) return sort;\n\t      sort = _;\n\t      return pie;\n\t    };\n\t    pie.startAngle = function(_) {\n\t      if (!arguments.length) return startAngle;\n\t      startAngle = _;\n\t      return pie;\n\t    };\n\t    pie.endAngle = function(_) {\n\t      if (!arguments.length) return endAngle;\n\t      endAngle = _;\n\t      return pie;\n\t    };\n\t    pie.padAngle = function(_) {\n\t      if (!arguments.length) return padAngle;\n\t      padAngle = _;\n\t      return pie;\n\t    };\n\t    return pie;\n\t  };\n\t  var d3_layout_pieSortByValue = {};\n\t  d3.layout.stack = function() {\n\t    var values = d3_identity, order = d3_layout_stackOrderDefault, offset = d3_layout_stackOffsetZero, out = d3_layout_stackOut, x = d3_layout_stackX, y = d3_layout_stackY;\n\t    function stack(data, index) {\n\t      if (!(n = data.length)) return data;\n\t      var series = data.map(function(d, i) {\n\t        return values.call(stack, d, i);\n\t      });\n\t      var points = series.map(function(d) {\n\t        return d.map(function(v, i) {\n\t          return [ x.call(stack, v, i), y.call(stack, v, i) ];\n\t        });\n\t      });\n\t      var orders = order.call(stack, points, index);\n\t      series = d3.permute(series, orders);\n\t      points = d3.permute(points, orders);\n\t      var offsets = offset.call(stack, points, index);\n\t      var m = series[0].length, n, i, j, o;\n\t      for (j = 0; j < m; ++j) {\n\t        out.call(stack, series[0][j], o = offsets[j], points[0][j][1]);\n\t        for (i = 1; i < n; ++i) {\n\t          out.call(stack, series[i][j], o += points[i - 1][j][1], points[i][j][1]);\n\t        }\n\t      }\n\t      return data;\n\t    }\n\t    stack.values = function(x) {\n\t      if (!arguments.length) return values;\n\t      values = x;\n\t      return stack;\n\t    };\n\t    stack.order = function(x) {\n\t      if (!arguments.length) return order;\n\t      order = typeof x === \"function\" ? x : d3_layout_stackOrders.get(x) || d3_layout_stackOrderDefault;\n\t      return stack;\n\t    };\n\t    stack.offset = function(x) {\n\t      if (!arguments.length) return offset;\n\t      offset = typeof x === \"function\" ? x : d3_layout_stackOffsets.get(x) || d3_layout_stackOffsetZero;\n\t      return stack;\n\t    };\n\t    stack.x = function(z) {\n\t      if (!arguments.length) return x;\n\t      x = z;\n\t      return stack;\n\t    };\n\t    stack.y = function(z) {\n\t      if (!arguments.length) return y;\n\t      y = z;\n\t      return stack;\n\t    };\n\t    stack.out = function(z) {\n\t      if (!arguments.length) return out;\n\t      out = z;\n\t      return stack;\n\t    };\n\t    return stack;\n\t  };\n\t  function d3_layout_stackX(d) {\n\t    return d.x;\n\t  }\n\t  function d3_layout_stackY(d) {\n\t    return d.y;\n\t  }\n\t  function d3_layout_stackOut(d, y0, y) {\n\t    d.y0 = y0;\n\t    d.y = y;\n\t  }\n\t  var d3_layout_stackOrders = d3.map({\n\t    \"inside-out\": function(data) {\n\t      var n = data.length, i, j, max = data.map(d3_layout_stackMaxIndex), sums = data.map(d3_layout_stackReduceSum), index = d3.range(n).sort(function(a, b) {\n\t        return max[a] - max[b];\n\t      }), top = 0, bottom = 0, tops = [], bottoms = [];\n\t      for (i = 0; i < n; ++i) {\n\t        j = index[i];\n\t        if (top < bottom) {\n\t          top += sums[j];\n\t          tops.push(j);\n\t        } else {\n\t          bottom += sums[j];\n\t          bottoms.push(j);\n\t        }\n\t      }\n\t      return bottoms.reverse().concat(tops);\n\t    },\n\t    reverse: function(data) {\n\t      return d3.range(data.length).reverse();\n\t    },\n\t    \"default\": d3_layout_stackOrderDefault\n\t  });\n\t  var d3_layout_stackOffsets = d3.map({\n\t    silhouette: function(data) {\n\t      var n = data.length, m = data[0].length, sums = [], max = 0, i, j, o, y0 = [];\n\t      for (j = 0; j < m; ++j) {\n\t        for (i = 0, o = 0; i < n; i++) o += data[i][j][1];\n\t        if (o > max) max = o;\n\t        sums.push(o);\n\t      }\n\t      for (j = 0; j < m; ++j) {\n\t        y0[j] = (max - sums[j]) / 2;\n\t      }\n\t      return y0;\n\t    },\n\t    wiggle: function(data) {\n\t      var n = data.length, x = data[0], m = x.length, i, j, k, s1, s2, s3, dx, o, o0, y0 = [];\n\t      y0[0] = o = o0 = 0;\n\t      for (j = 1; j < m; ++j) {\n\t        for (i = 0, s1 = 0; i < n; ++i) s1 += data[i][j][1];\n\t        for (i = 0, s2 = 0, dx = x[j][0] - x[j - 1][0]; i < n; ++i) {\n\t          for (k = 0, s3 = (data[i][j][1] - data[i][j - 1][1]) / (2 * dx); k < i; ++k) {\n\t            s3 += (data[k][j][1] - data[k][j - 1][1]) / dx;\n\t          }\n\t          s2 += s3 * data[i][j][1];\n\t        }\n\t        y0[j] = o -= s1 ? s2 / s1 * dx : 0;\n\t        if (o < o0) o0 = o;\n\t      }\n\t      for (j = 0; j < m; ++j) y0[j] -= o0;\n\t      return y0;\n\t    },\n\t    expand: function(data) {\n\t      var n = data.length, m = data[0].length, k = 1 / n, i, j, o, y0 = [];\n\t      for (j = 0; j < m; ++j) {\n\t        for (i = 0, o = 0; i < n; i++) o += data[i][j][1];\n\t        if (o) for (i = 0; i < n; i++) data[i][j][1] /= o; else for (i = 0; i < n; i++) data[i][j][1] = k;\n\t      }\n\t      for (j = 0; j < m; ++j) y0[j] = 0;\n\t      return y0;\n\t    },\n\t    zero: d3_layout_stackOffsetZero\n\t  });\n\t  function d3_layout_stackOrderDefault(data) {\n\t    return d3.range(data.length);\n\t  }\n\t  function d3_layout_stackOffsetZero(data) {\n\t    var j = -1, m = data[0].length, y0 = [];\n\t    while (++j < m) y0[j] = 0;\n\t    return y0;\n\t  }\n\t  function d3_layout_stackMaxIndex(array) {\n\t    var i = 1, j = 0, v = array[0][1], k, n = array.length;\n\t    for (;i < n; ++i) {\n\t      if ((k = array[i][1]) > v) {\n\t        j = i;\n\t        v = k;\n\t      }\n\t    }\n\t    return j;\n\t  }\n\t  function d3_layout_stackReduceSum(d) {\n\t    return d.reduce(d3_layout_stackSum, 0);\n\t  }\n\t  function d3_layout_stackSum(p, d) {\n\t    return p + d[1];\n\t  }\n\t  d3.layout.histogram = function() {\n\t    var frequency = true, valuer = Number, ranger = d3_layout_histogramRange, binner = d3_layout_histogramBinSturges;\n\t    function histogram(data, i) {\n\t      var bins = [], values = data.map(valuer, this), range = ranger.call(this, values, i), thresholds = binner.call(this, range, values, i), bin, i = -1, n = values.length, m = thresholds.length - 1, k = frequency ? 1 : 1 / n, x;\n\t      while (++i < m) {\n\t        bin = bins[i] = [];\n\t        bin.dx = thresholds[i + 1] - (bin.x = thresholds[i]);\n\t        bin.y = 0;\n\t      }\n\t      if (m > 0) {\n\t        i = -1;\n\t        while (++i < n) {\n\t          x = values[i];\n\t          if (x >= range[0] && x <= range[1]) {\n\t            bin = bins[d3.bisect(thresholds, x, 1, m) - 1];\n\t            bin.y += k;\n\t            bin.push(data[i]);\n\t          }\n\t        }\n\t      }\n\t      return bins;\n\t    }\n\t    histogram.value = function(x) {\n\t      if (!arguments.length) return valuer;\n\t      valuer = x;\n\t      return histogram;\n\t    };\n\t    histogram.range = function(x) {\n\t      if (!arguments.length) return ranger;\n\t      ranger = d3_functor(x);\n\t      return histogram;\n\t    };\n\t    histogram.bins = function(x) {\n\t      if (!arguments.length) return binner;\n\t      binner = typeof x === \"number\" ? function(range) {\n\t        return d3_layout_histogramBinFixed(range, x);\n\t      } : d3_functor(x);\n\t      return histogram;\n\t    };\n\t    histogram.frequency = function(x) {\n\t      if (!arguments.length) return frequency;\n\t      frequency = !!x;\n\t      return histogram;\n\t    };\n\t    return histogram;\n\t  };\n\t  function d3_layout_histogramBinSturges(range, values) {\n\t    return d3_layout_histogramBinFixed(range, Math.ceil(Math.log(values.length) / Math.LN2 + 1));\n\t  }\n\t  function d3_layout_histogramBinFixed(range, n) {\n\t    var x = -1, b = +range[0], m = (range[1] - b) / n, f = [];\n\t    while (++x <= n) f[x] = m * x + b;\n\t    return f;\n\t  }\n\t  function d3_layout_histogramRange(values) {\n\t    return [ d3.min(values), d3.max(values) ];\n\t  }\n\t  d3.layout.pack = function() {\n\t    var hierarchy = d3.layout.hierarchy().sort(d3_layout_packSort), padding = 0, size = [ 1, 1 ], radius;\n\t    function pack(d, i) {\n\t      var nodes = hierarchy.call(this, d, i), root = nodes[0], w = size[0], h = size[1], r = radius == null ? Math.sqrt : typeof radius === \"function\" ? radius : function() {\n\t        return radius;\n\t      };\n\t      root.x = root.y = 0;\n\t      d3_layout_hierarchyVisitAfter(root, function(d) {\n\t        d.r = +r(d.value);\n\t      });\n\t      d3_layout_hierarchyVisitAfter(root, d3_layout_packSiblings);\n\t      if (padding) {\n\t        var dr = padding * (radius ? 1 : Math.max(2 * root.r / w, 2 * root.r / h)) / 2;\n\t        d3_layout_hierarchyVisitAfter(root, function(d) {\n\t          d.r += dr;\n\t        });\n\t        d3_layout_hierarchyVisitAfter(root, d3_layout_packSiblings);\n\t        d3_layout_hierarchyVisitAfter(root, function(d) {\n\t          d.r -= dr;\n\t        });\n\t      }\n\t      d3_layout_packTransform(root, w / 2, h / 2, radius ? 1 : 1 / Math.max(2 * root.r / w, 2 * root.r / h));\n\t      return nodes;\n\t    }\n\t    pack.size = function(_) {\n\t      if (!arguments.length) return size;\n\t      size = _;\n\t      return pack;\n\t    };\n\t    pack.radius = function(_) {\n\t      if (!arguments.length) return radius;\n\t      radius = _ == null || typeof _ === \"function\" ? _ : +_;\n\t      return pack;\n\t    };\n\t    pack.padding = function(_) {\n\t      if (!arguments.length) return padding;\n\t      padding = +_;\n\t      return pack;\n\t    };\n\t    return d3_layout_hierarchyRebind(pack, hierarchy);\n\t  };\n\t  function d3_layout_packSort(a, b) {\n\t    return a.value - b.value;\n\t  }\n\t  function d3_layout_packInsert(a, b) {\n\t    var c = a._pack_next;\n\t    a._pack_next = b;\n\t    b._pack_prev = a;\n\t    b._pack_next = c;\n\t    c._pack_prev = b;\n\t  }\n\t  function d3_layout_packSplice(a, b) {\n\t    a._pack_next = b;\n\t    b._pack_prev = a;\n\t  }\n\t  function d3_layout_packIntersects(a, b) {\n\t    var dx = b.x - a.x, dy = b.y - a.y, dr = a.r + b.r;\n\t    return .999 * dr * dr > dx * dx + dy * dy;\n\t  }\n\t  function d3_layout_packSiblings(node) {\n\t    if (!(nodes = node.children) || !(n = nodes.length)) return;\n\t    var nodes, xMin = Infinity, xMax = -Infinity, yMin = Infinity, yMax = -Infinity, a, b, c, i, j, k, n;\n\t    function bound(node) {\n\t      xMin = Math.min(node.x - node.r, xMin);\n\t      xMax = Math.max(node.x + node.r, xMax);\n\t      yMin = Math.min(node.y - node.r, yMin);\n\t      yMax = Math.max(node.y + node.r, yMax);\n\t    }\n\t    nodes.forEach(d3_layout_packLink);\n\t    a = nodes[0];\n\t    a.x = -a.r;\n\t    a.y = 0;\n\t    bound(a);\n\t    if (n > 1) {\n\t      b = nodes[1];\n\t      b.x = b.r;\n\t      b.y = 0;\n\t      bound(b);\n\t      if (n > 2) {\n\t        c = nodes[2];\n\t        d3_layout_packPlace(a, b, c);\n\t        bound(c);\n\t        d3_layout_packInsert(a, c);\n\t        a._pack_prev = c;\n\t        d3_layout_packInsert(c, b);\n\t        b = a._pack_next;\n\t        for (i = 3; i < n; i++) {\n\t          d3_layout_packPlace(a, b, c = nodes[i]);\n\t          var isect = 0, s1 = 1, s2 = 1;\n\t          for (j = b._pack_next; j !== b; j = j._pack_next, s1++) {\n\t            if (d3_layout_packIntersects(j, c)) {\n\t              isect = 1;\n\t              break;\n\t            }\n\t          }\n\t          if (isect == 1) {\n\t            for (k = a._pack_prev; k !== j._pack_prev; k = k._pack_prev, s2++) {\n\t              if (d3_layout_packIntersects(k, c)) {\n\t                break;\n\t              }\n\t            }\n\t          }\n\t          if (isect) {\n\t            if (s1 < s2 || s1 == s2 && b.r < a.r) d3_layout_packSplice(a, b = j); else d3_layout_packSplice(a = k, b);\n\t            i--;\n\t          } else {\n\t            d3_layout_packInsert(a, c);\n\t            b = c;\n\t            bound(c);\n\t          }\n\t        }\n\t      }\n\t    }\n\t    var cx = (xMin + xMax) / 2, cy = (yMin + yMax) / 2, cr = 0;\n\t    for (i = 0; i < n; i++) {\n\t      c = nodes[i];\n\t      c.x -= cx;\n\t      c.y -= cy;\n\t      cr = Math.max(cr, c.r + Math.sqrt(c.x * c.x + c.y * c.y));\n\t    }\n\t    node.r = cr;\n\t    nodes.forEach(d3_layout_packUnlink);\n\t  }\n\t  function d3_layout_packLink(node) {\n\t    node._pack_next = node._pack_prev = node;\n\t  }\n\t  function d3_layout_packUnlink(node) {\n\t    delete node._pack_next;\n\t    delete node._pack_prev;\n\t  }\n\t  function d3_layout_packTransform(node, x, y, k) {\n\t    var children = node.children;\n\t    node.x = x += k * node.x;\n\t    node.y = y += k * node.y;\n\t    node.r *= k;\n\t    if (children) {\n\t      var i = -1, n = children.length;\n\t      while (++i < n) d3_layout_packTransform(children[i], x, y, k);\n\t    }\n\t  }\n\t  function d3_layout_packPlace(a, b, c) {\n\t    var db = a.r + c.r, dx = b.x - a.x, dy = b.y - a.y;\n\t    if (db && (dx || dy)) {\n\t      var da = b.r + c.r, dc = dx * dx + dy * dy;\n\t      da *= da;\n\t      db *= db;\n\t      var x = .5 + (db - da) / (2 * dc), y = Math.sqrt(Math.max(0, 2 * da * (db + dc) - (db -= dc) * db - da * da)) / (2 * dc);\n\t      c.x = a.x + x * dx + y * dy;\n\t      c.y = a.y + x * dy - y * dx;\n\t    } else {\n\t      c.x = a.x + db;\n\t      c.y = a.y;\n\t    }\n\t  }\n\t  d3.layout.tree = function() {\n\t    var hierarchy = d3.layout.hierarchy().sort(null).value(null), separation = d3_layout_treeSeparation, size = [ 1, 1 ], nodeSize = null;\n\t    function tree(d, i) {\n\t      var nodes = hierarchy.call(this, d, i), root0 = nodes[0], root1 = wrapTree(root0);\n\t      d3_layout_hierarchyVisitAfter(root1, firstWalk), root1.parent.m = -root1.z;\n\t      d3_layout_hierarchyVisitBefore(root1, secondWalk);\n\t      if (nodeSize) d3_layout_hierarchyVisitBefore(root0, sizeNode); else {\n\t        var left = root0, right = root0, bottom = root0;\n\t        d3_layout_hierarchyVisitBefore(root0, function(node) {\n\t          if (node.x < left.x) left = node;\n\t          if (node.x > right.x) right = node;\n\t          if (node.depth > bottom.depth) bottom = node;\n\t        });\n\t        var tx = separation(left, right) / 2 - left.x, kx = size[0] / (right.x + separation(right, left) / 2 + tx), ky = size[1] / (bottom.depth || 1);\n\t        d3_layout_hierarchyVisitBefore(root0, function(node) {\n\t          node.x = (node.x + tx) * kx;\n\t          node.y = node.depth * ky;\n\t        });\n\t      }\n\t      return nodes;\n\t    }\n\t    function wrapTree(root0) {\n\t      var root1 = {\n\t        A: null,\n\t        children: [ root0 ]\n\t      }, queue = [ root1 ], node1;\n\t      while ((node1 = queue.pop()) != null) {\n\t        for (var children = node1.children, child, i = 0, n = children.length; i < n; ++i) {\n\t          queue.push((children[i] = child = {\n\t            _: children[i],\n\t            parent: node1,\n\t            children: (child = children[i].children) && child.slice() || [],\n\t            A: null,\n\t            a: null,\n\t            z: 0,\n\t            m: 0,\n\t            c: 0,\n\t            s: 0,\n\t            t: null,\n\t            i: i\n\t          }).a = child);\n\t        }\n\t      }\n\t      return root1.children[0];\n\t    }\n\t    function firstWalk(v) {\n\t      var children = v.children, siblings = v.parent.children, w = v.i ? siblings[v.i - 1] : null;\n\t      if (children.length) {\n\t        d3_layout_treeShift(v);\n\t        var midpoint = (children[0].z + children[children.length - 1].z) / 2;\n\t        if (w) {\n\t          v.z = w.z + separation(v._, w._);\n\t          v.m = v.z - midpoint;\n\t        } else {\n\t          v.z = midpoint;\n\t        }\n\t      } else if (w) {\n\t        v.z = w.z + separation(v._, w._);\n\t      }\n\t      v.parent.A = apportion(v, w, v.parent.A || siblings[0]);\n\t    }\n\t    function secondWalk(v) {\n\t      v._.x = v.z + v.parent.m;\n\t      v.m += v.parent.m;\n\t    }\n\t    function apportion(v, w, ancestor) {\n\t      if (w) {\n\t        var vip = v, vop = v, vim = w, vom = vip.parent.children[0], sip = vip.m, sop = vop.m, sim = vim.m, som = vom.m, shift;\n\t        while (vim = d3_layout_treeRight(vim), vip = d3_layout_treeLeft(vip), vim && vip) {\n\t          vom = d3_layout_treeLeft(vom);\n\t          vop = d3_layout_treeRight(vop);\n\t          vop.a = v;\n\t          shift = vim.z + sim - vip.z - sip + separation(vim._, vip._);\n\t          if (shift > 0) {\n\t            d3_layout_treeMove(d3_layout_treeAncestor(vim, v, ancestor), v, shift);\n\t            sip += shift;\n\t            sop += shift;\n\t          }\n\t          sim += vim.m;\n\t          sip += vip.m;\n\t          som += vom.m;\n\t          sop += vop.m;\n\t        }\n\t        if (vim && !d3_layout_treeRight(vop)) {\n\t          vop.t = vim;\n\t          vop.m += sim - sop;\n\t        }\n\t        if (vip && !d3_layout_treeLeft(vom)) {\n\t          vom.t = vip;\n\t          vom.m += sip - som;\n\t          ancestor = v;\n\t        }\n\t      }\n\t      return ancestor;\n\t    }\n\t    function sizeNode(node) {\n\t      node.x *= size[0];\n\t      node.y = node.depth * size[1];\n\t    }\n\t    tree.separation = function(x) {\n\t      if (!arguments.length) return separation;\n\t      separation = x;\n\t      return tree;\n\t    };\n\t    tree.size = function(x) {\n\t      if (!arguments.length) return nodeSize ? null : size;\n\t      nodeSize = (size = x) == null ? sizeNode : null;\n\t      return tree;\n\t    };\n\t    tree.nodeSize = function(x) {\n\t      if (!arguments.length) return nodeSize ? size : null;\n\t      nodeSize = (size = x) == null ? null : sizeNode;\n\t      return tree;\n\t    };\n\t    return d3_layout_hierarchyRebind(tree, hierarchy);\n\t  };\n\t  function d3_layout_treeSeparation(a, b) {\n\t    return a.parent == b.parent ? 1 : 2;\n\t  }\n\t  function d3_layout_treeLeft(v) {\n\t    var children = v.children;\n\t    return children.length ? children[0] : v.t;\n\t  }\n\t  function d3_layout_treeRight(v) {\n\t    var children = v.children, n;\n\t    return (n = children.length) ? children[n - 1] : v.t;\n\t  }\n\t  function d3_layout_treeMove(wm, wp, shift) {\n\t    var change = shift / (wp.i - wm.i);\n\t    wp.c -= change;\n\t    wp.s += shift;\n\t    wm.c += change;\n\t    wp.z += shift;\n\t    wp.m += shift;\n\t  }\n\t  function d3_layout_treeShift(v) {\n\t    var shift = 0, change = 0, children = v.children, i = children.length, w;\n\t    while (--i >= 0) {\n\t      w = children[i];\n\t      w.z += shift;\n\t      w.m += shift;\n\t      shift += w.s + (change += w.c);\n\t    }\n\t  }\n\t  function d3_layout_treeAncestor(vim, v, ancestor) {\n\t    return vim.a.parent === v.parent ? vim.a : ancestor;\n\t  }\n\t  d3.layout.cluster = function() {\n\t    var hierarchy = d3.layout.hierarchy().sort(null).value(null), separation = d3_layout_treeSeparation, size = [ 1, 1 ], nodeSize = false;\n\t    function cluster(d, i) {\n\t      var nodes = hierarchy.call(this, d, i), root = nodes[0], previousNode, x = 0;\n\t      d3_layout_hierarchyVisitAfter(root, function(node) {\n\t        var children = node.children;\n\t        if (children && children.length) {\n\t          node.x = d3_layout_clusterX(children);\n\t          node.y = d3_layout_clusterY(children);\n\t        } else {\n\t          node.x = previousNode ? x += separation(node, previousNode) : 0;\n\t          node.y = 0;\n\t          previousNode = node;\n\t        }\n\t      });\n\t      var left = d3_layout_clusterLeft(root), right = d3_layout_clusterRight(root), x0 = left.x - separation(left, right) / 2, x1 = right.x + separation(right, left) / 2;\n\t      d3_layout_hierarchyVisitAfter(root, nodeSize ? function(node) {\n\t        node.x = (node.x - root.x) * size[0];\n\t        node.y = (root.y - node.y) * size[1];\n\t      } : function(node) {\n\t        node.x = (node.x - x0) / (x1 - x0) * size[0];\n\t        node.y = (1 - (root.y ? node.y / root.y : 1)) * size[1];\n\t      });\n\t      return nodes;\n\t    }\n\t    cluster.separation = function(x) {\n\t      if (!arguments.length) return separation;\n\t      separation = x;\n\t      return cluster;\n\t    };\n\t    cluster.size = function(x) {\n\t      if (!arguments.length) return nodeSize ? null : size;\n\t      nodeSize = (size = x) == null;\n\t      return cluster;\n\t    };\n\t    cluster.nodeSize = function(x) {\n\t      if (!arguments.length) return nodeSize ? size : null;\n\t      nodeSize = (size = x) != null;\n\t      return cluster;\n\t    };\n\t    return d3_layout_hierarchyRebind(cluster, hierarchy);\n\t  };\n\t  function d3_layout_clusterY(children) {\n\t    return 1 + d3.max(children, function(child) {\n\t      return child.y;\n\t    });\n\t  }\n\t  function d3_layout_clusterX(children) {\n\t    return children.reduce(function(x, child) {\n\t      return x + child.x;\n\t    }, 0) / children.length;\n\t  }\n\t  function d3_layout_clusterLeft(node) {\n\t    var children = node.children;\n\t    return children && children.length ? d3_layout_clusterLeft(children[0]) : node;\n\t  }\n\t  function d3_layout_clusterRight(node) {\n\t    var children = node.children, n;\n\t    return children && (n = children.length) ? d3_layout_clusterRight(children[n - 1]) : node;\n\t  }\n\t  d3.layout.treemap = function() {\n\t    var hierarchy = d3.layout.hierarchy(), round = Math.round, size = [ 1, 1 ], padding = null, pad = d3_layout_treemapPadNull, sticky = false, stickies, mode = \"squarify\", ratio = .5 * (1 + Math.sqrt(5));\n\t    function scale(children, k) {\n\t      var i = -1, n = children.length, child, area;\n\t      while (++i < n) {\n\t        area = (child = children[i]).value * (k < 0 ? 0 : k);\n\t        child.area = isNaN(area) || area <= 0 ? 0 : area;\n\t      }\n\t    }\n\t    function squarify(node) {\n\t      var children = node.children;\n\t      if (children && children.length) {\n\t        var rect = pad(node), row = [], remaining = children.slice(), child, best = Infinity, score, u = mode === \"slice\" ? rect.dx : mode === \"dice\" ? rect.dy : mode === \"slice-dice\" ? node.depth & 1 ? rect.dy : rect.dx : Math.min(rect.dx, rect.dy), n;\n\t        scale(remaining, rect.dx * rect.dy / node.value);\n\t        row.area = 0;\n\t        while ((n = remaining.length) > 0) {\n\t          row.push(child = remaining[n - 1]);\n\t          row.area += child.area;\n\t          if (mode !== \"squarify\" || (score = worst(row, u)) <= best) {\n\t            remaining.pop();\n\t            best = score;\n\t          } else {\n\t            row.area -= row.pop().area;\n\t            position(row, u, rect, false);\n\t            u = Math.min(rect.dx, rect.dy);\n\t            row.length = row.area = 0;\n\t            best = Infinity;\n\t          }\n\t        }\n\t        if (row.length) {\n\t          position(row, u, rect, true);\n\t          row.length = row.area = 0;\n\t        }\n\t        children.forEach(squarify);\n\t      }\n\t    }\n\t    function stickify(node) {\n\t      var children = node.children;\n\t      if (children && children.length) {\n\t        var rect = pad(node), remaining = children.slice(), child, row = [];\n\t        scale(remaining, rect.dx * rect.dy / node.value);\n\t        row.area = 0;\n\t        while (child = remaining.pop()) {\n\t          row.push(child);\n\t          row.area += child.area;\n\t          if (child.z != null) {\n\t            position(row, child.z ? rect.dx : rect.dy, rect, !remaining.length);\n\t            row.length = row.area = 0;\n\t          }\n\t        }\n\t        children.forEach(stickify);\n\t      }\n\t    }\n\t    function worst(row, u) {\n\t      var s = row.area, r, rmax = 0, rmin = Infinity, i = -1, n = row.length;\n\t      while (++i < n) {\n\t        if (!(r = row[i].area)) continue;\n\t        if (r < rmin) rmin = r;\n\t        if (r > rmax) rmax = r;\n\t      }\n\t      s *= s;\n\t      u *= u;\n\t      return s ? Math.max(u * rmax * ratio / s, s / (u * rmin * ratio)) : Infinity;\n\t    }\n\t    function position(row, u, rect, flush) {\n\t      var i = -1, n = row.length, x = rect.x, y = rect.y, v = u ? round(row.area / u) : 0, o;\n\t      if (u == rect.dx) {\n\t        if (flush || v > rect.dy) v = rect.dy;\n\t        while (++i < n) {\n\t          o = row[i];\n\t          o.x = x;\n\t          o.y = y;\n\t          o.dy = v;\n\t          x += o.dx = Math.min(rect.x + rect.dx - x, v ? round(o.area / v) : 0);\n\t        }\n\t        o.z = true;\n\t        o.dx += rect.x + rect.dx - x;\n\t        rect.y += v;\n\t        rect.dy -= v;\n\t      } else {\n\t        if (flush || v > rect.dx) v = rect.dx;\n\t        while (++i < n) {\n\t          o = row[i];\n\t          o.x = x;\n\t          o.y = y;\n\t          o.dx = v;\n\t          y += o.dy = Math.min(rect.y + rect.dy - y, v ? round(o.area / v) : 0);\n\t        }\n\t        o.z = false;\n\t        o.dy += rect.y + rect.dy - y;\n\t        rect.x += v;\n\t        rect.dx -= v;\n\t      }\n\t    }\n\t    function treemap(d) {\n\t      var nodes = stickies || hierarchy(d), root = nodes[0];\n\t      root.x = 0;\n\t      root.y = 0;\n\t      root.dx = size[0];\n\t      root.dy = size[1];\n\t      if (stickies) hierarchy.revalue(root);\n\t      scale([ root ], root.dx * root.dy / root.value);\n\t      (stickies ? stickify : squarify)(root);\n\t      if (sticky) stickies = nodes;\n\t      return nodes;\n\t    }\n\t    treemap.size = function(x) {\n\t      if (!arguments.length) return size;\n\t      size = x;\n\t      return treemap;\n\t    };\n\t    treemap.padding = function(x) {\n\t      if (!arguments.length) return padding;\n\t      function padFunction(node) {\n\t        var p = x.call(treemap, node, node.depth);\n\t        return p == null ? d3_layout_treemapPadNull(node) : d3_layout_treemapPad(node, typeof p === \"number\" ? [ p, p, p, p ] : p);\n\t      }\n\t      function padConstant(node) {\n\t        return d3_layout_treemapPad(node, x);\n\t      }\n\t      var type;\n\t      pad = (padding = x) == null ? d3_layout_treemapPadNull : (type = typeof x) === \"function\" ? padFunction : type === \"number\" ? (x = [ x, x, x, x ], \n\t      padConstant) : padConstant;\n\t      return treemap;\n\t    };\n\t    treemap.round = function(x) {\n\t      if (!arguments.length) return round != Number;\n\t      round = x ? Math.round : Number;\n\t      return treemap;\n\t    };\n\t    treemap.sticky = function(x) {\n\t      if (!arguments.length) return sticky;\n\t      sticky = x;\n\t      stickies = null;\n\t      return treemap;\n\t    };\n\t    treemap.ratio = function(x) {\n\t      if (!arguments.length) return ratio;\n\t      ratio = x;\n\t      return treemap;\n\t    };\n\t    treemap.mode = function(x) {\n\t      if (!arguments.length) return mode;\n\t      mode = x + \"\";\n\t      return treemap;\n\t    };\n\t    return d3_layout_hierarchyRebind(treemap, hierarchy);\n\t  };\n\t  function d3_layout_treemapPadNull(node) {\n\t    return {\n\t      x: node.x,\n\t      y: node.y,\n\t      dx: node.dx,\n\t      dy: node.dy\n\t    };\n\t  }\n\t  function d3_layout_treemapPad(node, padding) {\n\t    var x = node.x + padding[3], y = node.y + padding[0], dx = node.dx - padding[1] - padding[3], dy = node.dy - padding[0] - padding[2];\n\t    if (dx < 0) {\n\t      x += dx / 2;\n\t      dx = 0;\n\t    }\n\t    if (dy < 0) {\n\t      y += dy / 2;\n\t      dy = 0;\n\t    }\n\t    return {\n\t      x: x,\n\t      y: y,\n\t      dx: dx,\n\t      dy: dy\n\t    };\n\t  }\n\t  d3.random = {\n\t    normal: function(µ, σ) {\n\t      var n = arguments.length;\n\t      if (n < 2) σ = 1;\n\t      if (n < 1) µ = 0;\n\t      return function() {\n\t        var x, y, r;\n\t        do {\n\t          x = Math.random() * 2 - 1;\n\t          y = Math.random() * 2 - 1;\n\t          r = x * x + y * y;\n\t        } while (!r || r > 1);\n\t        return µ + σ * x * Math.sqrt(-2 * Math.log(r) / r);\n\t      };\n\t    },\n\t    logNormal: function() {\n\t      var random = d3.random.normal.apply(d3, arguments);\n\t      return function() {\n\t        return Math.exp(random());\n\t      };\n\t    },\n\t    bates: function(m) {\n\t      var random = d3.random.irwinHall(m);\n\t      return function() {\n\t        return random() / m;\n\t      };\n\t    },\n\t    irwinHall: function(m) {\n\t      return function() {\n\t        for (var s = 0, j = 0; j < m; j++) s += Math.random();\n\t        return s;\n\t      };\n\t    }\n\t  };\n\t  d3.scale = {};\n\t  function d3_scaleExtent(domain) {\n\t    var start = domain[0], stop = domain[domain.length - 1];\n\t    return start < stop ? [ start, stop ] : [ stop, start ];\n\t  }\n\t  function d3_scaleRange(scale) {\n\t    return scale.rangeExtent ? scale.rangeExtent() : d3_scaleExtent(scale.range());\n\t  }\n\t  function d3_scale_bilinear(domain, range, uninterpolate, interpolate) {\n\t    var u = uninterpolate(domain[0], domain[1]), i = interpolate(range[0], range[1]);\n\t    return function(x) {\n\t      return i(u(x));\n\t    };\n\t  }\n\t  function d3_scale_nice(domain, nice) {\n\t    var i0 = 0, i1 = domain.length - 1, x0 = domain[i0], x1 = domain[i1], dx;\n\t    if (x1 < x0) {\n\t      dx = i0, i0 = i1, i1 = dx;\n\t      dx = x0, x0 = x1, x1 = dx;\n\t    }\n\t    domain[i0] = nice.floor(x0);\n\t    domain[i1] = nice.ceil(x1);\n\t    return domain;\n\t  }\n\t  function d3_scale_niceStep(step) {\n\t    return step ? {\n\t      floor: function(x) {\n\t        return Math.floor(x / step) * step;\n\t      },\n\t      ceil: function(x) {\n\t        return Math.ceil(x / step) * step;\n\t      }\n\t    } : d3_scale_niceIdentity;\n\t  }\n\t  var d3_scale_niceIdentity = {\n\t    floor: d3_identity,\n\t    ceil: d3_identity\n\t  };\n\t  function d3_scale_polylinear(domain, range, uninterpolate, interpolate) {\n\t    var u = [], i = [], j = 0, k = Math.min(domain.length, range.length) - 1;\n\t    if (domain[k] < domain[0]) {\n\t      domain = domain.slice().reverse();\n\t      range = range.slice().reverse();\n\t    }\n\t    while (++j <= k) {\n\t      u.push(uninterpolate(domain[j - 1], domain[j]));\n\t      i.push(interpolate(range[j - 1], range[j]));\n\t    }\n\t    return function(x) {\n\t      var j = d3.bisect(domain, x, 1, k) - 1;\n\t      return i[j](u[j](x));\n\t    };\n\t  }\n\t  d3.scale.linear = function() {\n\t    return d3_scale_linear([ 0, 1 ], [ 0, 1 ], d3_interpolate, false);\n\t  };\n\t  function d3_scale_linear(domain, range, interpolate, clamp) {\n\t    var output, input;\n\t    function rescale() {\n\t      var linear = Math.min(domain.length, range.length) > 2 ? d3_scale_polylinear : d3_scale_bilinear, uninterpolate = clamp ? d3_uninterpolateClamp : d3_uninterpolateNumber;\n\t      output = linear(domain, range, uninterpolate, interpolate);\n\t      input = linear(range, domain, uninterpolate, d3_interpolate);\n\t      return scale;\n\t    }\n\t    function scale(x) {\n\t      return output(x);\n\t    }\n\t    scale.invert = function(y) {\n\t      return input(y);\n\t    };\n\t    scale.domain = function(x) {\n\t      if (!arguments.length) return domain;\n\t      domain = x.map(Number);\n\t      return rescale();\n\t    };\n\t    scale.range = function(x) {\n\t      if (!arguments.length) return range;\n\t      range = x;\n\t      return rescale();\n\t    };\n\t    scale.rangeRound = function(x) {\n\t      return scale.range(x).interpolate(d3_interpolateRound);\n\t    };\n\t    scale.clamp = function(x) {\n\t      if (!arguments.length) return clamp;\n\t      clamp = x;\n\t      return rescale();\n\t    };\n\t    scale.interpolate = function(x) {\n\t      if (!arguments.length) return interpolate;\n\t      interpolate = x;\n\t      return rescale();\n\t    };\n\t    scale.ticks = function(m) {\n\t      return d3_scale_linearTicks(domain, m);\n\t    };\n\t    scale.tickFormat = function(m, format) {\n\t      return d3_scale_linearTickFormat(domain, m, format);\n\t    };\n\t    scale.nice = function(m) {\n\t      d3_scale_linearNice(domain, m);\n\t      return rescale();\n\t    };\n\t    scale.copy = function() {\n\t      return d3_scale_linear(domain, range, interpolate, clamp);\n\t    };\n\t    return rescale();\n\t  }\n\t  function d3_scale_linearRebind(scale, linear) {\n\t    return d3.rebind(scale, linear, \"range\", \"rangeRound\", \"interpolate\", \"clamp\");\n\t  }\n\t  function d3_scale_linearNice(domain, m) {\n\t    return d3_scale_nice(domain, d3_scale_niceStep(d3_scale_linearTickRange(domain, m)[2]));\n\t  }\n\t  function d3_scale_linearTickRange(domain, m) {\n\t    if (m == null) m = 10;\n\t    var extent = d3_scaleExtent(domain), span = extent[1] - extent[0], step = Math.pow(10, Math.floor(Math.log(span / m) / Math.LN10)), err = m / span * step;\n\t    if (err <= .15) step *= 10; else if (err <= .35) step *= 5; else if (err <= .75) step *= 2;\n\t    extent[0] = Math.ceil(extent[0] / step) * step;\n\t    extent[1] = Math.floor(extent[1] / step) * step + step * .5;\n\t    extent[2] = step;\n\t    return extent;\n\t  }\n\t  function d3_scale_linearTicks(domain, m) {\n\t    return d3.range.apply(d3, d3_scale_linearTickRange(domain, m));\n\t  }\n\t  function d3_scale_linearTickFormat(domain, m, format) {\n\t    var range = d3_scale_linearTickRange(domain, m);\n\t    if (format) {\n\t      var match = d3_format_re.exec(format);\n\t      match.shift();\n\t      if (match[8] === \"s\") {\n\t        var prefix = d3.formatPrefix(Math.max(abs(range[0]), abs(range[1])));\n\t        if (!match[7]) match[7] = \".\" + d3_scale_linearPrecision(prefix.scale(range[2]));\n\t        match[8] = \"f\";\n\t        format = d3.format(match.join(\"\"));\n\t        return function(d) {\n\t          return format(prefix.scale(d)) + prefix.symbol;\n\t        };\n\t      }\n\t      if (!match[7]) match[7] = \".\" + d3_scale_linearFormatPrecision(match[8], range);\n\t      format = match.join(\"\");\n\t    } else {\n\t      format = \",.\" + d3_scale_linearPrecision(range[2]) + \"f\";\n\t    }\n\t    return d3.format(format);\n\t  }\n\t  var d3_scale_linearFormatSignificant = {\n\t    s: 1,\n\t    g: 1,\n\t    p: 1,\n\t    r: 1,\n\t    e: 1\n\t  };\n\t  function d3_scale_linearPrecision(value) {\n\t    return -Math.floor(Math.log(value) / Math.LN10 + .01);\n\t  }\n\t  function d3_scale_linearFormatPrecision(type, range) {\n\t    var p = d3_scale_linearPrecision(range[2]);\n\t    return type in d3_scale_linearFormatSignificant ? Math.abs(p - d3_scale_linearPrecision(Math.max(abs(range[0]), abs(range[1])))) + +(type !== \"e\") : p - (type === \"%\") * 2;\n\t  }\n\t  d3.scale.log = function() {\n\t    return d3_scale_log(d3.scale.linear().domain([ 0, 1 ]), 10, true, [ 1, 10 ]);\n\t  };\n\t  function d3_scale_log(linear, base, positive, domain) {\n\t    function log(x) {\n\t      return (positive ? Math.log(x < 0 ? 0 : x) : -Math.log(x > 0 ? 0 : -x)) / Math.log(base);\n\t    }\n\t    function pow(x) {\n\t      return positive ? Math.pow(base, x) : -Math.pow(base, -x);\n\t    }\n\t    function scale(x) {\n\t      return linear(log(x));\n\t    }\n\t    scale.invert = function(x) {\n\t      return pow(linear.invert(x));\n\t    };\n\t    scale.domain = function(x) {\n\t      if (!arguments.length) return domain;\n\t      positive = x[0] >= 0;\n\t      linear.domain((domain = x.map(Number)).map(log));\n\t      return scale;\n\t    };\n\t    scale.base = function(_) {\n\t      if (!arguments.length) return base;\n\t      base = +_;\n\t      linear.domain(domain.map(log));\n\t      return scale;\n\t    };\n\t    scale.nice = function() {\n\t      var niced = d3_scale_nice(domain.map(log), positive ? Math : d3_scale_logNiceNegative);\n\t      linear.domain(niced);\n\t      domain = niced.map(pow);\n\t      return scale;\n\t    };\n\t    scale.ticks = function() {\n\t      var extent = d3_scaleExtent(domain), ticks = [], u = extent[0], v = extent[1], i = Math.floor(log(u)), j = Math.ceil(log(v)), n = base % 1 ? 2 : base;\n\t      if (isFinite(j - i)) {\n\t        if (positive) {\n\t          for (;i < j; i++) for (var k = 1; k < n; k++) ticks.push(pow(i) * k);\n\t          ticks.push(pow(i));\n\t        } else {\n\t          ticks.push(pow(i));\n\t          for (;i++ < j; ) for (var k = n - 1; k > 0; k--) ticks.push(pow(i) * k);\n\t        }\n\t        for (i = 0; ticks[i] < u; i++) {}\n\t        for (j = ticks.length; ticks[j - 1] > v; j--) {}\n\t        ticks = ticks.slice(i, j);\n\t      }\n\t      return ticks;\n\t    };\n\t    scale.tickFormat = function(n, format) {\n\t      if (!arguments.length) return d3_scale_logFormat;\n\t      if (arguments.length < 2) format = d3_scale_logFormat; else if (typeof format !== \"function\") format = d3.format(format);\n\t      var k = Math.max(.1, n / scale.ticks().length), f = positive ? (e = 1e-12, Math.ceil) : (e = -1e-12, \n\t      Math.floor), e;\n\t      return function(d) {\n\t        return d / pow(f(log(d) + e)) <= k ? format(d) : \"\";\n\t      };\n\t    };\n\t    scale.copy = function() {\n\t      return d3_scale_log(linear.copy(), base, positive, domain);\n\t    };\n\t    return d3_scale_linearRebind(scale, linear);\n\t  }\n\t  var d3_scale_logFormat = d3.format(\".0e\"), d3_scale_logNiceNegative = {\n\t    floor: function(x) {\n\t      return -Math.ceil(-x);\n\t    },\n\t    ceil: function(x) {\n\t      return -Math.floor(-x);\n\t    }\n\t  };\n\t  d3.scale.pow = function() {\n\t    return d3_scale_pow(d3.scale.linear(), 1, [ 0, 1 ]);\n\t  };\n\t  function d3_scale_pow(linear, exponent, domain) {\n\t    var powp = d3_scale_powPow(exponent), powb = d3_scale_powPow(1 / exponent);\n\t    function scale(x) {\n\t      return linear(powp(x));\n\t    }\n\t    scale.invert = function(x) {\n\t      return powb(linear.invert(x));\n\t    };\n\t    scale.domain = function(x) {\n\t      if (!arguments.length) return domain;\n\t      linear.domain((domain = x.map(Number)).map(powp));\n\t      return scale;\n\t    };\n\t    scale.ticks = function(m) {\n\t      return d3_scale_linearTicks(domain, m);\n\t    };\n\t    scale.tickFormat = function(m, format) {\n\t      return d3_scale_linearTickFormat(domain, m, format);\n\t    };\n\t    scale.nice = function(m) {\n\t      return scale.domain(d3_scale_linearNice(domain, m));\n\t    };\n\t    scale.exponent = function(x) {\n\t      if (!arguments.length) return exponent;\n\t      powp = d3_scale_powPow(exponent = x);\n\t      powb = d3_scale_powPow(1 / exponent);\n\t      linear.domain(domain.map(powp));\n\t      return scale;\n\t    };\n\t    scale.copy = function() {\n\t      return d3_scale_pow(linear.copy(), exponent, domain);\n\t    };\n\t    return d3_scale_linearRebind(scale, linear);\n\t  }\n\t  function d3_scale_powPow(e) {\n\t    return function(x) {\n\t      return x < 0 ? -Math.pow(-x, e) : Math.pow(x, e);\n\t    };\n\t  }\n\t  d3.scale.sqrt = function() {\n\t    return d3.scale.pow().exponent(.5);\n\t  };\n\t  d3.scale.ordinal = function() {\n\t    return d3_scale_ordinal([], {\n\t      t: \"range\",\n\t      a: [ [] ]\n\t    });\n\t  };\n\t  function d3_scale_ordinal(domain, ranger) {\n\t    var index, range, rangeBand;\n\t    function scale(x) {\n\t      return range[((index.get(x) || (ranger.t === \"range\" ? index.set(x, domain.push(x)) : NaN)) - 1) % range.length];\n\t    }\n\t    function steps(start, step) {\n\t      return d3.range(domain.length).map(function(i) {\n\t        return start + step * i;\n\t      });\n\t    }\n\t    scale.domain = function(x) {\n\t      if (!arguments.length) return domain;\n\t      domain = [];\n\t      index = new d3_Map();\n\t      var i = -1, n = x.length, xi;\n\t      while (++i < n) if (!index.has(xi = x[i])) index.set(xi, domain.push(xi));\n\t      return scale[ranger.t].apply(scale, ranger.a);\n\t    };\n\t    scale.range = function(x) {\n\t      if (!arguments.length) return range;\n\t      range = x;\n\t      rangeBand = 0;\n\t      ranger = {\n\t        t: \"range\",\n\t        a: arguments\n\t      };\n\t      return scale;\n\t    };\n\t    scale.rangePoints = function(x, padding) {\n\t      if (arguments.length < 2) padding = 0;\n\t      var start = x[0], stop = x[1], step = domain.length < 2 ? (start = (start + stop) / 2, \n\t      0) : (stop - start) / (domain.length - 1 + padding);\n\t      range = steps(start + step * padding / 2, step);\n\t      rangeBand = 0;\n\t      ranger = {\n\t        t: \"rangePoints\",\n\t        a: arguments\n\t      };\n\t      return scale;\n\t    };\n\t    scale.rangeRoundPoints = function(x, padding) {\n\t      if (arguments.length < 2) padding = 0;\n\t      var start = x[0], stop = x[1], step = domain.length < 2 ? (start = stop = Math.round((start + stop) / 2), \n\t      0) : (stop - start) / (domain.length - 1 + padding) | 0;\n\t      range = steps(start + Math.round(step * padding / 2 + (stop - start - (domain.length - 1 + padding) * step) / 2), step);\n\t      rangeBand = 0;\n\t      ranger = {\n\t        t: \"rangeRoundPoints\",\n\t        a: arguments\n\t      };\n\t      return scale;\n\t    };\n\t    scale.rangeBands = function(x, padding, outerPadding) {\n\t      if (arguments.length < 2) padding = 0;\n\t      if (arguments.length < 3) outerPadding = padding;\n\t      var reverse = x[1] < x[0], start = x[reverse - 0], stop = x[1 - reverse], step = (stop - start) / (domain.length - padding + 2 * outerPadding);\n\t      range = steps(start + step * outerPadding, step);\n\t      if (reverse) range.reverse();\n\t      rangeBand = step * (1 - padding);\n\t      ranger = {\n\t        t: \"rangeBands\",\n\t        a: arguments\n\t      };\n\t      return scale;\n\t    };\n\t    scale.rangeRoundBands = function(x, padding, outerPadding) {\n\t      if (arguments.length < 2) padding = 0;\n\t      if (arguments.length < 3) outerPadding = padding;\n\t      var reverse = x[1] < x[0], start = x[reverse - 0], stop = x[1 - reverse], step = Math.floor((stop - start) / (domain.length - padding + 2 * outerPadding));\n\t      range = steps(start + Math.round((stop - start - (domain.length - padding) * step) / 2), step);\n\t      if (reverse) range.reverse();\n\t      rangeBand = Math.round(step * (1 - padding));\n\t      ranger = {\n\t        t: \"rangeRoundBands\",\n\t        a: arguments\n\t      };\n\t      return scale;\n\t    };\n\t    scale.rangeBand = function() {\n\t      return rangeBand;\n\t    };\n\t    scale.rangeExtent = function() {\n\t      return d3_scaleExtent(ranger.a[0]);\n\t    };\n\t    scale.copy = function() {\n\t      return d3_scale_ordinal(domain, ranger);\n\t    };\n\t    return scale.domain(domain);\n\t  }\n\t  d3.scale.category10 = function() {\n\t    return d3.scale.ordinal().range(d3_category10);\n\t  };\n\t  d3.scale.category20 = function() {\n\t    return d3.scale.ordinal().range(d3_category20);\n\t  };\n\t  d3.scale.category20b = function() {\n\t    return d3.scale.ordinal().range(d3_category20b);\n\t  };\n\t  d3.scale.category20c = function() {\n\t    return d3.scale.ordinal().range(d3_category20c);\n\t  };\n\t  var d3_category10 = [ 2062260, 16744206, 2924588, 14034728, 9725885, 9197131, 14907330, 8355711, 12369186, 1556175 ].map(d3_rgbString);\n\t  var d3_category20 = [ 2062260, 11454440, 16744206, 16759672, 2924588, 10018698, 14034728, 16750742, 9725885, 12955861, 9197131, 12885140, 14907330, 16234194, 8355711, 13092807, 12369186, 14408589, 1556175, 10410725 ].map(d3_rgbString);\n\t  var d3_category20b = [ 3750777, 5395619, 7040719, 10264286, 6519097, 9216594, 11915115, 13556636, 9202993, 12426809, 15186514, 15190932, 8666169, 11356490, 14049643, 15177372, 8077683, 10834324, 13528509, 14589654 ].map(d3_rgbString);\n\t  var d3_category20c = [ 3244733, 7057110, 10406625, 13032431, 15095053, 16616764, 16625259, 16634018, 3253076, 7652470, 10607003, 13101504, 7695281, 10394312, 12369372, 14342891, 6513507, 9868950, 12434877, 14277081 ].map(d3_rgbString);\n\t  d3.scale.quantile = function() {\n\t    return d3_scale_quantile([], []);\n\t  };\n\t  function d3_scale_quantile(domain, range) {\n\t    var thresholds;\n\t    function rescale() {\n\t      var k = 0, q = range.length;\n\t      thresholds = [];\n\t      while (++k < q) thresholds[k - 1] = d3.quantile(domain, k / q);\n\t      return scale;\n\t    }\n\t    function scale(x) {\n\t      if (!isNaN(x = +x)) return range[d3.bisect(thresholds, x)];\n\t    }\n\t    scale.domain = function(x) {\n\t      if (!arguments.length) return domain;\n\t      domain = x.map(d3_number).filter(d3_numeric).sort(d3_ascending);\n\t      return rescale();\n\t    };\n\t    scale.range = function(x) {\n\t      if (!arguments.length) return range;\n\t      range = x;\n\t      return rescale();\n\t    };\n\t    scale.quantiles = function() {\n\t      return thresholds;\n\t    };\n\t    scale.invertExtent = function(y) {\n\t      y = range.indexOf(y);\n\t      return y < 0 ? [ NaN, NaN ] : [ y > 0 ? thresholds[y - 1] : domain[0], y < thresholds.length ? thresholds[y] : domain[domain.length - 1] ];\n\t    };\n\t    scale.copy = function() {\n\t      return d3_scale_quantile(domain, range);\n\t    };\n\t    return rescale();\n\t  }\n\t  d3.scale.quantize = function() {\n\t    return d3_scale_quantize(0, 1, [ 0, 1 ]);\n\t  };\n\t  function d3_scale_quantize(x0, x1, range) {\n\t    var kx, i;\n\t    function scale(x) {\n\t      return range[Math.max(0, Math.min(i, Math.floor(kx * (x - x0))))];\n\t    }\n\t    function rescale() {\n\t      kx = range.length / (x1 - x0);\n\t      i = range.length - 1;\n\t      return scale;\n\t    }\n\t    scale.domain = function(x) {\n\t      if (!arguments.length) return [ x0, x1 ];\n\t      x0 = +x[0];\n\t      x1 = +x[x.length - 1];\n\t      return rescale();\n\t    };\n\t    scale.range = function(x) {\n\t      if (!arguments.length) return range;\n\t      range = x;\n\t      return rescale();\n\t    };\n\t    scale.invertExtent = function(y) {\n\t      y = range.indexOf(y);\n\t      y = y < 0 ? NaN : y / kx + x0;\n\t      return [ y, y + 1 / kx ];\n\t    };\n\t    scale.copy = function() {\n\t      return d3_scale_quantize(x0, x1, range);\n\t    };\n\t    return rescale();\n\t  }\n\t  d3.scale.threshold = function() {\n\t    return d3_scale_threshold([ .5 ], [ 0, 1 ]);\n\t  };\n\t  function d3_scale_threshold(domain, range) {\n\t    function scale(x) {\n\t      if (x <= x) return range[d3.bisect(domain, x)];\n\t    }\n\t    scale.domain = function(_) {\n\t      if (!arguments.length) return domain;\n\t      domain = _;\n\t      return scale;\n\t    };\n\t    scale.range = function(_) {\n\t      if (!arguments.length) return range;\n\t      range = _;\n\t      return scale;\n\t    };\n\t    scale.invertExtent = function(y) {\n\t      y = range.indexOf(y);\n\t      return [ domain[y - 1], domain[y] ];\n\t    };\n\t    scale.copy = function() {\n\t      return d3_scale_threshold(domain, range);\n\t    };\n\t    return scale;\n\t  }\n\t  d3.scale.identity = function() {\n\t    return d3_scale_identity([ 0, 1 ]);\n\t  };\n\t  function d3_scale_identity(domain) {\n\t    function identity(x) {\n\t      return +x;\n\t    }\n\t    identity.invert = identity;\n\t    identity.domain = identity.range = function(x) {\n\t      if (!arguments.length) return domain;\n\t      domain = x.map(identity);\n\t      return identity;\n\t    };\n\t    identity.ticks = function(m) {\n\t      return d3_scale_linearTicks(domain, m);\n\t    };\n\t    identity.tickFormat = function(m, format) {\n\t      return d3_scale_linearTickFormat(domain, m, format);\n\t    };\n\t    identity.copy = function() {\n\t      return d3_scale_identity(domain);\n\t    };\n\t    return identity;\n\t  }\n\t  d3.svg = {};\n\t  function d3_zero() {\n\t    return 0;\n\t  }\n\t  d3.svg.arc = function() {\n\t    var innerRadius = d3_svg_arcInnerRadius, outerRadius = d3_svg_arcOuterRadius, cornerRadius = d3_zero, padRadius = d3_svg_arcAuto, startAngle = d3_svg_arcStartAngle, endAngle = d3_svg_arcEndAngle, padAngle = d3_svg_arcPadAngle;\n\t    function arc() {\n\t      var r0 = Math.max(0, +innerRadius.apply(this, arguments)), r1 = Math.max(0, +outerRadius.apply(this, arguments)), a0 = startAngle.apply(this, arguments) - halfπ, a1 = endAngle.apply(this, arguments) - halfπ, da = Math.abs(a1 - a0), cw = a0 > a1 ? 0 : 1;\n\t      if (r1 < r0) rc = r1, r1 = r0, r0 = rc;\n\t      if (da >= τε) return circleSegment(r1, cw) + (r0 ? circleSegment(r0, 1 - cw) : \"\") + \"Z\";\n\t      var rc, cr, rp, ap, p0 = 0, p1 = 0, x0, y0, x1, y1, x2, y2, x3, y3, path = [];\n\t      if (ap = (+padAngle.apply(this, arguments) || 0) / 2) {\n\t        rp = padRadius === d3_svg_arcAuto ? Math.sqrt(r0 * r0 + r1 * r1) : +padRadius.apply(this, arguments);\n\t        if (!cw) p1 *= -1;\n\t        if (r1) p1 = d3_asin(rp / r1 * Math.sin(ap));\n\t        if (r0) p0 = d3_asin(rp / r0 * Math.sin(ap));\n\t      }\n\t      if (r1) {\n\t        x0 = r1 * Math.cos(a0 + p1);\n\t        y0 = r1 * Math.sin(a0 + p1);\n\t        x1 = r1 * Math.cos(a1 - p1);\n\t        y1 = r1 * Math.sin(a1 - p1);\n\t        var l1 = Math.abs(a1 - a0 - 2 * p1) <= π ? 0 : 1;\n\t        if (p1 && d3_svg_arcSweep(x0, y0, x1, y1) === cw ^ l1) {\n\t          var h1 = (a0 + a1) / 2;\n\t          x0 = r1 * Math.cos(h1);\n\t          y0 = r1 * Math.sin(h1);\n\t          x1 = y1 = null;\n\t        }\n\t      } else {\n\t        x0 = y0 = 0;\n\t      }\n\t      if (r0) {\n\t        x2 = r0 * Math.cos(a1 - p0);\n\t        y2 = r0 * Math.sin(a1 - p0);\n\t        x3 = r0 * Math.cos(a0 + p0);\n\t        y3 = r0 * Math.sin(a0 + p0);\n\t        var l0 = Math.abs(a0 - a1 + 2 * p0) <= π ? 0 : 1;\n\t        if (p0 && d3_svg_arcSweep(x2, y2, x3, y3) === 1 - cw ^ l0) {\n\t          var h0 = (a0 + a1) / 2;\n\t          x2 = r0 * Math.cos(h0);\n\t          y2 = r0 * Math.sin(h0);\n\t          x3 = y3 = null;\n\t        }\n\t      } else {\n\t        x2 = y2 = 0;\n\t      }\n\t      if ((rc = Math.min(Math.abs(r1 - r0) / 2, +cornerRadius.apply(this, arguments))) > .001) {\n\t        cr = r0 < r1 ^ cw ? 0 : 1;\n\t        var oc = x3 == null ? [ x2, y2 ] : x1 == null ? [ x0, y0 ] : d3_geom_polygonIntersect([ x0, y0 ], [ x3, y3 ], [ x1, y1 ], [ x2, y2 ]), ax = x0 - oc[0], ay = y0 - oc[1], bx = x1 - oc[0], by = y1 - oc[1], kc = 1 / Math.sin(Math.acos((ax * bx + ay * by) / (Math.sqrt(ax * ax + ay * ay) * Math.sqrt(bx * bx + by * by))) / 2), lc = Math.sqrt(oc[0] * oc[0] + oc[1] * oc[1]);\n\t        if (x1 != null) {\n\t          var rc1 = Math.min(rc, (r1 - lc) / (kc + 1)), t30 = d3_svg_arcCornerTangents(x3 == null ? [ x2, y2 ] : [ x3, y3 ], [ x0, y0 ], r1, rc1, cw), t12 = d3_svg_arcCornerTangents([ x1, y1 ], [ x2, y2 ], r1, rc1, cw);\n\t          if (rc === rc1) {\n\t            path.push(\"M\", t30[0], \"A\", rc1, \",\", rc1, \" 0 0,\", cr, \" \", t30[1], \"A\", r1, \",\", r1, \" 0 \", 1 - cw ^ d3_svg_arcSweep(t30[1][0], t30[1][1], t12[1][0], t12[1][1]), \",\", cw, \" \", t12[1], \"A\", rc1, \",\", rc1, \" 0 0,\", cr, \" \", t12[0]);\n\t          } else {\n\t            path.push(\"M\", t30[0], \"A\", rc1, \",\", rc1, \" 0 1,\", cr, \" \", t12[0]);\n\t          }\n\t        } else {\n\t          path.push(\"M\", x0, \",\", y0);\n\t        }\n\t        if (x3 != null) {\n\t          var rc0 = Math.min(rc, (r0 - lc) / (kc - 1)), t03 = d3_svg_arcCornerTangents([ x0, y0 ], [ x3, y3 ], r0, -rc0, cw), t21 = d3_svg_arcCornerTangents([ x2, y2 ], x1 == null ? [ x0, y0 ] : [ x1, y1 ], r0, -rc0, cw);\n\t          if (rc === rc0) {\n\t            path.push(\"L\", t21[0], \"A\", rc0, \",\", rc0, \" 0 0,\", cr, \" \", t21[1], \"A\", r0, \",\", r0, \" 0 \", cw ^ d3_svg_arcSweep(t21[1][0], t21[1][1], t03[1][0], t03[1][1]), \",\", 1 - cw, \" \", t03[1], \"A\", rc0, \",\", rc0, \" 0 0,\", cr, \" \", t03[0]);\n\t          } else {\n\t            path.push(\"L\", t21[0], \"A\", rc0, \",\", rc0, \" 0 0,\", cr, \" \", t03[0]);\n\t          }\n\t        } else {\n\t          path.push(\"L\", x2, \",\", y2);\n\t        }\n\t      } else {\n\t        path.push(\"M\", x0, \",\", y0);\n\t        if (x1 != null) path.push(\"A\", r1, \",\", r1, \" 0 \", l1, \",\", cw, \" \", x1, \",\", y1);\n\t        path.push(\"L\", x2, \",\", y2);\n\t        if (x3 != null) path.push(\"A\", r0, \",\", r0, \" 0 \", l0, \",\", 1 - cw, \" \", x3, \",\", y3);\n\t      }\n\t      path.push(\"Z\");\n\t      return path.join(\"\");\n\t    }\n\t    function circleSegment(r1, cw) {\n\t      return \"M0,\" + r1 + \"A\" + r1 + \",\" + r1 + \" 0 1,\" + cw + \" 0,\" + -r1 + \"A\" + r1 + \",\" + r1 + \" 0 1,\" + cw + \" 0,\" + r1;\n\t    }\n\t    arc.innerRadius = function(v) {\n\t      if (!arguments.length) return innerRadius;\n\t      innerRadius = d3_functor(v);\n\t      return arc;\n\t    };\n\t    arc.outerRadius = function(v) {\n\t      if (!arguments.length) return outerRadius;\n\t      outerRadius = d3_functor(v);\n\t      return arc;\n\t    };\n\t    arc.cornerRadius = function(v) {\n\t      if (!arguments.length) return cornerRadius;\n\t      cornerRadius = d3_functor(v);\n\t      return arc;\n\t    };\n\t    arc.padRadius = function(v) {\n\t      if (!arguments.length) return padRadius;\n\t      padRadius = v == d3_svg_arcAuto ? d3_svg_arcAuto : d3_functor(v);\n\t      return arc;\n\t    };\n\t    arc.startAngle = function(v) {\n\t      if (!arguments.length) return startAngle;\n\t      startAngle = d3_functor(v);\n\t      return arc;\n\t    };\n\t    arc.endAngle = function(v) {\n\t      if (!arguments.length) return endAngle;\n\t      endAngle = d3_functor(v);\n\t      return arc;\n\t    };\n\t    arc.padAngle = function(v) {\n\t      if (!arguments.length) return padAngle;\n\t      padAngle = d3_functor(v);\n\t      return arc;\n\t    };\n\t    arc.centroid = function() {\n\t      var r = (+innerRadius.apply(this, arguments) + +outerRadius.apply(this, arguments)) / 2, a = (+startAngle.apply(this, arguments) + +endAngle.apply(this, arguments)) / 2 - halfπ;\n\t      return [ Math.cos(a) * r, Math.sin(a) * r ];\n\t    };\n\t    return arc;\n\t  };\n\t  var d3_svg_arcAuto = \"auto\";\n\t  function d3_svg_arcInnerRadius(d) {\n\t    return d.innerRadius;\n\t  }\n\t  function d3_svg_arcOuterRadius(d) {\n\t    return d.outerRadius;\n\t  }\n\t  function d3_svg_arcStartAngle(d) {\n\t    return d.startAngle;\n\t  }\n\t  function d3_svg_arcEndAngle(d) {\n\t    return d.endAngle;\n\t  }\n\t  function d3_svg_arcPadAngle(d) {\n\t    return d && d.padAngle;\n\t  }\n\t  function d3_svg_arcSweep(x0, y0, x1, y1) {\n\t    return (x0 - x1) * y0 - (y0 - y1) * x0 > 0 ? 0 : 1;\n\t  }\n\t  function d3_svg_arcCornerTangents(p0, p1, r1, rc, cw) {\n\t    var x01 = p0[0] - p1[0], y01 = p0[1] - p1[1], lo = (cw ? rc : -rc) / Math.sqrt(x01 * x01 + y01 * y01), ox = lo * y01, oy = -lo * x01, x1 = p0[0] + ox, y1 = p0[1] + oy, x2 = p1[0] + ox, y2 = p1[1] + oy, x3 = (x1 + x2) / 2, y3 = (y1 + y2) / 2, dx = x2 - x1, dy = y2 - y1, d2 = dx * dx + dy * dy, r = r1 - rc, D = x1 * y2 - x2 * y1, d = (dy < 0 ? -1 : 1) * Math.sqrt(r * r * d2 - D * D), cx0 = (D * dy - dx * d) / d2, cy0 = (-D * dx - dy * d) / d2, cx1 = (D * dy + dx * d) / d2, cy1 = (-D * dx + dy * d) / d2, dx0 = cx0 - x3, dy0 = cy0 - y3, dx1 = cx1 - x3, dy1 = cy1 - y3;\n\t    if (dx0 * dx0 + dy0 * dy0 > dx1 * dx1 + dy1 * dy1) cx0 = cx1, cy0 = cy1;\n\t    return [ [ cx0 - ox, cy0 - oy ], [ cx0 * r1 / r, cy0 * r1 / r ] ];\n\t  }\n\t  function d3_svg_line(projection) {\n\t    var x = d3_geom_pointX, y = d3_geom_pointY, defined = d3_true, interpolate = d3_svg_lineLinear, interpolateKey = interpolate.key, tension = .7;\n\t    function line(data) {\n\t      var segments = [], points = [], i = -1, n = data.length, d, fx = d3_functor(x), fy = d3_functor(y);\n\t      function segment() {\n\t        segments.push(\"M\", interpolate(projection(points), tension));\n\t      }\n\t      while (++i < n) {\n\t        if (defined.call(this, d = data[i], i)) {\n\t          points.push([ +fx.call(this, d, i), +fy.call(this, d, i) ]);\n\t        } else if (points.length) {\n\t          segment();\n\t          points = [];\n\t        }\n\t      }\n\t      if (points.length) segment();\n\t      return segments.length ? segments.join(\"\") : null;\n\t    }\n\t    line.x = function(_) {\n\t      if (!arguments.length) return x;\n\t      x = _;\n\t      return line;\n\t    };\n\t    line.y = function(_) {\n\t      if (!arguments.length) return y;\n\t      y = _;\n\t      return line;\n\t    };\n\t    line.defined = function(_) {\n\t      if (!arguments.length) return defined;\n\t      defined = _;\n\t      return line;\n\t    };\n\t    line.interpolate = function(_) {\n\t      if (!arguments.length) return interpolateKey;\n\t      if (typeof _ === \"function\") interpolateKey = interpolate = _; else interpolateKey = (interpolate = d3_svg_lineInterpolators.get(_) || d3_svg_lineLinear).key;\n\t      return line;\n\t    };\n\t    line.tension = function(_) {\n\t      if (!arguments.length) return tension;\n\t      tension = _;\n\t      return line;\n\t    };\n\t    return line;\n\t  }\n\t  d3.svg.line = function() {\n\t    return d3_svg_line(d3_identity);\n\t  };\n\t  var d3_svg_lineInterpolators = d3.map({\n\t    linear: d3_svg_lineLinear,\n\t    \"linear-closed\": d3_svg_lineLinearClosed,\n\t    step: d3_svg_lineStep,\n\t    \"step-before\": d3_svg_lineStepBefore,\n\t    \"step-after\": d3_svg_lineStepAfter,\n\t    basis: d3_svg_lineBasis,\n\t    \"basis-open\": d3_svg_lineBasisOpen,\n\t    \"basis-closed\": d3_svg_lineBasisClosed,\n\t    bundle: d3_svg_lineBundle,\n\t    cardinal: d3_svg_lineCardinal,\n\t    \"cardinal-open\": d3_svg_lineCardinalOpen,\n\t    \"cardinal-closed\": d3_svg_lineCardinalClosed,\n\t    monotone: d3_svg_lineMonotone\n\t  });\n\t  d3_svg_lineInterpolators.forEach(function(key, value) {\n\t    value.key = key;\n\t    value.closed = /-closed$/.test(key);\n\t  });\n\t  function d3_svg_lineLinear(points) {\n\t    return points.join(\"L\");\n\t  }\n\t  function d3_svg_lineLinearClosed(points) {\n\t    return d3_svg_lineLinear(points) + \"Z\";\n\t  }\n\t  function d3_svg_lineStep(points) {\n\t    var i = 0, n = points.length, p = points[0], path = [ p[0], \",\", p[1] ];\n\t    while (++i < n) path.push(\"H\", (p[0] + (p = points[i])[0]) / 2, \"V\", p[1]);\n\t    if (n > 1) path.push(\"H\", p[0]);\n\t    return path.join(\"\");\n\t  }\n\t  function d3_svg_lineStepBefore(points) {\n\t    var i = 0, n = points.length, p = points[0], path = [ p[0], \",\", p[1] ];\n\t    while (++i < n) path.push(\"V\", (p = points[i])[1], \"H\", p[0]);\n\t    return path.join(\"\");\n\t  }\n\t  function d3_svg_lineStepAfter(points) {\n\t    var i = 0, n = points.length, p = points[0], path = [ p[0], \",\", p[1] ];\n\t    while (++i < n) path.push(\"H\", (p = points[i])[0], \"V\", p[1]);\n\t    return path.join(\"\");\n\t  }\n\t  function d3_svg_lineCardinalOpen(points, tension) {\n\t    return points.length < 4 ? d3_svg_lineLinear(points) : points[1] + d3_svg_lineHermite(points.slice(1, -1), d3_svg_lineCardinalTangents(points, tension));\n\t  }\n\t  function d3_svg_lineCardinalClosed(points, tension) {\n\t    return points.length < 3 ? d3_svg_lineLinear(points) : points[0] + d3_svg_lineHermite((points.push(points[0]), \n\t    points), d3_svg_lineCardinalTangents([ points[points.length - 2] ].concat(points, [ points[1] ]), tension));\n\t  }\n\t  function d3_svg_lineCardinal(points, tension) {\n\t    return points.length < 3 ? d3_svg_lineLinear(points) : points[0] + d3_svg_lineHermite(points, d3_svg_lineCardinalTangents(points, tension));\n\t  }\n\t  function d3_svg_lineHermite(points, tangents) {\n\t    if (tangents.length < 1 || points.length != tangents.length && points.length != tangents.length + 2) {\n\t      return d3_svg_lineLinear(points);\n\t    }\n\t    var quad = points.length != tangents.length, path = \"\", p0 = points[0], p = points[1], t0 = tangents[0], t = t0, pi = 1;\n\t    if (quad) {\n\t      path += \"Q\" + (p[0] - t0[0] * 2 / 3) + \",\" + (p[1] - t0[1] * 2 / 3) + \",\" + p[0] + \",\" + p[1];\n\t      p0 = points[1];\n\t      pi = 2;\n\t    }\n\t    if (tangents.length > 1) {\n\t      t = tangents[1];\n\t      p = points[pi];\n\t      pi++;\n\t      path += \"C\" + (p0[0] + t0[0]) + \",\" + (p0[1] + t0[1]) + \",\" + (p[0] - t[0]) + \",\" + (p[1] - t[1]) + \",\" + p[0] + \",\" + p[1];\n\t      for (var i = 2; i < tangents.length; i++, pi++) {\n\t        p = points[pi];\n\t        t = tangents[i];\n\t        path += \"S\" + (p[0] - t[0]) + \",\" + (p[1] - t[1]) + \",\" + p[0] + \",\" + p[1];\n\t      }\n\t    }\n\t    if (quad) {\n\t      var lp = points[pi];\n\t      path += \"Q\" + (p[0] + t[0] * 2 / 3) + \",\" + (p[1] + t[1] * 2 / 3) + \",\" + lp[0] + \",\" + lp[1];\n\t    }\n\t    return path;\n\t  }\n\t  function d3_svg_lineCardinalTangents(points, tension) {\n\t    var tangents = [], a = (1 - tension) / 2, p0, p1 = points[0], p2 = points[1], i = 1, n = points.length;\n\t    while (++i < n) {\n\t      p0 = p1;\n\t      p1 = p2;\n\t      p2 = points[i];\n\t      tangents.push([ a * (p2[0] - p0[0]), a * (p2[1] - p0[1]) ]);\n\t    }\n\t    return tangents;\n\t  }\n\t  function d3_svg_lineBasis(points) {\n\t    if (points.length < 3) return d3_svg_lineLinear(points);\n\t    var i = 1, n = points.length, pi = points[0], x0 = pi[0], y0 = pi[1], px = [ x0, x0, x0, (pi = points[1])[0] ], py = [ y0, y0, y0, pi[1] ], path = [ x0, \",\", y0, \"L\", d3_svg_lineDot4(d3_svg_lineBasisBezier3, px), \",\", d3_svg_lineDot4(d3_svg_lineBasisBezier3, py) ];\n\t    points.push(points[n - 1]);\n\t    while (++i <= n) {\n\t      pi = points[i];\n\t      px.shift();\n\t      px.push(pi[0]);\n\t      py.shift();\n\t      py.push(pi[1]);\n\t      d3_svg_lineBasisBezier(path, px, py);\n\t    }\n\t    points.pop();\n\t    path.push(\"L\", pi);\n\t    return path.join(\"\");\n\t  }\n\t  function d3_svg_lineBasisOpen(points) {\n\t    if (points.length < 4) return d3_svg_lineLinear(points);\n\t    var path = [], i = -1, n = points.length, pi, px = [ 0 ], py = [ 0 ];\n\t    while (++i < 3) {\n\t      pi = points[i];\n\t      px.push(pi[0]);\n\t      py.push(pi[1]);\n\t    }\n\t    path.push(d3_svg_lineDot4(d3_svg_lineBasisBezier3, px) + \",\" + d3_svg_lineDot4(d3_svg_lineBasisBezier3, py));\n\t    --i;\n\t    while (++i < n) {\n\t      pi = points[i];\n\t      px.shift();\n\t      px.push(pi[0]);\n\t      py.shift();\n\t      py.push(pi[1]);\n\t      d3_svg_lineBasisBezier(path, px, py);\n\t    }\n\t    return path.join(\"\");\n\t  }\n\t  function d3_svg_lineBasisClosed(points) {\n\t    var path, i = -1, n = points.length, m = n + 4, pi, px = [], py = [];\n\t    while (++i < 4) {\n\t      pi = points[i % n];\n\t      px.push(pi[0]);\n\t      py.push(pi[1]);\n\t    }\n\t    path = [ d3_svg_lineDot4(d3_svg_lineBasisBezier3, px), \",\", d3_svg_lineDot4(d3_svg_lineBasisBezier3, py) ];\n\t    --i;\n\t    while (++i < m) {\n\t      pi = points[i % n];\n\t      px.shift();\n\t      px.push(pi[0]);\n\t      py.shift();\n\t      py.push(pi[1]);\n\t      d3_svg_lineBasisBezier(path, px, py);\n\t    }\n\t    return path.join(\"\");\n\t  }\n\t  function d3_svg_lineBundle(points, tension) {\n\t    var n = points.length - 1;\n\t    if (n) {\n\t      var x0 = points[0][0], y0 = points[0][1], dx = points[n][0] - x0, dy = points[n][1] - y0, i = -1, p, t;\n\t      while (++i <= n) {\n\t        p = points[i];\n\t        t = i / n;\n\t        p[0] = tension * p[0] + (1 - tension) * (x0 + t * dx);\n\t        p[1] = tension * p[1] + (1 - tension) * (y0 + t * dy);\n\t      }\n\t    }\n\t    return d3_svg_lineBasis(points);\n\t  }\n\t  function d3_svg_lineDot4(a, b) {\n\t    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\n\t  }\n\t  var d3_svg_lineBasisBezier1 = [ 0, 2 / 3, 1 / 3, 0 ], d3_svg_lineBasisBezier2 = [ 0, 1 / 3, 2 / 3, 0 ], d3_svg_lineBasisBezier3 = [ 0, 1 / 6, 2 / 3, 1 / 6 ];\n\t  function d3_svg_lineBasisBezier(path, x, y) {\n\t    path.push(\"C\", d3_svg_lineDot4(d3_svg_lineBasisBezier1, x), \",\", d3_svg_lineDot4(d3_svg_lineBasisBezier1, y), \",\", d3_svg_lineDot4(d3_svg_lineBasisBezier2, x), \",\", d3_svg_lineDot4(d3_svg_lineBasisBezier2, y), \",\", d3_svg_lineDot4(d3_svg_lineBasisBezier3, x), \",\", d3_svg_lineDot4(d3_svg_lineBasisBezier3, y));\n\t  }\n\t  function d3_svg_lineSlope(p0, p1) {\n\t    return (p1[1] - p0[1]) / (p1[0] - p0[0]);\n\t  }\n\t  function d3_svg_lineFiniteDifferences(points) {\n\t    var i = 0, j = points.length - 1, m = [], p0 = points[0], p1 = points[1], d = m[0] = d3_svg_lineSlope(p0, p1);\n\t    while (++i < j) {\n\t      m[i] = (d + (d = d3_svg_lineSlope(p0 = p1, p1 = points[i + 1]))) / 2;\n\t    }\n\t    m[i] = d;\n\t    return m;\n\t  }\n\t  function d3_svg_lineMonotoneTangents(points) {\n\t    var tangents = [], d, a, b, s, m = d3_svg_lineFiniteDifferences(points), i = -1, j = points.length - 1;\n\t    while (++i < j) {\n\t      d = d3_svg_lineSlope(points[i], points[i + 1]);\n\t      if (abs(d) < ε) {\n\t        m[i] = m[i + 1] = 0;\n\t      } else {\n\t        a = m[i] / d;\n\t        b = m[i + 1] / d;\n\t        s = a * a + b * b;\n\t        if (s > 9) {\n\t          s = d * 3 / Math.sqrt(s);\n\t          m[i] = s * a;\n\t          m[i + 1] = s * b;\n\t        }\n\t      }\n\t    }\n\t    i = -1;\n\t    while (++i <= j) {\n\t      s = (points[Math.min(j, i + 1)][0] - points[Math.max(0, i - 1)][0]) / (6 * (1 + m[i] * m[i]));\n\t      tangents.push([ s || 0, m[i] * s || 0 ]);\n\t    }\n\t    return tangents;\n\t  }\n\t  function d3_svg_lineMonotone(points) {\n\t    return points.length < 3 ? d3_svg_lineLinear(points) : points[0] + d3_svg_lineHermite(points, d3_svg_lineMonotoneTangents(points));\n\t  }\n\t  d3.svg.line.radial = function() {\n\t    var line = d3_svg_line(d3_svg_lineRadial);\n\t    line.radius = line.x, delete line.x;\n\t    line.angle = line.y, delete line.y;\n\t    return line;\n\t  };\n\t  function d3_svg_lineRadial(points) {\n\t    var point, i = -1, n = points.length, r, a;\n\t    while (++i < n) {\n\t      point = points[i];\n\t      r = point[0];\n\t      a = point[1] - halfπ;\n\t      point[0] = r * Math.cos(a);\n\t      point[1] = r * Math.sin(a);\n\t    }\n\t    return points;\n\t  }\n\t  function d3_svg_area(projection) {\n\t    var x0 = d3_geom_pointX, x1 = d3_geom_pointX, y0 = 0, y1 = d3_geom_pointY, defined = d3_true, interpolate = d3_svg_lineLinear, interpolateKey = interpolate.key, interpolateReverse = interpolate, L = \"L\", tension = .7;\n\t    function area(data) {\n\t      var segments = [], points0 = [], points1 = [], i = -1, n = data.length, d, fx0 = d3_functor(x0), fy0 = d3_functor(y0), fx1 = x0 === x1 ? function() {\n\t        return x;\n\t      } : d3_functor(x1), fy1 = y0 === y1 ? function() {\n\t        return y;\n\t      } : d3_functor(y1), x, y;\n\t      function segment() {\n\t        segments.push(\"M\", interpolate(projection(points1), tension), L, interpolateReverse(projection(points0.reverse()), tension), \"Z\");\n\t      }\n\t      while (++i < n) {\n\t        if (defined.call(this, d = data[i], i)) {\n\t          points0.push([ x = +fx0.call(this, d, i), y = +fy0.call(this, d, i) ]);\n\t          points1.push([ +fx1.call(this, d, i), +fy1.call(this, d, i) ]);\n\t        } else if (points0.length) {\n\t          segment();\n\t          points0 = [];\n\t          points1 = [];\n\t        }\n\t      }\n\t      if (points0.length) segment();\n\t      return segments.length ? segments.join(\"\") : null;\n\t    }\n\t    area.x = function(_) {\n\t      if (!arguments.length) return x1;\n\t      x0 = x1 = _;\n\t      return area;\n\t    };\n\t    area.x0 = function(_) {\n\t      if (!arguments.length) return x0;\n\t      x0 = _;\n\t      return area;\n\t    };\n\t    area.x1 = function(_) {\n\t      if (!arguments.length) return x1;\n\t      x1 = _;\n\t      return area;\n\t    };\n\t    area.y = function(_) {\n\t      if (!arguments.length) return y1;\n\t      y0 = y1 = _;\n\t      return area;\n\t    };\n\t    area.y0 = function(_) {\n\t      if (!arguments.length) return y0;\n\t      y0 = _;\n\t      return area;\n\t    };\n\t    area.y1 = function(_) {\n\t      if (!arguments.length) return y1;\n\t      y1 = _;\n\t      return area;\n\t    };\n\t    area.defined = function(_) {\n\t      if (!arguments.length) return defined;\n\t      defined = _;\n\t      return area;\n\t    };\n\t    area.interpolate = function(_) {\n\t      if (!arguments.length) return interpolateKey;\n\t      if (typeof _ === \"function\") interpolateKey = interpolate = _; else interpolateKey = (interpolate = d3_svg_lineInterpolators.get(_) || d3_svg_lineLinear).key;\n\t      interpolateReverse = interpolate.reverse || interpolate;\n\t      L = interpolate.closed ? \"M\" : \"L\";\n\t      return area;\n\t    };\n\t    area.tension = function(_) {\n\t      if (!arguments.length) return tension;\n\t      tension = _;\n\t      return area;\n\t    };\n\t    return area;\n\t  }\n\t  d3_svg_lineStepBefore.reverse = d3_svg_lineStepAfter;\n\t  d3_svg_lineStepAfter.reverse = d3_svg_lineStepBefore;\n\t  d3.svg.area = function() {\n\t    return d3_svg_area(d3_identity);\n\t  };\n\t  d3.svg.area.radial = function() {\n\t    var area = d3_svg_area(d3_svg_lineRadial);\n\t    area.radius = area.x, delete area.x;\n\t    area.innerRadius = area.x0, delete area.x0;\n\t    area.outerRadius = area.x1, delete area.x1;\n\t    area.angle = area.y, delete area.y;\n\t    area.startAngle = area.y0, delete area.y0;\n\t    area.endAngle = area.y1, delete area.y1;\n\t    return area;\n\t  };\n\t  d3.svg.chord = function() {\n\t    var source = d3_source, target = d3_target, radius = d3_svg_chordRadius, startAngle = d3_svg_arcStartAngle, endAngle = d3_svg_arcEndAngle;\n\t    function chord(d, i) {\n\t      var s = subgroup(this, source, d, i), t = subgroup(this, target, d, i);\n\t      return \"M\" + s.p0 + arc(s.r, s.p1, s.a1 - s.a0) + (equals(s, t) ? curve(s.r, s.p1, s.r, s.p0) : curve(s.r, s.p1, t.r, t.p0) + arc(t.r, t.p1, t.a1 - t.a0) + curve(t.r, t.p1, s.r, s.p0)) + \"Z\";\n\t    }\n\t    function subgroup(self, f, d, i) {\n\t      var subgroup = f.call(self, d, i), r = radius.call(self, subgroup, i), a0 = startAngle.call(self, subgroup, i) - halfπ, a1 = endAngle.call(self, subgroup, i) - halfπ;\n\t      return {\n\t        r: r,\n\t        a0: a0,\n\t        a1: a1,\n\t        p0: [ r * Math.cos(a0), r * Math.sin(a0) ],\n\t        p1: [ r * Math.cos(a1), r * Math.sin(a1) ]\n\t      };\n\t    }\n\t    function equals(a, b) {\n\t      return a.a0 == b.a0 && a.a1 == b.a1;\n\t    }\n\t    function arc(r, p, a) {\n\t      return \"A\" + r + \",\" + r + \" 0 \" + +(a > π) + \",1 \" + p;\n\t    }\n\t    function curve(r0, p0, r1, p1) {\n\t      return \"Q 0,0 \" + p1;\n\t    }\n\t    chord.radius = function(v) {\n\t      if (!arguments.length) return radius;\n\t      radius = d3_functor(v);\n\t      return chord;\n\t    };\n\t    chord.source = function(v) {\n\t      if (!arguments.length) return source;\n\t      source = d3_functor(v);\n\t      return chord;\n\t    };\n\t    chord.target = function(v) {\n\t      if (!arguments.length) return target;\n\t      target = d3_functor(v);\n\t      return chord;\n\t    };\n\t    chord.startAngle = function(v) {\n\t      if (!arguments.length) return startAngle;\n\t      startAngle = d3_functor(v);\n\t      return chord;\n\t    };\n\t    chord.endAngle = function(v) {\n\t      if (!arguments.length) return endAngle;\n\t      endAngle = d3_functor(v);\n\t      return chord;\n\t    };\n\t    return chord;\n\t  };\n\t  function d3_svg_chordRadius(d) {\n\t    return d.radius;\n\t  }\n\t  d3.svg.diagonal = function() {\n\t    var source = d3_source, target = d3_target, projection = d3_svg_diagonalProjection;\n\t    function diagonal(d, i) {\n\t      var p0 = source.call(this, d, i), p3 = target.call(this, d, i), m = (p0.y + p3.y) / 2, p = [ p0, {\n\t        x: p0.x,\n\t        y: m\n\t      }, {\n\t        x: p3.x,\n\t        y: m\n\t      }, p3 ];\n\t      p = p.map(projection);\n\t      return \"M\" + p[0] + \"C\" + p[1] + \" \" + p[2] + \" \" + p[3];\n\t    }\n\t    diagonal.source = function(x) {\n\t      if (!arguments.length) return source;\n\t      source = d3_functor(x);\n\t      return diagonal;\n\t    };\n\t    diagonal.target = function(x) {\n\t      if (!arguments.length) return target;\n\t      target = d3_functor(x);\n\t      return diagonal;\n\t    };\n\t    diagonal.projection = function(x) {\n\t      if (!arguments.length) return projection;\n\t      projection = x;\n\t      return diagonal;\n\t    };\n\t    return diagonal;\n\t  };\n\t  function d3_svg_diagonalProjection(d) {\n\t    return [ d.x, d.y ];\n\t  }\n\t  d3.svg.diagonal.radial = function() {\n\t    var diagonal = d3.svg.diagonal(), projection = d3_svg_diagonalProjection, projection_ = diagonal.projection;\n\t    diagonal.projection = function(x) {\n\t      return arguments.length ? projection_(d3_svg_diagonalRadialProjection(projection = x)) : projection;\n\t    };\n\t    return diagonal;\n\t  };\n\t  function d3_svg_diagonalRadialProjection(projection) {\n\t    return function() {\n\t      var d = projection.apply(this, arguments), r = d[0], a = d[1] - halfπ;\n\t      return [ r * Math.cos(a), r * Math.sin(a) ];\n\t    };\n\t  }\n\t  d3.svg.symbol = function() {\n\t    var type = d3_svg_symbolType, size = d3_svg_symbolSize;\n\t    function symbol(d, i) {\n\t      return (d3_svg_symbols.get(type.call(this, d, i)) || d3_svg_symbolCircle)(size.call(this, d, i));\n\t    }\n\t    symbol.type = function(x) {\n\t      if (!arguments.length) return type;\n\t      type = d3_functor(x);\n\t      return symbol;\n\t    };\n\t    symbol.size = function(x) {\n\t      if (!arguments.length) return size;\n\t      size = d3_functor(x);\n\t      return symbol;\n\t    };\n\t    return symbol;\n\t  };\n\t  function d3_svg_symbolSize() {\n\t    return 64;\n\t  }\n\t  function d3_svg_symbolType() {\n\t    return \"circle\";\n\t  }\n\t  function d3_svg_symbolCircle(size) {\n\t    var r = Math.sqrt(size / π);\n\t    return \"M0,\" + r + \"A\" + r + \",\" + r + \" 0 1,1 0,\" + -r + \"A\" + r + \",\" + r + \" 0 1,1 0,\" + r + \"Z\";\n\t  }\n\t  var d3_svg_symbols = d3.map({\n\t    circle: d3_svg_symbolCircle,\n\t    cross: function(size) {\n\t      var r = Math.sqrt(size / 5) / 2;\n\t      return \"M\" + -3 * r + \",\" + -r + \"H\" + -r + \"V\" + -3 * r + \"H\" + r + \"V\" + -r + \"H\" + 3 * r + \"V\" + r + \"H\" + r + \"V\" + 3 * r + \"H\" + -r + \"V\" + r + \"H\" + -3 * r + \"Z\";\n\t    },\n\t    diamond: function(size) {\n\t      var ry = Math.sqrt(size / (2 * d3_svg_symbolTan30)), rx = ry * d3_svg_symbolTan30;\n\t      return \"M0,\" + -ry + \"L\" + rx + \",0\" + \" 0,\" + ry + \" \" + -rx + \",0\" + \"Z\";\n\t    },\n\t    square: function(size) {\n\t      var r = Math.sqrt(size) / 2;\n\t      return \"M\" + -r + \",\" + -r + \"L\" + r + \",\" + -r + \" \" + r + \",\" + r + \" \" + -r + \",\" + r + \"Z\";\n\t    },\n\t    \"triangle-down\": function(size) {\n\t      var rx = Math.sqrt(size / d3_svg_symbolSqrt3), ry = rx * d3_svg_symbolSqrt3 / 2;\n\t      return \"M0,\" + ry + \"L\" + rx + \",\" + -ry + \" \" + -rx + \",\" + -ry + \"Z\";\n\t    },\n\t    \"triangle-up\": function(size) {\n\t      var rx = Math.sqrt(size / d3_svg_symbolSqrt3), ry = rx * d3_svg_symbolSqrt3 / 2;\n\t      return \"M0,\" + -ry + \"L\" + rx + \",\" + ry + \" \" + -rx + \",\" + ry + \"Z\";\n\t    }\n\t  });\n\t  d3.svg.symbolTypes = d3_svg_symbols.keys();\n\t  var d3_svg_symbolSqrt3 = Math.sqrt(3), d3_svg_symbolTan30 = Math.tan(30 * d3_radians);\n\t  function d3_transition(groups, namespace, id) {\n\t    d3_subclass(groups, d3_transitionPrototype);\n\t    groups.namespace = namespace;\n\t    groups.id = id;\n\t    return groups;\n\t  }\n\t  var d3_transitionPrototype = [], d3_transitionId = 0, d3_transitionInheritId, d3_transitionInherit;\n\t  d3_transitionPrototype.call = d3_selectionPrototype.call;\n\t  d3_transitionPrototype.empty = d3_selectionPrototype.empty;\n\t  d3_transitionPrototype.node = d3_selectionPrototype.node;\n\t  d3_transitionPrototype.size = d3_selectionPrototype.size;\n\t  d3.transition = function(selection) {\n\t    return arguments.length ? d3_transitionInheritId ? selection.transition() : selection : d3_selectionRoot.transition();\n\t  };\n\t  d3.transition.prototype = d3_transitionPrototype;\n\t  d3_transitionPrototype.select = function(selector) {\n\t    var id = this.id, ns = this.namespace, subgroups = [], subgroup, subnode, node;\n\t    selector = d3_selection_selector(selector);\n\t    for (var j = -1, m = this.length; ++j < m; ) {\n\t      subgroups.push(subgroup = []);\n\t      for (var group = this[j], i = -1, n = group.length; ++i < n; ) {\n\t        if ((node = group[i]) && (subnode = selector.call(node, node.__data__, i, j))) {\n\t          if (\"__data__\" in node) subnode.__data__ = node.__data__;\n\t          d3_transitionNode(subnode, i, ns, id, node[ns][id]);\n\t          subgroup.push(subnode);\n\t        } else {\n\t          subgroup.push(null);\n\t        }\n\t      }\n\t    }\n\t    return d3_transition(subgroups, ns, id);\n\t  };\n\t  d3_transitionPrototype.selectAll = function(selector) {\n\t    var id = this.id, ns = this.namespace, subgroups = [], subgroup, subnodes, node, subnode, transition;\n\t    selector = d3_selection_selectorAll(selector);\n\t    for (var j = -1, m = this.length; ++j < m; ) {\n\t      for (var group = this[j], i = -1, n = group.length; ++i < n; ) {\n\t        if (node = group[i]) {\n\t          transition = node[ns][id];\n\t          subnodes = selector.call(node, node.__data__, i, j);\n\t          subgroups.push(subgroup = []);\n\t          for (var k = -1, o = subnodes.length; ++k < o; ) {\n\t            if (subnode = subnodes[k]) d3_transitionNode(subnode, k, ns, id, transition);\n\t            subgroup.push(subnode);\n\t          }\n\t        }\n\t      }\n\t    }\n\t    return d3_transition(subgroups, ns, id);\n\t  };\n\t  d3_transitionPrototype.filter = function(filter) {\n\t    var subgroups = [], subgroup, group, node;\n\t    if (typeof filter !== \"function\") filter = d3_selection_filter(filter);\n\t    for (var j = 0, m = this.length; j < m; j++) {\n\t      subgroups.push(subgroup = []);\n\t      for (var group = this[j], i = 0, n = group.length; i < n; i++) {\n\t        if ((node = group[i]) && filter.call(node, node.__data__, i, j)) {\n\t          subgroup.push(node);\n\t        }\n\t      }\n\t    }\n\t    return d3_transition(subgroups, this.namespace, this.id);\n\t  };\n\t  d3_transitionPrototype.tween = function(name, tween) {\n\t    var id = this.id, ns = this.namespace;\n\t    if (arguments.length < 2) return this.node()[ns][id].tween.get(name);\n\t    return d3_selection_each(this, tween == null ? function(node) {\n\t      node[ns][id].tween.remove(name);\n\t    } : function(node) {\n\t      node[ns][id].tween.set(name, tween);\n\t    });\n\t  };\n\t  function d3_transition_tween(groups, name, value, tween) {\n\t    var id = groups.id, ns = groups.namespace;\n\t    return d3_selection_each(groups, typeof value === \"function\" ? function(node, i, j) {\n\t      node[ns][id].tween.set(name, tween(value.call(node, node.__data__, i, j)));\n\t    } : (value = tween(value), function(node) {\n\t      node[ns][id].tween.set(name, value);\n\t    }));\n\t  }\n\t  d3_transitionPrototype.attr = function(nameNS, value) {\n\t    if (arguments.length < 2) {\n\t      for (value in nameNS) this.attr(value, nameNS[value]);\n\t      return this;\n\t    }\n\t    var interpolate = nameNS == \"transform\" ? d3_interpolateTransform : d3_interpolate, name = d3.ns.qualify(nameNS);\n\t    function attrNull() {\n\t      this.removeAttribute(name);\n\t    }\n\t    function attrNullNS() {\n\t      this.removeAttributeNS(name.space, name.local);\n\t    }\n\t    function attrTween(b) {\n\t      return b == null ? attrNull : (b += \"\", function() {\n\t        var a = this.getAttribute(name), i;\n\t        return a !== b && (i = interpolate(a, b), function(t) {\n\t          this.setAttribute(name, i(t));\n\t        });\n\t      });\n\t    }\n\t    function attrTweenNS(b) {\n\t      return b == null ? attrNullNS : (b += \"\", function() {\n\t        var a = this.getAttributeNS(name.space, name.local), i;\n\t        return a !== b && (i = interpolate(a, b), function(t) {\n\t          this.setAttributeNS(name.space, name.local, i(t));\n\t        });\n\t      });\n\t    }\n\t    return d3_transition_tween(this, \"attr.\" + nameNS, value, name.local ? attrTweenNS : attrTween);\n\t  };\n\t  d3_transitionPrototype.attrTween = function(nameNS, tween) {\n\t    var name = d3.ns.qualify(nameNS);\n\t    function attrTween(d, i) {\n\t      var f = tween.call(this, d, i, this.getAttribute(name));\n\t      return f && function(t) {\n\t        this.setAttribute(name, f(t));\n\t      };\n\t    }\n\t    function attrTweenNS(d, i) {\n\t      var f = tween.call(this, d, i, this.getAttributeNS(name.space, name.local));\n\t      return f && function(t) {\n\t        this.setAttributeNS(name.space, name.local, f(t));\n\t      };\n\t    }\n\t    return this.tween(\"attr.\" + nameNS, name.local ? attrTweenNS : attrTween);\n\t  };\n\t  d3_transitionPrototype.style = function(name, value, priority) {\n\t    var n = arguments.length;\n\t    if (n < 3) {\n\t      if (typeof name !== \"string\") {\n\t        if (n < 2) value = \"\";\n\t        for (priority in name) this.style(priority, name[priority], value);\n\t        return this;\n\t      }\n\t      priority = \"\";\n\t    }\n\t    function styleNull() {\n\t      this.style.removeProperty(name);\n\t    }\n\t    function styleString(b) {\n\t      return b == null ? styleNull : (b += \"\", function() {\n\t        var a = d3_window.getComputedStyle(this, null).getPropertyValue(name), i;\n\t        return a !== b && (i = d3_interpolate(a, b), function(t) {\n\t          this.style.setProperty(name, i(t), priority);\n\t        });\n\t      });\n\t    }\n\t    return d3_transition_tween(this, \"style.\" + name, value, styleString);\n\t  };\n\t  d3_transitionPrototype.styleTween = function(name, tween, priority) {\n\t    if (arguments.length < 3) priority = \"\";\n\t    function styleTween(d, i) {\n\t      var f = tween.call(this, d, i, d3_window.getComputedStyle(this, null).getPropertyValue(name));\n\t      return f && function(t) {\n\t        this.style.setProperty(name, f(t), priority);\n\t      };\n\t    }\n\t    return this.tween(\"style.\" + name, styleTween);\n\t  };\n\t  d3_transitionPrototype.text = function(value) {\n\t    return d3_transition_tween(this, \"text\", value, d3_transition_text);\n\t  };\n\t  function d3_transition_text(b) {\n\t    if (b == null) b = \"\";\n\t    return function() {\n\t      this.textContent = b;\n\t    };\n\t  }\n\t  d3_transitionPrototype.remove = function() {\n\t    var ns = this.namespace;\n\t    return this.each(\"end.transition\", function() {\n\t      var p;\n\t      if (this[ns].count < 2 && (p = this.parentNode)) p.removeChild(this);\n\t    });\n\t  };\n\t  d3_transitionPrototype.ease = function(value) {\n\t    var id = this.id, ns = this.namespace;\n\t    if (arguments.length < 1) return this.node()[ns][id].ease;\n\t    if (typeof value !== \"function\") value = d3.ease.apply(d3, arguments);\n\t    return d3_selection_each(this, function(node) {\n\t      node[ns][id].ease = value;\n\t    });\n\t  };\n\t  d3_transitionPrototype.delay = function(value) {\n\t    var id = this.id, ns = this.namespace;\n\t    if (arguments.length < 1) return this.node()[ns][id].delay;\n\t    return d3_selection_each(this, typeof value === \"function\" ? function(node, i, j) {\n\t      node[ns][id].delay = +value.call(node, node.__data__, i, j);\n\t    } : (value = +value, function(node) {\n\t      node[ns][id].delay = value;\n\t    }));\n\t  };\n\t  d3_transitionPrototype.duration = function(value) {\n\t    var id = this.id, ns = this.namespace;\n\t    if (arguments.length < 1) return this.node()[ns][id].duration;\n\t    return d3_selection_each(this, typeof value === \"function\" ? function(node, i, j) {\n\t      node[ns][id].duration = Math.max(1, value.call(node, node.__data__, i, j));\n\t    } : (value = Math.max(1, value), function(node) {\n\t      node[ns][id].duration = value;\n\t    }));\n\t  };\n\t  d3_transitionPrototype.each = function(type, listener) {\n\t    var id = this.id, ns = this.namespace;\n\t    if (arguments.length < 2) {\n\t      var inherit = d3_transitionInherit, inheritId = d3_transitionInheritId;\n\t      d3_transitionInheritId = id;\n\t      d3_selection_each(this, function(node, i, j) {\n\t        d3_transitionInherit = node[ns][id];\n\t        type.call(node, node.__data__, i, j);\n\t      });\n\t      d3_transitionInherit = inherit;\n\t      d3_transitionInheritId = inheritId;\n\t    } else {\n\t      d3_selection_each(this, function(node) {\n\t        var transition = node[ns][id];\n\t        (transition.event || (transition.event = d3.dispatch(\"start\", \"end\", \"interrupt\"))).on(type, listener);\n\t      });\n\t    }\n\t    return this;\n\t  };\n\t  d3_transitionPrototype.transition = function() {\n\t    var id0 = this.id, id1 = ++d3_transitionId, ns = this.namespace, subgroups = [], subgroup, group, node, transition;\n\t    for (var j = 0, m = this.length; j < m; j++) {\n\t      subgroups.push(subgroup = []);\n\t      for (var group = this[j], i = 0, n = group.length; i < n; i++) {\n\t        if (node = group[i]) {\n\t          transition = node[ns][id0];\n\t          d3_transitionNode(node, i, ns, id1, {\n\t            time: transition.time,\n\t            ease: transition.ease,\n\t            delay: transition.delay + transition.duration,\n\t            duration: transition.duration\n\t          });\n\t        }\n\t        subgroup.push(node);\n\t      }\n\t    }\n\t    return d3_transition(subgroups, ns, id1);\n\t  };\n\t  function d3_transitionNamespace(name) {\n\t    return name == null ? \"__transition__\" : \"__transition_\" + name + \"__\";\n\t  }\n\t  function d3_transitionNode(node, i, namespace, id, inherit) {\n\t    var lock = node[namespace] || (node[namespace] = {\n\t      active: 0,\n\t      count: 0\n\t    }), transition = lock[id];\n\t    if (!transition) {\n\t      var time = inherit.time;\n\t      transition = lock[id] = {\n\t        tween: new d3_Map(),\n\t        time: time,\n\t        delay: inherit.delay,\n\t        duration: inherit.duration,\n\t        ease: inherit.ease\n\t      };\n\t      inherit = null;\n\t      ++lock.count;\n\t      d3.timer(function(elapsed) {\n\t        var d = node.__data__, delay = transition.delay, duration, ease, timer = d3_timer_active, tweened = [];\n\t        timer.t = delay + time;\n\t        if (delay <= elapsed) return start(elapsed - delay);\n\t        timer.c = start;\n\t        function start(elapsed) {\n\t          if (lock.active > id) return stop(false);\n\t          lock.active = id;\n\t          transition.event && transition.event.start.call(node, d, i);\n\t          transition.tween.forEach(function(key, value) {\n\t            if (value = value.call(node, d, i)) {\n\t              tweened.push(value);\n\t            }\n\t          });\n\t          ease = transition.ease;\n\t          duration = transition.duration;\n\t          d3.timer(function() {\n\t            timer.c = tick(elapsed || 1) ? d3_true : tick;\n\t            return 1;\n\t          }, 0, time);\n\t        }\n\t        function tick(elapsed) {\n\t          if (lock.active !== id) return stop(false);\n\t          var t = elapsed / duration, e = ease(t), n = tweened.length;\n\t          while (n > 0) {\n\t            tweened[--n].call(node, e);\n\t          }\n\t          if (t >= 1) return stop(true);\n\t        }\n\t        function stop(end) {\n\t          if (transition.event) transition.event[end ? \"end\" : \"interrupt\"].call(node, d, i);\n\t          if (--lock.count) delete lock[id]; else delete node[namespace];\n\t          return 1;\n\t        }\n\t      }, 0, time);\n\t    }\n\t  }\n\t  d3.svg.axis = function() {\n\t    var scale = d3.scale.linear(), orient = d3_svg_axisDefaultOrient, innerTickSize = 6, outerTickSize = 6, tickPadding = 3, tickArguments_ = [ 10 ], tickValues = null, tickFormat_;\n\t    function axis(g) {\n\t      g.each(function() {\n\t        var g = d3.select(this);\n\t        var scale0 = this.__chart__ || scale, scale1 = this.__chart__ = scale.copy();\n\t        var ticks = tickValues == null ? scale1.ticks ? scale1.ticks.apply(scale1, tickArguments_) : scale1.domain() : tickValues, tickFormat = tickFormat_ == null ? scale1.tickFormat ? scale1.tickFormat.apply(scale1, tickArguments_) : d3_identity : tickFormat_, tick = g.selectAll(\".tick\").data(ticks, scale1), tickEnter = tick.enter().insert(\"g\", \".domain\").attr(\"class\", \"tick\").style(\"opacity\", ε), tickExit = d3.transition(tick.exit()).style(\"opacity\", ε).remove(), tickUpdate = d3.transition(tick.order()).style(\"opacity\", 1), tickSpacing = Math.max(innerTickSize, 0) + tickPadding, tickTransform;\n\t        var range = d3_scaleRange(scale1), path = g.selectAll(\".domain\").data([ 0 ]), pathUpdate = (path.enter().append(\"path\").attr(\"class\", \"domain\"), \n\t        d3.transition(path));\n\t        tickEnter.append(\"line\");\n\t        tickEnter.append(\"text\");\n\t        var lineEnter = tickEnter.select(\"line\"), lineUpdate = tickUpdate.select(\"line\"), text = tick.select(\"text\").text(tickFormat), textEnter = tickEnter.select(\"text\"), textUpdate = tickUpdate.select(\"text\"), sign = orient === \"top\" || orient === \"left\" ? -1 : 1, x1, x2, y1, y2;\n\t        if (orient === \"bottom\" || orient === \"top\") {\n\t          tickTransform = d3_svg_axisX, x1 = \"x\", y1 = \"y\", x2 = \"x2\", y2 = \"y2\";\n\t          text.attr(\"dy\", sign < 0 ? \"0em\" : \".71em\").style(\"text-anchor\", \"middle\");\n\t          pathUpdate.attr(\"d\", \"M\" + range[0] + \",\" + sign * outerTickSize + \"V0H\" + range[1] + \"V\" + sign * outerTickSize);\n\t        } else {\n\t          tickTransform = d3_svg_axisY, x1 = \"y\", y1 = \"x\", x2 = \"y2\", y2 = \"x2\";\n\t          text.attr(\"dy\", \".32em\").style(\"text-anchor\", sign < 0 ? \"end\" : \"start\");\n\t          pathUpdate.attr(\"d\", \"M\" + sign * outerTickSize + \",\" + range[0] + \"H0V\" + range[1] + \"H\" + sign * outerTickSize);\n\t        }\n\t        lineEnter.attr(y2, sign * innerTickSize);\n\t        textEnter.attr(y1, sign * tickSpacing);\n\t        lineUpdate.attr(x2, 0).attr(y2, sign * innerTickSize);\n\t        textUpdate.attr(x1, 0).attr(y1, sign * tickSpacing);\n\t        if (scale1.rangeBand) {\n\t          var x = scale1, dx = x.rangeBand() / 2;\n\t          scale0 = scale1 = function(d) {\n\t            return x(d) + dx;\n\t          };\n\t        } else if (scale0.rangeBand) {\n\t          scale0 = scale1;\n\t        } else {\n\t          tickExit.call(tickTransform, scale1, scale0);\n\t        }\n\t        tickEnter.call(tickTransform, scale0, scale1);\n\t        tickUpdate.call(tickTransform, scale1, scale1);\n\t      });\n\t    }\n\t    axis.scale = function(x) {\n\t      if (!arguments.length) return scale;\n\t      scale = x;\n\t      return axis;\n\t    };\n\t    axis.orient = function(x) {\n\t      if (!arguments.length) return orient;\n\t      orient = x in d3_svg_axisOrients ? x + \"\" : d3_svg_axisDefaultOrient;\n\t      return axis;\n\t    };\n\t    axis.ticks = function() {\n\t      if (!arguments.length) return tickArguments_;\n\t      tickArguments_ = arguments;\n\t      return axis;\n\t    };\n\t    axis.tickValues = function(x) {\n\t      if (!arguments.length) return tickValues;\n\t      tickValues = x;\n\t      return axis;\n\t    };\n\t    axis.tickFormat = function(x) {\n\t      if (!arguments.length) return tickFormat_;\n\t      tickFormat_ = x;\n\t      return axis;\n\t    };\n\t    axis.tickSize = function(x) {\n\t      var n = arguments.length;\n\t      if (!n) return innerTickSize;\n\t      innerTickSize = +x;\n\t      outerTickSize = +arguments[n - 1];\n\t      return axis;\n\t    };\n\t    axis.innerTickSize = function(x) {\n\t      if (!arguments.length) return innerTickSize;\n\t      innerTickSize = +x;\n\t      return axis;\n\t    };\n\t    axis.outerTickSize = function(x) {\n\t      if (!arguments.length) return outerTickSize;\n\t      outerTickSize = +x;\n\t      return axis;\n\t    };\n\t    axis.tickPadding = function(x) {\n\t      if (!arguments.length) return tickPadding;\n\t      tickPadding = +x;\n\t      return axis;\n\t    };\n\t    axis.tickSubdivide = function() {\n\t      return arguments.length && axis;\n\t    };\n\t    return axis;\n\t  };\n\t  var d3_svg_axisDefaultOrient = \"bottom\", d3_svg_axisOrients = {\n\t    top: 1,\n\t    right: 1,\n\t    bottom: 1,\n\t    left: 1\n\t  };\n\t  function d3_svg_axisX(selection, x0, x1) {\n\t    selection.attr(\"transform\", function(d) {\n\t      var v0 = x0(d);\n\t      return \"translate(\" + (isFinite(v0) ? v0 : x1(d)) + \",0)\";\n\t    });\n\t  }\n\t  function d3_svg_axisY(selection, y0, y1) {\n\t    selection.attr(\"transform\", function(d) {\n\t      var v0 = y0(d);\n\t      return \"translate(0,\" + (isFinite(v0) ? v0 : y1(d)) + \")\";\n\t    });\n\t  }\n\t  d3.svg.brush = function() {\n\t    var event = d3_eventDispatch(brush, \"brushstart\", \"brush\", \"brushend\"), x = null, y = null, xExtent = [ 0, 0 ], yExtent = [ 0, 0 ], xExtentDomain, yExtentDomain, xClamp = true, yClamp = true, resizes = d3_svg_brushResizes[0];\n\t    function brush(g) {\n\t      g.each(function() {\n\t        var g = d3.select(this).style(\"pointer-events\", \"all\").style(\"-webkit-tap-highlight-color\", \"rgba(0,0,0,0)\").on(\"mousedown.brush\", brushstart).on(\"touchstart.brush\", brushstart);\n\t        var background = g.selectAll(\".background\").data([ 0 ]);\n\t        background.enter().append(\"rect\").attr(\"class\", \"background\").style(\"visibility\", \"hidden\").style(\"cursor\", \"crosshair\");\n\t        g.selectAll(\".extent\").data([ 0 ]).enter().append(\"rect\").attr(\"class\", \"extent\").style(\"cursor\", \"move\");\n\t        var resize = g.selectAll(\".resize\").data(resizes, d3_identity);\n\t        resize.exit().remove();\n\t        resize.enter().append(\"g\").attr(\"class\", function(d) {\n\t          return \"resize \" + d;\n\t        }).style(\"cursor\", function(d) {\n\t          return d3_svg_brushCursor[d];\n\t        }).append(\"rect\").attr(\"x\", function(d) {\n\t          return /[ew]$/.test(d) ? -3 : null;\n\t        }).attr(\"y\", function(d) {\n\t          return /^[ns]/.test(d) ? -3 : null;\n\t        }).attr(\"width\", 6).attr(\"height\", 6).style(\"visibility\", \"hidden\");\n\t        resize.style(\"display\", brush.empty() ? \"none\" : null);\n\t        var gUpdate = d3.transition(g), backgroundUpdate = d3.transition(background), range;\n\t        if (x) {\n\t          range = d3_scaleRange(x);\n\t          backgroundUpdate.attr(\"x\", range[0]).attr(\"width\", range[1] - range[0]);\n\t          redrawX(gUpdate);\n\t        }\n\t        if (y) {\n\t          range = d3_scaleRange(y);\n\t          backgroundUpdate.attr(\"y\", range[0]).attr(\"height\", range[1] - range[0]);\n\t          redrawY(gUpdate);\n\t        }\n\t        redraw(gUpdate);\n\t      });\n\t    }\n\t    brush.event = function(g) {\n\t      g.each(function() {\n\t        var event_ = event.of(this, arguments), extent1 = {\n\t          x: xExtent,\n\t          y: yExtent,\n\t          i: xExtentDomain,\n\t          j: yExtentDomain\n\t        }, extent0 = this.__chart__ || extent1;\n\t        this.__chart__ = extent1;\n\t        if (d3_transitionInheritId) {\n\t          d3.select(this).transition().each(\"start.brush\", function() {\n\t            xExtentDomain = extent0.i;\n\t            yExtentDomain = extent0.j;\n\t            xExtent = extent0.x;\n\t            yExtent = extent0.y;\n\t            event_({\n\t              type: \"brushstart\"\n\t            });\n\t          }).tween(\"brush:brush\", function() {\n\t            var xi = d3_interpolateArray(xExtent, extent1.x), yi = d3_interpolateArray(yExtent, extent1.y);\n\t            xExtentDomain = yExtentDomain = null;\n\t            return function(t) {\n\t              xExtent = extent1.x = xi(t);\n\t              yExtent = extent1.y = yi(t);\n\t              event_({\n\t                type: \"brush\",\n\t                mode: \"resize\"\n\t              });\n\t            };\n\t          }).each(\"end.brush\", function() {\n\t            xExtentDomain = extent1.i;\n\t            yExtentDomain = extent1.j;\n\t            event_({\n\t              type: \"brush\",\n\t              mode: \"resize\"\n\t            });\n\t            event_({\n\t              type: \"brushend\"\n\t            });\n\t          });\n\t        } else {\n\t          event_({\n\t            type: \"brushstart\"\n\t          });\n\t          event_({\n\t            type: \"brush\",\n\t            mode: \"resize\"\n\t          });\n\t          event_({\n\t            type: \"brushend\"\n\t          });\n\t        }\n\t      });\n\t    };\n\t    function redraw(g) {\n\t      g.selectAll(\".resize\").attr(\"transform\", function(d) {\n\t        return \"translate(\" + xExtent[+/e$/.test(d)] + \",\" + yExtent[+/^s/.test(d)] + \")\";\n\t      });\n\t    }\n\t    function redrawX(g) {\n\t      g.select(\".extent\").attr(\"x\", xExtent[0]);\n\t      g.selectAll(\".extent,.n>rect,.s>rect\").attr(\"width\", xExtent[1] - xExtent[0]);\n\t    }\n\t    function redrawY(g) {\n\t      g.select(\".extent\").attr(\"y\", yExtent[0]);\n\t      g.selectAll(\".extent,.e>rect,.w>rect\").attr(\"height\", yExtent[1] - yExtent[0]);\n\t    }\n\t    function brushstart() {\n\t      var target = this, eventTarget = d3.select(d3.event.target), event_ = event.of(target, arguments), g = d3.select(target), resizing = eventTarget.datum(), resizingX = !/^(n|s)$/.test(resizing) && x, resizingY = !/^(e|w)$/.test(resizing) && y, dragging = eventTarget.classed(\"extent\"), dragRestore = d3_event_dragSuppress(), center, origin = d3.mouse(target), offset;\n\t      var w = d3.select(d3_window).on(\"keydown.brush\", keydown).on(\"keyup.brush\", keyup);\n\t      if (d3.event.changedTouches) {\n\t        w.on(\"touchmove.brush\", brushmove).on(\"touchend.brush\", brushend);\n\t      } else {\n\t        w.on(\"mousemove.brush\", brushmove).on(\"mouseup.brush\", brushend);\n\t      }\n\t      g.interrupt().selectAll(\"*\").interrupt();\n\t      if (dragging) {\n\t        origin[0] = xExtent[0] - origin[0];\n\t        origin[1] = yExtent[0] - origin[1];\n\t      } else if (resizing) {\n\t        var ex = +/w$/.test(resizing), ey = +/^n/.test(resizing);\n\t        offset = [ xExtent[1 - ex] - origin[0], yExtent[1 - ey] - origin[1] ];\n\t        origin[0] = xExtent[ex];\n\t        origin[1] = yExtent[ey];\n\t      } else if (d3.event.altKey) center = origin.slice();\n\t      g.style(\"pointer-events\", \"none\").selectAll(\".resize\").style(\"display\", null);\n\t      d3.select(\"body\").style(\"cursor\", eventTarget.style(\"cursor\"));\n\t      event_({\n\t        type: \"brushstart\"\n\t      });\n\t      brushmove();\n\t      function keydown() {\n\t        if (d3.event.keyCode == 32) {\n\t          if (!dragging) {\n\t            center = null;\n\t            origin[0] -= xExtent[1];\n\t            origin[1] -= yExtent[1];\n\t            dragging = 2;\n\t          }\n\t          d3_eventPreventDefault();\n\t        }\n\t      }\n\t      function keyup() {\n\t        if (d3.event.keyCode == 32 && dragging == 2) {\n\t          origin[0] += xExtent[1];\n\t          origin[1] += yExtent[1];\n\t          dragging = 0;\n\t          d3_eventPreventDefault();\n\t        }\n\t      }\n\t      function brushmove() {\n\t        var point = d3.mouse(target), moved = false;\n\t        if (offset) {\n\t          point[0] += offset[0];\n\t          point[1] += offset[1];\n\t        }\n\t        if (!dragging) {\n\t          if (d3.event.altKey) {\n\t            if (!center) center = [ (xExtent[0] + xExtent[1]) / 2, (yExtent[0] + yExtent[1]) / 2 ];\n\t            origin[0] = xExtent[+(point[0] < center[0])];\n\t            origin[1] = yExtent[+(point[1] < center[1])];\n\t          } else center = null;\n\t        }\n\t        if (resizingX && move1(point, x, 0)) {\n\t          redrawX(g);\n\t          moved = true;\n\t        }\n\t        if (resizingY && move1(point, y, 1)) {\n\t          redrawY(g);\n\t          moved = true;\n\t        }\n\t        if (moved) {\n\t          redraw(g);\n\t          event_({\n\t            type: \"brush\",\n\t            mode: dragging ? \"move\" : \"resize\"\n\t          });\n\t        }\n\t      }\n\t      function move1(point, scale, i) {\n\t        var range = d3_scaleRange(scale), r0 = range[0], r1 = range[1], position = origin[i], extent = i ? yExtent : xExtent, size = extent[1] - extent[0], min, max;\n\t        if (dragging) {\n\t          r0 -= position;\n\t          r1 -= size + position;\n\t        }\n\t        min = (i ? yClamp : xClamp) ? Math.max(r0, Math.min(r1, point[i])) : point[i];\n\t        if (dragging) {\n\t          max = (min += position) + size;\n\t        } else {\n\t          if (center) position = Math.max(r0, Math.min(r1, 2 * center[i] - min));\n\t          if (position < min) {\n\t            max = min;\n\t            min = position;\n\t          } else {\n\t            max = position;\n\t          }\n\t        }\n\t        if (extent[0] != min || extent[1] != max) {\n\t          if (i) yExtentDomain = null; else xExtentDomain = null;\n\t          extent[0] = min;\n\t          extent[1] = max;\n\t          return true;\n\t        }\n\t      }\n\t      function brushend() {\n\t        brushmove();\n\t        g.style(\"pointer-events\", \"all\").selectAll(\".resize\").style(\"display\", brush.empty() ? \"none\" : null);\n\t        d3.select(\"body\").style(\"cursor\", null);\n\t        w.on(\"mousemove.brush\", null).on(\"mouseup.brush\", null).on(\"touchmove.brush\", null).on(\"touchend.brush\", null).on(\"keydown.brush\", null).on(\"keyup.brush\", null);\n\t        dragRestore();\n\t        event_({\n\t          type: \"brushend\"\n\t        });\n\t      }\n\t    }\n\t    brush.x = function(z) {\n\t      if (!arguments.length) return x;\n\t      x = z;\n\t      resizes = d3_svg_brushResizes[!x << 1 | !y];\n\t      return brush;\n\t    };\n\t    brush.y = function(z) {\n\t      if (!arguments.length) return y;\n\t      y = z;\n\t      resizes = d3_svg_brushResizes[!x << 1 | !y];\n\t      return brush;\n\t    };\n\t    brush.clamp = function(z) {\n\t      if (!arguments.length) return x && y ? [ xClamp, yClamp ] : x ? xClamp : y ? yClamp : null;\n\t      if (x && y) xClamp = !!z[0], yClamp = !!z[1]; else if (x) xClamp = !!z; else if (y) yClamp = !!z;\n\t      return brush;\n\t    };\n\t    brush.extent = function(z) {\n\t      var x0, x1, y0, y1, t;\n\t      if (!arguments.length) {\n\t        if (x) {\n\t          if (xExtentDomain) {\n\t            x0 = xExtentDomain[0], x1 = xExtentDomain[1];\n\t          } else {\n\t            x0 = xExtent[0], x1 = xExtent[1];\n\t            if (x.invert) x0 = x.invert(x0), x1 = x.invert(x1);\n\t            if (x1 < x0) t = x0, x0 = x1, x1 = t;\n\t          }\n\t        }\n\t        if (y) {\n\t          if (yExtentDomain) {\n\t            y0 = yExtentDomain[0], y1 = yExtentDomain[1];\n\t          } else {\n\t            y0 = yExtent[0], y1 = yExtent[1];\n\t            if (y.invert) y0 = y.invert(y0), y1 = y.invert(y1);\n\t            if (y1 < y0) t = y0, y0 = y1, y1 = t;\n\t          }\n\t        }\n\t        return x && y ? [ [ x0, y0 ], [ x1, y1 ] ] : x ? [ x0, x1 ] : y && [ y0, y1 ];\n\t      }\n\t      if (x) {\n\t        x0 = z[0], x1 = z[1];\n\t        if (y) x0 = x0[0], x1 = x1[0];\n\t        xExtentDomain = [ x0, x1 ];\n\t        if (x.invert) x0 = x(x0), x1 = x(x1);\n\t        if (x1 < x0) t = x0, x0 = x1, x1 = t;\n\t        if (x0 != xExtent[0] || x1 != xExtent[1]) xExtent = [ x0, x1 ];\n\t      }\n\t      if (y) {\n\t        y0 = z[0], y1 = z[1];\n\t        if (x) y0 = y0[1], y1 = y1[1];\n\t        yExtentDomain = [ y0, y1 ];\n\t        if (y.invert) y0 = y(y0), y1 = y(y1);\n\t        if (y1 < y0) t = y0, y0 = y1, y1 = t;\n\t        if (y0 != yExtent[0] || y1 != yExtent[1]) yExtent = [ y0, y1 ];\n\t      }\n\t      return brush;\n\t    };\n\t    brush.clear = function() {\n\t      if (!brush.empty()) {\n\t        xExtent = [ 0, 0 ], yExtent = [ 0, 0 ];\n\t        xExtentDomain = yExtentDomain = null;\n\t      }\n\t      return brush;\n\t    };\n\t    brush.empty = function() {\n\t      return !!x && xExtent[0] == xExtent[1] || !!y && yExtent[0] == yExtent[1];\n\t    };\n\t    return d3.rebind(brush, event, \"on\");\n\t  };\n\t  var d3_svg_brushCursor = {\n\t    n: \"ns-resize\",\n\t    e: \"ew-resize\",\n\t    s: \"ns-resize\",\n\t    w: \"ew-resize\",\n\t    nw: \"nwse-resize\",\n\t    ne: \"nesw-resize\",\n\t    se: \"nwse-resize\",\n\t    sw: \"nesw-resize\"\n\t  };\n\t  var d3_svg_brushResizes = [ [ \"n\", \"e\", \"s\", \"w\", \"nw\", \"ne\", \"se\", \"sw\" ], [ \"e\", \"w\" ], [ \"n\", \"s\" ], [] ];\n\t  var d3_time_format = d3_time.format = d3_locale_enUS.timeFormat;\n\t  var d3_time_formatUtc = d3_time_format.utc;\n\t  var d3_time_formatIso = d3_time_formatUtc(\"%Y-%m-%dT%H:%M:%S.%LZ\");\n\t  d3_time_format.iso = Date.prototype.toISOString && +new Date(\"2000-01-01T00:00:00.000Z\") ? d3_time_formatIsoNative : d3_time_formatIso;\n\t  function d3_time_formatIsoNative(date) {\n\t    return date.toISOString();\n\t  }\n\t  d3_time_formatIsoNative.parse = function(string) {\n\t    var date = new Date(string);\n\t    return isNaN(date) ? null : date;\n\t  };\n\t  d3_time_formatIsoNative.toString = d3_time_formatIso.toString;\n\t  d3_time.second = d3_time_interval(function(date) {\n\t    return new d3_date(Math.floor(date / 1e3) * 1e3);\n\t  }, function(date, offset) {\n\t    date.setTime(date.getTime() + Math.floor(offset) * 1e3);\n\t  }, function(date) {\n\t    return date.getSeconds();\n\t  });\n\t  d3_time.seconds = d3_time.second.range;\n\t  d3_time.seconds.utc = d3_time.second.utc.range;\n\t  d3_time.minute = d3_time_interval(function(date) {\n\t    return new d3_date(Math.floor(date / 6e4) * 6e4);\n\t  }, function(date, offset) {\n\t    date.setTime(date.getTime() + Math.floor(offset) * 6e4);\n\t  }, function(date) {\n\t    return date.getMinutes();\n\t  });\n\t  d3_time.minutes = d3_time.minute.range;\n\t  d3_time.minutes.utc = d3_time.minute.utc.range;\n\t  d3_time.hour = d3_time_interval(function(date) {\n\t    var timezone = date.getTimezoneOffset() / 60;\n\t    return new d3_date((Math.floor(date / 36e5 - timezone) + timezone) * 36e5);\n\t  }, function(date, offset) {\n\t    date.setTime(date.getTime() + Math.floor(offset) * 36e5);\n\t  }, function(date) {\n\t    return date.getHours();\n\t  });\n\t  d3_time.hours = d3_time.hour.range;\n\t  d3_time.hours.utc = d3_time.hour.utc.range;\n\t  d3_time.month = d3_time_interval(function(date) {\n\t    date = d3_time.day(date);\n\t    date.setDate(1);\n\t    return date;\n\t  }, function(date, offset) {\n\t    date.setMonth(date.getMonth() + offset);\n\t  }, function(date) {\n\t    return date.getMonth();\n\t  });\n\t  d3_time.months = d3_time.month.range;\n\t  d3_time.months.utc = d3_time.month.utc.range;\n\t  function d3_time_scale(linear, methods, format) {\n\t    function scale(x) {\n\t      return linear(x);\n\t    }\n\t    scale.invert = function(x) {\n\t      return d3_time_scaleDate(linear.invert(x));\n\t    };\n\t    scale.domain = function(x) {\n\t      if (!arguments.length) return linear.domain().map(d3_time_scaleDate);\n\t      linear.domain(x);\n\t      return scale;\n\t    };\n\t    function tickMethod(extent, count) {\n\t      var span = extent[1] - extent[0], target = span / count, i = d3.bisect(d3_time_scaleSteps, target);\n\t      return i == d3_time_scaleSteps.length ? [ methods.year, d3_scale_linearTickRange(extent.map(function(d) {\n\t        return d / 31536e6;\n\t      }), count)[2] ] : !i ? [ d3_time_scaleMilliseconds, d3_scale_linearTickRange(extent, count)[2] ] : methods[target / d3_time_scaleSteps[i - 1] < d3_time_scaleSteps[i] / target ? i - 1 : i];\n\t    }\n\t    scale.nice = function(interval, skip) {\n\t      var domain = scale.domain(), extent = d3_scaleExtent(domain), method = interval == null ? tickMethod(extent, 10) : typeof interval === \"number\" && tickMethod(extent, interval);\n\t      if (method) interval = method[0], skip = method[1];\n\t      function skipped(date) {\n\t        return !isNaN(date) && !interval.range(date, d3_time_scaleDate(+date + 1), skip).length;\n\t      }\n\t      return scale.domain(d3_scale_nice(domain, skip > 1 ? {\n\t        floor: function(date) {\n\t          while (skipped(date = interval.floor(date))) date = d3_time_scaleDate(date - 1);\n\t          return date;\n\t        },\n\t        ceil: function(date) {\n\t          while (skipped(date = interval.ceil(date))) date = d3_time_scaleDate(+date + 1);\n\t          return date;\n\t        }\n\t      } : interval));\n\t    };\n\t    scale.ticks = function(interval, skip) {\n\t      var extent = d3_scaleExtent(scale.domain()), method = interval == null ? tickMethod(extent, 10) : typeof interval === \"number\" ? tickMethod(extent, interval) : !interval.range && [ {\n\t        range: interval\n\t      }, skip ];\n\t      if (method) interval = method[0], skip = method[1];\n\t      return interval.range(extent[0], d3_time_scaleDate(+extent[1] + 1), skip < 1 ? 1 : skip);\n\t    };\n\t    scale.tickFormat = function() {\n\t      return format;\n\t    };\n\t    scale.copy = function() {\n\t      return d3_time_scale(linear.copy(), methods, format);\n\t    };\n\t    return d3_scale_linearRebind(scale, linear);\n\t  }\n\t  function d3_time_scaleDate(t) {\n\t    return new Date(t);\n\t  }\n\t  var d3_time_scaleSteps = [ 1e3, 5e3, 15e3, 3e4, 6e4, 3e5, 9e5, 18e5, 36e5, 108e5, 216e5, 432e5, 864e5, 1728e5, 6048e5, 2592e6, 7776e6, 31536e6 ];\n\t  var d3_time_scaleLocalMethods = [ [ d3_time.second, 1 ], [ d3_time.second, 5 ], [ d3_time.second, 15 ], [ d3_time.second, 30 ], [ d3_time.minute, 1 ], [ d3_time.minute, 5 ], [ d3_time.minute, 15 ], [ d3_time.minute, 30 ], [ d3_time.hour, 1 ], [ d3_time.hour, 3 ], [ d3_time.hour, 6 ], [ d3_time.hour, 12 ], [ d3_time.day, 1 ], [ d3_time.day, 2 ], [ d3_time.week, 1 ], [ d3_time.month, 1 ], [ d3_time.month, 3 ], [ d3_time.year, 1 ] ];\n\t  var d3_time_scaleLocalFormat = d3_time_format.multi([ [ \".%L\", function(d) {\n\t    return d.getMilliseconds();\n\t  } ], [ \":%S\", function(d) {\n\t    return d.getSeconds();\n\t  } ], [ \"%I:%M\", function(d) {\n\t    return d.getMinutes();\n\t  } ], [ \"%I %p\", function(d) {\n\t    return d.getHours();\n\t  } ], [ \"%a %d\", function(d) {\n\t    return d.getDay() && d.getDate() != 1;\n\t  } ], [ \"%b %d\", function(d) {\n\t    return d.getDate() != 1;\n\t  } ], [ \"%B\", function(d) {\n\t    return d.getMonth();\n\t  } ], [ \"%Y\", d3_true ] ]);\n\t  var d3_time_scaleMilliseconds = {\n\t    range: function(start, stop, step) {\n\t      return d3.range(Math.ceil(start / step) * step, +stop, step).map(d3_time_scaleDate);\n\t    },\n\t    floor: d3_identity,\n\t    ceil: d3_identity\n\t  };\n\t  d3_time_scaleLocalMethods.year = d3_time.year;\n\t  d3_time.scale = function() {\n\t    return d3_time_scale(d3.scale.linear(), d3_time_scaleLocalMethods, d3_time_scaleLocalFormat);\n\t  };\n\t  var d3_time_scaleUtcMethods = d3_time_scaleLocalMethods.map(function(m) {\n\t    return [ m[0].utc, m[1] ];\n\t  });\n\t  var d3_time_scaleUtcFormat = d3_time_formatUtc.multi([ [ \".%L\", function(d) {\n\t    return d.getUTCMilliseconds();\n\t  } ], [ \":%S\", function(d) {\n\t    return d.getUTCSeconds();\n\t  } ], [ \"%I:%M\", function(d) {\n\t    return d.getUTCMinutes();\n\t  } ], [ \"%I %p\", function(d) {\n\t    return d.getUTCHours();\n\t  } ], [ \"%a %d\", function(d) {\n\t    return d.getUTCDay() && d.getUTCDate() != 1;\n\t  } ], [ \"%b %d\", function(d) {\n\t    return d.getUTCDate() != 1;\n\t  } ], [ \"%B\", function(d) {\n\t    return d.getUTCMonth();\n\t  } ], [ \"%Y\", d3_true ] ]);\n\t  d3_time_scaleUtcMethods.year = d3_time.year.utc;\n\t  d3_time.scale.utc = function() {\n\t    return d3_time_scale(d3.scale.linear(), d3_time_scaleUtcMethods, d3_time_scaleUtcFormat);\n\t  };\n\t  d3.text = d3_xhrType(function(request) {\n\t    return request.responseText;\n\t  });\n\t  d3.json = function(url, callback) {\n\t    return d3_xhr(url, \"application/json\", d3_json, callback);\n\t  };\n\t  function d3_json(request) {\n\t    return JSON.parse(request.responseText);\n\t  }\n\t  d3.html = function(url, callback) {\n\t    return d3_xhr(url, \"text/html\", d3_html, callback);\n\t  };\n\t  function d3_html(request) {\n\t    var range = d3_document.createRange();\n\t    range.selectNode(d3_document.body);\n\t    return range.createContextualFragment(request.responseText);\n\t  }\n\t  d3.xml = d3_xhrType(function(request) {\n\t    return request.responseXML;\n\t  });\n\t  if (true) !(__WEBPACK_AMD_DEFINE_FACTORY__ = (d3), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); else if (typeof module === \"object\" && module.exports) module.exports = d3;\n\t  this.d3 = d3;\n\t}();\n\n/***/ }\n\n});\n\n\n/** WEBPACK FOOTER **\n ** 4.bundle.js\n **/","import React from 'react';\nimport _ from 'underscore';\n\nimport Chart from './chart';\nimport Database from '../database';\nimport {getFilters} from '../route-utils';\nimport IssueStore from '../issue-store';\nimport Loadable from './loadable';\nimport moment from 'moment';\n\nconst BurnupShell = React.createClass({\n  componentWillMount() {\n    // Needs to be called before `render()`\n    IssueStore.startPolling();\n  },\n  componentWillUnmount() {\n    IssueStore.stopPolling();\n  },\n  renderLoaded(cards) {\n    function getDay(dateStr) {\n      return Math.floor(Date.parse(dateStr) / 1000 / 60 / 60 / 24);\n    }\n\n    let chunkType = null;\n    function getChunk(dateStr) {\n      if (chunkType === 'day') {\n        return Math.floor(Date.parse(dateStr) / 1000 / 60 / 60 / 24);\n      // } else if (chunkType === 'week') {\n      //   return Math.floor(Date.parse(dateStr) / 1000 / 60 / 60 / 24 / 7);\n      } else if (chunkType === 'month') {\n        const d = new Date(dateStr);\n        return d.getFullYear() * 100 + d.getMonth();\n      } else if (chunkType === 'year') {\n        const d = new Date(dateStr);\n        return d.getFullYear();\n      } else {\n        throw new Error('BUG: Invalid date range chunk type');\n      }\n    }\n    function formatChunk(chunk) {\n      if (chunkType === 'day') {\n        const m = new moment(chunk * 1000 * 60 * 60 * 24);\n        return m.format('MMM DD');\n      // } else if (chunkType === 'week') {\n      //   return Math.floor(Date.parse(dateStr) / 1000 / 60 / 60 / 24 / 7);\n      } else if (chunkType === 'month') {\n        const month = chunk % 100;\n        if (month === 0) {\n          const year = (chunk / 100) % 100; // only use the last 2 digits of the year\n          return `${moment.monthsShort(month)} '${year}`; // moment months are 0-indexed\n        } else {\n          return moment.monthsShort(month); // moment months are 0-indexed\n        }\n      } else if (chunkType === 'year') {\n        return chunk;\n      } else {\n        throw new Error('BUG: Invalid date range chunk type');\n      }\n    }\n    function incrementChunk(chunk) {\n      if (chunkType === 'day') {\n        return chunk + 1;\n      // } else if (chunkType === 'week') {\n      //   return chunk + 7;\n      } else if (chunkType === 'month') {\n        const month = chunk % 100; // split off the year\n        if (month >= 12) {\n          return chunk - month + 100;\n        } else {\n          return chunk + 1;\n        }\n      } else if (chunkType === 'year') {\n        return chunk + 1;\n      } else {\n        throw new Error('BUG: Invalid date range chunk type');\n      }\n    }\n\n    // Get the total number of Issues\n    const total = cards.length;\n\n    if (!cards.length) {\n      return (\n        <span>Not showing a chart because there are 0 cards to show</span>\n      );\n    }\n\n    cards = _.sortBy(cards, (card) => getDay(card.issue.createdAt));\n    // Get the oldest Issue and the newest Issue Date\n    const startDate = cards[0].issue.createdAt;\n\n    let openedCards = cards;\n\n    // From this point, we only care about closed Issues\n    let closedCards = cards.filter((card) => card.issue.closedAt);\n    closedCards = _.sortBy(closedCards, (card) => getDay(card.issue.closedAt));\n    let endDate;\n    if (closedCards.length && openedCards.length) {\n      const lastOpened = openedCards[openedCards.length - 1].issue.createdAt;\n      const lastClosed = closedCards[closedCards.length - 1].issue.closedAt;\n      if (Date.parse(lastOpened) < Date.parse(lastClosed)) {\n        endDate = lastClosed;\n      } else {\n        endDate = lastOpened;\n      }\n    } else if (openedCards.length) {\n      endDate = openedCards[openedCards.length - 1].issue.createdAt;\n    } else if (closedCards.length) {\n      endDate = closedCards[closedCards.length - 1].issue.closedAt;\n    } else {\n      throw new Error('BUG: should not have gotten here');\n    }\n\n    const startDays = getDay(startDate);\n    const endDays = getDay(endDate);\n\n    if (endDays - startDays < 90) {\n      chunkType = 'day';\n    // } else if (endDays - startDays < 100) {\n    //   chunkType = 'week';\n    } else if (endDays - startDays < 1500){\n      chunkType = 'month';\n    } else {\n      chunkType = 'year';\n    }\n\n    const startChunk = getChunk(startDate);\n    const endChunk = getChunk(endDate);\n\n    // TODO: If the number of days is more than, say 50, then show changes per week.\n    // Loop over the days and build a chart\n    let closedCount = 0;\n    let openedCount = 0;\n    const rows = [];\n    for (let currentChunk = startChunk; currentChunk <= endChunk; currentChunk = incrementChunk(currentChunk)) {\n      // loop through the cards to count how many have closed on this day\n      let closedToday = 0;\n      let openedToday = 0;\n      for (let cardIndex = 0; cardIndex < closedCards.length; cardIndex++) {\n        const cardClosedDay = getChunk(closedCards[cardIndex].issue.closedAt);\n        if (cardClosedDay <= currentChunk) {\n          closedToday++;\n        } else {\n          break;\n        }\n      }\n      for (let cardIndex = 0; cardIndex < openedCards.length; cardIndex++) {\n        const cardOpenedDay = getChunk(openedCards[cardIndex].issue.createdAt);\n        if (cardOpenedDay <= currentChunk) {\n          openedToday++;\n        } else {\n          break;\n        }\n      }\n      // remove the cards since they are now accounted for\n      if (closedToday) {\n        closedCards.splice(0, closedToday);\n        closedCount += closedToday;\n      }\n      if (openedToday) {\n        openedCards.splice(0, openedToday);\n        openedCount += openedToday;\n      }\n      // Only add an entry if it changed\n      rows.push([\n        currentChunk,\n        // closedToday ? closedCount : null,\n        // openedToday ? openedCount : null,\n        closedCount,\n        openedCount,\n        openedToday || null\n      ]);\n    }\n\n    // if (closedCards.length > 0) {\n    //   throw new Error('BUG: Should have counted all the cards');\n    // }\n\n    // Add the row titles and the \"Ideal\" line\n    rows[0].push(0); // ideal start\n    rows[rows.length - 1].push(openedCount); // ideal end\n    rows.unshift(['chunk', 'closed', 'total', 'new', 'ideal']);\n\n    const chartData = {\n        x: 'chunk',\n        rows: rows,\n        colors: {\n            closed: '#ff0000',\n            total: '#00ff00',\n            'new': '#0000ff',\n            ideal: '#999999'\n        },\n        types: {\n            closed: 'area-spline',\n            total: 'area-spline',\n            'new': 'bar'\n        },\n        // groups: [['opened', 'closed']]\n    };\n    function formatChunkIndex(index) {\n      return formatChunk(rows[index+1][0]);// +1 because 1st row is the headers\n    }\n    const options = {\n      axis: {\n        x: {\n          type: 'category',\n          tick: {\n            format: formatChunkIndex,\n            culling: {\n              max: 20\n            }\n          }\n        }\n      },\n      // tooltip: { // Doesn't work with the far-right item yet\n      //   position: function(dataToShow, tWidth, tHeight, element) {\n      //     // return {top: 10, left: element.x.baseVal.value};\n      //     const $$ = this;\n      //     const mouse = $$.d3.mouse(element);\n      //     const svgLeft = $$.getSvgLeft(true);\n      //     const tooltipLeft = svgLeft + $$.getCurrentPaddingLeft(true) + $$.x(dataToShow[0].x) + 20;\n      //     const tooltipRight = tooltipLeft + tWidth;\n      //     const chartRight = svgLeft + $$.currentWidth - $$.getCurrentPaddingRight();\n      //     const tooltipTop = mouse[1] + 15;\n      //     return {top: 10, left: tooltipLeft};\n      //   }\n      // }\n    };\n    return (\n      <Chart className='burnup-chart' data={chartData} options={options} element='burnup'/>\n    );\n  },\n  render() {\n    // TODO: send the current filter as an arg to `Database.fetchCards()` so it can smartly (using Indexes) fetch the cards\n    const promise = Database.fetchCards(getFilters());\n\n    return (\n      <div className='burnup'>\n        <h2><i className='octicon octicon-graph'/>  Burnup Chart</h2>\n        <p>Make sure you selected <strong>closed</strong> and <strong>Issues</strong> and optionally a Milestone from the filter dropdown at the top of this page</p>\n        <p>Also, this chart only fills the area when something changed (useful for weekends/open-source projects that frequently have periods of no change)</p>\n        <Loadable\n          promise={promise}\n          renderLoaded={this.renderLoaded}\n        />\n      </div>\n    );\n  }\n});\n\nexport default BurnupShell;\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/components/burnup.jsx\n **/","/**\n * React-C3 Chart\n * Copyright 2015 - Cody Reichert <codyreichert@gmail.com>\n */\n\nimport c3    from 'c3';\nimport React from 'react';\n\nconst ChartComponent = React.createClass({\n    displayName: 'React-C3-Chart',\n\n    propTypes: {\n        className: React.PropTypes.string,\n        data: React.PropTypes.object.isRequired,\n        element: React.PropTypes.string.isRequired,\n        options: React.PropTypes.object\n    },\n\n    chart: null,\n\n    shouldComponentUpdate: function(nextProps) {\n        if(this.props.data.rows.length\n            !== nextProps.data.rows.length) { // shallow check\n            return true;\n        } else if(JSON.stringify(this.props.data.rows)\n                !== JSON.stringify(nextProps.data.rows)) { // deeper check\n            return  true;\n        }\n        return false;\n    },\n\n    componentDidMount: function() {\n        this._generateChart(\n            this.props.data,\n            this.props.element,\n            this.props.options\n        );\n    },\n\n    componentDidUpdate: function(prevProps) {\n        if(prevProps.data.rows !== this.props.data.rows) {\n            this._generateChart(\n                this.props.data,\n                this.props.element,\n                this.props.options\n            );\n        }\n    },\n\n    componentWillUnmount: function() {\n        this._destroyChart();\n    },\n\n    _generateChart: function(data, element, options) {\n      let build = Object.assign({}, {\n        bindto: '#' + element,\n        data: data\n      }, options);\n      this.chart = c3.generate(build);\n    },\n\n    _destroyChart: function() {\n        this.chart.destroy();\n    },\n\n    render: function() {\n        let className;\n        if (this.props.className) {\n          className = 'c3 ' + this.props.className;\n        } else {\n          className = 'c3';\n        }\n        return (\n            <div className={className}\n                 id={this.props.element}\n                 style={this.props.styles}>\n            </div>\n        );\n    }\n});\n\n\nexport default ChartComponent;\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/components/chart.jsx\n **/","(function (window) {\n    'use strict';\n\n    /*global define, module, exports, require */\n\n    var c3 = { version: \"0.4.10\" };\n\n    var c3_chart_fn,\n        c3_chart_internal_fn,\n        c3_chart_internal_axis_fn;\n\n    function API(owner) {\n        this.owner = owner;\n    }\n\n    function inherit(base, derived) {\n\n        if (Object.create) {\n            derived.prototype = Object.create(base.prototype);\n        } else {\n            var f = function f() {};\n            f.prototype = base.prototype;\n            derived.prototype = new f();\n        }\n\n        derived.prototype.constructor = derived;\n\n        return derived;\n    }\n\n    function Chart(config) {\n        var $$ = this.internal = new ChartInternal(this);\n        $$.loadConfig(config);\n        $$.init();\n\n        // bind \"this\" to nested API\n        (function bindThis(fn, target, argThis) {\n            Object.keys(fn).forEach(function (key) {\n                target[key] = fn[key].bind(argThis);\n                if (Object.keys(fn[key]).length > 0) {\n                    bindThis(fn[key], target[key], argThis);\n                }\n            });\n        })(c3_chart_fn, this, this);\n    }\n\n    function ChartInternal(api) {\n        var $$ = this;\n        $$.d3 = window.d3 ? window.d3 : typeof require !== 'undefined' ? require(\"d3\") : undefined;\n        $$.api = api;\n        $$.config = $$.getDefaultConfig();\n        $$.data = {};\n        $$.cache = {};\n        $$.axes = {};\n    }\n\n    c3.generate = function (config) {\n        return new Chart(config);\n    };\n\n    c3.chart = {\n        fn: Chart.prototype,\n        internal: {\n            fn: ChartInternal.prototype,\n            axis: {\n                fn: Axis.prototype\n            }\n        }\n    };\n    c3_chart_fn = c3.chart.fn;\n    c3_chart_internal_fn = c3.chart.internal.fn;\n    c3_chart_internal_axis_fn = c3.chart.internal.axis.fn;\n\n    c3_chart_internal_fn.init = function () {\n        var $$ = this, config = $$.config;\n\n        $$.initParams();\n\n        if (config.data_url) {\n            $$.convertUrlToData(config.data_url, config.data_mimeType, config.data_keys, $$.initWithData);\n        }\n        else if (config.data_json) {\n            $$.initWithData($$.convertJsonToData(config.data_json, config.data_keys));\n        }\n        else if (config.data_rows) {\n            $$.initWithData($$.convertRowsToData(config.data_rows));\n        }\n        else if (config.data_columns) {\n            $$.initWithData($$.convertColumnsToData(config.data_columns));\n        }\n        else {\n            throw Error('url or json or rows or columns is required.');\n        }\n    };\n\n    c3_chart_internal_fn.initParams = function () {\n        var $$ = this, d3 = $$.d3, config = $$.config;\n\n        // MEMO: clipId needs to be unique because it conflicts when multiple charts exist\n        $$.clipId = \"c3-\" + (+new Date()) + '-clip',\n        $$.clipIdForXAxis = $$.clipId + '-xaxis',\n        $$.clipIdForYAxis = $$.clipId + '-yaxis',\n        $$.clipIdForGrid = $$.clipId + '-grid',\n        $$.clipIdForSubchart = $$.clipId + '-subchart',\n        $$.clipPath = $$.getClipPath($$.clipId),\n        $$.clipPathForXAxis = $$.getClipPath($$.clipIdForXAxis),\n        $$.clipPathForYAxis = $$.getClipPath($$.clipIdForYAxis);\n        $$.clipPathForGrid = $$.getClipPath($$.clipIdForGrid),\n        $$.clipPathForSubchart = $$.getClipPath($$.clipIdForSubchart),\n\n        $$.dragStart = null;\n        $$.dragging = false;\n        $$.flowing = false;\n        $$.cancelClick = false;\n        $$.mouseover = false;\n        $$.transiting = false;\n\n        $$.color = $$.generateColor();\n        $$.levelColor = $$.generateLevelColor();\n\n        $$.dataTimeFormat = config.data_xLocaltime ? d3.time.format : d3.time.format.utc;\n        $$.axisTimeFormat = config.axis_x_localtime ? d3.time.format : d3.time.format.utc;\n        $$.defaultAxisTimeFormat = $$.axisTimeFormat.multi([\n            [\".%L\", function (d) { return d.getMilliseconds(); }],\n            [\":%S\", function (d) { return d.getSeconds(); }],\n            [\"%I:%M\", function (d) { return d.getMinutes(); }],\n            [\"%I %p\", function (d) { return d.getHours(); }],\n            [\"%-m/%-d\", function (d) { return d.getDay() && d.getDate() !== 1; }],\n            [\"%-m/%-d\", function (d) { return d.getDate() !== 1; }],\n            [\"%-m/%-d\", function (d) { return d.getMonth(); }],\n            [\"%Y/%-m/%-d\", function () { return true; }]\n        ]);\n\n        $$.hiddenTargetIds = [];\n        $$.hiddenLegendIds = [];\n        $$.focusedTargetIds = [];\n        $$.defocusedTargetIds = [];\n\n        $$.xOrient = config.axis_rotated ? \"left\" : \"bottom\";\n        $$.yOrient = config.axis_rotated ? (config.axis_y_inner ? \"top\" : \"bottom\") : (config.axis_y_inner ? \"right\" : \"left\");\n        $$.y2Orient = config.axis_rotated ? (config.axis_y2_inner ? \"bottom\" : \"top\") : (config.axis_y2_inner ? \"left\" : \"right\");\n        $$.subXOrient = config.axis_rotated ? \"left\" : \"bottom\";\n\n        $$.isLegendRight = config.legend_position === 'right';\n        $$.isLegendInset = config.legend_position === 'inset';\n        $$.isLegendTop = config.legend_inset_anchor === 'top-left' || config.legend_inset_anchor === 'top-right';\n        $$.isLegendLeft = config.legend_inset_anchor === 'top-left' || config.legend_inset_anchor === 'bottom-left';\n        $$.legendStep = 0;\n        $$.legendItemWidth = 0;\n        $$.legendItemHeight = 0;\n\n        $$.currentMaxTickWidths = {\n            x: 0,\n            y: 0,\n            y2: 0\n        };\n\n        $$.rotated_padding_left = 30;\n        $$.rotated_padding_right = config.axis_rotated && !config.axis_x_show ? 0 : 30;\n        $$.rotated_padding_top = 5;\n\n        $$.withoutFadeIn = {};\n\n        $$.intervalForObserveInserted = undefined;\n\n        $$.axes.subx = d3.selectAll([]); // needs when excluding subchart.js\n    };\n\n    c3_chart_internal_fn.initChartElements = function () {\n        if (this.initBar) { this.initBar(); }\n        if (this.initLine) { this.initLine(); }\n        if (this.initArc) { this.initArc(); }\n        if (this.initGauge) { this.initGauge(); }\n        if (this.initText) { this.initText(); }\n    };\n\n    c3_chart_internal_fn.initWithData = function (data) {\n        var $$ = this, d3 = $$.d3, config = $$.config;\n        var defs, main, binding = true;\n\n        $$.axis = new Axis($$);\n\n        if ($$.initPie) { $$.initPie(); }\n        if ($$.initBrush) { $$.initBrush(); }\n        if ($$.initZoom) { $$.initZoom(); }\n\n        if (!config.bindto) {\n            $$.selectChart = d3.selectAll([]);\n        }\n        else if (typeof config.bindto.node === 'function') {\n            $$.selectChart = config.bindto;\n        }\n        else {\n            $$.selectChart = d3.select(config.bindto);\n        }\n        if ($$.selectChart.empty()) {\n            $$.selectChart = d3.select(document.createElement('div')).style('opacity', 0);\n            $$.observeInserted($$.selectChart);\n            binding = false;\n        }\n        $$.selectChart.html(\"\").classed(\"c3\", true);\n\n        // Init data as targets\n        $$.data.xs = {};\n        $$.data.targets = $$.convertDataToTargets(data);\n\n        if (config.data_filter) {\n            $$.data.targets = $$.data.targets.filter(config.data_filter);\n        }\n\n        // Set targets to hide if needed\n        if (config.data_hide) {\n            $$.addHiddenTargetIds(config.data_hide === true ? $$.mapToIds($$.data.targets) : config.data_hide);\n        }\n        if (config.legend_hide) {\n            $$.addHiddenLegendIds(config.legend_hide === true ? $$.mapToIds($$.data.targets) : config.legend_hide);\n        }\n\n        // when gauge, hide legend // TODO: fix\n        if ($$.hasType('gauge')) {\n            config.legend_show = false;\n        }\n\n        // Init sizes and scales\n        $$.updateSizes();\n        $$.updateScales();\n\n        // Set domains for each scale\n        $$.x.domain(d3.extent($$.getXDomain($$.data.targets)));\n        $$.y.domain($$.getYDomain($$.data.targets, 'y'));\n        $$.y2.domain($$.getYDomain($$.data.targets, 'y2'));\n        $$.subX.domain($$.x.domain());\n        $$.subY.domain($$.y.domain());\n        $$.subY2.domain($$.y2.domain());\n\n        // Save original x domain for zoom update\n        $$.orgXDomain = $$.x.domain();\n\n        // Set initialized scales to brush and zoom\n        if ($$.brush) { $$.brush.scale($$.subX); }\n        if (config.zoom_enabled) { $$.zoom.scale($$.x); }\n\n        /*-- Basic Elements --*/\n\n        // Define svgs\n        $$.svg = $$.selectChart.append(\"svg\")\n            .style(\"overflow\", \"hidden\")\n            .on('mouseenter', function () { return config.onmouseover.call($$); })\n            .on('mouseleave', function () { return config.onmouseout.call($$); });\n\n        // Define defs\n        defs = $$.svg.append(\"defs\");\n        $$.clipChart = $$.appendClip(defs, $$.clipId);\n        $$.clipXAxis = $$.appendClip(defs, $$.clipIdForXAxis);\n        $$.clipYAxis = $$.appendClip(defs, $$.clipIdForYAxis);\n        $$.clipGrid = $$.appendClip(defs, $$.clipIdForGrid);\n        $$.clipSubchart = $$.appendClip(defs, $$.clipIdForSubchart);\n        $$.updateSvgSize();\n\n        // Define regions\n        main = $$.main = $$.svg.append(\"g\").attr(\"transform\", $$.getTranslate('main'));\n\n        if ($$.initSubchart) { $$.initSubchart(); }\n        if ($$.initTooltip) { $$.initTooltip(); }\n        if ($$.initLegend) { $$.initLegend(); }\n\n        /*-- Main Region --*/\n\n        // text when empty\n        main.append(\"text\")\n            .attr(\"class\", CLASS.text + ' ' + CLASS.empty)\n            .attr(\"text-anchor\", \"middle\") // horizontal centering of text at x position in all browsers.\n            .attr(\"dominant-baseline\", \"middle\"); // vertical centering of text at y position in all browsers, except IE.\n\n        // Regions\n        $$.initRegion();\n\n        // Grids\n        $$.initGrid();\n\n        // Define g for chart area\n        main.append('g')\n            .attr(\"clip-path\", $$.clipPath)\n            .attr('class', CLASS.chart);\n\n        // Grid lines\n        if (config.grid_lines_front) { $$.initGridLines(); }\n\n        // Cover whole with rects for events\n        $$.initEventRect();\n\n        // Define g for chart\n        $$.initChartElements();\n\n        // if zoom privileged, insert rect to forefront\n        // TODO: is this needed?\n        main.insert('rect', config.zoom_privileged ? null : 'g.' + CLASS.regions)\n            .attr('class', CLASS.zoomRect)\n            .attr('width', $$.width)\n            .attr('height', $$.height)\n            .style('opacity', 0)\n            .on(\"dblclick.zoom\", null);\n\n        // Set default extent if defined\n        if (config.axis_x_extent) { $$.brush.extent($$.getDefaultExtent()); }\n\n        // Add Axis\n        $$.axis.init();\n\n        // Set targets\n        $$.updateTargets($$.data.targets);\n\n        // Draw with targets\n        if (binding) {\n            $$.updateDimension();\n            $$.config.oninit.call($$);\n            $$.redraw({\n                withTransition: false,\n                withTransform: true,\n                withUpdateXDomain: true,\n                withUpdateOrgXDomain: true,\n                withTransitionForAxis: false\n            });\n        }\n\n        // Bind resize event\n        if (window.onresize == null) {\n            window.onresize = $$.generateResize();\n        }\n        if (window.onresize.add) {\n            window.onresize.add(function () {\n                config.onresize.call($$);\n            });\n            window.onresize.add(function () {\n                $$.api.flush();\n            });\n            window.onresize.add(function () {\n                config.onresized.call($$);\n            });\n        }\n\n        // export element of the chart\n        $$.api.element = $$.selectChart.node();\n    };\n\n    c3_chart_internal_fn.smoothLines = function (el, type) {\n        var $$ = this;\n        if (type === 'grid') {\n            el.each(function () {\n                var g = $$.d3.select(this),\n                    x1 = g.attr('x1'),\n                    x2 = g.attr('x2'),\n                    y1 = g.attr('y1'),\n                    y2 = g.attr('y2');\n                g.attr({\n                    'x1': Math.ceil(x1),\n                    'x2': Math.ceil(x2),\n                    'y1': Math.ceil(y1),\n                    'y2': Math.ceil(y2)\n                });\n            });\n        }\n    };\n\n\n    c3_chart_internal_fn.updateSizes = function () {\n        var $$ = this, config = $$.config;\n        var legendHeight = $$.legend ? $$.getLegendHeight() : 0,\n            legendWidth = $$.legend ? $$.getLegendWidth() : 0,\n            legendHeightForBottom = $$.isLegendRight || $$.isLegendInset ? 0 : legendHeight,\n            hasArc = $$.hasArcType(),\n            xAxisHeight = config.axis_rotated || hasArc ? 0 : $$.getHorizontalAxisHeight('x'),\n            subchartHeight = config.subchart_show && !hasArc ? (config.subchart_size_height + xAxisHeight) : 0;\n\n        $$.currentWidth = $$.getCurrentWidth();\n        $$.currentHeight = $$.getCurrentHeight();\n\n        // for main\n        $$.margin = config.axis_rotated ? {\n            top: $$.getHorizontalAxisHeight('y2') + $$.getCurrentPaddingTop(),\n            right: hasArc ? 0 : $$.getCurrentPaddingRight(),\n            bottom: $$.getHorizontalAxisHeight('y') + legendHeightForBottom + $$.getCurrentPaddingBottom(),\n            left: subchartHeight + (hasArc ? 0 : $$.getCurrentPaddingLeft())\n        } : {\n            top: 4 + $$.getCurrentPaddingTop(), // for top tick text\n            right: hasArc ? 0 : $$.getCurrentPaddingRight(),\n            bottom: xAxisHeight + subchartHeight + legendHeightForBottom + $$.getCurrentPaddingBottom(),\n            left: hasArc ? 0 : $$.getCurrentPaddingLeft()\n        };\n\n        // for subchart\n        $$.margin2 = config.axis_rotated ? {\n            top: $$.margin.top,\n            right: NaN,\n            bottom: 20 + legendHeightForBottom,\n            left: $$.rotated_padding_left\n        } : {\n            top: $$.currentHeight - subchartHeight - legendHeightForBottom,\n            right: NaN,\n            bottom: xAxisHeight + legendHeightForBottom,\n            left: $$.margin.left\n        };\n\n        // for legend\n        $$.margin3 = {\n            top: 0,\n            right: NaN,\n            bottom: 0,\n            left: 0\n        };\n        if ($$.updateSizeForLegend) { $$.updateSizeForLegend(legendHeight, legendWidth); }\n\n        $$.width = $$.currentWidth - $$.margin.left - $$.margin.right;\n        $$.height = $$.currentHeight - $$.margin.top - $$.margin.bottom;\n        if ($$.width < 0) { $$.width = 0; }\n        if ($$.height < 0) { $$.height = 0; }\n\n        $$.width2 = config.axis_rotated ? $$.margin.left - $$.rotated_padding_left - $$.rotated_padding_right : $$.width;\n        $$.height2 = config.axis_rotated ? $$.height : $$.currentHeight - $$.margin2.top - $$.margin2.bottom;\n        if ($$.width2 < 0) { $$.width2 = 0; }\n        if ($$.height2 < 0) { $$.height2 = 0; }\n\n        // for arc\n        $$.arcWidth = $$.width - ($$.isLegendRight ? legendWidth + 10 : 0);\n        $$.arcHeight = $$.height - ($$.isLegendRight ? 0 : 10);\n        if ($$.hasType('gauge')) {\n            $$.arcHeight += $$.height - $$.getGaugeLabelHeight();\n        }\n        if ($$.updateRadius) { $$.updateRadius(); }\n\n        if ($$.isLegendRight && hasArc) {\n            $$.margin3.left = $$.arcWidth / 2 + $$.radiusExpanded * 1.1;\n        }\n    };\n\n    c3_chart_internal_fn.updateTargets = function (targets) {\n        var $$ = this;\n\n        /*-- Main --*/\n\n        //-- Text --//\n        $$.updateTargetsForText(targets);\n\n        //-- Bar --//\n        $$.updateTargetsForBar(targets);\n\n        //-- Line --//\n        $$.updateTargetsForLine(targets);\n\n        //-- Arc --//\n        if ($$.hasArcType() && $$.updateTargetsForArc) { $$.updateTargetsForArc(targets); }\n\n        /*-- Sub --*/\n\n        if ($$.updateTargetsForSubchart) { $$.updateTargetsForSubchart(targets); }\n\n        // Fade-in each chart\n        $$.showTargets();\n    };\n    c3_chart_internal_fn.showTargets = function () {\n        var $$ = this;\n        $$.svg.selectAll('.' + CLASS.target).filter(function (d) { return $$.isTargetToShow(d.id); })\n          .transition().duration($$.config.transition_duration)\n            .style(\"opacity\", 1);\n    };\n\n    c3_chart_internal_fn.redraw = function (options, transitions) {\n        var $$ = this, main = $$.main, d3 = $$.d3, config = $$.config;\n        var areaIndices = $$.getShapeIndices($$.isAreaType), barIndices = $$.getShapeIndices($$.isBarType), lineIndices = $$.getShapeIndices($$.isLineType);\n        var withY, withSubchart, withTransition, withTransitionForExit, withTransitionForAxis,\n            withTransform, withUpdateXDomain, withUpdateOrgXDomain, withTrimXDomain, withLegend,\n            withEventRect, withDimension, withUpdateXAxis;\n        var hideAxis = $$.hasArcType();\n        var drawArea, drawBar, drawLine, xForText, yForText;\n        var duration, durationForExit, durationForAxis;\n        var waitForDraw, flow;\n        var targetsToShow = $$.filterTargetsToShow($$.data.targets), tickValues, i, intervalForCulling, xDomainForZoom;\n        var xv = $$.xv.bind($$), cx, cy;\n\n        options = options || {};\n        withY = getOption(options, \"withY\", true);\n        withSubchart = getOption(options, \"withSubchart\", true);\n        withTransition = getOption(options, \"withTransition\", true);\n        withTransform = getOption(options, \"withTransform\", false);\n        withUpdateXDomain = getOption(options, \"withUpdateXDomain\", false);\n        withUpdateOrgXDomain = getOption(options, \"withUpdateOrgXDomain\", false);\n        withTrimXDomain = getOption(options, \"withTrimXDomain\", true);\n        withUpdateXAxis = getOption(options, \"withUpdateXAxis\", withUpdateXDomain);\n        withLegend = getOption(options, \"withLegend\", false);\n        withEventRect = getOption(options, \"withEventRect\", true);\n        withDimension = getOption(options, \"withDimension\", true);\n        withTransitionForExit = getOption(options, \"withTransitionForExit\", withTransition);\n        withTransitionForAxis = getOption(options, \"withTransitionForAxis\", withTransition);\n\n        duration = withTransition ? config.transition_duration : 0;\n        durationForExit = withTransitionForExit ? duration : 0;\n        durationForAxis = withTransitionForAxis ? duration : 0;\n\n        transitions = transitions || $$.axis.generateTransitions(durationForAxis);\n\n        // update legend and transform each g\n        if (withLegend && config.legend_show) {\n            $$.updateLegend($$.mapToIds($$.data.targets), options, transitions);\n        } else if (withDimension) {\n            // need to update dimension (e.g. axis.y.tick.values) because y tick values should change\n            // no need to update axis in it because they will be updated in redraw()\n            $$.updateDimension(true);\n        }\n\n        // MEMO: needed for grids calculation\n        if ($$.isCategorized() && targetsToShow.length === 0) {\n            $$.x.domain([0, $$.axes.x.selectAll('.tick').size()]);\n        }\n\n        if (targetsToShow.length) {\n            $$.updateXDomain(targetsToShow, withUpdateXDomain, withUpdateOrgXDomain, withTrimXDomain);\n            if (!config.axis_x_tick_values) {\n                tickValues = $$.axis.updateXAxisTickValues(targetsToShow);\n            }\n        } else {\n            $$.xAxis.tickValues([]);\n            $$.subXAxis.tickValues([]);\n        }\n\n        if (config.zoom_rescale && !options.flow) {\n            xDomainForZoom = $$.x.orgDomain();\n        }\n\n        $$.y.domain($$.getYDomain(targetsToShow, 'y', xDomainForZoom));\n        $$.y2.domain($$.getYDomain(targetsToShow, 'y2', xDomainForZoom));\n\n        if (!config.axis_y_tick_values && config.axis_y_tick_count) {\n            $$.yAxis.tickValues($$.axis.generateTickValues($$.y.domain(), config.axis_y_tick_count));\n        }\n        if (!config.axis_y2_tick_values && config.axis_y2_tick_count) {\n            $$.y2Axis.tickValues($$.axis.generateTickValues($$.y2.domain(), config.axis_y2_tick_count));\n        }\n\n        // axes\n        $$.axis.redraw(transitions, hideAxis);\n\n        // Update axis label\n        $$.axis.updateLabels(withTransition);\n\n        // show/hide if manual culling needed\n        if ((withUpdateXDomain || withUpdateXAxis) && targetsToShow.length) {\n            if (config.axis_x_tick_culling && tickValues) {\n                for (i = 1; i < tickValues.length; i++) {\n                    if (tickValues.length / i < config.axis_x_tick_culling_max) {\n                        intervalForCulling = i;\n                        break;\n                    }\n                }\n                $$.svg.selectAll('.' + CLASS.axisX + ' .tick text').each(function (e) {\n                    var index = tickValues.indexOf(e);\n                    if (index >= 0) {\n                        d3.select(this).style('display', index % intervalForCulling ? 'none' : 'block');\n                    }\n                });\n            } else {\n                $$.svg.selectAll('.' + CLASS.axisX + ' .tick text').style('display', 'block');\n            }\n        }\n\n        // setup drawer - MEMO: these must be called after axis updated\n        drawArea = $$.generateDrawArea ? $$.generateDrawArea(areaIndices, false) : undefined;\n        drawBar = $$.generateDrawBar ? $$.generateDrawBar(barIndices) : undefined;\n        drawLine = $$.generateDrawLine ? $$.generateDrawLine(lineIndices, false) : undefined;\n        xForText = $$.generateXYForText(areaIndices, barIndices, lineIndices, true);\n        yForText = $$.generateXYForText(areaIndices, barIndices, lineIndices, false);\n\n        // Update sub domain\n        if (withY) {\n            $$.subY.domain($$.getYDomain(targetsToShow, 'y'));\n            $$.subY2.domain($$.getYDomain(targetsToShow, 'y2'));\n        }\n\n        // tooltip\n        $$.tooltip.style(\"display\", \"none\");\n\n        // xgrid focus\n        $$.updateXgridFocus();\n\n        // Data empty label positioning and text.\n        main.select(\"text.\" + CLASS.text + '.' + CLASS.empty)\n            .attr(\"x\", $$.width / 2)\n            .attr(\"y\", $$.height / 2)\n            .text(config.data_empty_label_text)\n          .transition()\n            .style('opacity', targetsToShow.length ? 0 : 1);\n\n        // grid\n        $$.updateGrid(duration);\n\n        // rect for regions\n        $$.updateRegion(duration);\n\n        // bars\n        $$.updateBar(durationForExit);\n\n        // lines, areas and cricles\n        $$.updateLine(durationForExit);\n        $$.updateArea(durationForExit);\n        $$.updateCircle();\n\n        // text\n        if ($$.hasDataLabel()) {\n            $$.updateText(durationForExit);\n        }\n\n        // arc\n        if ($$.redrawArc) { $$.redrawArc(duration, durationForExit, withTransform); }\n\n        // subchart\n        if ($$.redrawSubchart) {\n            $$.redrawSubchart(withSubchart, transitions, duration, durationForExit, areaIndices, barIndices, lineIndices);\n        }\n\n        // circles for select\n        main.selectAll('.' + CLASS.selectedCircles)\n            .filter($$.isBarType.bind($$))\n            .selectAll('circle')\n            .remove();\n\n        // event rects will redrawn when flow called\n        if (config.interaction_enabled && !options.flow && withEventRect) {\n            $$.redrawEventRect();\n            if ($$.updateZoom) { $$.updateZoom(); }\n        }\n\n        // update circleY based on updated parameters\n        $$.updateCircleY();\n\n        // generate circle x/y functions depending on updated params\n        cx = ($$.config.axis_rotated ? $$.circleY : $$.circleX).bind($$);\n        cy = ($$.config.axis_rotated ? $$.circleX : $$.circleY).bind($$);\n\n        if (options.flow) {\n            flow = $$.generateFlow({\n                targets: targetsToShow,\n                flow: options.flow,\n                duration: options.flow.duration,\n                drawBar: drawBar,\n                drawLine: drawLine,\n                drawArea: drawArea,\n                cx: cx,\n                cy: cy,\n                xv: xv,\n                xForText: xForText,\n                yForText: yForText\n            });\n        }\n\n        if ((duration || flow) && $$.isTabVisible()) { // Only use transition if tab visible. See #938.\n            // transition should be derived from one transition\n            d3.transition().duration(duration).each(function () {\n                var transitionsToWait = [];\n\n                // redraw and gather transitions\n                [\n                    $$.redrawBar(drawBar, true),\n                    $$.redrawLine(drawLine, true),\n                    $$.redrawArea(drawArea, true),\n                    $$.redrawCircle(cx, cy, true),\n                    $$.redrawText(xForText, yForText, options.flow, true),\n                    $$.redrawRegion(true),\n                    $$.redrawGrid(true),\n                ].forEach(function (transitions) {\n                    transitions.forEach(function (transition) {\n                        transitionsToWait.push(transition);\n                    });\n                });\n\n                // Wait for end of transitions to call flow and onrendered callback\n                waitForDraw = $$.generateWait();\n                transitionsToWait.forEach(function (t) {\n                    waitForDraw.add(t);\n                });\n            })\n            .call(waitForDraw, function () {\n                if (flow) {\n                    flow();\n                }\n                if (config.onrendered) {\n                    config.onrendered.call($$);\n                }\n            });\n        }\n        else {\n            $$.redrawBar(drawBar);\n            $$.redrawLine(drawLine);\n            $$.redrawArea(drawArea);\n            $$.redrawCircle(cx, cy);\n            $$.redrawText(xForText, yForText, options.flow);\n            $$.redrawRegion();\n            $$.redrawGrid();\n            if (config.onrendered) {\n                config.onrendered.call($$);\n            }\n        }\n\n        // update fadein condition\n        $$.mapToIds($$.data.targets).forEach(function (id) {\n            $$.withoutFadeIn[id] = true;\n        });\n    };\n\n    c3_chart_internal_fn.updateAndRedraw = function (options) {\n        var $$ = this, config = $$.config, transitions;\n        options = options || {};\n        // same with redraw\n        options.withTransition = getOption(options, \"withTransition\", true);\n        options.withTransform = getOption(options, \"withTransform\", false);\n        options.withLegend = getOption(options, \"withLegend\", false);\n        // NOT same with redraw\n        options.withUpdateXDomain = true;\n        options.withUpdateOrgXDomain = true;\n        options.withTransitionForExit = false;\n        options.withTransitionForTransform = getOption(options, \"withTransitionForTransform\", options.withTransition);\n        // MEMO: this needs to be called before updateLegend and it means this ALWAYS needs to be called)\n        $$.updateSizes();\n        // MEMO: called in updateLegend in redraw if withLegend\n        if (!(options.withLegend && config.legend_show)) {\n            transitions = $$.axis.generateTransitions(options.withTransitionForAxis ? config.transition_duration : 0);\n            // Update scales\n            $$.updateScales();\n            $$.updateSvgSize();\n            // Update g positions\n            $$.transformAll(options.withTransitionForTransform, transitions);\n        }\n        // Draw with new sizes & scales\n        $$.redraw(options, transitions);\n    };\n    c3_chart_internal_fn.redrawWithoutRescale = function () {\n        this.redraw({\n            withY: false,\n            withSubchart: false,\n            withEventRect: false,\n            withTransitionForAxis: false\n        });\n    };\n\n    c3_chart_internal_fn.isTimeSeries = function () {\n        return this.config.axis_x_type === 'timeseries';\n    };\n    c3_chart_internal_fn.isCategorized = function () {\n        return this.config.axis_x_type.indexOf('categor') >= 0;\n    };\n    c3_chart_internal_fn.isCustomX = function () {\n        var $$ = this, config = $$.config;\n        return !$$.isTimeSeries() && (config.data_x || notEmpty(config.data_xs));\n    };\n\n    c3_chart_internal_fn.isTimeSeriesY = function () {\n        return this.config.axis_y_type === 'timeseries';\n    };\n\n    c3_chart_internal_fn.getTranslate = function (target) {\n        var $$ = this, config = $$.config, x, y;\n        if (target === 'main') {\n            x = asHalfPixel($$.margin.left);\n            y = asHalfPixel($$.margin.top);\n        } else if (target === 'context') {\n            x = asHalfPixel($$.margin2.left);\n            y = asHalfPixel($$.margin2.top);\n        } else if (target === 'legend') {\n            x = $$.margin3.left;\n            y = $$.margin3.top;\n        } else if (target === 'x') {\n            x = 0;\n            y = config.axis_rotated ? 0 : $$.height;\n        } else if (target === 'y') {\n            x = 0;\n            y = config.axis_rotated ? $$.height : 0;\n        } else if (target === 'y2') {\n            x = config.axis_rotated ? 0 : $$.width;\n            y = config.axis_rotated ? 1 : 0;\n        } else if (target === 'subx') {\n            x = 0;\n            y = config.axis_rotated ? 0 : $$.height2;\n        } else if (target === 'arc') {\n            x = $$.arcWidth / 2;\n            y = $$.arcHeight / 2;\n        }\n        return \"translate(\" + x + \",\" + y + \")\";\n    };\n    c3_chart_internal_fn.initialOpacity = function (d) {\n        return d.value !== null && this.withoutFadeIn[d.id] ? 1 : 0;\n    };\n    c3_chart_internal_fn.initialOpacityForCircle = function (d) {\n        return d.value !== null && this.withoutFadeIn[d.id] ? this.opacityForCircle(d) : 0;\n    };\n    c3_chart_internal_fn.opacityForCircle = function (d) {\n        var opacity = this.config.point_show ? 1 : 0;\n        return isValue(d.value) ? (this.isScatterType(d) ? 0.5 : opacity) : 0;\n    };\n    c3_chart_internal_fn.opacityForText = function () {\n        return this.hasDataLabel() ? 1 : 0;\n    };\n    c3_chart_internal_fn.xx = function (d) {\n        return d ? this.x(d.x) : null;\n    };\n    c3_chart_internal_fn.xv = function (d) {\n        var $$ = this, value = d.value;\n        if ($$.isTimeSeries()) {\n            value = $$.parseDate(d.value);\n        }\n        else if ($$.isCategorized() && typeof d.value === 'string') {\n            value = $$.config.axis_x_categories.indexOf(d.value);\n        }\n        return Math.ceil($$.x(value));\n    };\n    c3_chart_internal_fn.yv = function (d) {\n        var $$ = this,\n            yScale = d.axis && d.axis === 'y2' ? $$.y2 : $$.y;\n        return Math.ceil(yScale(d.value));\n    };\n    c3_chart_internal_fn.subxx = function (d) {\n        return d ? this.subX(d.x) : null;\n    };\n\n    c3_chart_internal_fn.transformMain = function (withTransition, transitions) {\n        var $$ = this,\n            xAxis, yAxis, y2Axis;\n        if (transitions && transitions.axisX) {\n            xAxis = transitions.axisX;\n        } else {\n            xAxis  = $$.main.select('.' + CLASS.axisX);\n            if (withTransition) { xAxis = xAxis.transition(); }\n        }\n        if (transitions && transitions.axisY) {\n            yAxis = transitions.axisY;\n        } else {\n            yAxis = $$.main.select('.' + CLASS.axisY);\n            if (withTransition) { yAxis = yAxis.transition(); }\n        }\n        if (transitions && transitions.axisY2) {\n            y2Axis = transitions.axisY2;\n        } else {\n            y2Axis = $$.main.select('.' + CLASS.axisY2);\n            if (withTransition) { y2Axis = y2Axis.transition(); }\n        }\n        (withTransition ? $$.main.transition() : $$.main).attr(\"transform\", $$.getTranslate('main'));\n        xAxis.attr(\"transform\", $$.getTranslate('x'));\n        yAxis.attr(\"transform\", $$.getTranslate('y'));\n        y2Axis.attr(\"transform\", $$.getTranslate('y2'));\n        $$.main.select('.' + CLASS.chartArcs).attr(\"transform\", $$.getTranslate('arc'));\n    };\n    c3_chart_internal_fn.transformAll = function (withTransition, transitions) {\n        var $$ = this;\n        $$.transformMain(withTransition, transitions);\n        if ($$.config.subchart_show) { $$.transformContext(withTransition, transitions); }\n        if ($$.legend) { $$.transformLegend(withTransition); }\n    };\n\n    c3_chart_internal_fn.updateSvgSize = function () {\n        var $$ = this,\n            brush = $$.svg.select(\".c3-brush .background\");\n        $$.svg.attr('width', $$.currentWidth).attr('height', $$.currentHeight);\n        $$.svg.selectAll(['#' + $$.clipId, '#' + $$.clipIdForGrid]).select('rect')\n            .attr('width', $$.width)\n            .attr('height', $$.height);\n        $$.svg.select('#' + $$.clipIdForXAxis).select('rect')\n            .attr('x', $$.getXAxisClipX.bind($$))\n            .attr('y', $$.getXAxisClipY.bind($$))\n            .attr('width', $$.getXAxisClipWidth.bind($$))\n            .attr('height', $$.getXAxisClipHeight.bind($$));\n        $$.svg.select('#' + $$.clipIdForYAxis).select('rect')\n            .attr('x', $$.getYAxisClipX.bind($$))\n            .attr('y', $$.getYAxisClipY.bind($$))\n            .attr('width', $$.getYAxisClipWidth.bind($$))\n            .attr('height', $$.getYAxisClipHeight.bind($$));\n        $$.svg.select('#' + $$.clipIdForSubchart).select('rect')\n            .attr('width', $$.width)\n            .attr('height', brush.size() ? brush.attr('height') : 0);\n        $$.svg.select('.' + CLASS.zoomRect)\n            .attr('width', $$.width)\n            .attr('height', $$.height);\n        // MEMO: parent div's height will be bigger than svg when <!DOCTYPE html>\n        $$.selectChart.style('max-height', $$.currentHeight + \"px\");\n    };\n\n\n    c3_chart_internal_fn.updateDimension = function (withoutAxis) {\n        var $$ = this;\n        if (!withoutAxis) {\n            if ($$.config.axis_rotated) {\n                $$.axes.x.call($$.xAxis);\n                $$.axes.subx.call($$.subXAxis);\n            } else {\n                $$.axes.y.call($$.yAxis);\n                $$.axes.y2.call($$.y2Axis);\n            }\n        }\n        $$.updateSizes();\n        $$.updateScales();\n        $$.updateSvgSize();\n        $$.transformAll(false);\n    };\n\n    c3_chart_internal_fn.observeInserted = function (selection) {\n        var $$ = this, observer;\n        if (typeof MutationObserver === 'undefined') {\n            window.console.error(\"MutationObserver not defined.\");\n            return;\n        }\n        observer= new MutationObserver(function (mutations) {\n            mutations.forEach(function (mutation) {\n                if (mutation.type === 'childList' && mutation.previousSibling) {\n                    observer.disconnect();\n                    // need to wait for completion of load because size calculation requires the actual sizes determined after that completion\n                    $$.intervalForObserveInserted = window.setInterval(function () {\n                        // parentNode will NOT be null when completed\n                        if (selection.node().parentNode) {\n                            window.clearInterval($$.intervalForObserveInserted);\n                            $$.updateDimension();\n                            $$.config.oninit.call($$);\n                            $$.redraw({\n                                withTransform: true,\n                                withUpdateXDomain: true,\n                                withUpdateOrgXDomain: true,\n                                withTransition: false,\n                                withTransitionForTransform: false,\n                                withLegend: true\n                            });\n                            selection.transition().style('opacity', 1);\n                        }\n                    }, 10);\n                }\n            });\n        });\n        observer.observe(selection.node(), {attributes: true, childList: true, characterData: true});\n    };\n\n\n    c3_chart_internal_fn.generateResize = function () {\n        var resizeFunctions = [];\n        function callResizeFunctions() {\n            resizeFunctions.forEach(function (f) {\n                f();\n            });\n        }\n        callResizeFunctions.add = function (f) {\n            resizeFunctions.push(f);\n        };\n        return callResizeFunctions;\n    };\n\n    c3_chart_internal_fn.endall = function (transition, callback) {\n        var n = 0;\n        transition\n            .each(function () { ++n; })\n            .each(\"end\", function () {\n                if (!--n) { callback.apply(this, arguments); }\n            });\n    };\n    c3_chart_internal_fn.generateWait = function () {\n        var transitionsToWait = [],\n            f = function (transition, callback) {\n                var timer = setInterval(function () {\n                    var done = 0;\n                    transitionsToWait.forEach(function (t) {\n                        if (t.empty()) {\n                            done += 1;\n                            return;\n                        }\n                        try {\n                            t.transition();\n                        } catch (e) {\n                            done += 1;\n                        }\n                    });\n                    if (done === transitionsToWait.length) {\n                        clearInterval(timer);\n                        if (callback) { callback(); }\n                    }\n                }, 10);\n            };\n        f.add = function (transition) {\n            transitionsToWait.push(transition);\n        };\n        return f;\n    };\n\n    c3_chart_internal_fn.parseDate = function (date) {\n        var $$ = this, parsedDate;\n        if (date instanceof Date) {\n            parsedDate = date;\n        } else if (typeof date === 'string') {\n            parsedDate = $$.dataTimeFormat($$.config.data_xFormat).parse(date);\n        } else if (typeof date === 'number' || !isNaN(date)) {\n            parsedDate = new Date(+date);\n        }\n        if (!parsedDate || isNaN(+parsedDate)) {\n            window.console.error(\"Failed to parse x '\" + date + \"' to Date object\");\n        }\n        return parsedDate;\n    };\n\n    c3_chart_internal_fn.isTabVisible = function () {\n        var hidden;\n        if (typeof document.hidden !== \"undefined\") { // Opera 12.10 and Firefox 18 and later support\n            hidden = \"hidden\";\n        } else if (typeof document.mozHidden !== \"undefined\") {\n            hidden = \"mozHidden\";\n        } else if (typeof document.msHidden !== \"undefined\") {\n            hidden = \"msHidden\";\n        } else if (typeof document.webkitHidden !== \"undefined\") {\n            hidden = \"webkitHidden\";\n        }\n\n        return document[hidden] ? false : true;\n    };\n\n    c3_chart_internal_fn.getDefaultConfig = function () {\n        var config = {\n            bindto: '#chart',\n            size_width: undefined,\n            size_height: undefined,\n            padding_left: undefined,\n            padding_right: undefined,\n            padding_top: undefined,\n            padding_bottom: undefined,\n            zoom_enabled: false,\n            zoom_extent: undefined,\n            zoom_privileged: false,\n            zoom_rescale: false,\n            zoom_onzoom: function () {},\n            zoom_onzoomstart: function () {},\n            zoom_onzoomend: function () {},\n            interaction_enabled: true,\n            onmouseover: function () {},\n            onmouseout: function () {},\n            onresize: function () {},\n            onresized: function () {},\n            oninit: function () {},\n            onrendered: function () {},\n            transition_duration: 350,\n            data_x: undefined,\n            data_xs: {},\n            data_xFormat: '%Y-%m-%d',\n            data_xLocaltime: true,\n            data_xSort: true,\n            data_idConverter: function (id) { return id; },\n            data_names: {},\n            data_classes: {},\n            data_groups: [],\n            data_axes: {},\n            data_type: undefined,\n            data_types: {},\n            data_labels: {},\n            data_order: 'desc',\n            data_regions: {},\n            data_color: undefined,\n            data_colors: {},\n            data_hide: false,\n            data_filter: undefined,\n            data_selection_enabled: false,\n            data_selection_grouped: false,\n            data_selection_isselectable: function () { return true; },\n            data_selection_multiple: true,\n            data_selection_draggable: false,\n            data_onclick: function () {},\n            data_onmouseover: function () {},\n            data_onmouseout: function () {},\n            data_onselected: function () {},\n            data_onunselected: function () {},\n            data_url: undefined,\n            data_json: undefined,\n            data_rows: undefined,\n            data_columns: undefined,\n            data_mimeType: undefined,\n            data_keys: undefined,\n            // configuration for no plot-able data supplied.\n            data_empty_label_text: \"\",\n            // subchart\n            subchart_show: false,\n            subchart_size_height: 60,\n            subchart_onbrush: function () {},\n            // color\n            color_pattern: [],\n            color_threshold: {},\n            // legend\n            legend_show: true,\n            legend_hide: false,\n            legend_position: 'bottom',\n            legend_inset_anchor: 'top-left',\n            legend_inset_x: 10,\n            legend_inset_y: 0,\n            legend_inset_step: undefined,\n            legend_item_onclick: undefined,\n            legend_item_onmouseover: undefined,\n            legend_item_onmouseout: undefined,\n            legend_equally: false,\n            // axis\n            axis_rotated: false,\n            axis_x_show: true,\n            axis_x_type: 'indexed',\n            axis_x_localtime: true,\n            axis_x_categories: [],\n            axis_x_tick_centered: false,\n            axis_x_tick_format: undefined,\n            axis_x_tick_culling: {},\n            axis_x_tick_culling_max: 10,\n            axis_x_tick_count: undefined,\n            axis_x_tick_fit: true,\n            axis_x_tick_values: null,\n            axis_x_tick_rotate: 0,\n            axis_x_tick_outer: true,\n            axis_x_tick_multiline: true,\n            axis_x_tick_width: null,\n            axis_x_max: undefined,\n            axis_x_min: undefined,\n            axis_x_padding: {},\n            axis_x_height: undefined,\n            axis_x_extent: undefined,\n            axis_x_label: {},\n            axis_y_show: true,\n            axis_y_type: undefined,\n            axis_y_max: undefined,\n            axis_y_min: undefined,\n            axis_y_inverted: false,\n            axis_y_center: undefined,\n            axis_y_inner: undefined,\n            axis_y_label: {},\n            axis_y_tick_format: undefined,\n            axis_y_tick_outer: true,\n            axis_y_tick_values: null,\n            axis_y_tick_count: undefined,\n            axis_y_tick_time_value: undefined,\n            axis_y_tick_time_interval: undefined,\n            axis_y_padding: {},\n            axis_y_default: undefined,\n            axis_y2_show: false,\n            axis_y2_max: undefined,\n            axis_y2_min: undefined,\n            axis_y2_inverted: false,\n            axis_y2_center: undefined,\n            axis_y2_inner: undefined,\n            axis_y2_label: {},\n            axis_y2_tick_format: undefined,\n            axis_y2_tick_outer: true,\n            axis_y2_tick_values: null,\n            axis_y2_tick_count: undefined,\n            axis_y2_padding: {},\n            axis_y2_default: undefined,\n            // grid\n            grid_x_show: false,\n            grid_x_type: 'tick',\n            grid_x_lines: [],\n            grid_y_show: false,\n            // not used\n            // grid_y_type: 'tick',\n            grid_y_lines: [],\n            grid_y_ticks: 10,\n            grid_focus_show: true,\n            grid_lines_front: true,\n            // point - point of each data\n            point_show: true,\n            point_r: 2.5,\n            point_focus_expand_enabled: true,\n            point_focus_expand_r: undefined,\n            point_select_r: undefined,\n            // line\n            line_connectNull: false,\n            line_step_type: 'step',\n            // bar\n            bar_width: undefined,\n            bar_width_ratio: 0.6,\n            bar_width_max: undefined,\n            bar_zerobased: true,\n            // area\n            area_zerobased: true,\n            // pie\n            pie_label_show: true,\n            pie_label_format: undefined,\n            pie_label_threshold: 0.05,\n            pie_expand: true,\n            // gauge\n            gauge_label_show: true,\n            gauge_label_format: undefined,\n            gauge_expand: true,\n            gauge_min: 0,\n            gauge_max: 100,\n            gauge_units: undefined,\n            gauge_width: undefined,\n            // donut\n            donut_label_show: true,\n            donut_label_format: undefined,\n            donut_label_threshold: 0.05,\n            donut_width: undefined,\n            donut_expand: true,\n            donut_title: \"\",\n            // region - region to change style\n            regions: [],\n            // tooltip - show when mouseover on each data\n            tooltip_show: true,\n            tooltip_grouped: true,\n            tooltip_format_title: undefined,\n            tooltip_format_name: undefined,\n            tooltip_format_value: undefined,\n            tooltip_position: undefined,\n            tooltip_contents: function (d, defaultTitleFormat, defaultValueFormat, color) {\n                return this.getTooltipContent ? this.getTooltipContent(d, defaultTitleFormat, defaultValueFormat, color) : '';\n            },\n            tooltip_init_show: false,\n            tooltip_init_x: 0,\n            tooltip_init_position: {top: '0px', left: '50px'}\n        };\n\n        Object.keys(this.additionalConfig).forEach(function (key) {\n            config[key] = this.additionalConfig[key];\n        }, this);\n\n        return config;\n    };\n    c3_chart_internal_fn.additionalConfig = {};\n\n    c3_chart_internal_fn.loadConfig = function (config) {\n        var this_config = this.config, target, keys, read;\n        function find() {\n            var key = keys.shift();\n    //        console.log(\"key =>\", key, \", target =>\", target);\n            if (key && target && typeof target === 'object' && key in target) {\n                target = target[key];\n                return find();\n            }\n            else if (!key) {\n                return target;\n            }\n            else {\n                return undefined;\n            }\n        }\n        Object.keys(this_config).forEach(function (key) {\n            target = config;\n            keys = key.split('_');\n            read = find();\n    //        console.log(\"CONFIG : \", key, read);\n            if (isDefined(read)) {\n                this_config[key] = read;\n            }\n        });\n    };\n\n    c3_chart_internal_fn.getScale = function (min, max, forTimeseries) {\n        return (forTimeseries ? this.d3.time.scale() : this.d3.scale.linear()).range([min, max]);\n    };\n    c3_chart_internal_fn.getX = function (min, max, domain, offset) {\n        var $$ = this,\n            scale = $$.getScale(min, max, $$.isTimeSeries()),\n            _scale = domain ? scale.domain(domain) : scale, key;\n        // Define customized scale if categorized axis\n        if ($$.isCategorized()) {\n            offset = offset || function () { return 0; };\n            scale = function (d, raw) {\n                var v = _scale(d) + offset(d);\n                return raw ? v : Math.ceil(v);\n            };\n        } else {\n            scale = function (d, raw) {\n                var v = _scale(d);\n                return raw ? v : Math.ceil(v);\n            };\n        }\n        // define functions\n        for (key in _scale) {\n            scale[key] = _scale[key];\n        }\n        scale.orgDomain = function () {\n            return _scale.domain();\n        };\n        // define custom domain() for categorized axis\n        if ($$.isCategorized()) {\n            scale.domain = function (domain) {\n                if (!arguments.length) {\n                    domain = this.orgDomain();\n                    return [domain[0], domain[1] + 1];\n                }\n                _scale.domain(domain);\n                return scale;\n            };\n        }\n        return scale;\n    };\n    c3_chart_internal_fn.getY = function (min, max, domain) {\n        var scale = this.getScale(min, max, this.isTimeSeriesY());\n        if (domain) { scale.domain(domain); }\n        return scale;\n    };\n    c3_chart_internal_fn.getYScale = function (id) {\n        return this.axis.getId(id) === 'y2' ? this.y2 : this.y;\n    };\n    c3_chart_internal_fn.getSubYScale = function (id) {\n        return this.axis.getId(id) === 'y2' ? this.subY2 : this.subY;\n    };\n    c3_chart_internal_fn.updateScales = function () {\n        var $$ = this, config = $$.config,\n            forInit = !$$.x;\n        // update edges\n        $$.xMin = config.axis_rotated ? 1 : 0;\n        $$.xMax = config.axis_rotated ? $$.height : $$.width;\n        $$.yMin = config.axis_rotated ? 0 : $$.height;\n        $$.yMax = config.axis_rotated ? $$.width : 1;\n        $$.subXMin = $$.xMin;\n        $$.subXMax = $$.xMax;\n        $$.subYMin = config.axis_rotated ? 0 : $$.height2;\n        $$.subYMax = config.axis_rotated ? $$.width2 : 1;\n        // update scales\n        $$.x = $$.getX($$.xMin, $$.xMax, forInit ? undefined : $$.x.orgDomain(), function () { return $$.xAxis.tickOffset(); });\n        $$.y = $$.getY($$.yMin, $$.yMax, forInit ? config.axis_y_default : $$.y.domain());\n        $$.y2 = $$.getY($$.yMin, $$.yMax, forInit ? config.axis_y2_default : $$.y2.domain());\n        $$.subX = $$.getX($$.xMin, $$.xMax, $$.orgXDomain, function (d) { return d % 1 ? 0 : $$.subXAxis.tickOffset(); });\n        $$.subY = $$.getY($$.subYMin, $$.subYMax, forInit ? config.axis_y_default : $$.subY.domain());\n        $$.subY2 = $$.getY($$.subYMin, $$.subYMax, forInit ? config.axis_y2_default : $$.subY2.domain());\n        // update axes\n        $$.xAxisTickFormat = $$.axis.getXAxisTickFormat();\n        $$.xAxisTickValues = $$.axis.getXAxisTickValues();\n        $$.yAxisTickValues = $$.axis.getYAxisTickValues();\n        $$.y2AxisTickValues = $$.axis.getY2AxisTickValues();\n\n        $$.xAxis = $$.axis.getXAxis($$.x, $$.xOrient, $$.xAxisTickFormat, $$.xAxisTickValues, config.axis_x_tick_outer);\n        $$.subXAxis = $$.axis.getXAxis($$.subX, $$.subXOrient, $$.xAxisTickFormat, $$.xAxisTickValues, config.axis_x_tick_outer);\n        $$.yAxis = $$.axis.getYAxis($$.y, $$.yOrient, config.axis_y_tick_format, $$.yAxisTickValues, config.axis_y_tick_outer);\n        $$.y2Axis = $$.axis.getYAxis($$.y2, $$.y2Orient, config.axis_y2_tick_format, $$.y2AxisTickValues, config.axis_y2_tick_outer);\n\n        // Set initialized scales to brush and zoom\n        if (!forInit) {\n            if ($$.brush) { $$.brush.scale($$.subX); }\n            if (config.zoom_enabled) { $$.zoom.scale($$.x); }\n        }\n        // update for arc\n        if ($$.updateArc) { $$.updateArc(); }\n    };\n\n    c3_chart_internal_fn.getYDomainMin = function (targets) {\n        var $$ = this, config = $$.config,\n            ids = $$.mapToIds(targets), ys = $$.getValuesAsIdKeyed(targets),\n            j, k, baseId, idsInGroup, id, hasNegativeValue;\n        if (config.data_groups.length > 0) {\n            hasNegativeValue = $$.hasNegativeValueInTargets(targets);\n            for (j = 0; j < config.data_groups.length; j++) {\n                // Determine baseId\n                idsInGroup = config.data_groups[j].filter(function (id) { return ids.indexOf(id) >= 0; });\n                if (idsInGroup.length === 0) { continue; }\n                baseId = idsInGroup[0];\n                // Consider negative values\n                if (hasNegativeValue && ys[baseId]) {\n                    ys[baseId].forEach(function (v, i) {\n                        ys[baseId][i] = v < 0 ? v : 0;\n                    });\n                }\n                // Compute min\n                for (k = 1; k < idsInGroup.length; k++) {\n                    id = idsInGroup[k];\n                    if (! ys[id]) { continue; }\n                    ys[id].forEach(function (v, i) {\n                        if ($$.axis.getId(id) === $$.axis.getId(baseId) && ys[baseId] && !(hasNegativeValue && +v > 0)) {\n                            ys[baseId][i] += +v;\n                        }\n                    });\n                }\n            }\n        }\n        return $$.d3.min(Object.keys(ys).map(function (key) { return $$.d3.min(ys[key]); }));\n    };\n    c3_chart_internal_fn.getYDomainMax = function (targets) {\n        var $$ = this, config = $$.config,\n            ids = $$.mapToIds(targets), ys = $$.getValuesAsIdKeyed(targets),\n            j, k, baseId, idsInGroup, id, hasPositiveValue;\n        if (config.data_groups.length > 0) {\n            hasPositiveValue = $$.hasPositiveValueInTargets(targets);\n            for (j = 0; j < config.data_groups.length; j++) {\n                // Determine baseId\n                idsInGroup = config.data_groups[j].filter(function (id) { return ids.indexOf(id) >= 0; });\n                if (idsInGroup.length === 0) { continue; }\n                baseId = idsInGroup[0];\n                // Consider positive values\n                if (hasPositiveValue && ys[baseId]) {\n                    ys[baseId].forEach(function (v, i) {\n                        ys[baseId][i] = v > 0 ? v : 0;\n                    });\n                }\n                // Compute max\n                for (k = 1; k < idsInGroup.length; k++) {\n                    id = idsInGroup[k];\n                    if (! ys[id]) { continue; }\n                    ys[id].forEach(function (v, i) {\n                        if ($$.axis.getId(id) === $$.axis.getId(baseId) && ys[baseId] && !(hasPositiveValue && +v < 0)) {\n                            ys[baseId][i] += +v;\n                        }\n                    });\n                }\n            }\n        }\n        return $$.d3.max(Object.keys(ys).map(function (key) { return $$.d3.max(ys[key]); }));\n    };\n    c3_chart_internal_fn.getYDomain = function (targets, axisId, xDomain) {\n        var $$ = this, config = $$.config,\n            targetsByAxisId = targets.filter(function (t) { return $$.axis.getId(t.id) === axisId; }),\n            yTargets = xDomain ? $$.filterByXDomain(targetsByAxisId, xDomain) : targetsByAxisId,\n            yMin = axisId === 'y2' ? config.axis_y2_min : config.axis_y_min,\n            yMax = axisId === 'y2' ? config.axis_y2_max : config.axis_y_max,\n            yDomainMin = $$.getYDomainMin(yTargets),\n            yDomainMax = $$.getYDomainMax(yTargets),\n            domain, domainLength, padding, padding_top, padding_bottom,\n            center = axisId === 'y2' ? config.axis_y2_center : config.axis_y_center,\n            yDomainAbs, lengths, diff, ratio, isAllPositive, isAllNegative,\n            isZeroBased = ($$.hasType('bar', yTargets) && config.bar_zerobased) || ($$.hasType('area', yTargets) && config.area_zerobased),\n            isInverted = axisId === 'y2' ? config.axis_y2_inverted : config.axis_y_inverted,\n            showHorizontalDataLabel = $$.hasDataLabel() && config.axis_rotated,\n            showVerticalDataLabel = $$.hasDataLabel() && !config.axis_rotated;\n\n        // MEMO: avoid inverting domain unexpectedly\n        yDomainMin = isValue(yMin) ? yMin : isValue(yMax) ? (yDomainMin < yMax ? yDomainMin : yMax - 10) : yDomainMin;\n        yDomainMax = isValue(yMax) ? yMax : isValue(yMin) ? (yMin < yDomainMax ? yDomainMax : yMin + 10) : yDomainMax;\n\n        if (yTargets.length === 0) { // use current domain if target of axisId is none\n            return axisId === 'y2' ? $$.y2.domain() : $$.y.domain();\n        }\n        if (isNaN(yDomainMin)) { // set minimum to zero when not number\n            yDomainMin = 0;\n        }\n        if (isNaN(yDomainMax)) { // set maximum to have same value as yDomainMin\n            yDomainMax = yDomainMin;\n        }\n        if (yDomainMin === yDomainMax) {\n            yDomainMin < 0 ? yDomainMax = 0 : yDomainMin = 0;\n        }\n        isAllPositive = yDomainMin >= 0 && yDomainMax >= 0;\n        isAllNegative = yDomainMin <= 0 && yDomainMax <= 0;\n\n        // Cancel zerobased if axis_*_min / axis_*_max specified\n        if ((isValue(yMin) && isAllPositive) || (isValue(yMax) && isAllNegative)) {\n            isZeroBased = false;\n        }\n\n        // Bar/Area chart should be 0-based if all positive|negative\n        if (isZeroBased) {\n            if (isAllPositive) { yDomainMin = 0; }\n            if (isAllNegative) { yDomainMax = 0; }\n        }\n\n        domainLength = Math.abs(yDomainMax - yDomainMin);\n        padding = padding_top = padding_bottom = domainLength * 0.1;\n\n        if (typeof center !== 'undefined') {\n            yDomainAbs = Math.max(Math.abs(yDomainMin), Math.abs(yDomainMax));\n            yDomainMax = center + yDomainAbs;\n            yDomainMin = center - yDomainAbs;\n        }\n        // add padding for data label\n        if (showHorizontalDataLabel) {\n            lengths = $$.getDataLabelLength(yDomainMin, yDomainMax, 'width');\n            diff = diffDomain($$.y.range());\n            ratio = [lengths[0] / diff, lengths[1] / diff];\n            padding_top += domainLength * (ratio[1] / (1 - ratio[0] - ratio[1]));\n            padding_bottom += domainLength * (ratio[0] / (1 - ratio[0] - ratio[1]));\n        } else if (showVerticalDataLabel) {\n            lengths = $$.getDataLabelLength(yDomainMin, yDomainMax, 'height');\n            padding_top += $$.axis.convertPixelsToAxisPadding(lengths[1], domainLength);\n            padding_bottom += $$.axis.convertPixelsToAxisPadding(lengths[0], domainLength);\n        }\n        if (axisId === 'y' && notEmpty(config.axis_y_padding)) {\n            padding_top = $$.axis.getPadding(config.axis_y_padding, 'top', padding_top, domainLength);\n            padding_bottom = $$.axis.getPadding(config.axis_y_padding, 'bottom', padding_bottom, domainLength);\n        }\n        if (axisId === 'y2' && notEmpty(config.axis_y2_padding)) {\n            padding_top = $$.axis.getPadding(config.axis_y2_padding, 'top', padding_top, domainLength);\n            padding_bottom = $$.axis.getPadding(config.axis_y2_padding, 'bottom', padding_bottom, domainLength);\n        }\n        // Bar/Area chart should be 0-based if all positive|negative\n        if (isZeroBased) {\n            if (isAllPositive) { padding_bottom = yDomainMin; }\n            if (isAllNegative) { padding_top = -yDomainMax; }\n        }\n        domain = [yDomainMin - padding_bottom, yDomainMax + padding_top];\n        return isInverted ? domain.reverse() : domain;\n    };\n    c3_chart_internal_fn.getXDomainMin = function (targets) {\n        var $$ = this, config = $$.config;\n        return isDefined(config.axis_x_min) ?\n            ($$.isTimeSeries() ? this.parseDate(config.axis_x_min) : config.axis_x_min) :\n        $$.d3.min(targets, function (t) { return $$.d3.min(t.values, function (v) { return v.x; }); });\n    };\n    c3_chart_internal_fn.getXDomainMax = function (targets) {\n        var $$ = this, config = $$.config;\n        return isDefined(config.axis_x_max) ?\n            ($$.isTimeSeries() ? this.parseDate(config.axis_x_max) : config.axis_x_max) :\n        $$.d3.max(targets, function (t) { return $$.d3.max(t.values, function (v) { return v.x; }); });\n    };\n    c3_chart_internal_fn.getXDomainPadding = function (domain) {\n        var $$ = this, config = $$.config,\n            diff = domain[1] - domain[0],\n            maxDataCount, padding, paddingLeft, paddingRight;\n        if ($$.isCategorized()) {\n            padding = 0;\n        } else if ($$.hasType('bar')) {\n            maxDataCount = $$.getMaxDataCount();\n            padding = maxDataCount > 1 ? (diff / (maxDataCount - 1)) / 2 : 0.5;\n        } else {\n            padding = diff * 0.01;\n        }\n        if (typeof config.axis_x_padding === 'object' && notEmpty(config.axis_x_padding)) {\n            paddingLeft = isValue(config.axis_x_padding.left) ? config.axis_x_padding.left : padding;\n            paddingRight = isValue(config.axis_x_padding.right) ? config.axis_x_padding.right : padding;\n        } else if (typeof config.axis_x_padding === 'number') {\n            paddingLeft = paddingRight = config.axis_x_padding;\n        } else {\n            paddingLeft = paddingRight = padding;\n        }\n        return {left: paddingLeft, right: paddingRight};\n    };\n    c3_chart_internal_fn.getXDomain = function (targets) {\n        var $$ = this,\n            xDomain = [$$.getXDomainMin(targets), $$.getXDomainMax(targets)],\n            firstX = xDomain[0], lastX = xDomain[1],\n            padding = $$.getXDomainPadding(xDomain),\n            min = 0, max = 0;\n        // show center of x domain if min and max are the same\n        if ((firstX - lastX) === 0 && !$$.isCategorized()) {\n            if ($$.isTimeSeries()) {\n                firstX = new Date(firstX.getTime() * 0.5);\n                lastX = new Date(lastX.getTime() * 1.5);\n            } else {\n                firstX = firstX === 0 ? 1 : (firstX * 0.5);\n                lastX = lastX === 0 ? -1 : (lastX * 1.5);\n            }\n        }\n        if (firstX || firstX === 0) {\n            min = $$.isTimeSeries() ? new Date(firstX.getTime() - padding.left) : firstX - padding.left;\n        }\n        if (lastX || lastX === 0) {\n            max = $$.isTimeSeries() ? new Date(lastX.getTime() + padding.right) : lastX + padding.right;\n        }\n        return [min, max];\n    };\n    c3_chart_internal_fn.updateXDomain = function (targets, withUpdateXDomain, withUpdateOrgXDomain, withTrim, domain) {\n        var $$ = this, config = $$.config;\n\n        if (withUpdateOrgXDomain) {\n            $$.x.domain(domain ? domain : $$.d3.extent($$.getXDomain(targets)));\n            $$.orgXDomain = $$.x.domain();\n            if (config.zoom_enabled) { $$.zoom.scale($$.x).updateScaleExtent(); }\n            $$.subX.domain($$.x.domain());\n            if ($$.brush) { $$.brush.scale($$.subX); }\n        }\n        if (withUpdateXDomain) {\n            $$.x.domain(domain ? domain : (!$$.brush || $$.brush.empty()) ? $$.orgXDomain : $$.brush.extent());\n            if (config.zoom_enabled) { $$.zoom.scale($$.x).updateScaleExtent(); }\n        }\n\n        // Trim domain when too big by zoom mousemove event\n        if (withTrim) { $$.x.domain($$.trimXDomain($$.x.orgDomain())); }\n\n        return $$.x.domain();\n    };\n    c3_chart_internal_fn.trimXDomain = function (domain) {\n        var $$ = this;\n        if (domain[0] <= $$.orgXDomain[0]) {\n            domain[1] = +domain[1] + ($$.orgXDomain[0] - domain[0]);\n            domain[0] = $$.orgXDomain[0];\n        }\n        if ($$.orgXDomain[1] <= domain[1]) {\n            domain[0] = +domain[0] - (domain[1] - $$.orgXDomain[1]);\n            domain[1] = $$.orgXDomain[1];\n        }\n        return domain;\n    };\n\n    c3_chart_internal_fn.isX = function (key) {\n        var $$ = this, config = $$.config;\n        return (config.data_x && key === config.data_x) || (notEmpty(config.data_xs) && hasValue(config.data_xs, key));\n    };\n    c3_chart_internal_fn.isNotX = function (key) {\n        return !this.isX(key);\n    };\n    c3_chart_internal_fn.getXKey = function (id) {\n        var $$ = this, config = $$.config;\n        return config.data_x ? config.data_x : notEmpty(config.data_xs) ? config.data_xs[id] : null;\n    };\n    c3_chart_internal_fn.getXValuesOfXKey = function (key, targets) {\n        var $$ = this,\n            xValues, ids = targets && notEmpty(targets) ? $$.mapToIds(targets) : [];\n        ids.forEach(function (id) {\n            if ($$.getXKey(id) === key) {\n                xValues = $$.data.xs[id];\n            }\n        });\n        return xValues;\n    };\n    c3_chart_internal_fn.getIndexByX = function (x) {\n        var $$ = this,\n            data = $$.filterByX($$.data.targets, x);\n        return data.length ? data[0].index : null;\n    };\n    c3_chart_internal_fn.getXValue = function (id, i) {\n        var $$ = this;\n        return id in $$.data.xs && $$.data.xs[id] && isValue($$.data.xs[id][i]) ? $$.data.xs[id][i] : i;\n    };\n    c3_chart_internal_fn.getOtherTargetXs = function () {\n        var $$ = this,\n            idsForX = Object.keys($$.data.xs);\n        return idsForX.length ? $$.data.xs[idsForX[0]] : null;\n    };\n    c3_chart_internal_fn.getOtherTargetX = function (index) {\n        var xs = this.getOtherTargetXs();\n        return xs && index < xs.length ? xs[index] : null;\n    };\n    c3_chart_internal_fn.addXs = function (xs) {\n        var $$ = this;\n        Object.keys(xs).forEach(function (id) {\n            $$.config.data_xs[id] = xs[id];\n        });\n    };\n    c3_chart_internal_fn.hasMultipleX = function (xs) {\n        return this.d3.set(Object.keys(xs).map(function (id) { return xs[id]; })).size() > 1;\n    };\n    c3_chart_internal_fn.isMultipleX = function () {\n        return notEmpty(this.config.data_xs) || !this.config.data_xSort || this.hasType('scatter');\n    };\n    c3_chart_internal_fn.addName = function (data) {\n        var $$ = this, name;\n        if (data) {\n            name = $$.config.data_names[data.id];\n            data.name = name ? name : data.id;\n        }\n        return data;\n    };\n    c3_chart_internal_fn.getValueOnIndex = function (values, index) {\n        var valueOnIndex = values.filter(function (v) { return v.index === index; });\n        return valueOnIndex.length ? valueOnIndex[0] : null;\n    };\n    c3_chart_internal_fn.updateTargetX = function (targets, x) {\n        var $$ = this;\n        targets.forEach(function (t) {\n            t.values.forEach(function (v, i) {\n                v.x = $$.generateTargetX(x[i], t.id, i);\n            });\n            $$.data.xs[t.id] = x;\n        });\n    };\n    c3_chart_internal_fn.updateTargetXs = function (targets, xs) {\n        var $$ = this;\n        targets.forEach(function (t) {\n            if (xs[t.id]) {\n                $$.updateTargetX([t], xs[t.id]);\n            }\n        });\n    };\n    c3_chart_internal_fn.generateTargetX = function (rawX, id, index) {\n        var $$ = this, x;\n        if ($$.isTimeSeries()) {\n            x = rawX ? $$.parseDate(rawX) : $$.parseDate($$.getXValue(id, index));\n        }\n        else if ($$.isCustomX() && !$$.isCategorized()) {\n            x = isValue(rawX) ? +rawX : $$.getXValue(id, index);\n        }\n        else {\n            x = index;\n        }\n        return x;\n    };\n    c3_chart_internal_fn.cloneTarget = function (target) {\n        return {\n            id : target.id,\n            id_org : target.id_org,\n            values : target.values.map(function (d) {\n                return {x: d.x, value: d.value, id: d.id};\n            })\n        };\n    };\n    c3_chart_internal_fn.updateXs = function () {\n        var $$ = this;\n        if ($$.data.targets.length) {\n            $$.xs = [];\n            $$.data.targets[0].values.forEach(function (v) {\n                $$.xs[v.index] = v.x;\n            });\n        }\n    };\n    c3_chart_internal_fn.getPrevX = function (i) {\n        var x = this.xs[i - 1];\n        return typeof x !== 'undefined' ? x : null;\n    };\n    c3_chart_internal_fn.getNextX = function (i) {\n        var x = this.xs[i + 1];\n        return typeof x !== 'undefined' ? x : null;\n    };\n    c3_chart_internal_fn.getMaxDataCount = function () {\n        var $$ = this;\n        return $$.d3.max($$.data.targets, function (t) { return t.values.length; });\n    };\n    c3_chart_internal_fn.getMaxDataCountTarget = function (targets) {\n        var length = targets.length, max = 0, maxTarget;\n        if (length > 1) {\n            targets.forEach(function (t) {\n                if (t.values.length > max) {\n                    maxTarget = t;\n                    max = t.values.length;\n                }\n            });\n        } else {\n            maxTarget = length ? targets[0] : null;\n        }\n        return maxTarget;\n    };\n    c3_chart_internal_fn.getEdgeX = function (targets) {\n        var $$ = this;\n        return !targets.length ? [0, 0] : [\n            $$.d3.min(targets, function (t) { return t.values[0].x; }),\n            $$.d3.max(targets, function (t) { return t.values[t.values.length - 1].x; })\n        ];\n    };\n    c3_chart_internal_fn.mapToIds = function (targets) {\n        return targets.map(function (d) { return d.id; });\n    };\n    c3_chart_internal_fn.mapToTargetIds = function (ids) {\n        var $$ = this;\n        return ids ? (isString(ids) ? [ids] : ids) : $$.mapToIds($$.data.targets);\n    };\n    c3_chart_internal_fn.hasTarget = function (targets, id) {\n        var ids = this.mapToIds(targets), i;\n        for (i = 0; i < ids.length; i++) {\n            if (ids[i] === id) {\n                return true;\n            }\n        }\n        return false;\n    };\n    c3_chart_internal_fn.isTargetToShow = function (targetId) {\n        return this.hiddenTargetIds.indexOf(targetId) < 0;\n    };\n    c3_chart_internal_fn.isLegendToShow = function (targetId) {\n        return this.hiddenLegendIds.indexOf(targetId) < 0;\n    };\n    c3_chart_internal_fn.filterTargetsToShow = function (targets) {\n        var $$ = this;\n        return targets.filter(function (t) { return $$.isTargetToShow(t.id); });\n    };\n    c3_chart_internal_fn.mapTargetsToUniqueXs = function (targets) {\n        var $$ = this;\n        var xs = $$.d3.set($$.d3.merge(targets.map(function (t) { return t.values.map(function (v) { return +v.x; }); }))).values();\n        return $$.isTimeSeries() ? xs.map(function (x) { return new Date(+x); }) : xs.map(function (x) { return +x; });\n    };\n    c3_chart_internal_fn.addHiddenTargetIds = function (targetIds) {\n        this.hiddenTargetIds = this.hiddenTargetIds.concat(targetIds);\n    };\n    c3_chart_internal_fn.removeHiddenTargetIds = function (targetIds) {\n        this.hiddenTargetIds = this.hiddenTargetIds.filter(function (id) { return targetIds.indexOf(id) < 0; });\n    };\n    c3_chart_internal_fn.addHiddenLegendIds = function (targetIds) {\n        this.hiddenLegendIds = this.hiddenLegendIds.concat(targetIds);\n    };\n    c3_chart_internal_fn.removeHiddenLegendIds = function (targetIds) {\n        this.hiddenLegendIds = this.hiddenLegendIds.filter(function (id) { return targetIds.indexOf(id) < 0; });\n    };\n    c3_chart_internal_fn.getValuesAsIdKeyed = function (targets) {\n        var ys = {};\n        targets.forEach(function (t) {\n            ys[t.id] = [];\n            t.values.forEach(function (v) {\n                ys[t.id].push(v.value);\n            });\n        });\n        return ys;\n    };\n    c3_chart_internal_fn.checkValueInTargets = function (targets, checker) {\n        var ids = Object.keys(targets), i, j, values;\n        for (i = 0; i < ids.length; i++) {\n            values = targets[ids[i]].values;\n            for (j = 0; j < values.length; j++) {\n                if (checker(values[j].value)) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    };\n    c3_chart_internal_fn.hasNegativeValueInTargets = function (targets) {\n        return this.checkValueInTargets(targets, function (v) { return v < 0; });\n    };\n    c3_chart_internal_fn.hasPositiveValueInTargets = function (targets) {\n        return this.checkValueInTargets(targets, function (v) { return v > 0; });\n    };\n    c3_chart_internal_fn.isOrderDesc = function () {\n        var config = this.config;\n        return typeof(config.data_order) === 'string' && config.data_order.toLowerCase() === 'desc';\n    };\n    c3_chart_internal_fn.isOrderAsc = function () {\n        var config = this.config;\n        return typeof(config.data_order) === 'string' && config.data_order.toLowerCase() === 'asc';\n    };\n    c3_chart_internal_fn.orderTargets = function (targets) {\n        var $$ = this, config = $$.config, orderAsc = $$.isOrderAsc(), orderDesc = $$.isOrderDesc();\n        if (orderAsc || orderDesc) {\n            targets.sort(function (t1, t2) {\n                var reducer = function (p, c) { return p + Math.abs(c.value); };\n                var t1Sum = t1.values.reduce(reducer, 0),\n                    t2Sum = t2.values.reduce(reducer, 0);\n                return orderAsc ? t2Sum - t1Sum : t1Sum - t2Sum;\n            });\n        } else if (isFunction(config.data_order)) {\n            targets.sort(config.data_order);\n        } // TODO: accept name array for order\n        return targets;\n    };\n    c3_chart_internal_fn.filterByX = function (targets, x) {\n        return this.d3.merge(targets.map(function (t) { return t.values; })).filter(function (v) { return v.x - x === 0; });\n    };\n    c3_chart_internal_fn.filterRemoveNull = function (data) {\n        return data.filter(function (d) { return isValue(d.value); });\n    };\n    c3_chart_internal_fn.filterByXDomain = function (targets, xDomain) {\n        return targets.map(function (t) {\n            return {\n                id: t.id,\n                id_org: t.id_org,\n                values: t.values.filter(function (v) {\n                    return xDomain[0] <= v.x && v.x <= xDomain[1];\n                })\n            };\n        });\n    };\n    c3_chart_internal_fn.hasDataLabel = function () {\n        var config = this.config;\n        if (typeof config.data_labels === 'boolean' && config.data_labels) {\n            return true;\n        } else if (typeof config.data_labels === 'object' && notEmpty(config.data_labels)) {\n            return true;\n        }\n        return false;\n    };\n    c3_chart_internal_fn.getDataLabelLength = function (min, max, key) {\n        var $$ = this,\n            lengths = [0, 0], paddingCoef = 1.3;\n        $$.selectChart.select('svg').selectAll('.dummy')\n            .data([min, max])\n            .enter().append('text')\n            .text(function (d) { return $$.dataLabelFormat(d.id)(d); })\n            .each(function (d, i) {\n                lengths[i] = this.getBoundingClientRect()[key] * paddingCoef;\n            })\n            .remove();\n        return lengths;\n    };\n    c3_chart_internal_fn.isNoneArc = function (d) {\n        return this.hasTarget(this.data.targets, d.id);\n    },\n    c3_chart_internal_fn.isArc = function (d) {\n        return 'data' in d && this.hasTarget(this.data.targets, d.data.id);\n    };\n    c3_chart_internal_fn.findSameXOfValues = function (values, index) {\n        var i, targetX = values[index].x, sames = [];\n        for (i = index - 1; i >= 0; i--) {\n            if (targetX !== values[i].x) { break; }\n            sames.push(values[i]);\n        }\n        for (i = index; i < values.length; i++) {\n            if (targetX !== values[i].x) { break; }\n            sames.push(values[i]);\n        }\n        return sames;\n    };\n\n    c3_chart_internal_fn.findClosestFromTargets = function (targets, pos) {\n        var $$ = this, candidates;\n\n        // map to array of closest points of each target\n        candidates = targets.map(function (target) {\n            return $$.findClosest(target.values, pos);\n        });\n\n        // decide closest point and return\n        return $$.findClosest(candidates, pos);\n    };\n    c3_chart_internal_fn.findClosest = function (values, pos) {\n        var $$ = this, minDist = 100, closest;\n\n        // find mouseovering bar\n        values.filter(function (v) { return v && $$.isBarType(v.id); }).forEach(function (v) {\n            var shape = $$.main.select('.' + CLASS.bars + $$.getTargetSelectorSuffix(v.id) + ' .' + CLASS.bar + '-' + v.index).node();\n            if (!closest && $$.isWithinBar(shape)) {\n                closest = v;\n            }\n        });\n\n        // find closest point from non-bar\n        values.filter(function (v) { return v && !$$.isBarType(v.id); }).forEach(function (v) {\n            var d = $$.dist(v, pos);\n            if (d < minDist) {\n                minDist = d;\n                closest = v;\n            }\n        });\n\n        return closest;\n    };\n    c3_chart_internal_fn.dist = function (data, pos) {\n        var $$ = this, config = $$.config,\n            xIndex = config.axis_rotated ? 1 : 0,\n            yIndex = config.axis_rotated ? 0 : 1,\n            y = $$.circleY(data, data.index),\n            x = $$.x(data.x);\n        return Math.pow(x - pos[xIndex], 2) + Math.pow(y - pos[yIndex], 2);\n    };\n    c3_chart_internal_fn.convertValuesToStep = function (values) {\n        var converted = [].concat(values), i;\n\n        if (!this.isCategorized()) {\n            return values;\n        }\n\n        for (i = values.length + 1; 0 < i; i--) {\n            converted[i] = converted[i - 1];\n        }\n\n        converted[0] = {\n            x: converted[0].x - 1,\n            value: converted[0].value,\n            id: converted[0].id\n        };\n        converted[values.length + 1] = {\n            x: converted[values.length].x + 1,\n            value: converted[values.length].value,\n            id: converted[values.length].id\n        };\n\n        return converted;\n    };\n    c3_chart_internal_fn.updateDataAttributes = function (name, attrs) {\n        var $$ = this, config = $$.config, current = config['data_' + name];\n        if (typeof attrs === 'undefined') { return current; }\n        Object.keys(attrs).forEach(function (id) {\n            current[id] = attrs[id];\n        });\n        $$.redraw({withLegend: true});\n        return current;\n    };\n\n    c3_chart_internal_fn.convertUrlToData = function (url, mimeType, keys, done) {\n        var $$ = this, type = mimeType ? mimeType : 'csv';\n        $$.d3.xhr(url, function (error, data) {\n            var d;\n            if (!data) {\n                throw new Error(error.responseURL + ' ' + error.status + ' (' + error.statusText + ')');\n            }\n            if (type === 'json') {\n                d = $$.convertJsonToData(JSON.parse(data.response), keys);\n            } else if (type === 'tsv') {\n                d = $$.convertTsvToData(data.response);\n            } else {\n                d = $$.convertCsvToData(data.response);\n            }\n            done.call($$, d);\n        });\n    };\n    c3_chart_internal_fn.convertXsvToData = function (xsv, parser) {\n        var rows = parser.parseRows(xsv), d;\n        if (rows.length === 1) {\n            d = [{}];\n            rows[0].forEach(function (id) {\n                d[0][id] = null;\n            });\n        } else {\n            d = parser.parse(xsv);\n        }\n        return d;\n    };\n    c3_chart_internal_fn.convertCsvToData = function (csv) {\n        return this.convertXsvToData(csv, this.d3.csv);\n    };\n    c3_chart_internal_fn.convertTsvToData = function (tsv) {\n        return this.convertXsvToData(tsv, this.d3.tsv);\n    };\n    c3_chart_internal_fn.convertJsonToData = function (json, keys) {\n        var $$ = this,\n            new_rows = [], targetKeys, data;\n        if (keys) { // when keys specified, json would be an array that includes objects\n            if (keys.x) {\n                targetKeys = keys.value.concat(keys.x);\n                $$.config.data_x = keys.x;\n            } else {\n                targetKeys = keys.value;\n            }\n            new_rows.push(targetKeys);\n            json.forEach(function (o) {\n                var new_row = [];\n                targetKeys.forEach(function (key) {\n                    // convert undefined to null because undefined data will be removed in convertDataToTargets()\n                    var v = isUndefined(o[key]) ? null : o[key];\n                    new_row.push(v);\n                });\n                new_rows.push(new_row);\n            });\n            data = $$.convertRowsToData(new_rows);\n        } else {\n            Object.keys(json).forEach(function (key) {\n                new_rows.push([key].concat(json[key]));\n            });\n            data = $$.convertColumnsToData(new_rows);\n        }\n        return data;\n    };\n    c3_chart_internal_fn.convertRowsToData = function (rows) {\n        var keys = rows[0], new_row = {}, new_rows = [], i, j;\n        for (i = 1; i < rows.length; i++) {\n            new_row = {};\n            for (j = 0; j < rows[i].length; j++) {\n                if (isUndefined(rows[i][j])) {\n                    throw new Error(\"Source data is missing a component at (\" + i + \",\" + j + \")!\");\n                }\n                new_row[keys[j]] = rows[i][j];\n            }\n            new_rows.push(new_row);\n        }\n        return new_rows;\n    };\n    c3_chart_internal_fn.convertColumnsToData = function (columns) {\n        var new_rows = [], i, j, key;\n        for (i = 0; i < columns.length; i++) {\n            key = columns[i][0];\n            for (j = 1; j < columns[i].length; j++) {\n                if (isUndefined(new_rows[j - 1])) {\n                    new_rows[j - 1] = {};\n                }\n                if (isUndefined(columns[i][j])) {\n                    throw new Error(\"Source data is missing a component at (\" + i + \",\" + j + \")!\");\n                }\n                new_rows[j - 1][key] = columns[i][j];\n            }\n        }\n        return new_rows;\n    };\n    c3_chart_internal_fn.convertDataToTargets = function (data, appendXs) {\n        var $$ = this, config = $$.config,\n            ids = $$.d3.keys(data[0]).filter($$.isNotX, $$),\n            xs = $$.d3.keys(data[0]).filter($$.isX, $$),\n            targets;\n\n        // save x for update data by load when custom x and c3.x API\n        ids.forEach(function (id) {\n            var xKey = $$.getXKey(id);\n\n            if ($$.isCustomX() || $$.isTimeSeries()) {\n                // if included in input data\n                if (xs.indexOf(xKey) >= 0) {\n                    $$.data.xs[id] = (appendXs && $$.data.xs[id] ? $$.data.xs[id] : []).concat(\n                        data.map(function (d) { return d[xKey]; })\n                            .filter(isValue)\n                            .map(function (rawX, i) { return $$.generateTargetX(rawX, id, i); })\n                    );\n                }\n                // if not included in input data, find from preloaded data of other id's x\n                else if (config.data_x) {\n                    $$.data.xs[id] = $$.getOtherTargetXs();\n                }\n                // if not included in input data, find from preloaded data\n                else if (notEmpty(config.data_xs)) {\n                    $$.data.xs[id] = $$.getXValuesOfXKey(xKey, $$.data.targets);\n                }\n                // MEMO: if no x included, use same x of current will be used\n            } else {\n                $$.data.xs[id] = data.map(function (d, i) { return i; });\n            }\n        });\n\n\n        // check x is defined\n        ids.forEach(function (id) {\n            if (!$$.data.xs[id]) {\n                throw new Error('x is not defined for id = \"' + id + '\".');\n            }\n        });\n\n        // convert to target\n        targets = ids.map(function (id, index) {\n            var convertedId = config.data_idConverter(id);\n            return {\n                id: convertedId,\n                id_org: id,\n                values: data.map(function (d, i) {\n                    var xKey = $$.getXKey(id), rawX = d[xKey], x = $$.generateTargetX(rawX, id, i);\n                    // use x as categories if custom x and categorized\n                    if ($$.isCustomX() && $$.isCategorized() && index === 0 && rawX) {\n                        if (i === 0) { config.axis_x_categories = []; }\n                        config.axis_x_categories.push(rawX);\n                    }\n                    // mark as x = undefined if value is undefined and filter to remove after mapped\n                    if (isUndefined(d[id]) || $$.data.xs[id].length <= i) {\n                        x = undefined;\n                    }\n                    return {x: x, value: d[id] !== null && !isNaN(d[id]) ? +d[id] : null, id: convertedId};\n                }).filter(function (v) { return isDefined(v.x); })\n            };\n        });\n\n        // finish targets\n        targets.forEach(function (t) {\n            var i;\n            // sort values by its x\n            if (config.data_xSort) {\n                t.values = t.values.sort(function (v1, v2) {\n                    var x1 = v1.x || v1.x === 0 ? v1.x : Infinity,\n                        x2 = v2.x || v2.x === 0 ? v2.x : Infinity;\n                    return x1 - x2;\n                });\n            }\n            // indexing each value\n            i = 0;\n            t.values.forEach(function (v) {\n                v.index = i++;\n            });\n            // this needs to be sorted because its index and value.index is identical\n            $$.data.xs[t.id].sort(function (v1, v2) {\n                return v1 - v2;\n            });\n        });\n\n        // set target types\n        if (config.data_type) {\n            $$.setTargetType($$.mapToIds(targets).filter(function (id) { return ! (id in config.data_types); }), config.data_type);\n        }\n\n        // cache as original id keyed\n        targets.forEach(function (d) {\n            $$.addCache(d.id_org, d);\n        });\n\n        return targets;\n    };\n\n    c3_chart_internal_fn.load = function (targets, args) {\n        var $$ = this;\n        if (targets) {\n            // filter loading targets if needed\n            if (args.filter) {\n                targets = targets.filter(args.filter);\n            }\n            // set type if args.types || args.type specified\n            if (args.type || args.types) {\n                targets.forEach(function (t) {\n                    var type = args.types && args.types[t.id] ? args.types[t.id] : args.type;\n                    $$.setTargetType(t.id, type);\n                });\n            }\n            // Update/Add data\n            $$.data.targets.forEach(function (d) {\n                for (var i = 0; i < targets.length; i++) {\n                    if (d.id === targets[i].id) {\n                        d.values = targets[i].values;\n                        targets.splice(i, 1);\n                        break;\n                    }\n                }\n            });\n            $$.data.targets = $$.data.targets.concat(targets); // add remained\n        }\n\n        // Set targets\n        $$.updateTargets($$.data.targets);\n\n        // Redraw with new targets\n        $$.redraw({withUpdateOrgXDomain: true, withUpdateXDomain: true, withLegend: true});\n\n        if (args.done) { args.done(); }\n    };\n    c3_chart_internal_fn.loadFromArgs = function (args) {\n        var $$ = this;\n        if (args.data) {\n            $$.load($$.convertDataToTargets(args.data), args);\n        }\n        else if (args.url) {\n            $$.convertUrlToData(args.url, args.mimeType, args.keys, function (data) {\n                $$.load($$.convertDataToTargets(data), args);\n            });\n        }\n        else if (args.json) {\n            $$.load($$.convertDataToTargets($$.convertJsonToData(args.json, args.keys)), args);\n        }\n        else if (args.rows) {\n            $$.load($$.convertDataToTargets($$.convertRowsToData(args.rows)), args);\n        }\n        else if (args.columns) {\n            $$.load($$.convertDataToTargets($$.convertColumnsToData(args.columns)), args);\n        }\n        else {\n            $$.load(null, args);\n        }\n    };\n    c3_chart_internal_fn.unload = function (targetIds, done) {\n        var $$ = this;\n        if (!done) {\n            done = function () {};\n        }\n        // filter existing target\n        targetIds = targetIds.filter(function (id) { return $$.hasTarget($$.data.targets, id); });\n        // If no target, call done and return\n        if (!targetIds || targetIds.length === 0) {\n            done();\n            return;\n        }\n        $$.svg.selectAll(targetIds.map(function (id) { return $$.selectorTarget(id); }))\n            .transition()\n            .style('opacity', 0)\n            .remove()\n            .call($$.endall, done);\n        targetIds.forEach(function (id) {\n            // Reset fadein for future load\n            $$.withoutFadeIn[id] = false;\n            // Remove target's elements\n            if ($$.legend) {\n                $$.legend.selectAll('.' + CLASS.legendItem + $$.getTargetSelectorSuffix(id)).remove();\n            }\n            // Remove target\n            $$.data.targets = $$.data.targets.filter(function (t) {\n                return t.id !== id;\n            });\n        });\n    };\n\n    c3_chart_internal_fn.categoryName = function (i) {\n        var config = this.config;\n        return i < config.axis_x_categories.length ? config.axis_x_categories[i] : i;\n    };\n\n    c3_chart_internal_fn.initEventRect = function () {\n        var $$ = this;\n        $$.main.select('.' + CLASS.chart).append(\"g\")\n            .attr(\"class\", CLASS.eventRects)\n            .style('fill-opacity', 0);\n    };\n    c3_chart_internal_fn.redrawEventRect = function () {\n        var $$ = this, config = $$.config,\n            eventRectUpdate, maxDataCountTarget,\n            isMultipleX = $$.isMultipleX();\n\n        // rects for mouseover\n        var eventRects = $$.main.select('.' + CLASS.eventRects)\n                .style('cursor', config.zoom_enabled ? config.axis_rotated ? 'ns-resize' : 'ew-resize' : null)\n                .classed(CLASS.eventRectsMultiple, isMultipleX)\n                .classed(CLASS.eventRectsSingle, !isMultipleX);\n\n        // clear old rects\n        eventRects.selectAll('.' + CLASS.eventRect).remove();\n\n        // open as public variable\n        $$.eventRect = eventRects.selectAll('.' + CLASS.eventRect);\n\n        if (isMultipleX) {\n            eventRectUpdate = $$.eventRect.data([0]);\n            // enter : only one rect will be added\n            $$.generateEventRectsForMultipleXs(eventRectUpdate.enter());\n            // update\n            $$.updateEventRect(eventRectUpdate);\n            // exit : not needed because always only one rect exists\n        }\n        else {\n            // Set data and update $$.eventRect\n            maxDataCountTarget = $$.getMaxDataCountTarget($$.data.targets);\n            eventRects.datum(maxDataCountTarget ? maxDataCountTarget.values : []);\n            $$.eventRect = eventRects.selectAll('.' + CLASS.eventRect);\n            eventRectUpdate = $$.eventRect.data(function (d) { return d; });\n            // enter\n            $$.generateEventRectsForSingleX(eventRectUpdate.enter());\n            // update\n            $$.updateEventRect(eventRectUpdate);\n            // exit\n            eventRectUpdate.exit().remove();\n        }\n    };\n    c3_chart_internal_fn.updateEventRect = function (eventRectUpdate) {\n        var $$ = this, config = $$.config,\n            x, y, w, h, rectW, rectX;\n\n        // set update selection if null\n        eventRectUpdate = eventRectUpdate || $$.eventRect.data(function (d) { return d; });\n\n        if ($$.isMultipleX()) {\n            // TODO: rotated not supported yet\n            x = 0;\n            y = 0;\n            w = $$.width;\n            h = $$.height;\n        }\n        else {\n            if (($$.isCustomX() || $$.isTimeSeries()) && !$$.isCategorized()) {\n\n                // update index for x that is used by prevX and nextX\n                $$.updateXs();\n\n                rectW = function (d) {\n                    var prevX = $$.getPrevX(d.index), nextX = $$.getNextX(d.index);\n\n                    // if there this is a single data point make the eventRect full width (or height)\n                    if (prevX === null && nextX === null) {\n                        return config.axis_rotated ? $$.height : $$.width;\n                    }\n\n                    if (prevX === null) { prevX = $$.x.domain()[0]; }\n                    if (nextX === null) { nextX = $$.x.domain()[1]; }\n\n                    return Math.max(0, ($$.x(nextX) - $$.x(prevX)) / 2);\n                };\n                rectX = function (d) {\n                    var prevX = $$.getPrevX(d.index), nextX = $$.getNextX(d.index),\n                        thisX = $$.data.xs[d.id][d.index];\n\n                    // if there this is a single data point position the eventRect at 0\n                    if (prevX === null && nextX === null) {\n                        return 0;\n                    }\n\n                    if (prevX === null) { prevX = $$.x.domain()[0]; }\n\n                    return ($$.x(thisX) + $$.x(prevX)) / 2;\n                };\n            } else {\n                rectW = $$.getEventRectWidth();\n                rectX = function (d) {\n                    return $$.x(d.x) - (rectW / 2);\n                };\n            }\n            x = config.axis_rotated ? 0 : rectX;\n            y = config.axis_rotated ? rectX : 0;\n            w = config.axis_rotated ? $$.width : rectW;\n            h = config.axis_rotated ? rectW : $$.height;\n        }\n\n        eventRectUpdate\n            .attr('class', $$.classEvent.bind($$))\n            .attr(\"x\", x)\n            .attr(\"y\", y)\n            .attr(\"width\", w)\n            .attr(\"height\", h);\n    };\n    c3_chart_internal_fn.generateEventRectsForSingleX = function (eventRectEnter) {\n        var $$ = this, d3 = $$.d3, config = $$.config;\n        eventRectEnter.append(\"rect\")\n            .attr(\"class\", $$.classEvent.bind($$))\n            .style(\"cursor\", config.data_selection_enabled && config.data_selection_grouped ? \"pointer\" : null)\n            .on('mouseover', function (d) {\n                var index = d.index;\n\n                if ($$.dragging || $$.flowing) { return; } // do nothing while dragging/flowing\n                if ($$.hasArcType()) { return; }\n\n                // Expand shapes for selection\n                if (config.point_focus_expand_enabled) { $$.expandCircles(index, null, true); }\n                $$.expandBars(index, null, true);\n\n                // Call event handler\n                $$.main.selectAll('.' + CLASS.shape + '-' + index).each(function (d) {\n                    config.data_onmouseover.call($$.api, d);\n                });\n            })\n            .on('mouseout', function (d) {\n                var index = d.index;\n                if (!$$.config) { return; } // chart is destroyed\n                if ($$.hasArcType()) { return; }\n                $$.hideXGridFocus();\n                $$.hideTooltip();\n                // Undo expanded shapes\n                $$.unexpandCircles();\n                $$.unexpandBars();\n                // Call event handler\n                $$.main.selectAll('.' + CLASS.shape + '-' + index).each(function (d) {\n                    config.data_onmouseout.call($$.api, d);\n                });\n            })\n            .on('mousemove', function (d) {\n                var selectedData, index = d.index,\n                    eventRect = $$.svg.select('.' + CLASS.eventRect + '-' + index);\n\n                if ($$.dragging || $$.flowing) { return; } // do nothing while dragging/flowing\n                if ($$.hasArcType()) { return; }\n\n                if ($$.isStepType(d) && $$.config.line_step_type === 'step-after' && d3.mouse(this)[0] < $$.x($$.getXValue(d.id, index))) {\n                    index -= 1;\n                }\n\n                // Show tooltip\n                selectedData = $$.filterTargetsToShow($$.data.targets).map(function (t) {\n                    return $$.addName($$.getValueOnIndex(t.values, index));\n                });\n\n                if (config.tooltip_grouped) {\n                    $$.showTooltip(selectedData, this);\n                    $$.showXGridFocus(selectedData);\n                }\n\n                if (config.tooltip_grouped && (!config.data_selection_enabled || config.data_selection_grouped)) {\n                    return;\n                }\n\n                $$.main.selectAll('.' + CLASS.shape + '-' + index)\n                    .each(function () {\n                        d3.select(this).classed(CLASS.EXPANDED, true);\n                        if (config.data_selection_enabled) {\n                            eventRect.style('cursor', config.data_selection_grouped ? 'pointer' : null);\n                        }\n                        if (!config.tooltip_grouped) {\n                            $$.hideXGridFocus();\n                            $$.hideTooltip();\n                            if (!config.data_selection_grouped) {\n                                $$.unexpandCircles(index);\n                                $$.unexpandBars(index);\n                            }\n                        }\n                    })\n                    .filter(function (d) {\n                        return $$.isWithinShape(this, d);\n                    })\n                    .each(function (d) {\n                        if (config.data_selection_enabled && (config.data_selection_grouped || config.data_selection_isselectable(d))) {\n                            eventRect.style('cursor', 'pointer');\n                        }\n                        if (!config.tooltip_grouped) {\n                            $$.showTooltip([d], this);\n                            $$.showXGridFocus([d]);\n                            if (config.point_focus_expand_enabled) { $$.expandCircles(index, d.id, true); }\n                            $$.expandBars(index, d.id, true);\n                        }\n                    });\n            })\n            .on('click', function (d) {\n                var index = d.index;\n                if ($$.hasArcType() || !$$.toggleShape) { return; }\n                if ($$.cancelClick) {\n                    $$.cancelClick = false;\n                    return;\n                }\n                if ($$.isStepType(d) && config.line_step_type === 'step-after' && d3.mouse(this)[0] < $$.x($$.getXValue(d.id, index))) {\n                    index -= 1;\n                }\n                $$.main.selectAll('.' + CLASS.shape + '-' + index).each(function (d) {\n                    if (config.data_selection_grouped || $$.isWithinShape(this, d)) {\n                        $$.toggleShape(this, d, index);\n                        $$.config.data_onclick.call($$.api, d, this);\n                    }\n                });\n            })\n            .call(\n                config.data_selection_draggable && $$.drag ? (\n                    d3.behavior.drag().origin(Object)\n                        .on('drag', function () { $$.drag(d3.mouse(this)); })\n                        .on('dragstart', function () { $$.dragstart(d3.mouse(this)); })\n                        .on('dragend', function () { $$.dragend(); })\n                ) : function () {}\n            );\n    };\n\n    c3_chart_internal_fn.generateEventRectsForMultipleXs = function (eventRectEnter) {\n        var $$ = this, d3 = $$.d3, config = $$.config;\n\n        function mouseout() {\n            $$.svg.select('.' + CLASS.eventRect).style('cursor', null);\n            $$.hideXGridFocus();\n            $$.hideTooltip();\n            $$.unexpandCircles();\n            $$.unexpandBars();\n        }\n\n        eventRectEnter.append('rect')\n            .attr('x', 0)\n            .attr('y', 0)\n            .attr('width', $$.width)\n            .attr('height', $$.height)\n            .attr('class', CLASS.eventRect)\n            .on('mouseout', function () {\n                if (!$$.config) { return; } // chart is destroyed\n                if ($$.hasArcType()) { return; }\n                mouseout();\n            })\n            .on('mousemove', function () {\n                var targetsToShow = $$.filterTargetsToShow($$.data.targets);\n                var mouse, closest, sameXData, selectedData;\n\n                if ($$.dragging) { return; } // do nothing when dragging\n                if ($$.hasArcType(targetsToShow)) { return; }\n\n                mouse = d3.mouse(this);\n                closest = $$.findClosestFromTargets(targetsToShow, mouse);\n\n                if ($$.mouseover && (!closest || closest.id !== $$.mouseover.id)) {\n                    config.data_onmouseout.call($$.api, $$.mouseover);\n                    $$.mouseover = undefined;\n                }\n\n                if (! closest) {\n                    mouseout();\n                    return;\n                }\n\n                if ($$.isScatterType(closest) || !config.tooltip_grouped) {\n                    sameXData = [closest];\n                } else {\n                    sameXData = $$.filterByX(targetsToShow, closest.x);\n                }\n\n                // show tooltip when cursor is close to some point\n                selectedData = sameXData.map(function (d) {\n                    return $$.addName(d);\n                });\n                $$.showTooltip(selectedData, this);\n\n                // expand points\n                if (config.point_focus_expand_enabled) {\n                    $$.expandCircles(closest.index, closest.id, true);\n                }\n                $$.expandBars(closest.index, closest.id, true);\n\n                // Show xgrid focus line\n                $$.showXGridFocus(selectedData);\n\n                // Show cursor as pointer if point is close to mouse position\n                if ($$.isBarType(closest.id) || $$.dist(closest, mouse) < 100) {\n                    $$.svg.select('.' + CLASS.eventRect).style('cursor', 'pointer');\n                    if (!$$.mouseover) {\n                        config.data_onmouseover.call($$.api, closest);\n                        $$.mouseover = closest;\n                    }\n                }\n            })\n            .on('click', function () {\n                var targetsToShow = $$.filterTargetsToShow($$.data.targets);\n                var mouse, closest;\n\n                if ($$.hasArcType(targetsToShow)) { return; }\n\n                mouse = d3.mouse(this);\n                closest = $$.findClosestFromTargets(targetsToShow, mouse);\n\n                if (! closest) { return; }\n\n                // select if selection enabled\n                if ($$.isBarType(closest.id) || $$.dist(closest, mouse) < 100) {\n                    $$.main.selectAll('.' + CLASS.shapes + $$.getTargetSelectorSuffix(closest.id)).selectAll('.' + CLASS.shape + '-' + closest.index).each(function () {\n                        if (config.data_selection_grouped || $$.isWithinShape(this, closest)) {\n                            $$.toggleShape(this, closest, closest.index);\n                            $$.config.data_onclick.call($$.api, closest, this);\n                        }\n                    });\n                }\n            })\n            .call(\n                config.data_selection_draggable && $$.drag ? (\n                    d3.behavior.drag().origin(Object)\n                        .on('drag', function () { $$.drag(d3.mouse(this)); })\n                        .on('dragstart', function () { $$.dragstart(d3.mouse(this)); })\n                        .on('dragend', function () { $$.dragend(); })\n                ) : function () {}\n            );\n    };\n    c3_chart_internal_fn.dispatchEvent = function (type, index, mouse) {\n        var $$ = this,\n            selector = '.' + CLASS.eventRect + (!$$.isMultipleX() ? '-' + index : ''),\n            eventRect = $$.main.select(selector).node(),\n            box = eventRect.getBoundingClientRect(),\n            x = box.left + (mouse ? mouse[0] : 0),\n            y = box.top + (mouse ? mouse[1] : 0),\n            event = document.createEvent(\"MouseEvents\");\n\n        event.initMouseEvent(type, true, true, window, 0, x, y, x, y,\n                             false, false, false, false, 0, null);\n        eventRect.dispatchEvent(event);\n    };\n\n    c3_chart_internal_fn.getCurrentWidth = function () {\n        var $$ = this, config = $$.config;\n        return config.size_width ? config.size_width : $$.getParentWidth();\n    };\n    c3_chart_internal_fn.getCurrentHeight = function () {\n        var $$ = this, config = $$.config,\n            h = config.size_height ? config.size_height : $$.getParentHeight();\n        return h > 0 ? h : 320 / ($$.hasType('gauge') ? 2 : 1);\n    };\n    c3_chart_internal_fn.getCurrentPaddingTop = function () {\n        var config = this.config;\n        return isValue(config.padding_top) ? config.padding_top : 0;\n    };\n    c3_chart_internal_fn.getCurrentPaddingBottom = function () {\n        var config = this.config;\n        return isValue(config.padding_bottom) ? config.padding_bottom : 0;\n    };\n    c3_chart_internal_fn.getCurrentPaddingLeft = function (withoutRecompute) {\n        var $$ = this, config = $$.config;\n        if (isValue(config.padding_left)) {\n            return config.padding_left;\n        } else if (config.axis_rotated) {\n            return !config.axis_x_show ? 1 : Math.max(ceil10($$.getAxisWidthByAxisId('x', withoutRecompute)), 40);\n        } else if (!config.axis_y_show || config.axis_y_inner) { // && !config.axis_rotated\n            return $$.axis.getYAxisLabelPosition().isOuter ? 30 : 1;\n        } else {\n            return ceil10($$.getAxisWidthByAxisId('y', withoutRecompute));\n        }\n    };\n    c3_chart_internal_fn.getCurrentPaddingRight = function () {\n        var $$ = this, config = $$.config,\n            defaultPadding = 10, legendWidthOnRight = $$.isLegendRight ? $$.getLegendWidth() + 20 : 0;\n        if (isValue(config.padding_right)) {\n            return config.padding_right + 1; // 1 is needed not to hide tick line\n        } else if (config.axis_rotated) {\n            return defaultPadding + legendWidthOnRight;\n        } else if (!config.axis_y2_show || config.axis_y2_inner) { // && !config.axis_rotated\n            return 2 + legendWidthOnRight + ($$.axis.getY2AxisLabelPosition().isOuter ? 20 : 0);\n        } else {\n            return ceil10($$.getAxisWidthByAxisId('y2')) + legendWidthOnRight;\n        }\n    };\n\n    c3_chart_internal_fn.getParentRectValue = function (key) {\n        var parent = this.selectChart.node(), v;\n        while (parent && parent.tagName !== 'BODY') {\n            try {\n                v = parent.getBoundingClientRect()[key];\n            } catch(e) {\n                if (key === 'width') {\n                    // In IE in certain cases getBoundingClientRect\n                    // will cause an \"unspecified error\"\n                    v = parent.offsetWidth;\n                }\n            }\n            if (v) {\n                break;\n            }\n            parent = parent.parentNode;\n        }\n        return v;\n    };\n    c3_chart_internal_fn.getParentWidth = function () {\n        return this.getParentRectValue('width');\n    };\n    c3_chart_internal_fn.getParentHeight = function () {\n        var h = this.selectChart.style('height');\n        return h.indexOf('px') > 0 ? +h.replace('px', '') : 0;\n    };\n\n\n    c3_chart_internal_fn.getSvgLeft = function (withoutRecompute) {\n        var $$ = this, config = $$.config,\n            hasLeftAxisRect = config.axis_rotated || (!config.axis_rotated && !config.axis_y_inner),\n            leftAxisClass = config.axis_rotated ? CLASS.axisX : CLASS.axisY,\n            leftAxis = $$.main.select('.' + leftAxisClass).node(),\n            svgRect = leftAxis && hasLeftAxisRect ? leftAxis.getBoundingClientRect() : {right: 0},\n            chartRect = $$.selectChart.node().getBoundingClientRect(),\n            hasArc = $$.hasArcType(),\n            svgLeft = svgRect.right - chartRect.left - (hasArc ? 0 : $$.getCurrentPaddingLeft(withoutRecompute));\n        return svgLeft > 0 ? svgLeft : 0;\n    };\n\n\n    c3_chart_internal_fn.getAxisWidthByAxisId = function (id, withoutRecompute) {\n        var $$ = this, position = $$.axis.getLabelPositionById(id);\n        return $$.axis.getMaxTickWidth(id, withoutRecompute) + (position.isInner ? 20 : 40);\n    };\n    c3_chart_internal_fn.getHorizontalAxisHeight = function (axisId) {\n        var $$ = this, config = $$.config, h = 30;\n        if (axisId === 'x' && !config.axis_x_show) { return 8; }\n        if (axisId === 'x' && config.axis_x_height) { return config.axis_x_height; }\n        if (axisId === 'y' && !config.axis_y_show) { return config.legend_show && !$$.isLegendRight && !$$.isLegendInset ? 10 : 1; }\n        if (axisId === 'y2' && !config.axis_y2_show) { return $$.rotated_padding_top; }\n        // Calculate x axis height when tick rotated\n        if (axisId === 'x' && !config.axis_rotated && config.axis_x_tick_rotate) {\n            h = 30 + $$.axis.getMaxTickWidth(axisId) * Math.cos(Math.PI * (90 - config.axis_x_tick_rotate) / 180);\n        }\n        return h + ($$.axis.getLabelPositionById(axisId).isInner ? 0 : 10) + (axisId === 'y2' ? -10 : 0);\n    };\n\n    c3_chart_internal_fn.getEventRectWidth = function () {\n        return Math.max(0, this.xAxis.tickInterval());\n    };\n\n    c3_chart_internal_fn.getShapeIndices = function (typeFilter) {\n        var $$ = this, config = $$.config,\n            indices = {}, i = 0, j, k;\n        $$.filterTargetsToShow($$.data.targets.filter(typeFilter, $$)).forEach(function (d) {\n            for (j = 0; j < config.data_groups.length; j++) {\n                if (config.data_groups[j].indexOf(d.id) < 0) { continue; }\n                for (k = 0; k < config.data_groups[j].length; k++) {\n                    if (config.data_groups[j][k] in indices) {\n                        indices[d.id] = indices[config.data_groups[j][k]];\n                        break;\n                    }\n                }\n            }\n            if (isUndefined(indices[d.id])) { indices[d.id] = i++; }\n        });\n        indices.__max__ = i - 1;\n        return indices;\n    };\n    c3_chart_internal_fn.getShapeX = function (offset, targetsNum, indices, isSub) {\n        var $$ = this, scale = isSub ? $$.subX : $$.x;\n        return function (d) {\n            var index = d.id in indices ? indices[d.id] : 0;\n            return d.x || d.x === 0 ? scale(d.x) - offset * (targetsNum / 2 - index) : 0;\n        };\n    };\n    c3_chart_internal_fn.getShapeY = function (isSub) {\n        var $$ = this;\n        return function (d) {\n            var scale = isSub ? $$.getSubYScale(d.id) : $$.getYScale(d.id);\n            return scale(d.value);\n        };\n    };\n    c3_chart_internal_fn.getShapeOffset = function (typeFilter, indices, isSub) {\n        var $$ = this,\n            targets = $$.orderTargets($$.filterTargetsToShow($$.data.targets.filter(typeFilter, $$))),\n            targetIds = targets.map(function (t) { return t.id; });\n        return function (d, i) {\n            var scale = isSub ? $$.getSubYScale(d.id) : $$.getYScale(d.id),\n                y0 = scale(0), offset = y0;\n            targets.forEach(function (t) {\n                var values = $$.isStepType(d) ? $$.convertValuesToStep(t.values) : t.values;\n                if (t.id === d.id || indices[t.id] !== indices[d.id]) { return; }\n                if (targetIds.indexOf(t.id) < targetIds.indexOf(d.id)) {\n                    if (values[i].value * d.value >= 0) {\n                        offset += scale(values[i].value) - y0;\n                    }\n                }\n            });\n            return offset;\n        };\n    };\n    c3_chart_internal_fn.isWithinShape = function (that, d) {\n        var $$ = this,\n            shape = $$.d3.select(that), isWithin;\n        if (!$$.isTargetToShow(d.id)) {\n            isWithin = false;\n        }\n        else if (that.nodeName === 'circle') {\n            isWithin = $$.isStepType(d) ? $$.isWithinStep(that, $$.getYScale(d.id)(d.value)) : $$.isWithinCircle(that, $$.pointSelectR(d) * 1.5);\n        }\n        else if (that.nodeName === 'path') {\n            isWithin = shape.classed(CLASS.bar) ? $$.isWithinBar(that) : true;\n        }\n        return isWithin;\n    };\n\n\n    c3_chart_internal_fn.getInterpolate = function (d) {\n        var $$ = this;\n        return $$.isSplineType(d) ? \"cardinal\" : $$.isStepType(d) ? $$.config.line_step_type : \"linear\";\n    };\n\n    c3_chart_internal_fn.initLine = function () {\n        var $$ = this;\n        $$.main.select('.' + CLASS.chart).append(\"g\")\n            .attr(\"class\", CLASS.chartLines);\n    };\n    c3_chart_internal_fn.updateTargetsForLine = function (targets) {\n        var $$ = this, config = $$.config,\n            mainLineUpdate, mainLineEnter,\n            classChartLine = $$.classChartLine.bind($$),\n            classLines = $$.classLines.bind($$),\n            classAreas = $$.classAreas.bind($$),\n            classCircles = $$.classCircles.bind($$),\n            classFocus = $$.classFocus.bind($$);\n        mainLineUpdate = $$.main.select('.' + CLASS.chartLines).selectAll('.' + CLASS.chartLine)\n            .data(targets)\n            .attr('class', function (d) { return classChartLine(d) + classFocus(d); });\n        mainLineEnter = mainLineUpdate.enter().append('g')\n            .attr('class', classChartLine)\n            .style('opacity', 0)\n            .style(\"pointer-events\", \"none\");\n        // Lines for each data\n        mainLineEnter.append('g')\n            .attr(\"class\", classLines);\n        // Areas\n        mainLineEnter.append('g')\n            .attr('class', classAreas);\n        // Circles for each data point on lines\n        mainLineEnter.append('g')\n            .attr(\"class\", function (d) { return $$.generateClass(CLASS.selectedCircles, d.id); });\n        mainLineEnter.append('g')\n            .attr(\"class\", classCircles)\n            .style(\"cursor\", function (d) { return config.data_selection_isselectable(d) ? \"pointer\" : null; });\n        // Update date for selected circles\n        targets.forEach(function (t) {\n            $$.main.selectAll('.' + CLASS.selectedCircles + $$.getTargetSelectorSuffix(t.id)).selectAll('.' + CLASS.selectedCircle).each(function (d) {\n                d.value = t.values[d.index].value;\n            });\n        });\n        // MEMO: can not keep same color...\n        //mainLineUpdate.exit().remove();\n    };\n    c3_chart_internal_fn.updateLine = function (durationForExit) {\n        var $$ = this;\n        $$.mainLine = $$.main.selectAll('.' + CLASS.lines).selectAll('.' + CLASS.line)\n            .data($$.lineData.bind($$));\n        $$.mainLine.enter().append('path')\n            .attr('class', $$.classLine.bind($$))\n            .style(\"stroke\", $$.color);\n        $$.mainLine\n            .style(\"opacity\", $$.initialOpacity.bind($$))\n            .style('shape-rendering', function (d) { return $$.isStepType(d) ? 'crispEdges' : ''; })\n            .attr('transform', null);\n        $$.mainLine.exit().transition().duration(durationForExit)\n            .style('opacity', 0)\n            .remove();\n    };\n    c3_chart_internal_fn.redrawLine = function (drawLine, withTransition) {\n        return [\n            (withTransition ? this.mainLine.transition() : this.mainLine)\n                .attr(\"d\", drawLine)\n                .style(\"stroke\", this.color)\n                .style(\"opacity\", 1)\n        ];\n    };\n    c3_chart_internal_fn.generateDrawLine = function (lineIndices, isSub) {\n        var $$ = this, config = $$.config,\n            line = $$.d3.svg.line(),\n            getPoints = $$.generateGetLinePoints(lineIndices, isSub),\n            yScaleGetter = isSub ? $$.getSubYScale : $$.getYScale,\n            xValue = function (d) { return (isSub ? $$.subxx : $$.xx).call($$, d); },\n            yValue = function (d, i) {\n                return config.data_groups.length > 0 ? getPoints(d, i)[0][1] : yScaleGetter.call($$, d.id)(d.value);\n            };\n\n        line = config.axis_rotated ? line.x(yValue).y(xValue) : line.x(xValue).y(yValue);\n        if (!config.line_connectNull) { line = line.defined(function (d) { return d.value != null; }); }\n        return function (d) {\n            var values = config.line_connectNull ? $$.filterRemoveNull(d.values) : d.values,\n                x = isSub ? $$.x : $$.subX, y = yScaleGetter.call($$, d.id), x0 = 0, y0 = 0, path;\n            if ($$.isLineType(d)) {\n                if (config.data_regions[d.id]) {\n                    path = $$.lineWithRegions(values, x, y, config.data_regions[d.id]);\n                } else {\n                    if ($$.isStepType(d)) { values = $$.convertValuesToStep(values); }\n                    path = line.interpolate($$.getInterpolate(d))(values);\n                }\n            } else {\n                if (values[0]) {\n                    x0 = x(values[0].x);\n                    y0 = y(values[0].value);\n                }\n                path = config.axis_rotated ? \"M \" + y0 + \" \" + x0 : \"M \" + x0 + \" \" + y0;\n            }\n            return path ? path : \"M 0 0\";\n        };\n    };\n    c3_chart_internal_fn.generateGetLinePoints = function (lineIndices, isSub) { // partial duplication of generateGetBarPoints\n        var $$ = this, config = $$.config,\n            lineTargetsNum = lineIndices.__max__ + 1,\n            x = $$.getShapeX(0, lineTargetsNum, lineIndices, !!isSub),\n            y = $$.getShapeY(!!isSub),\n            lineOffset = $$.getShapeOffset($$.isLineType, lineIndices, !!isSub),\n            yScale = isSub ? $$.getSubYScale : $$.getYScale;\n        return function (d, i) {\n            var y0 = yScale.call($$, d.id)(0),\n                offset = lineOffset(d, i) || y0, // offset is for stacked area chart\n                posX = x(d), posY = y(d);\n            // fix posY not to overflow opposite quadrant\n            if (config.axis_rotated) {\n                if ((0 < d.value && posY < y0) || (d.value < 0 && y0 < posY)) { posY = y0; }\n            }\n            // 1 point that marks the line position\n            return [\n                [posX, posY - (y0 - offset)],\n                [posX, posY - (y0 - offset)], // needed for compatibility\n                [posX, posY - (y0 - offset)], // needed for compatibility\n                [posX, posY - (y0 - offset)]  // needed for compatibility\n            ];\n        };\n    };\n\n\n    c3_chart_internal_fn.lineWithRegions = function (d, x, y, _regions) {\n        var $$ = this, config = $$.config,\n            prev = -1, i, j,\n            s = \"M\", sWithRegion,\n            xp, yp, dx, dy, dd, diff, diffx2,\n            xOffset = $$.isCategorized() ? 0.5 : 0,\n            xValue, yValue,\n            regions = [];\n\n        function isWithinRegions(x, regions) {\n            var i;\n            for (i = 0; i < regions.length; i++) {\n                if (regions[i].start < x && x <= regions[i].end) { return true; }\n            }\n            return false;\n        }\n\n        // Check start/end of regions\n        if (isDefined(_regions)) {\n            for (i = 0; i < _regions.length; i++) {\n                regions[i] = {};\n                if (isUndefined(_regions[i].start)) {\n                    regions[i].start = d[0].x;\n                } else {\n                    regions[i].start = $$.isTimeSeries() ? $$.parseDate(_regions[i].start) : _regions[i].start;\n                }\n                if (isUndefined(_regions[i].end)) {\n                    regions[i].end = d[d.length - 1].x;\n                } else {\n                    regions[i].end = $$.isTimeSeries() ? $$.parseDate(_regions[i].end) : _regions[i].end;\n                }\n            }\n        }\n\n        // Set scales\n        xValue = config.axis_rotated ? function (d) { return y(d.value); } : function (d) { return x(d.x); };\n        yValue = config.axis_rotated ? function (d) { return x(d.x); } : function (d) { return y(d.value); };\n\n        // Define svg generator function for region\n        function generateM(points) {\n            return 'M' + points[0][0] + ' ' + points[0][1] + ' ' + points[1][0] + ' ' + points[1][1];\n        }\n        if ($$.isTimeSeries()) {\n            sWithRegion = function (d0, d1, j, diff) {\n                var x0 = d0.x.getTime(), x_diff = d1.x - d0.x,\n                    xv0 = new Date(x0 + x_diff * j),\n                    xv1 = new Date(x0 + x_diff * (j + diff)),\n                    points;\n                if (config.axis_rotated) {\n                    points = [[y(yp(j)), x(xv0)], [y(yp(j + diff)), x(xv1)]];\n                } else {\n                    points = [[x(xv0), y(yp(j))], [x(xv1), y(yp(j + diff))]];\n                }\n                return generateM(points);\n            };\n        } else {\n            sWithRegion = function (d0, d1, j, diff) {\n                var points;\n                if (config.axis_rotated) {\n                    points = [[y(yp(j), true), x(xp(j))], [y(yp(j + diff), true), x(xp(j + diff))]];\n                } else {\n                    points = [[x(xp(j), true), y(yp(j))], [x(xp(j + diff), true), y(yp(j + diff))]];\n                }\n                return generateM(points);\n            };\n        }\n\n        // Generate\n        for (i = 0; i < d.length; i++) {\n\n            // Draw as normal\n            if (isUndefined(regions) || ! isWithinRegions(d[i].x, regions)) {\n                s += \" \" + xValue(d[i]) + \" \" + yValue(d[i]);\n            }\n            // Draw with region // TODO: Fix for horizotal charts\n            else {\n                xp = $$.getScale(d[i - 1].x + xOffset, d[i].x + xOffset, $$.isTimeSeries());\n                yp = $$.getScale(d[i - 1].value, d[i].value);\n\n                dx = x(d[i].x) - x(d[i - 1].x);\n                dy = y(d[i].value) - y(d[i - 1].value);\n                dd = Math.sqrt(Math.pow(dx, 2) + Math.pow(dy, 2));\n                diff = 2 / dd;\n                diffx2 = diff * 2;\n\n                for (j = diff; j <= 1; j += diffx2) {\n                    s += sWithRegion(d[i - 1], d[i], j, diff);\n                }\n            }\n            prev = d[i].x;\n        }\n\n        return s;\n    };\n\n\n    c3_chart_internal_fn.updateArea = function (durationForExit) {\n        var $$ = this, d3 = $$.d3;\n        $$.mainArea = $$.main.selectAll('.' + CLASS.areas).selectAll('.' + CLASS.area)\n            .data($$.lineData.bind($$));\n        $$.mainArea.enter().append('path')\n            .attr(\"class\", $$.classArea.bind($$))\n            .style(\"fill\", $$.color)\n            .style(\"opacity\", function () { $$.orgAreaOpacity = +d3.select(this).style('opacity'); return 0; });\n        $$.mainArea\n            .style(\"opacity\", $$.orgAreaOpacity);\n        $$.mainArea.exit().transition().duration(durationForExit)\n            .style('opacity', 0)\n            .remove();\n    };\n    c3_chart_internal_fn.redrawArea = function (drawArea, withTransition) {\n        return [\n            (withTransition ? this.mainArea.transition() : this.mainArea)\n                .attr(\"d\", drawArea)\n                .style(\"fill\", this.color)\n                .style(\"opacity\", this.orgAreaOpacity)\n        ];\n    };\n    c3_chart_internal_fn.generateDrawArea = function (areaIndices, isSub) {\n        var $$ = this, config = $$.config, area = $$.d3.svg.area(),\n            getPoints = $$.generateGetAreaPoints(areaIndices, isSub),\n            yScaleGetter = isSub ? $$.getSubYScale : $$.getYScale,\n            xValue = function (d) { return (isSub ? $$.subxx : $$.xx).call($$, d); },\n            value0 = function (d, i) {\n                return config.data_groups.length > 0 ? getPoints(d, i)[0][1] : yScaleGetter.call($$, d.id)($$.getAreaBaseValue(d.id));\n            },\n            value1 = function (d, i) {\n                return config.data_groups.length > 0 ? getPoints(d, i)[1][1] : yScaleGetter.call($$, d.id)(d.value);\n            };\n\n        area = config.axis_rotated ? area.x0(value0).x1(value1).y(xValue) : area.x(xValue).y0(value0).y1(value1);\n        if (!config.line_connectNull) {\n            area = area.defined(function (d) { return d.value !== null; });\n        }\n\n        return function (d) {\n            var values = config.line_connectNull ? $$.filterRemoveNull(d.values) : d.values,\n                x0 = 0, y0 = 0, path;\n            if ($$.isAreaType(d)) {\n                if ($$.isStepType(d)) { values = $$.convertValuesToStep(values); }\n                path = area.interpolate($$.getInterpolate(d))(values);\n            } else {\n                if (values[0]) {\n                    x0 = $$.x(values[0].x);\n                    y0 = $$.getYScale(d.id)(values[0].value);\n                }\n                path = config.axis_rotated ? \"M \" + y0 + \" \" + x0 : \"M \" + x0 + \" \" + y0;\n            }\n            return path ? path : \"M 0 0\";\n        };\n    };\n    c3_chart_internal_fn.getAreaBaseValue = function () {\n        return 0;\n    };\n    c3_chart_internal_fn.generateGetAreaPoints = function (areaIndices, isSub) { // partial duplication of generateGetBarPoints\n        var $$ = this, config = $$.config,\n            areaTargetsNum = areaIndices.__max__ + 1,\n            x = $$.getShapeX(0, areaTargetsNum, areaIndices, !!isSub),\n            y = $$.getShapeY(!!isSub),\n            areaOffset = $$.getShapeOffset($$.isAreaType, areaIndices, !!isSub),\n            yScale = isSub ? $$.getSubYScale : $$.getYScale;\n        return function (d, i) {\n            var y0 = yScale.call($$, d.id)(0),\n                offset = areaOffset(d, i) || y0, // offset is for stacked area chart\n                posX = x(d), posY = y(d);\n            // fix posY not to overflow opposite quadrant\n            if (config.axis_rotated) {\n                if ((0 < d.value && posY < y0) || (d.value < 0 && y0 < posY)) { posY = y0; }\n            }\n            // 1 point that marks the area position\n            return [\n                [posX, offset],\n                [posX, posY - (y0 - offset)],\n                [posX, posY - (y0 - offset)], // needed for compatibility\n                [posX, offset] // needed for compatibility\n            ];\n        };\n    };\n\n\n    c3_chart_internal_fn.updateCircle = function () {\n        var $$ = this;\n        $$.mainCircle = $$.main.selectAll('.' + CLASS.circles).selectAll('.' + CLASS.circle)\n            .data($$.lineOrScatterData.bind($$));\n        $$.mainCircle.enter().append(\"circle\")\n            .attr(\"class\", $$.classCircle.bind($$))\n            .attr(\"r\", $$.pointR.bind($$))\n            .style(\"fill\", $$.color);\n        $$.mainCircle\n            .style(\"opacity\", $$.initialOpacityForCircle.bind($$));\n        $$.mainCircle.exit().remove();\n    };\n    c3_chart_internal_fn.redrawCircle = function (cx, cy, withTransition) {\n        var selectedCircles = this.main.selectAll('.' + CLASS.selectedCircle);\n        return [\n            (withTransition ? this.mainCircle.transition() : this.mainCircle)\n                .style('opacity', this.opacityForCircle.bind(this))\n                .style(\"fill\", this.color)\n                .attr(\"cx\", cx)\n                .attr(\"cy\", cy),\n            (withTransition ? selectedCircles.transition() : selectedCircles)\n                .attr(\"cx\", cx)\n                .attr(\"cy\", cy)\n        ];\n    };\n    c3_chart_internal_fn.circleX = function (d) {\n        return d.x || d.x === 0 ? this.x(d.x) : null;\n    };\n    c3_chart_internal_fn.updateCircleY = function () {\n        var $$ = this, lineIndices, getPoints;\n        if ($$.config.data_groups.length > 0) {\n            lineIndices = $$.getShapeIndices($$.isLineType),\n            getPoints = $$.generateGetLinePoints(lineIndices);\n            $$.circleY = function (d, i) {\n                return getPoints(d, i)[0][1];\n            };\n        } else {\n            $$.circleY = function (d) {\n                return $$.getYScale(d.id)(d.value);\n            };\n        }\n    };\n    c3_chart_internal_fn.getCircles = function (i, id) {\n        var $$ = this;\n        return (id ? $$.main.selectAll('.' + CLASS.circles + $$.getTargetSelectorSuffix(id)) : $$.main).selectAll('.' + CLASS.circle + (isValue(i) ? '-' + i : ''));\n    };\n    c3_chart_internal_fn.expandCircles = function (i, id, reset) {\n        var $$ = this,\n            r = $$.pointExpandedR.bind($$);\n        if (reset) { $$.unexpandCircles(); }\n        $$.getCircles(i, id)\n            .classed(CLASS.EXPANDED, true)\n            .attr('r', r);\n    };\n    c3_chart_internal_fn.unexpandCircles = function (i) {\n        var $$ = this,\n            r = $$.pointR.bind($$);\n        $$.getCircles(i)\n            .filter(function () { return $$.d3.select(this).classed(CLASS.EXPANDED); })\n            .classed(CLASS.EXPANDED, false)\n            .attr('r', r);\n    };\n    c3_chart_internal_fn.pointR = function (d) {\n        var $$ = this, config = $$.config;\n        return $$.isStepType(d) ? 0 : (isFunction(config.point_r) ? config.point_r(d) : config.point_r);\n    };\n    c3_chart_internal_fn.pointExpandedR = function (d) {\n        var $$ = this, config = $$.config;\n        return config.point_focus_expand_enabled ? (config.point_focus_expand_r ? config.point_focus_expand_r : $$.pointR(d) * 1.75) : $$.pointR(d);\n    };\n    c3_chart_internal_fn.pointSelectR = function (d) {\n        var $$ = this, config = $$.config;\n        return config.point_select_r ? config.point_select_r : $$.pointR(d) * 4;\n    };\n    c3_chart_internal_fn.isWithinCircle = function (that, r) {\n        var d3 = this.d3,\n            mouse = d3.mouse(that), d3_this = d3.select(that),\n            cx = +d3_this.attr(\"cx\"), cy = +d3_this.attr(\"cy\");\n        return Math.sqrt(Math.pow(cx - mouse[0], 2) + Math.pow(cy - mouse[1], 2)) < r;\n    };\n    c3_chart_internal_fn.isWithinStep = function (that, y) {\n        return Math.abs(y - this.d3.mouse(that)[1]) < 30;\n    };\n\n    c3_chart_internal_fn.initBar = function () {\n        var $$ = this;\n        $$.main.select('.' + CLASS.chart).append(\"g\")\n            .attr(\"class\", CLASS.chartBars);\n    };\n    c3_chart_internal_fn.updateTargetsForBar = function (targets) {\n        var $$ = this, config = $$.config,\n            mainBarUpdate, mainBarEnter,\n            classChartBar = $$.classChartBar.bind($$),\n            classBars = $$.classBars.bind($$),\n            classFocus = $$.classFocus.bind($$);\n        mainBarUpdate = $$.main.select('.' + CLASS.chartBars).selectAll('.' + CLASS.chartBar)\n            .data(targets)\n            .attr('class', function (d) { return classChartBar(d) + classFocus(d); });\n        mainBarEnter = mainBarUpdate.enter().append('g')\n            .attr('class', classChartBar)\n            .style('opacity', 0)\n            .style(\"pointer-events\", \"none\");\n        // Bars for each data\n        mainBarEnter.append('g')\n            .attr(\"class\", classBars)\n            .style(\"cursor\", function (d) { return config.data_selection_isselectable(d) ? \"pointer\" : null; });\n\n    };\n    c3_chart_internal_fn.updateBar = function (durationForExit) {\n        var $$ = this,\n            barData = $$.barData.bind($$),\n            classBar = $$.classBar.bind($$),\n            initialOpacity = $$.initialOpacity.bind($$),\n            color = function (d) { return $$.color(d.id); };\n        $$.mainBar = $$.main.selectAll('.' + CLASS.bars).selectAll('.' + CLASS.bar)\n            .data(barData);\n        $$.mainBar.enter().append('path')\n            .attr(\"class\", classBar)\n            .style(\"stroke\", color)\n            .style(\"fill\", color);\n        $$.mainBar\n            .style(\"opacity\", initialOpacity);\n        $$.mainBar.exit().transition().duration(durationForExit)\n            .style('opacity', 0)\n            .remove();\n    };\n    c3_chart_internal_fn.redrawBar = function (drawBar, withTransition) {\n        return [\n            (withTransition ? this.mainBar.transition() : this.mainBar)\n                .attr('d', drawBar)\n                .style(\"fill\", this.color)\n                .style(\"opacity\", 1)\n        ];\n    };\n    c3_chart_internal_fn.getBarW = function (axis, barTargetsNum) {\n        var $$ = this, config = $$.config,\n            w = typeof config.bar_width === 'number' ? config.bar_width : barTargetsNum ? (axis.tickInterval() * config.bar_width_ratio) / barTargetsNum : 0;\n        return config.bar_width_max && w > config.bar_width_max ? config.bar_width_max : w;\n    };\n    c3_chart_internal_fn.getBars = function (i, id) {\n        var $$ = this;\n        return (id ? $$.main.selectAll('.' + CLASS.bars + $$.getTargetSelectorSuffix(id)) : $$.main).selectAll('.' + CLASS.bar + (isValue(i) ? '-' + i : ''));\n    };\n    c3_chart_internal_fn.expandBars = function (i, id, reset) {\n        var $$ = this;\n        if (reset) { $$.unexpandBars(); }\n        $$.getBars(i, id).classed(CLASS.EXPANDED, true);\n    };\n    c3_chart_internal_fn.unexpandBars = function (i) {\n        var $$ = this;\n        $$.getBars(i).classed(CLASS.EXPANDED, false);\n    };\n    c3_chart_internal_fn.generateDrawBar = function (barIndices, isSub) {\n        var $$ = this, config = $$.config,\n            getPoints = $$.generateGetBarPoints(barIndices, isSub);\n        return function (d, i) {\n            // 4 points that make a bar\n            var points = getPoints(d, i);\n\n            // switch points if axis is rotated, not applicable for sub chart\n            var indexX = config.axis_rotated ? 1 : 0;\n            var indexY = config.axis_rotated ? 0 : 1;\n\n            var path = 'M ' + points[0][indexX] + ',' + points[0][indexY] + ' ' +\n                    'L' + points[1][indexX] + ',' + points[1][indexY] + ' ' +\n                    'L' + points[2][indexX] + ',' + points[2][indexY] + ' ' +\n                    'L' + points[3][indexX] + ',' + points[3][indexY] + ' ' +\n                    'z';\n\n            return path;\n        };\n    };\n    c3_chart_internal_fn.generateGetBarPoints = function (barIndices, isSub) {\n        var $$ = this,\n            axis = isSub ? $$.subXAxis : $$.xAxis,\n            barTargetsNum = barIndices.__max__ + 1,\n            barW = $$.getBarW(axis, barTargetsNum),\n            barX = $$.getShapeX(barW, barTargetsNum, barIndices, !!isSub),\n            barY = $$.getShapeY(!!isSub),\n            barOffset = $$.getShapeOffset($$.isBarType, barIndices, !!isSub),\n            yScale = isSub ? $$.getSubYScale : $$.getYScale;\n        return function (d, i) {\n            var y0 = yScale.call($$, d.id)(0),\n                offset = barOffset(d, i) || y0, // offset is for stacked bar chart\n                posX = barX(d), posY = barY(d);\n            // fix posY not to overflow opposite quadrant\n            if ($$.config.axis_rotated) {\n                if ((0 < d.value && posY < y0) || (d.value < 0 && y0 < posY)) { posY = y0; }\n            }\n            // 4 points that make a bar\n            return [\n                [posX, offset],\n                [posX, posY - (y0 - offset)],\n                [posX + barW, posY - (y0 - offset)],\n                [posX + barW, offset]\n            ];\n        };\n    };\n    c3_chart_internal_fn.isWithinBar = function (that) {\n        var mouse = this.d3.mouse(that), box = that.getBoundingClientRect(),\n            seg0 = that.pathSegList.getItem(0), seg1 = that.pathSegList.getItem(1),\n            x = Math.min(seg0.x, seg1.x), y = Math.min(seg0.y, seg1.y),\n            w = box.width, h = box.height, offset = 2,\n            sx = x - offset, ex = x + w + offset, sy = y + h + offset, ey = y - offset;\n        return sx < mouse[0] && mouse[0] < ex && ey < mouse[1] && mouse[1] < sy;\n    };\n\n    c3_chart_internal_fn.initText = function () {\n        var $$ = this;\n        $$.main.select('.' + CLASS.chart).append(\"g\")\n            .attr(\"class\", CLASS.chartTexts);\n        $$.mainText = $$.d3.selectAll([]);\n    };\n    c3_chart_internal_fn.updateTargetsForText = function (targets) {\n        var $$ = this, mainTextUpdate, mainTextEnter,\n            classChartText = $$.classChartText.bind($$),\n            classTexts = $$.classTexts.bind($$),\n            classFocus = $$.classFocus.bind($$);\n        mainTextUpdate = $$.main.select('.' + CLASS.chartTexts).selectAll('.' + CLASS.chartText)\n            .data(targets)\n            .attr('class', function (d) { return classChartText(d) + classFocus(d); });\n        mainTextEnter = mainTextUpdate.enter().append('g')\n            .attr('class', classChartText)\n            .style('opacity', 0)\n            .style(\"pointer-events\", \"none\");\n        mainTextEnter.append('g')\n            .attr('class', classTexts);\n    };\n    c3_chart_internal_fn.updateText = function (durationForExit) {\n        var $$ = this, config = $$.config,\n            barOrLineData = $$.barOrLineData.bind($$),\n            classText = $$.classText.bind($$);\n        $$.mainText = $$.main.selectAll('.' + CLASS.texts).selectAll('.' + CLASS.text)\n            .data(barOrLineData);\n        $$.mainText.enter().append('text')\n            .attr(\"class\", classText)\n            .attr('text-anchor', function (d) { return config.axis_rotated ? (d.value < 0 ? 'end' : 'start') : 'middle'; })\n            .style(\"stroke\", 'none')\n            .style(\"fill\", function (d) { return $$.color(d); })\n            .style(\"fill-opacity\", 0);\n        $$.mainText\n            .text(function (d, i, j) { return $$.dataLabelFormat(d.id)(d.value, d.id, i, j); });\n        $$.mainText.exit()\n            .transition().duration(durationForExit)\n            .style('fill-opacity', 0)\n            .remove();\n    };\n    c3_chart_internal_fn.redrawText = function (xForText, yForText, forFlow, withTransition) {\n        return [\n            (withTransition ? this.mainText.transition() : this.mainText)\n                .attr('x', xForText)\n                .attr('y', yForText)\n                .style(\"fill\", this.color)\n                .style(\"fill-opacity\", forFlow ? 0 : this.opacityForText.bind(this))\n        ];\n    };\n    c3_chart_internal_fn.getTextRect = function (text, cls) {\n        var dummy = this.d3.select('body').append('div').classed('c3', true),\n            svg = dummy.append(\"svg\").style('visibility', 'hidden').style('position', 'fixed').style('top', 0).style('left', 0),\n            rect;\n        svg.selectAll('.dummy')\n            .data([text])\n          .enter().append('text')\n            .classed(cls ? cls : \"\", true)\n            .text(text)\n          .each(function () { rect = this.getBoundingClientRect(); });\n        dummy.remove();\n        return rect;\n    };\n    c3_chart_internal_fn.generateXYForText = function (areaIndices, barIndices, lineIndices, forX) {\n        var $$ = this,\n            getAreaPoints = $$.generateGetAreaPoints(areaIndices, false),\n            getBarPoints = $$.generateGetBarPoints(barIndices, false),\n            getLinePoints = $$.generateGetLinePoints(lineIndices, false),\n            getter = forX ? $$.getXForText : $$.getYForText;\n        return function (d, i) {\n            var getPoints = $$.isAreaType(d) ? getAreaPoints : $$.isBarType(d) ? getBarPoints : getLinePoints;\n            return getter.call($$, getPoints(d, i), d, this);\n        };\n    };\n    c3_chart_internal_fn.getXForText = function (points, d, textElement) {\n        var $$ = this,\n            box = textElement.getBoundingClientRect(), xPos, padding;\n        if ($$.config.axis_rotated) {\n            padding = $$.isBarType(d) ? 4 : 6;\n            xPos = points[2][1] + padding * (d.value < 0 ? -1 : 1);\n        } else {\n            xPos = $$.hasType('bar') ? (points[2][0] + points[0][0]) / 2 : points[0][0];\n        }\n        // show labels regardless of the domain if value is null\n        if (d.value === null) {\n            if (xPos > $$.width) {\n                xPos = $$.width - box.width;\n            } else if (xPos < 0) {\n                xPos = 4;\n            }\n        }\n        return xPos;\n    };\n    c3_chart_internal_fn.getYForText = function (points, d, textElement) {\n        var $$ = this,\n            box = textElement.getBoundingClientRect(),\n            yPos;\n        if ($$.config.axis_rotated) {\n            yPos = (points[0][0] + points[2][0] + box.height * 0.6) / 2;\n        } else {\n            yPos = points[2][1];\n            if (d.value < 0) {\n                yPos += box.height;\n                if ($$.isBarType(d) && $$.isSafari()) {\n                    yPos -= 3;\n                }\n                else if (!$$.isBarType(d) && $$.isChrome()) {\n                    yPos += 3;\n                }\n            } else {\n                yPos += $$.isBarType(d) ? -3 : -6;\n            }\n        }\n        // show labels regardless of the domain if value is null\n        if (d.value === null && !$$.config.axis_rotated) {\n            if (yPos < box.height) {\n                yPos = box.height;\n            } else if (yPos > this.height) {\n                yPos = this.height - 4;\n            }\n        }\n        return yPos;\n    };\n\n    c3_chart_internal_fn.setTargetType = function (targetIds, type) {\n        var $$ = this, config = $$.config;\n        $$.mapToTargetIds(targetIds).forEach(function (id) {\n            $$.withoutFadeIn[id] = (type === config.data_types[id]);\n            config.data_types[id] = type;\n        });\n        if (!targetIds) {\n            config.data_type = type;\n        }\n    };\n    c3_chart_internal_fn.hasType = function (type, targets) {\n        var $$ = this, types = $$.config.data_types, has = false;\n        targets = targets || $$.data.targets;\n        if (targets && targets.length) {\n            targets.forEach(function (target) {\n                var t = types[target.id];\n                if ((t && t.indexOf(type) >= 0) || (!t && type === 'line')) {\n                    has = true;\n                }\n            });\n        } else if (Object.keys(types).length) {\n            Object.keys(types).forEach(function (id) {\n                if (types[id] === type) { has = true; }\n            });\n        } else {\n            has = $$.config.data_type === type;\n        }\n        return has;\n    };\n    c3_chart_internal_fn.hasArcType = function (targets) {\n        return this.hasType('pie', targets) || this.hasType('donut', targets) || this.hasType('gauge', targets);\n    };\n    c3_chart_internal_fn.isLineType = function (d) {\n        var config = this.config, id = isString(d) ? d : d.id;\n        return !config.data_types[id] || ['line', 'spline', 'area', 'area-spline', 'step', 'area-step'].indexOf(config.data_types[id]) >= 0;\n    };\n    c3_chart_internal_fn.isStepType = function (d) {\n        var id = isString(d) ? d : d.id;\n        return ['step', 'area-step'].indexOf(this.config.data_types[id]) >= 0;\n    };\n    c3_chart_internal_fn.isSplineType = function (d) {\n        var id = isString(d) ? d : d.id;\n        return ['spline', 'area-spline'].indexOf(this.config.data_types[id]) >= 0;\n    };\n    c3_chart_internal_fn.isAreaType = function (d) {\n        var id = isString(d) ? d : d.id;\n        return ['area', 'area-spline', 'area-step'].indexOf(this.config.data_types[id]) >= 0;\n    };\n    c3_chart_internal_fn.isBarType = function (d) {\n        var id = isString(d) ? d : d.id;\n        return this.config.data_types[id] === 'bar';\n    };\n    c3_chart_internal_fn.isScatterType = function (d) {\n        var id = isString(d) ? d : d.id;\n        return this.config.data_types[id] === 'scatter';\n    };\n    c3_chart_internal_fn.isPieType = function (d) {\n        var id = isString(d) ? d : d.id;\n        return this.config.data_types[id] === 'pie';\n    };\n    c3_chart_internal_fn.isGaugeType = function (d) {\n        var id = isString(d) ? d : d.id;\n        return this.config.data_types[id] === 'gauge';\n    };\n    c3_chart_internal_fn.isDonutType = function (d) {\n        var id = isString(d) ? d : d.id;\n        return this.config.data_types[id] === 'donut';\n    };\n    c3_chart_internal_fn.isArcType = function (d) {\n        return this.isPieType(d) || this.isDonutType(d) || this.isGaugeType(d);\n    };\n    c3_chart_internal_fn.lineData = function (d) {\n        return this.isLineType(d) ? [d] : [];\n    };\n    c3_chart_internal_fn.arcData = function (d) {\n        return this.isArcType(d.data) ? [d] : [];\n    };\n    /* not used\n     function scatterData(d) {\n     return isScatterType(d) ? d.values : [];\n     }\n     */\n    c3_chart_internal_fn.barData = function (d) {\n        return this.isBarType(d) ? d.values : [];\n    };\n    c3_chart_internal_fn.lineOrScatterData = function (d) {\n        return this.isLineType(d) || this.isScatterType(d) ? d.values : [];\n    };\n    c3_chart_internal_fn.barOrLineData = function (d) {\n        return this.isBarType(d) || this.isLineType(d) ? d.values : [];\n    };\n\n    c3_chart_internal_fn.initGrid = function () {\n        var $$ = this, config = $$.config, d3 = $$.d3;\n        $$.grid = $$.main.append('g')\n            .attr(\"clip-path\", $$.clipPathForGrid)\n            .attr('class', CLASS.grid);\n        if (config.grid_x_show) {\n            $$.grid.append(\"g\").attr(\"class\", CLASS.xgrids);\n        }\n        if (config.grid_y_show) {\n            $$.grid.append('g').attr('class', CLASS.ygrids);\n        }\n        if (config.grid_focus_show) {\n            $$.grid.append('g')\n                .attr(\"class\", CLASS.xgridFocus)\n                .append('line')\n                .attr('class', CLASS.xgridFocus);\n        }\n        $$.xgrid = d3.selectAll([]);\n        if (!config.grid_lines_front) { $$.initGridLines(); }\n    };\n    c3_chart_internal_fn.initGridLines = function () {\n        var $$ = this, d3 = $$.d3;\n        $$.gridLines = $$.main.append('g')\n            .attr(\"clip-path\", $$.clipPathForGrid)\n            .attr('class', CLASS.grid + ' ' + CLASS.gridLines);\n        $$.gridLines.append('g').attr(\"class\", CLASS.xgridLines);\n        $$.gridLines.append('g').attr('class', CLASS.ygridLines);\n        $$.xgridLines = d3.selectAll([]);\n    };\n    c3_chart_internal_fn.updateXGrid = function (withoutUpdate) {\n        var $$ = this, config = $$.config, d3 = $$.d3,\n            xgridData = $$.generateGridData(config.grid_x_type, $$.x),\n            tickOffset = $$.isCategorized() ? $$.xAxis.tickOffset() : 0;\n\n        $$.xgridAttr = config.axis_rotated ? {\n            'x1': 0,\n            'x2': $$.width,\n            'y1': function (d) { return $$.x(d) - tickOffset; },\n            'y2': function (d) { return $$.x(d) - tickOffset; }\n        } : {\n            'x1': function (d) { return $$.x(d) + tickOffset; },\n            'x2': function (d) { return $$.x(d) + tickOffset; },\n            'y1': 0,\n            'y2': $$.height\n        };\n\n        $$.xgrid = $$.main.select('.' + CLASS.xgrids).selectAll('.' + CLASS.xgrid)\n            .data(xgridData);\n        $$.xgrid.enter().append('line').attr(\"class\", CLASS.xgrid);\n        if (!withoutUpdate) {\n            $$.xgrid.attr($$.xgridAttr)\n                .style(\"opacity\", function () { return +d3.select(this).attr(config.axis_rotated ? 'y1' : 'x1') === (config.axis_rotated ? $$.height : 0) ? 0 : 1; });\n        }\n        $$.xgrid.exit().remove();\n    };\n\n    c3_chart_internal_fn.updateYGrid = function () {\n        var $$ = this, config = $$.config,\n            gridValues = $$.yAxis.tickValues() || $$.y.ticks(config.grid_y_ticks);\n        $$.ygrid = $$.main.select('.' + CLASS.ygrids).selectAll('.' + CLASS.ygrid)\n            .data(gridValues);\n        $$.ygrid.enter().append('line')\n            .attr('class', CLASS.ygrid);\n        $$.ygrid.attr(\"x1\", config.axis_rotated ? $$.y : 0)\n            .attr(\"x2\", config.axis_rotated ? $$.y : $$.width)\n            .attr(\"y1\", config.axis_rotated ? 0 : $$.y)\n            .attr(\"y2\", config.axis_rotated ? $$.height : $$.y);\n        $$.ygrid.exit().remove();\n        $$.smoothLines($$.ygrid, 'grid');\n    };\n\n    c3_chart_internal_fn.gridTextAnchor = function (d) {\n        return d.position ? d.position : \"end\";\n    };\n    c3_chart_internal_fn.gridTextDx = function (d) {\n        return d.position === 'start' ? 4 : d.position === 'middle' ? 0 : -4;\n    };\n    c3_chart_internal_fn.xGridTextX = function (d) {\n        return d.position === 'start' ? -this.height : d.position === 'middle' ? -this.height / 2 : 0;\n    };\n    c3_chart_internal_fn.yGridTextX = function (d) {\n        return d.position === 'start' ? 0 : d.position === 'middle' ? this.width / 2 : this.width;\n    };\n    c3_chart_internal_fn.updateGrid = function (duration) {\n        var $$ = this, main = $$.main, config = $$.config,\n            xgridLine, ygridLine, yv;\n\n        // hide if arc type\n        $$.grid.style('visibility', $$.hasArcType() ? 'hidden' : 'visible');\n\n        main.select('line.' + CLASS.xgridFocus).style(\"visibility\", \"hidden\");\n        if (config.grid_x_show) {\n            $$.updateXGrid();\n        }\n        $$.xgridLines = main.select('.' + CLASS.xgridLines).selectAll('.' + CLASS.xgridLine)\n            .data(config.grid_x_lines);\n        // enter\n        xgridLine = $$.xgridLines.enter().append('g')\n            .attr(\"class\", function (d) { return CLASS.xgridLine + (d['class'] ? ' ' + d['class'] : ''); });\n        xgridLine.append('line')\n            .style(\"opacity\", 0);\n        xgridLine.append('text')\n            .attr(\"text-anchor\", $$.gridTextAnchor)\n            .attr(\"transform\", config.axis_rotated ? \"\" : \"rotate(-90)\")\n            .attr('dx', $$.gridTextDx)\n            .attr('dy', -5)\n            .style(\"opacity\", 0);\n        // udpate\n        // done in d3.transition() of the end of this function\n        // exit\n        $$.xgridLines.exit().transition().duration(duration)\n            .style(\"opacity\", 0)\n            .remove();\n\n        // Y-Grid\n        if (config.grid_y_show) {\n            $$.updateYGrid();\n        }\n        $$.ygridLines = main.select('.' + CLASS.ygridLines).selectAll('.' + CLASS.ygridLine)\n            .data(config.grid_y_lines);\n        // enter\n        ygridLine = $$.ygridLines.enter().append('g')\n            .attr(\"class\", function (d) { return CLASS.ygridLine + (d['class'] ? ' ' + d['class'] : ''); });\n        ygridLine.append('line')\n            .style(\"opacity\", 0);\n        ygridLine.append('text')\n            .attr(\"text-anchor\", $$.gridTextAnchor)\n            .attr(\"transform\", config.axis_rotated ? \"rotate(-90)\" : \"\")\n            .attr('dx', $$.gridTextDx)\n            .attr('dy', -5)\n            .style(\"opacity\", 0);\n        // update\n        yv = $$.yv.bind($$);\n        $$.ygridLines.select('line')\n          .transition().duration(duration)\n            .attr(\"x1\", config.axis_rotated ? yv : 0)\n            .attr(\"x2\", config.axis_rotated ? yv : $$.width)\n            .attr(\"y1\", config.axis_rotated ? 0 : yv)\n            .attr(\"y2\", config.axis_rotated ? $$.height : yv)\n            .style(\"opacity\", 1);\n        $$.ygridLines.select('text')\n          .transition().duration(duration)\n            .attr(\"x\", config.axis_rotated ? $$.xGridTextX.bind($$) : $$.yGridTextX.bind($$))\n            .attr(\"y\", yv)\n            .text(function (d) { return d.text; })\n            .style(\"opacity\", 1);\n        // exit\n        $$.ygridLines.exit().transition().duration(duration)\n            .style(\"opacity\", 0)\n            .remove();\n    };\n    c3_chart_internal_fn.redrawGrid = function (withTransition) {\n        var $$ = this, config = $$.config, xv = $$.xv.bind($$),\n            lines = $$.xgridLines.select('line'),\n            texts = $$.xgridLines.select('text');\n        return [\n            (withTransition ? lines.transition() : lines)\n                .attr(\"x1\", config.axis_rotated ? 0 : xv)\n                .attr(\"x2\", config.axis_rotated ? $$.width : xv)\n                .attr(\"y1\", config.axis_rotated ? xv : 0)\n                .attr(\"y2\", config.axis_rotated ? xv : $$.height)\n                .style(\"opacity\", 1),\n            (withTransition ? texts.transition() : texts)\n                .attr(\"x\", config.axis_rotated ? $$.yGridTextX.bind($$) : $$.xGridTextX.bind($$))\n                .attr(\"y\", xv)\n                .text(function (d) { return d.text; })\n                .style(\"opacity\", 1)\n        ];\n    };\n    c3_chart_internal_fn.showXGridFocus = function (selectedData) {\n        var $$ = this, config = $$.config,\n            dataToShow = selectedData.filter(function (d) { return d && isValue(d.value); }),\n            focusEl = $$.main.selectAll('line.' + CLASS.xgridFocus),\n            xx = $$.xx.bind($$);\n        if (! config.tooltip_show) { return; }\n        // Hide when scatter plot exists\n        if ($$.hasType('scatter') || $$.hasArcType()) { return; }\n        focusEl\n            .style(\"visibility\", \"visible\")\n            .data([dataToShow[0]])\n            .attr(config.axis_rotated ? 'y1' : 'x1', xx)\n            .attr(config.axis_rotated ? 'y2' : 'x2', xx);\n        $$.smoothLines(focusEl, 'grid');\n    };\n    c3_chart_internal_fn.hideXGridFocus = function () {\n        this.main.select('line.' + CLASS.xgridFocus).style(\"visibility\", \"hidden\");\n    };\n    c3_chart_internal_fn.updateXgridFocus = function () {\n        var $$ = this, config = $$.config;\n        $$.main.select('line.' + CLASS.xgridFocus)\n            .attr(\"x1\", config.axis_rotated ? 0 : -10)\n            .attr(\"x2\", config.axis_rotated ? $$.width : -10)\n            .attr(\"y1\", config.axis_rotated ? -10 : 0)\n            .attr(\"y2\", config.axis_rotated ? -10 : $$.height);\n    };\n    c3_chart_internal_fn.generateGridData = function (type, scale) {\n        var $$ = this,\n            gridData = [], xDomain, firstYear, lastYear, i,\n            tickNum = $$.main.select(\".\" + CLASS.axisX).selectAll('.tick').size();\n        if (type === 'year') {\n            xDomain = $$.getXDomain();\n            firstYear = xDomain[0].getFullYear();\n            lastYear = xDomain[1].getFullYear();\n            for (i = firstYear; i <= lastYear; i++) {\n                gridData.push(new Date(i + '-01-01 00:00:00'));\n            }\n        } else {\n            gridData = scale.ticks(10);\n            if (gridData.length > tickNum) { // use only int\n                gridData = gridData.filter(function (d) { return (\"\" + d).indexOf('.') < 0; });\n            }\n        }\n        return gridData;\n    };\n    c3_chart_internal_fn.getGridFilterToRemove = function (params) {\n        return params ? function (line) {\n            var found = false;\n            [].concat(params).forEach(function (param) {\n                if ((('value' in param && line.value === param.value) || ('class' in param && line['class'] === param['class']))) {\n                    found = true;\n                }\n            });\n            return found;\n        } : function () { return true; };\n    };\n    c3_chart_internal_fn.removeGridLines = function (params, forX) {\n        var $$ = this, config = $$.config,\n            toRemove = $$.getGridFilterToRemove(params),\n            toShow = function (line) { return !toRemove(line); },\n            classLines = forX ? CLASS.xgridLines : CLASS.ygridLines,\n            classLine = forX ? CLASS.xgridLine : CLASS.ygridLine;\n        $$.main.select('.' + classLines).selectAll('.' + classLine).filter(toRemove)\n            .transition().duration(config.transition_duration)\n            .style('opacity', 0).remove();\n        if (forX) {\n            config.grid_x_lines = config.grid_x_lines.filter(toShow);\n        } else {\n            config.grid_y_lines = config.grid_y_lines.filter(toShow);\n        }\n    };\n\n    c3_chart_internal_fn.initTooltip = function () {\n        var $$ = this, config = $$.config, i;\n        $$.tooltip = $$.selectChart\n            .style(\"position\", \"relative\")\n          .append(\"div\")\n            .attr('class', CLASS.tooltipContainer)\n            .style(\"position\", \"absolute\")\n            .style(\"pointer-events\", \"none\")\n            .style(\"display\", \"none\");\n        // Show tooltip if needed\n        if (config.tooltip_init_show) {\n            if ($$.isTimeSeries() && isString(config.tooltip_init_x)) {\n                config.tooltip_init_x = $$.parseDate(config.tooltip_init_x);\n                for (i = 0; i < $$.data.targets[0].values.length; i++) {\n                    if (($$.data.targets[0].values[i].x - config.tooltip_init_x) === 0) { break; }\n                }\n                config.tooltip_init_x = i;\n            }\n            $$.tooltip.html(config.tooltip_contents.call($$, $$.data.targets.map(function (d) {\n                return $$.addName(d.values[config.tooltip_init_x]);\n            }), $$.axis.getXAxisTickFormat(), $$.getYFormat($$.hasArcType()), $$.color));\n            $$.tooltip.style(\"top\", config.tooltip_init_position.top)\n                .style(\"left\", config.tooltip_init_position.left)\n                .style(\"display\", \"block\");\n        }\n    };\n    c3_chart_internal_fn.getTooltipContent = function (d, defaultTitleFormat, defaultValueFormat, color) {\n        var $$ = this, config = $$.config,\n            titleFormat = config.tooltip_format_title || defaultTitleFormat,\n            nameFormat = config.tooltip_format_name || function (name) { return name; },\n            valueFormat = config.tooltip_format_value || defaultValueFormat,\n            text, i, title, value, name, bgcolor;\n        for (i = 0; i < d.length; i++) {\n            if (! (d[i] && (d[i].value || d[i].value === 0))) { continue; }\n\n            if (! text) {\n                title = titleFormat ? titleFormat(d[i].x) : d[i].x;\n                text = \"<table class='\" + CLASS.tooltip + \"'>\" + (title || title === 0 ? \"<tr><th colspan='2'>\" + title + \"</th></tr>\" : \"\");\n            }\n\n            value = valueFormat(d[i].value, d[i].ratio, d[i].id, d[i].index);\n            if (value !== undefined) {\n                name = nameFormat(d[i].name, d[i].ratio, d[i].id, d[i].index);\n                bgcolor = $$.levelColor ? $$.levelColor(d[i].value) : color(d[i].id);\n\n                text += \"<tr class='\" + CLASS.tooltipName + \"-\" + d[i].id + \"'>\";\n                text += \"<td class='name'><span style='background-color:\" + bgcolor + \"'></span>\" + name + \"</td>\";\n                text += \"<td class='value'>\" + value + \"</td>\";\n                text += \"</tr>\";\n            }\n        }\n        return text + \"</table>\";\n    };\n    c3_chart_internal_fn.tooltipPosition = function (dataToShow, tWidth, tHeight, element) {\n        var $$ = this, config = $$.config, d3 = $$.d3;\n        var svgLeft, tooltipLeft, tooltipRight, tooltipTop, chartRight;\n        var forArc = $$.hasArcType(),\n            mouse = d3.mouse(element);\n      // Determin tooltip position\n        if (forArc) {\n            tooltipLeft = (($$.width - ($$.isLegendRight ? $$.getLegendWidth() : 0)) / 2) + mouse[0];\n            tooltipTop = ($$.height / 2) + mouse[1] + 20;\n        } else {\n            svgLeft = $$.getSvgLeft(true);\n            if (config.axis_rotated) {\n                tooltipLeft = svgLeft + mouse[0] + 100;\n                tooltipRight = tooltipLeft + tWidth;\n                chartRight = $$.currentWidth - $$.getCurrentPaddingRight();\n                tooltipTop = $$.x(dataToShow[0].x) + 20;\n            } else {\n                tooltipLeft = svgLeft + $$.getCurrentPaddingLeft(true) + $$.x(dataToShow[0].x) + 20;\n                tooltipRight = tooltipLeft + tWidth;\n                chartRight = svgLeft + $$.currentWidth - $$.getCurrentPaddingRight();\n                tooltipTop = mouse[1] + 15;\n            }\n\n            if (tooltipRight > chartRight) {\n                // 20 is needed for Firefox to keep tooletip width\n                tooltipLeft -= tooltipRight - chartRight + 20;\n            }\n            if (tooltipTop + tHeight > $$.currentHeight) {\n                tooltipTop -= tHeight + 30;\n            }\n        }\n        if (tooltipTop < 0) {\n            tooltipTop = 0;\n        }\n        return {top: tooltipTop, left: tooltipLeft};\n    };\n    c3_chart_internal_fn.showTooltip = function (selectedData, element) {\n        var $$ = this, config = $$.config;\n        var tWidth, tHeight, position;\n        var forArc = $$.hasArcType(),\n            dataToShow = selectedData.filter(function (d) { return d && isValue(d.value); }),\n            positionFunction = config.tooltip_position || c3_chart_internal_fn.tooltipPosition;\n        if (dataToShow.length === 0 || !config.tooltip_show) {\n            return;\n        }\n        $$.tooltip.html(config.tooltip_contents.call($$, selectedData, $$.axis.getXAxisTickFormat(), $$.getYFormat(forArc), $$.color)).style(\"display\", \"block\");\n\n        // Get tooltip dimensions\n        tWidth = $$.tooltip.property('offsetWidth');\n        tHeight = $$.tooltip.property('offsetHeight');\n\n        position = positionFunction.call(this, dataToShow, tWidth, tHeight, element);\n        // Set tooltip\n        $$.tooltip\n            .style(\"top\", position.top + \"px\")\n            .style(\"left\", position.left + 'px');\n    };\n    c3_chart_internal_fn.hideTooltip = function () {\n        this.tooltip.style(\"display\", \"none\");\n    };\n\n    c3_chart_internal_fn.initLegend = function () {\n        var $$ = this;\n        $$.legendItemTextBox = {};\n        $$.legendHasRendered = false;\n        $$.legend = $$.svg.append(\"g\").attr(\"transform\", $$.getTranslate('legend'));\n        if (!$$.config.legend_show) {\n            $$.legend.style('visibility', 'hidden');\n            $$.hiddenLegendIds = $$.mapToIds($$.data.targets);\n            return;\n        }\n        // MEMO: call here to update legend box and tranlate for all\n        // MEMO: translate will be upated by this, so transform not needed in updateLegend()\n        $$.updateLegendWithDefaults();\n    };\n    c3_chart_internal_fn.updateLegendWithDefaults = function () {\n        var $$ = this;\n        $$.updateLegend($$.mapToIds($$.data.targets), {withTransform: false, withTransitionForTransform: false, withTransition: false});\n    };\n    c3_chart_internal_fn.updateSizeForLegend = function (legendHeight, legendWidth) {\n        var $$ = this, config = $$.config, insetLegendPosition = {\n            top: $$.isLegendTop ? $$.getCurrentPaddingTop() + config.legend_inset_y + 5.5 : $$.currentHeight - legendHeight - $$.getCurrentPaddingBottom() - config.legend_inset_y,\n            left: $$.isLegendLeft ? $$.getCurrentPaddingLeft() + config.legend_inset_x + 0.5 : $$.currentWidth - legendWidth - $$.getCurrentPaddingRight() - config.legend_inset_x + 0.5\n        };\n\n        $$.margin3 = {\n            top: $$.isLegendRight ? 0 : $$.isLegendInset ? insetLegendPosition.top : $$.currentHeight - legendHeight,\n            right: NaN,\n            bottom: 0,\n            left: $$.isLegendRight ? $$.currentWidth - legendWidth : $$.isLegendInset ? insetLegendPosition.left : 0\n        };\n    };\n    c3_chart_internal_fn.transformLegend = function (withTransition) {\n        var $$ = this;\n        (withTransition ? $$.legend.transition() : $$.legend).attr(\"transform\", $$.getTranslate('legend'));\n    };\n    c3_chart_internal_fn.updateLegendStep = function (step) {\n        this.legendStep = step;\n    };\n    c3_chart_internal_fn.updateLegendItemWidth = function (w) {\n        this.legendItemWidth = w;\n    };\n    c3_chart_internal_fn.updateLegendItemHeight = function (h) {\n        this.legendItemHeight = h;\n    };\n    c3_chart_internal_fn.getLegendWidth = function () {\n        var $$ = this;\n        return $$.config.legend_show ? $$.isLegendRight || $$.isLegendInset ? $$.legendItemWidth * ($$.legendStep + 1) : $$.currentWidth : 0;\n    };\n    c3_chart_internal_fn.getLegendHeight = function () {\n        var $$ = this, h = 0;\n        if ($$.config.legend_show) {\n            if ($$.isLegendRight) {\n                h = $$.currentHeight;\n            } else {\n                h = Math.max(20, $$.legendItemHeight) * ($$.legendStep + 1);\n            }\n        }\n        return h;\n    };\n    c3_chart_internal_fn.opacityForLegend = function (legendItem) {\n        return legendItem.classed(CLASS.legendItemHidden) ? null : 1;\n    };\n    c3_chart_internal_fn.opacityForUnfocusedLegend = function (legendItem) {\n        return legendItem.classed(CLASS.legendItemHidden) ? null : 0.3;\n    };\n    c3_chart_internal_fn.toggleFocusLegend = function (targetIds, focus) {\n        var $$ = this;\n        targetIds = $$.mapToTargetIds(targetIds);\n        $$.legend.selectAll('.' + CLASS.legendItem)\n            .filter(function (id) { return targetIds.indexOf(id) >= 0; })\n            .classed(CLASS.legendItemFocused, focus)\n          .transition().duration(100)\n            .style('opacity', function () {\n                var opacity = focus ? $$.opacityForLegend : $$.opacityForUnfocusedLegend;\n                return opacity.call($$, $$.d3.select(this));\n            });\n    };\n    c3_chart_internal_fn.revertLegend = function () {\n        var $$ = this, d3 = $$.d3;\n        $$.legend.selectAll('.' + CLASS.legendItem)\n            .classed(CLASS.legendItemFocused, false)\n            .transition().duration(100)\n            .style('opacity', function () { return $$.opacityForLegend(d3.select(this)); });\n    };\n    c3_chart_internal_fn.showLegend = function (targetIds) {\n        var $$ = this, config = $$.config;\n        if (!config.legend_show) {\n            config.legend_show = true;\n            $$.legend.style('visibility', 'visible');\n            if (!$$.legendHasRendered) {\n                $$.updateLegendWithDefaults();\n            }\n        }\n        $$.removeHiddenLegendIds(targetIds);\n        $$.legend.selectAll($$.selectorLegends(targetIds))\n            .style('visibility', 'visible')\n            .transition()\n            .style('opacity', function () { return $$.opacityForLegend($$.d3.select(this)); });\n    };\n    c3_chart_internal_fn.hideLegend = function (targetIds) {\n        var $$ = this, config = $$.config;\n        if (config.legend_show && isEmpty(targetIds)) {\n            config.legend_show = false;\n            $$.legend.style('visibility', 'hidden');\n        }\n        $$.addHiddenLegendIds(targetIds);\n        $$.legend.selectAll($$.selectorLegends(targetIds))\n            .style('opacity', 0)\n            .style('visibility', 'hidden');\n    };\n    c3_chart_internal_fn.clearLegendItemTextBoxCache = function () {\n        this.legendItemTextBox = {};\n    };\n    c3_chart_internal_fn.updateLegend = function (targetIds, options, transitions) {\n        var $$ = this, config = $$.config;\n        var xForLegend, xForLegendText, xForLegendRect, yForLegend, yForLegendText, yForLegendRect;\n        var paddingTop = 4, paddingRight = 10, maxWidth = 0, maxHeight = 0, posMin = 10, tileWidth = 15;\n        var l, totalLength = 0, offsets = {}, widths = {}, heights = {}, margins = [0], steps = {}, step = 0;\n        var withTransition, withTransitionForTransform;\n        var texts, rects, tiles, background;\n\n        options = options || {};\n        withTransition = getOption(options, \"withTransition\", true);\n        withTransitionForTransform = getOption(options, \"withTransitionForTransform\", true);\n\n        function getTextBox(textElement, id) {\n            if (!$$.legendItemTextBox[id]) {\n                $$.legendItemTextBox[id] = $$.getTextRect(textElement.textContent, CLASS.legendItem);\n            }\n            return $$.legendItemTextBox[id];\n        }\n\n        function updatePositions(textElement, id, index) {\n            var reset = index === 0, isLast = index === targetIds.length - 1,\n                box = getTextBox(textElement, id),\n                itemWidth = box.width + tileWidth + (isLast && !($$.isLegendRight || $$.isLegendInset) ? 0 : paddingRight),\n                itemHeight = box.height + paddingTop,\n                itemLength = $$.isLegendRight || $$.isLegendInset ? itemHeight : itemWidth,\n                areaLength = $$.isLegendRight || $$.isLegendInset ? $$.getLegendHeight() : $$.getLegendWidth(),\n                margin, maxLength;\n\n            // MEMO: care about condifion of step, totalLength\n            function updateValues(id, withoutStep) {\n                if (!withoutStep) {\n                    margin = (areaLength - totalLength - itemLength) / 2;\n                    if (margin < posMin) {\n                        margin = (areaLength - itemLength) / 2;\n                        totalLength = 0;\n                        step++;\n                    }\n                }\n                steps[id] = step;\n                margins[step] = $$.isLegendInset ? 10 : margin;\n                offsets[id] = totalLength;\n                totalLength += itemLength;\n            }\n\n            if (reset) {\n                totalLength = 0;\n                step = 0;\n                maxWidth = 0;\n                maxHeight = 0;\n            }\n\n            if (config.legend_show && !$$.isLegendToShow(id)) {\n                widths[id] = heights[id] = steps[id] = offsets[id] = 0;\n                return;\n            }\n\n            widths[id] = itemWidth;\n            heights[id] = itemHeight;\n\n            if (!maxWidth || itemWidth >= maxWidth) { maxWidth = itemWidth; }\n            if (!maxHeight || itemHeight >= maxHeight) { maxHeight = itemHeight; }\n            maxLength = $$.isLegendRight || $$.isLegendInset ? maxHeight : maxWidth;\n\n            if (config.legend_equally) {\n                Object.keys(widths).forEach(function (id) { widths[id] = maxWidth; });\n                Object.keys(heights).forEach(function (id) { heights[id] = maxHeight; });\n                margin = (areaLength - maxLength * targetIds.length) / 2;\n                if (margin < posMin) {\n                    totalLength = 0;\n                    step = 0;\n                    targetIds.forEach(function (id) { updateValues(id); });\n                }\n                else {\n                    updateValues(id, true);\n                }\n            } else {\n                updateValues(id);\n            }\n        }\n\n        if ($$.isLegendInset) {\n            step = config.legend_inset_step ? config.legend_inset_step : targetIds.length;\n            $$.updateLegendStep(step);\n        }\n\n        if ($$.isLegendRight) {\n            xForLegend = function (id) { return maxWidth * steps[id]; };\n            yForLegend = function (id) { return margins[steps[id]] + offsets[id]; };\n        } else if ($$.isLegendInset) {\n            xForLegend = function (id) { return maxWidth * steps[id] + 10; };\n            yForLegend = function (id) { return margins[steps[id]] + offsets[id]; };\n        } else {\n            xForLegend = function (id) { return margins[steps[id]] + offsets[id]; };\n            yForLegend = function (id) { return maxHeight * steps[id]; };\n        }\n        xForLegendText = function (id, i) { return xForLegend(id, i) + 14; };\n        yForLegendText = function (id, i) { return yForLegend(id, i) + 9; };\n        xForLegendRect = function (id, i) { return xForLegend(id, i); };\n        yForLegendRect = function (id, i) { return yForLegend(id, i) - 5; };\n\n        // Define g for legend area\n        l = $$.legend.selectAll('.' + CLASS.legendItem)\n            .data(targetIds)\n            .enter().append('g')\n            .attr('class', function (id) { return $$.generateClass(CLASS.legendItem, id); })\n            .style('visibility', function (id) { return $$.isLegendToShow(id) ? 'visible' : 'hidden'; })\n            .style('cursor', 'pointer')\n            .on('click', function (id) {\n                if (config.legend_item_onclick) {\n                    config.legend_item_onclick.call($$, id);\n                } else {\n                    if ($$.d3.event.altKey) {\n                        $$.api.hide();\n                        $$.api.show(id);\n                    } else {\n                        $$.api.toggle(id);\n                        $$.isTargetToShow(id) ? $$.api.focus(id) : $$.api.revert();\n                    }\n                }\n            })\n            .on('mouseover', function (id) {\n                $$.d3.select(this).classed(CLASS.legendItemFocused, true);\n                if (!$$.transiting && $$.isTargetToShow(id)) {\n                    $$.api.focus(id);\n                }\n                if (config.legend_item_onmouseover) {\n                    config.legend_item_onmouseover.call($$, id);\n                }\n            })\n            .on('mouseout', function (id) {\n                $$.d3.select(this).classed(CLASS.legendItemFocused, false);\n                $$.api.revert();\n                if (config.legend_item_onmouseout) {\n                    config.legend_item_onmouseout.call($$, id);\n                }\n            });\n        l.append('text')\n            .text(function (id) { return isDefined(config.data_names[id]) ? config.data_names[id] : id; })\n            .each(function (id, i) { updatePositions(this, id, i); })\n            .style(\"pointer-events\", \"none\")\n            .attr('x', $$.isLegendRight || $$.isLegendInset ? xForLegendText : -200)\n            .attr('y', $$.isLegendRight || $$.isLegendInset ? -200 : yForLegendText);\n        l.append('rect')\n            .attr(\"class\", CLASS.legendItemEvent)\n            .style('fill-opacity', 0)\n            .attr('x', $$.isLegendRight || $$.isLegendInset ? xForLegendRect : -200)\n            .attr('y', $$.isLegendRight || $$.isLegendInset ? -200 : yForLegendRect);\n        l.append('rect')\n            .attr(\"class\", CLASS.legendItemTile)\n            .style(\"pointer-events\", \"none\")\n            .style('fill', $$.color)\n            .attr('x', $$.isLegendRight || $$.isLegendInset ? xForLegendText : -200)\n            .attr('y', $$.isLegendRight || $$.isLegendInset ? -200 : yForLegend)\n            .attr('width', 10)\n            .attr('height', 10);\n\n        // Set background for inset legend\n        background = $$.legend.select('.' + CLASS.legendBackground + ' rect');\n        if ($$.isLegendInset && maxWidth > 0 && background.size() === 0) {\n            background = $$.legend.insert('g', '.' + CLASS.legendItem)\n                .attr(\"class\", CLASS.legendBackground)\n                .append('rect');\n        }\n\n        texts = $$.legend.selectAll('text')\n            .data(targetIds)\n            .text(function (id) { return isDefined(config.data_names[id]) ? config.data_names[id] : id; }) // MEMO: needed for update\n            .each(function (id, i) { updatePositions(this, id, i); });\n        (withTransition ? texts.transition() : texts)\n            .attr('x', xForLegendText)\n            .attr('y', yForLegendText);\n\n        rects = $$.legend.selectAll('rect.' + CLASS.legendItemEvent)\n            .data(targetIds);\n        (withTransition ? rects.transition() : rects)\n            .attr('width', function (id) { return widths[id]; })\n            .attr('height', function (id) { return heights[id]; })\n            .attr('x', xForLegendRect)\n            .attr('y', yForLegendRect);\n\n        tiles = $$.legend.selectAll('rect.' + CLASS.legendItemTile)\n            .data(targetIds);\n        (withTransition ? tiles.transition() : tiles)\n            .style('fill', $$.color)\n            .attr('x', xForLegend)\n            .attr('y', yForLegend);\n\n        if (background) {\n            (withTransition ? background.transition() : background)\n                .attr('height', $$.getLegendHeight() - 12)\n                .attr('width', maxWidth * (step + 1) + 10);\n        }\n\n        // toggle legend state\n        $$.legend.selectAll('.' + CLASS.legendItem)\n            .classed(CLASS.legendItemHidden, function (id) { return !$$.isTargetToShow(id); });\n\n        // Update all to reflect change of legend\n        $$.updateLegendItemWidth(maxWidth);\n        $$.updateLegendItemHeight(maxHeight);\n        $$.updateLegendStep(step);\n        // Update size and scale\n        $$.updateSizes();\n        $$.updateScales();\n        $$.updateSvgSize();\n        // Update g positions\n        $$.transformAll(withTransitionForTransform, transitions);\n        $$.legendHasRendered = true;\n    };\n\n    function Axis(owner) {\n        API.call(this, owner);\n    }\n\n    inherit(API, Axis);\n\n    Axis.prototype.init = function init() {\n\n        var $$ = this.owner, config = $$.config, main = $$.main;\n        $$.axes.x = main.append(\"g\")\n            .attr(\"class\", CLASS.axis + ' ' + CLASS.axisX)\n            .attr(\"clip-path\", $$.clipPathForXAxis)\n            .attr(\"transform\", $$.getTranslate('x'))\n            .style(\"visibility\", config.axis_x_show ? 'visible' : 'hidden');\n        $$.axes.x.append(\"text\")\n            .attr(\"class\", CLASS.axisXLabel)\n            .attr(\"transform\", config.axis_rotated ? \"rotate(-90)\" : \"\")\n            .style(\"text-anchor\", this.textAnchorForXAxisLabel.bind(this));\n        $$.axes.y = main.append(\"g\")\n            .attr(\"class\", CLASS.axis + ' ' + CLASS.axisY)\n            .attr(\"clip-path\", config.axis_y_inner ? \"\" : $$.clipPathForYAxis)\n            .attr(\"transform\", $$.getTranslate('y'))\n            .style(\"visibility\", config.axis_y_show ? 'visible' : 'hidden');\n        $$.axes.y.append(\"text\")\n            .attr(\"class\", CLASS.axisYLabel)\n            .attr(\"transform\", config.axis_rotated ? \"\" : \"rotate(-90)\")\n            .style(\"text-anchor\", this.textAnchorForYAxisLabel.bind(this));\n\n        $$.axes.y2 = main.append(\"g\")\n            .attr(\"class\", CLASS.axis + ' ' + CLASS.axisY2)\n            // clip-path?\n            .attr(\"transform\", $$.getTranslate('y2'))\n            .style(\"visibility\", config.axis_y2_show ? 'visible' : 'hidden');\n        $$.axes.y2.append(\"text\")\n            .attr(\"class\", CLASS.axisY2Label)\n            .attr(\"transform\", config.axis_rotated ? \"\" : \"rotate(-90)\")\n            .style(\"text-anchor\", this.textAnchorForY2AxisLabel.bind(this));\n    };\n    Axis.prototype.getXAxis = function getXAxis(scale, orient, tickFormat, tickValues, withOuterTick, withoutTransition, withoutRotateTickText) {\n        var $$ = this.owner, config = $$.config,\n            axisParams = {\n                isCategory: $$.isCategorized(),\n                withOuterTick: withOuterTick,\n                tickMultiline: config.axis_x_tick_multiline,\n                tickWidth: config.axis_x_tick_width,\n                tickTextRotate: withoutRotateTickText ? 0 : config.axis_x_tick_rotate,\n                withoutTransition: withoutTransition,\n            },\n            axis = c3_axis($$.d3, axisParams).scale(scale).orient(orient);\n\n        if ($$.isTimeSeries() && tickValues) {\n            tickValues = tickValues.map(function (v) { return $$.parseDate(v); });\n        }\n\n        // Set tick\n        axis.tickFormat(tickFormat).tickValues(tickValues);\n        if ($$.isCategorized()) {\n            axis.tickCentered(config.axis_x_tick_centered);\n            if (isEmpty(config.axis_x_tick_culling)) {\n                config.axis_x_tick_culling = false;\n            }\n        }\n\n        return axis;\n    };\n    Axis.prototype.updateXAxisTickValues = function updateXAxisTickValues(targets, axis) {\n        var $$ = this.owner, config = $$.config, tickValues;\n        if (config.axis_x_tick_fit || config.axis_x_tick_count) {\n            tickValues = this.generateTickValues($$.mapTargetsToUniqueXs(targets), config.axis_x_tick_count, $$.isTimeSeries());\n        }\n        if (axis) {\n            axis.tickValues(tickValues);\n        } else {\n            $$.xAxis.tickValues(tickValues);\n            $$.subXAxis.tickValues(tickValues);\n        }\n        return tickValues;\n    };\n    Axis.prototype.getYAxis = function getYAxis(scale, orient, tickFormat, tickValues, withOuterTick, withoutTransition) {\n        var axisParams = {\n            withOuterTick: withOuterTick,\n            withoutTransition: withoutTransition,\n        },\n            $$ = this.owner,\n            d3 = $$.d3,\n            config = $$.config,\n            axis = c3_axis(d3, axisParams).scale(scale).orient(orient).tickFormat(tickFormat);\n        if ($$.isTimeSeriesY()) {\n            axis.ticks(d3.time[config.axis_y_tick_time_value], config.axis_y_tick_time_interval);\n        } else {\n            axis.tickValues(tickValues);\n        }\n        return axis;\n    };\n    Axis.prototype.getId = function getId(id) {\n        var config = this.owner.config;\n        return id in config.data_axes ? config.data_axes[id] : 'y';\n    };\n    Axis.prototype.getXAxisTickFormat = function getXAxisTickFormat() {\n        var $$ = this.owner, config = $$.config,\n            format = $$.isTimeSeries() ? $$.defaultAxisTimeFormat : $$.isCategorized() ? $$.categoryName : function (v) { return v < 0 ? v.toFixed(0) : v; };\n        if (config.axis_x_tick_format) {\n            if (isFunction(config.axis_x_tick_format)) {\n                format = config.axis_x_tick_format;\n            } else if ($$.isTimeSeries()) {\n                format = function (date) {\n                    return date ? $$.axisTimeFormat(config.axis_x_tick_format)(date) : \"\";\n                };\n            }\n        }\n        return isFunction(format) ? function (v) { return format.call($$, v); } : format;\n    };\n    Axis.prototype.getTickValues = function getTickValues(tickValues, axis) {\n        return tickValues ? tickValues : axis ? axis.tickValues() : undefined;\n    };\n    Axis.prototype.getXAxisTickValues = function getXAxisTickValues() {\n        return this.getTickValues(this.owner.config.axis_x_tick_values, this.owner.xAxis);\n    };\n    Axis.prototype.getYAxisTickValues = function getYAxisTickValues() {\n        return this.getTickValues(this.owner.config.axis_y_tick_values, this.owner.yAxis);\n    };\n    Axis.prototype.getY2AxisTickValues = function getY2AxisTickValues() {\n        return this.getTickValues(this.owner.config.axis_y2_tick_values, this.owner.y2Axis);\n    };\n    Axis.prototype.getLabelOptionByAxisId = function getLabelOptionByAxisId(axisId) {\n        var $$ = this.owner, config = $$.config, option;\n        if (axisId === 'y') {\n            option = config.axis_y_label;\n        } else if (axisId === 'y2') {\n            option = config.axis_y2_label;\n        } else if (axisId === 'x') {\n            option = config.axis_x_label;\n        }\n        return option;\n    };\n    Axis.prototype.getLabelText = function getLabelText(axisId) {\n        var option = this.getLabelOptionByAxisId(axisId);\n        return isString(option) ? option : option ? option.text : null;\n    };\n    Axis.prototype.setLabelText = function setLabelText(axisId, text) {\n        var $$ = this.owner, config = $$.config,\n            option = this.getLabelOptionByAxisId(axisId);\n        if (isString(option)) {\n            if (axisId === 'y') {\n                config.axis_y_label = text;\n            } else if (axisId === 'y2') {\n                config.axis_y2_label = text;\n            } else if (axisId === 'x') {\n                config.axis_x_label = text;\n            }\n        } else if (option) {\n            option.text = text;\n        }\n    };\n    Axis.prototype.getLabelPosition = function getLabelPosition(axisId, defaultPosition) {\n        var option = this.getLabelOptionByAxisId(axisId),\n            position = (option && typeof option === 'object' && option.position) ? option.position : defaultPosition;\n        return {\n            isInner: position.indexOf('inner') >= 0,\n            isOuter: position.indexOf('outer') >= 0,\n            isLeft: position.indexOf('left') >= 0,\n            isCenter: position.indexOf('center') >= 0,\n            isRight: position.indexOf('right') >= 0,\n            isTop: position.indexOf('top') >= 0,\n            isMiddle: position.indexOf('middle') >= 0,\n            isBottom: position.indexOf('bottom') >= 0\n        };\n    };\n    Axis.prototype.getXAxisLabelPosition = function getXAxisLabelPosition() {\n        return this.getLabelPosition('x', this.owner.config.axis_rotated ? 'inner-top' : 'inner-right');\n    };\n    Axis.prototype.getYAxisLabelPosition = function getYAxisLabelPosition() {\n        return this.getLabelPosition('y', this.owner.config.axis_rotated ? 'inner-right' : 'inner-top');\n    };\n    Axis.prototype.getY2AxisLabelPosition = function getY2AxisLabelPosition() {\n        return this.getLabelPosition('y2', this.owner.config.axis_rotated ? 'inner-right' : 'inner-top');\n    };\n    Axis.prototype.getLabelPositionById = function getLabelPositionById(id) {\n        return id === 'y2' ? this.getY2AxisLabelPosition() : id === 'y' ? this.getYAxisLabelPosition() : this.getXAxisLabelPosition();\n    };\n    Axis.prototype.textForXAxisLabel = function textForXAxisLabel() {\n        return this.getLabelText('x');\n    };\n    Axis.prototype.textForYAxisLabel = function textForYAxisLabel() {\n        return this.getLabelText('y');\n    };\n    Axis.prototype.textForY2AxisLabel = function textForY2AxisLabel() {\n        return this.getLabelText('y2');\n    };\n    Axis.prototype.xForAxisLabel = function xForAxisLabel(forHorizontal, position) {\n        var $$ = this.owner;\n        if (forHorizontal) {\n            return position.isLeft ? 0 : position.isCenter ? $$.width / 2 : $$.width;\n        } else {\n            return position.isBottom ? -$$.height : position.isMiddle ? -$$.height / 2 : 0;\n        }\n    };\n    Axis.prototype.dxForAxisLabel = function dxForAxisLabel(forHorizontal, position) {\n        if (forHorizontal) {\n            return position.isLeft ? \"0.5em\" : position.isRight ? \"-0.5em\" : \"0\";\n        } else {\n            return position.isTop ? \"-0.5em\" : position.isBottom ? \"0.5em\" : \"0\";\n        }\n    };\n    Axis.prototype.textAnchorForAxisLabel = function textAnchorForAxisLabel(forHorizontal, position) {\n        if (forHorizontal) {\n            return position.isLeft ? 'start' : position.isCenter ? 'middle' : 'end';\n        } else {\n            return position.isBottom ? 'start' : position.isMiddle ? 'middle' : 'end';\n        }\n    };\n    Axis.prototype.xForXAxisLabel = function xForXAxisLabel() {\n        return this.xForAxisLabel(!this.owner.config.axis_rotated, this.getXAxisLabelPosition());\n    };\n    Axis.prototype.xForYAxisLabel = function xForYAxisLabel() {\n        return this.xForAxisLabel(this.owner.config.axis_rotated, this.getYAxisLabelPosition());\n    };\n    Axis.prototype.xForY2AxisLabel = function xForY2AxisLabel() {\n        return this.xForAxisLabel(this.owner.config.axis_rotated, this.getY2AxisLabelPosition());\n    };\n    Axis.prototype.dxForXAxisLabel = function dxForXAxisLabel() {\n        return this.dxForAxisLabel(!this.owner.config.axis_rotated, this.getXAxisLabelPosition());\n    };\n    Axis.prototype.dxForYAxisLabel = function dxForYAxisLabel() {\n        return this.dxForAxisLabel(this.owner.config.axis_rotated, this.getYAxisLabelPosition());\n    };\n    Axis.prototype.dxForY2AxisLabel = function dxForY2AxisLabel() {\n        return this.dxForAxisLabel(this.owner.config.axis_rotated, this.getY2AxisLabelPosition());\n    };\n    Axis.prototype.dyForXAxisLabel = function dyForXAxisLabel() {\n        var $$ = this.owner, config = $$.config,\n            position = this.getXAxisLabelPosition();\n        if (config.axis_rotated) {\n            return position.isInner ? \"1.2em\" : -25 - this.getMaxTickWidth('x');\n        } else {\n            return position.isInner ? \"-0.5em\" : config.axis_x_height ? config.axis_x_height - 10 : \"3em\";\n        }\n    };\n    Axis.prototype.dyForYAxisLabel = function dyForYAxisLabel() {\n        var $$ = this.owner,\n            position = this.getYAxisLabelPosition();\n        if ($$.config.axis_rotated) {\n            return position.isInner ? \"-0.5em\" : \"3em\";\n        } else {\n            return position.isInner ? \"1.2em\" : -10 - ($$.config.axis_y_inner ? 0 : (this.getMaxTickWidth('y') + 10));\n        }\n    };\n    Axis.prototype.dyForY2AxisLabel = function dyForY2AxisLabel() {\n        var $$ = this.owner,\n            position = this.getY2AxisLabelPosition();\n        if ($$.config.axis_rotated) {\n            return position.isInner ? \"1.2em\" : \"-2.2em\";\n        } else {\n            return position.isInner ? \"-0.5em\" : 15 + ($$.config.axis_y2_inner ? 0 : (this.getMaxTickWidth('y2') + 15));\n        }\n    };\n    Axis.prototype.textAnchorForXAxisLabel = function textAnchorForXAxisLabel() {\n        var $$ = this.owner;\n        return this.textAnchorForAxisLabel(!$$.config.axis_rotated, this.getXAxisLabelPosition());\n    };\n    Axis.prototype.textAnchorForYAxisLabel = function textAnchorForYAxisLabel() {\n        var $$ = this.owner;\n        return this.textAnchorForAxisLabel($$.config.axis_rotated, this.getYAxisLabelPosition());\n    };\n    Axis.prototype.textAnchorForY2AxisLabel = function textAnchorForY2AxisLabel() {\n        var $$ = this.owner;\n        return this.textAnchorForAxisLabel($$.config.axis_rotated, this.getY2AxisLabelPosition());\n    };\n    Axis.prototype.getMaxTickWidth = function getMaxTickWidth(id, withoutRecompute) {\n        var $$ = this.owner, config = $$.config,\n            maxWidth = 0, targetsToShow, scale, axis, dummy, svg;\n        if (withoutRecompute && $$.currentMaxTickWidths[id]) {\n            return $$.currentMaxTickWidths[id];\n        }\n        if ($$.svg) {\n            targetsToShow = $$.filterTargetsToShow($$.data.targets);\n            if (id === 'y') {\n                scale = $$.y.copy().domain($$.getYDomain(targetsToShow, 'y'));\n                axis = this.getYAxis(scale, $$.yOrient, config.axis_y_tick_format, $$.yAxisTickValues, false, true);\n            } else if (id === 'y2') {\n                scale = $$.y2.copy().domain($$.getYDomain(targetsToShow, 'y2'));\n                axis = this.getYAxis(scale, $$.y2Orient, config.axis_y2_tick_format, $$.y2AxisTickValues, false, true);\n            } else {\n                scale = $$.x.copy().domain($$.getXDomain(targetsToShow));\n                axis = this.getXAxis(scale, $$.xOrient, $$.xAxisTickFormat, $$.xAxisTickValues, false, true, true);\n                this.updateXAxisTickValues(targetsToShow, axis);\n            }\n            dummy = $$.d3.select('body').append('div').classed('c3', true);\n            svg = dummy.append(\"svg\").style('visibility', 'hidden').style('position', 'fixed').style('top', 0).style('left', 0),\n            svg.append('g').call(axis).each(function () {\n                $$.d3.select(this).selectAll('text').each(function () {\n                    var box = this.getBoundingClientRect();\n                    if (maxWidth < box.width) { maxWidth = box.width; }\n                });\n                dummy.remove();\n            });\n        }\n        $$.currentMaxTickWidths[id] = maxWidth <= 0 ? $$.currentMaxTickWidths[id] : maxWidth;\n        return $$.currentMaxTickWidths[id];\n    };\n\n    Axis.prototype.updateLabels = function updateLabels(withTransition) {\n        var $$ = this.owner;\n        var axisXLabel = $$.main.select('.' + CLASS.axisX + ' .' + CLASS.axisXLabel),\n            axisYLabel = $$.main.select('.' + CLASS.axisY + ' .' + CLASS.axisYLabel),\n            axisY2Label = $$.main.select('.' + CLASS.axisY2 + ' .' + CLASS.axisY2Label);\n        (withTransition ? axisXLabel.transition() : axisXLabel)\n            .attr(\"x\", this.xForXAxisLabel.bind(this))\n            .attr(\"dx\", this.dxForXAxisLabel.bind(this))\n            .attr(\"dy\", this.dyForXAxisLabel.bind(this))\n            .text(this.textForXAxisLabel.bind(this));\n        (withTransition ? axisYLabel.transition() : axisYLabel)\n            .attr(\"x\", this.xForYAxisLabel.bind(this))\n            .attr(\"dx\", this.dxForYAxisLabel.bind(this))\n            .attr(\"dy\", this.dyForYAxisLabel.bind(this))\n            .text(this.textForYAxisLabel.bind(this));\n        (withTransition ? axisY2Label.transition() : axisY2Label)\n            .attr(\"x\", this.xForY2AxisLabel.bind(this))\n            .attr(\"dx\", this.dxForY2AxisLabel.bind(this))\n            .attr(\"dy\", this.dyForY2AxisLabel.bind(this))\n            .text(this.textForY2AxisLabel.bind(this));\n    };\n    Axis.prototype.getPadding = function getPadding(padding, key, defaultValue, domainLength) {\n        if (!isValue(padding[key])) {\n            return defaultValue;\n        }\n        if (padding.unit === 'ratio') {\n            return padding[key] * domainLength;\n        }\n        // assume padding is pixels if unit is not specified\n        return this.convertPixelsToAxisPadding(padding[key], domainLength);\n    };\n    Axis.prototype.convertPixelsToAxisPadding = function convertPixelsToAxisPadding(pixels, domainLength) {\n        var $$ = this.owner,\n            length = $$.config.axis_rotated ? $$.width : $$.height;\n        return domainLength * (pixels / length);\n    };\n    Axis.prototype.generateTickValues = function generateTickValues(values, tickCount, forTimeSeries) {\n        var tickValues = values, targetCount, start, end, count, interval, i, tickValue;\n        if (tickCount) {\n            targetCount = isFunction(tickCount) ? tickCount() : tickCount;\n            // compute ticks according to tickCount\n            if (targetCount === 1) {\n                tickValues = [values[0]];\n            } else if (targetCount === 2) {\n                tickValues = [values[0], values[values.length - 1]];\n            } else if (targetCount > 2) {\n                count = targetCount - 2;\n                start = values[0];\n                end = values[values.length - 1];\n                interval = (end - start) / (count + 1);\n                // re-construct unique values\n                tickValues = [start];\n                for (i = 0; i < count; i++) {\n                    tickValue = +start + interval * (i + 1);\n                    tickValues.push(forTimeSeries ? new Date(tickValue) : tickValue);\n                }\n                tickValues.push(end);\n            }\n        }\n        if (!forTimeSeries) { tickValues = tickValues.sort(function (a, b) { return a - b; }); }\n        return tickValues;\n    };\n    Axis.prototype.generateTransitions = function generateTransitions(duration) {\n        var $$ = this.owner, axes = $$.axes;\n        return {\n            axisX: duration ? axes.x.transition().duration(duration) : axes.x,\n            axisY: duration ? axes.y.transition().duration(duration) : axes.y,\n            axisY2: duration ? axes.y2.transition().duration(duration) : axes.y2,\n            axisSubX: duration ? axes.subx.transition().duration(duration) : axes.subx\n        };\n    };\n    Axis.prototype.redraw = function redraw(transitions, isHidden) {\n        var $$ = this.owner;\n        $$.axes.x.style(\"opacity\", isHidden ? 0 : 1);\n        $$.axes.y.style(\"opacity\", isHidden ? 0 : 1);\n        $$.axes.y2.style(\"opacity\", isHidden ? 0 : 1);\n        $$.axes.subx.style(\"opacity\", isHidden ? 0 : 1);\n        transitions.axisX.call($$.xAxis);\n        transitions.axisY.call($$.yAxis);\n        transitions.axisY2.call($$.y2Axis);\n        transitions.axisSubX.call($$.subXAxis);\n    };\n\n    c3_chart_internal_fn.getClipPath = function (id) {\n        var isIE9 = window.navigator.appVersion.toLowerCase().indexOf(\"msie 9.\") >= 0;\n        return \"url(\" + (isIE9 ? \"\" : document.URL.split('#')[0]) + \"#\" + id + \")\";\n    };\n    c3_chart_internal_fn.appendClip = function (parent, id) {\n        return parent.append(\"clipPath\").attr(\"id\", id).append(\"rect\");\n    };\n    c3_chart_internal_fn.getAxisClipX = function (forHorizontal) {\n        // axis line width + padding for left\n        var left = Math.max(30, this.margin.left);\n        return forHorizontal ? -(1 + left) : -(left - 1);\n    };\n    c3_chart_internal_fn.getAxisClipY = function (forHorizontal) {\n        return forHorizontal ? -20 : -this.margin.top;\n    };\n    c3_chart_internal_fn.getXAxisClipX = function () {\n        var $$ = this;\n        return $$.getAxisClipX(!$$.config.axis_rotated);\n    };\n    c3_chart_internal_fn.getXAxisClipY = function () {\n        var $$ = this;\n        return $$.getAxisClipY(!$$.config.axis_rotated);\n    };\n    c3_chart_internal_fn.getYAxisClipX = function () {\n        var $$ = this;\n        return $$.config.axis_y_inner ? -1 : $$.getAxisClipX($$.config.axis_rotated);\n    };\n    c3_chart_internal_fn.getYAxisClipY = function () {\n        var $$ = this;\n        return $$.getAxisClipY($$.config.axis_rotated);\n    };\n    c3_chart_internal_fn.getAxisClipWidth = function (forHorizontal) {\n        var $$ = this,\n            left = Math.max(30, $$.margin.left),\n            right = Math.max(30, $$.margin.right);\n        // width + axis line width + padding for left/right\n        return forHorizontal ? $$.width + 2 + left + right : $$.margin.left + 20;\n    };\n    c3_chart_internal_fn.getAxisClipHeight = function (forHorizontal) {\n        // less than 20 is not enough to show the axis label 'outer' without legend\n        return (forHorizontal ? this.margin.bottom : (this.margin.top + this.height)) + 20;\n    };\n    c3_chart_internal_fn.getXAxisClipWidth = function () {\n        var $$ = this;\n        return $$.getAxisClipWidth(!$$.config.axis_rotated);\n    };\n    c3_chart_internal_fn.getXAxisClipHeight = function () {\n        var $$ = this;\n        return $$.getAxisClipHeight(!$$.config.axis_rotated);\n    };\n    c3_chart_internal_fn.getYAxisClipWidth = function () {\n        var $$ = this;\n        return $$.getAxisClipWidth($$.config.axis_rotated) + ($$.config.axis_y_inner ? 20 : 0);\n    };\n    c3_chart_internal_fn.getYAxisClipHeight = function () {\n        var $$ = this;\n        return $$.getAxisClipHeight($$.config.axis_rotated);\n    };\n\n    c3_chart_internal_fn.initPie = function () {\n        var $$ = this, d3 = $$.d3, config = $$.config;\n        $$.pie = d3.layout.pie().value(function (d) {\n            return d.values.reduce(function (a, b) { return a + b.value; }, 0);\n        });\n        if (!config.data_order) {\n            $$.pie.sort(null);\n        }\n    };\n\n    c3_chart_internal_fn.updateRadius = function () {\n        var $$ = this, config = $$.config,\n            w = config.gauge_width || config.donut_width;\n        $$.radiusExpanded = Math.min($$.arcWidth, $$.arcHeight) / 2;\n        $$.radius = $$.radiusExpanded * 0.95;\n        $$.innerRadiusRatio = w ? ($$.radius - w) / $$.radius : 0.6;\n        $$.innerRadius = $$.hasType('donut') || $$.hasType('gauge') ? $$.radius * $$.innerRadiusRatio : 0;\n    };\n\n    c3_chart_internal_fn.updateArc = function () {\n        var $$ = this;\n        $$.svgArc = $$.getSvgArc();\n        $$.svgArcExpanded = $$.getSvgArcExpanded();\n        $$.svgArcExpandedSub = $$.getSvgArcExpanded(0.98);\n    };\n\n    c3_chart_internal_fn.updateAngle = function (d) {\n        var $$ = this, config = $$.config,\n            found = false, index = 0,\n            gMin = config.gauge_min, gMax = config.gauge_max, gTic, gValue;\n        $$.pie($$.filterTargetsToShow($$.data.targets)).forEach(function (t) {\n            if (! found && t.data.id === d.data.id) {\n                found = true;\n                d = t;\n                d.index = index;\n            }\n            index++;\n        });\n        if (isNaN(d.startAngle)) {\n            d.startAngle = 0;\n        }\n        if (isNaN(d.endAngle)) {\n            d.endAngle = d.startAngle;\n        }\n        if ($$.isGaugeType(d.data)) {\n            gTic = (Math.PI) / (gMax - gMin);\n            gValue = d.value < gMin ? 0 : d.value < gMax ? d.value - gMin : (gMax - gMin);\n            d.startAngle = -1 * (Math.PI / 2);\n            d.endAngle = d.startAngle + gTic * gValue;\n        }\n        return found ? d : null;\n    };\n\n    c3_chart_internal_fn.getSvgArc = function () {\n        var $$ = this,\n            arc = $$.d3.svg.arc().outerRadius($$.radius).innerRadius($$.innerRadius),\n            newArc = function (d, withoutUpdate) {\n                var updated;\n                if (withoutUpdate) { return arc(d); } // for interpolate\n                updated = $$.updateAngle(d);\n                return updated ? arc(updated) : \"M 0 0\";\n            };\n        // TODO: extends all function\n        newArc.centroid = arc.centroid;\n        return newArc;\n    };\n\n    c3_chart_internal_fn.getSvgArcExpanded = function (rate) {\n        var $$ = this,\n            arc = $$.d3.svg.arc().outerRadius($$.radiusExpanded * (rate ? rate : 1)).innerRadius($$.innerRadius);\n        return function (d) {\n            var updated = $$.updateAngle(d);\n            return updated ? arc(updated) : \"M 0 0\";\n        };\n    };\n\n    c3_chart_internal_fn.getArc = function (d, withoutUpdate, force) {\n        return force || this.isArcType(d.data) ? this.svgArc(d, withoutUpdate) : \"M 0 0\";\n    };\n\n\n    c3_chart_internal_fn.transformForArcLabel = function (d) {\n        var $$ = this,\n            updated = $$.updateAngle(d), c, x, y, h, ratio, translate = \"\";\n        if (updated && !$$.hasType('gauge')) {\n            c = this.svgArc.centroid(updated);\n            x = isNaN(c[0]) ? 0 : c[0];\n            y = isNaN(c[1]) ? 0 : c[1];\n            h = Math.sqrt(x * x + y * y);\n            // TODO: ratio should be an option?\n            ratio = $$.radius && h ? (36 / $$.radius > 0.375 ? 1.175 - 36 / $$.radius : 0.8) * $$.radius / h : 0;\n            translate = \"translate(\" + (x * ratio) +  ',' + (y * ratio) +  \")\";\n        }\n        return translate;\n    };\n\n    c3_chart_internal_fn.getArcRatio = function (d) {\n        var $$ = this,\n            whole = $$.hasType('gauge') ? Math.PI : (Math.PI * 2);\n        return d ? (d.endAngle - d.startAngle) / whole : null;\n    };\n\n    c3_chart_internal_fn.convertToArcData = function (d) {\n        return this.addName({\n            id: d.data.id,\n            value: d.value,\n            ratio: this.getArcRatio(d),\n            index: d.index\n        });\n    };\n\n    c3_chart_internal_fn.textForArcLabel = function (d) {\n        var $$ = this,\n            updated, value, ratio, id, format;\n        if (! $$.shouldShowArcLabel()) { return \"\"; }\n        updated = $$.updateAngle(d);\n        value = updated ? updated.value : null;\n        ratio = $$.getArcRatio(updated);\n        id = d.data.id;\n        if (! $$.hasType('gauge') && ! $$.meetsArcLabelThreshold(ratio)) { return \"\"; }\n        format = $$.getArcLabelFormat();\n        return format ? format(value, ratio, id) : $$.defaultArcValueFormat(value, ratio);\n    };\n\n    c3_chart_internal_fn.expandArc = function (targetIds) {\n        var $$ = this, interval;\n\n        // MEMO: avoid to cancel transition\n        if ($$.transiting) {\n            interval = window.setInterval(function () {\n                if (!$$.transiting) {\n                    window.clearInterval(interval);\n                    if ($$.legend.selectAll('.c3-legend-item-focused').size() > 0) {\n                        $$.expandArc(targetIds);\n                    }\n                }\n            }, 10);\n            return;\n        }\n\n        targetIds = $$.mapToTargetIds(targetIds);\n\n        $$.svg.selectAll($$.selectorTargets(targetIds, '.' + CLASS.chartArc)).each(function (d) {\n            if (! $$.shouldExpand(d.data.id)) { return; }\n            $$.d3.select(this).selectAll('path')\n                .transition().duration(50)\n                .attr(\"d\", $$.svgArcExpanded)\n                .transition().duration(100)\n                .attr(\"d\", $$.svgArcExpandedSub)\n                .each(function (d) {\n                    if ($$.isDonutType(d.data)) {\n                        // callback here\n                    }\n                });\n        });\n    };\n\n    c3_chart_internal_fn.unexpandArc = function (targetIds) {\n        var $$ = this;\n\n        if ($$.transiting) { return; }\n\n        targetIds = $$.mapToTargetIds(targetIds);\n\n        $$.svg.selectAll($$.selectorTargets(targetIds, '.' + CLASS.chartArc)).selectAll('path')\n            .transition().duration(50)\n            .attr(\"d\", $$.svgArc);\n        $$.svg.selectAll('.' + CLASS.arc)\n            .style(\"opacity\", 1);\n    };\n\n    c3_chart_internal_fn.shouldExpand = function (id) {\n        var $$ = this, config = $$.config;\n        return ($$.isDonutType(id) && config.donut_expand) || ($$.isGaugeType(id) && config.gauge_expand) || ($$.isPieType(id) && config.pie_expand);\n    };\n\n    c3_chart_internal_fn.shouldShowArcLabel = function () {\n        var $$ = this, config = $$.config, shouldShow = true;\n        if ($$.hasType('donut')) {\n            shouldShow = config.donut_label_show;\n        } else if ($$.hasType('pie')) {\n            shouldShow = config.pie_label_show;\n        }\n        // when gauge, always true\n        return shouldShow;\n    };\n\n    c3_chart_internal_fn.meetsArcLabelThreshold = function (ratio) {\n        var $$ = this, config = $$.config,\n            threshold = $$.hasType('donut') ? config.donut_label_threshold : config.pie_label_threshold;\n        return ratio >= threshold;\n    };\n\n    c3_chart_internal_fn.getArcLabelFormat = function () {\n        var $$ = this, config = $$.config,\n            format = config.pie_label_format;\n        if ($$.hasType('gauge')) {\n            format = config.gauge_label_format;\n        } else if ($$.hasType('donut')) {\n            format = config.donut_label_format;\n        }\n        return format;\n    };\n\n    c3_chart_internal_fn.getArcTitle = function () {\n        var $$ = this;\n        return $$.hasType('donut') ? $$.config.donut_title : \"\";\n    };\n\n    c3_chart_internal_fn.updateTargetsForArc = function (targets) {\n        var $$ = this, main = $$.main,\n            mainPieUpdate, mainPieEnter,\n            classChartArc = $$.classChartArc.bind($$),\n            classArcs = $$.classArcs.bind($$),\n            classFocus = $$.classFocus.bind($$);\n        mainPieUpdate = main.select('.' + CLASS.chartArcs).selectAll('.' + CLASS.chartArc)\n            .data($$.pie(targets))\n            .attr(\"class\", function (d) { return classChartArc(d) + classFocus(d.data); });\n        mainPieEnter = mainPieUpdate.enter().append(\"g\")\n            .attr(\"class\", classChartArc);\n        mainPieEnter.append('g')\n            .attr('class', classArcs);\n        mainPieEnter.append(\"text\")\n            .attr(\"dy\", $$.hasType('gauge') ? \"-.1em\" : \".35em\")\n            .style(\"opacity\", 0)\n            .style(\"text-anchor\", \"middle\")\n            .style(\"pointer-events\", \"none\");\n        // MEMO: can not keep same color..., but not bad to update color in redraw\n        //mainPieUpdate.exit().remove();\n    };\n\n    c3_chart_internal_fn.initArc = function () {\n        var $$ = this;\n        $$.arcs = $$.main.select('.' + CLASS.chart).append(\"g\")\n            .attr(\"class\", CLASS.chartArcs)\n            .attr(\"transform\", $$.getTranslate('arc'));\n        $$.arcs.append('text')\n            .attr('class', CLASS.chartArcsTitle)\n            .style(\"text-anchor\", \"middle\")\n            .text($$.getArcTitle());\n    };\n\n    c3_chart_internal_fn.redrawArc = function (duration, durationForExit, withTransform) {\n        var $$ = this, d3 = $$.d3, config = $$.config, main = $$.main,\n            mainArc;\n        mainArc = main.selectAll('.' + CLASS.arcs).selectAll('.' + CLASS.arc)\n            .data($$.arcData.bind($$));\n        mainArc.enter().append('path')\n            .attr(\"class\", $$.classArc.bind($$))\n            .style(\"fill\", function (d) { return $$.color(d.data); })\n            .style(\"cursor\", function (d) { return config.interaction_enabled && config.data_selection_isselectable(d) ? \"pointer\" : null; })\n            .style(\"opacity\", 0)\n            .each(function (d) {\n                if ($$.isGaugeType(d.data)) {\n                    d.startAngle = d.endAngle = -1 * (Math.PI / 2);\n                }\n                this._current = d;\n            });\n        mainArc\n            .attr(\"transform\", function (d) { return !$$.isGaugeType(d.data) && withTransform ? \"scale(0)\" : \"\"; })\n            .style(\"opacity\", function (d) { return d === this._current ? 0 : 1; })\n            .on('mouseover', config.interaction_enabled ? function (d) {\n                var updated, arcData;\n                if ($$.transiting) { // skip while transiting\n                    return;\n                }\n                updated = $$.updateAngle(d);\n                arcData = $$.convertToArcData(updated);\n                // transitions\n                $$.expandArc(updated.data.id);\n                $$.api.focus(updated.data.id);\n                $$.toggleFocusLegend(updated.data.id, true);\n                $$.config.data_onmouseover(arcData, this);\n            } : null)\n            .on('mousemove', config.interaction_enabled ? function (d) {\n                var updated = $$.updateAngle(d),\n                    arcData = $$.convertToArcData(updated),\n                    selectedData = [arcData];\n                $$.showTooltip(selectedData, this);\n            } : null)\n            .on('mouseout', config.interaction_enabled ? function (d) {\n                var updated, arcData;\n                if ($$.transiting) { // skip while transiting\n                    return;\n                }\n                updated = $$.updateAngle(d);\n                arcData = $$.convertToArcData(updated);\n                // transitions\n                $$.unexpandArc(updated.data.id);\n                $$.api.revert();\n                $$.revertLegend();\n                $$.hideTooltip();\n                $$.config.data_onmouseout(arcData, this);\n            } : null)\n            .on('click', config.interaction_enabled ? function (d, i) {\n                var updated = $$.updateAngle(d),\n                    arcData = $$.convertToArcData(updated);\n                if ($$.toggleShape) { $$.toggleShape(this, arcData, i); }\n                $$.config.data_onclick.call($$.api, arcData, this);\n            } : null)\n            .each(function () { $$.transiting = true; })\n            .transition().duration(duration)\n            .attrTween(\"d\", function (d) {\n                var updated = $$.updateAngle(d), interpolate;\n                if (! updated) {\n                    return function () { return \"M 0 0\"; };\n                }\n                //                if (this._current === d) {\n                //                    this._current = {\n                //                        startAngle: Math.PI*2,\n                //                        endAngle: Math.PI*2,\n                //                    };\n                //                }\n                if (isNaN(this._current.startAngle)) {\n                    this._current.startAngle = 0;\n                }\n                if (isNaN(this._current.endAngle)) {\n                    this._current.endAngle = this._current.startAngle;\n                }\n                interpolate = d3.interpolate(this._current, updated);\n                this._current = interpolate(0);\n                return function (t) {\n                    var interpolated = interpolate(t);\n                    interpolated.data = d.data; // data.id will be updated by interporator\n                    return $$.getArc(interpolated, true);\n                };\n            })\n            .attr(\"transform\", withTransform ? \"scale(1)\" : \"\")\n            .style(\"fill\", function (d) {\n                return $$.levelColor ? $$.levelColor(d.data.values[0].value) : $$.color(d.data.id);\n            }) // Where gauge reading color would receive customization.\n            .style(\"opacity\", 1)\n            .call($$.endall, function () {\n                $$.transiting = false;\n            });\n        mainArc.exit().transition().duration(durationForExit)\n            .style('opacity', 0)\n            .remove();\n        main.selectAll('.' + CLASS.chartArc).select('text')\n            .style(\"opacity\", 0)\n            .attr('class', function (d) { return $$.isGaugeType(d.data) ? CLASS.gaugeValue : ''; })\n            .text($$.textForArcLabel.bind($$))\n            .attr(\"transform\", $$.transformForArcLabel.bind($$))\n            .style('font-size', function (d) { return $$.isGaugeType(d.data) ? Math.round($$.radius / 5) + 'px' : ''; })\n          .transition().duration(duration)\n            .style(\"opacity\", function (d) { return $$.isTargetToShow(d.data.id) && $$.isArcType(d.data) ? 1 : 0; });\n        main.select('.' + CLASS.chartArcsTitle)\n            .style(\"opacity\", $$.hasType('donut') || $$.hasType('gauge') ? 1 : 0);\n\n        if ($$.hasType('gauge')) {\n            $$.arcs.select('.' + CLASS.chartArcsBackground)\n                .attr(\"d\", function () {\n                    var d = {\n                        data: [{value: config.gauge_max}],\n                        startAngle: -1 * (Math.PI / 2),\n                        endAngle: Math.PI / 2\n                    };\n                    return $$.getArc(d, true, true);\n                });\n            $$.arcs.select('.' + CLASS.chartArcsGaugeUnit)\n                .attr(\"dy\", \".75em\")\n                .text(config.gauge_label_show ? config.gauge_units : '');\n            $$.arcs.select('.' + CLASS.chartArcsGaugeMin)\n                .attr(\"dx\", -1 * ($$.innerRadius + (($$.radius - $$.innerRadius) / 2)) + \"px\")\n                .attr(\"dy\", \"1.2em\")\n                .text(config.gauge_label_show ? config.gauge_min : '');\n            $$.arcs.select('.' + CLASS.chartArcsGaugeMax)\n                .attr(\"dx\", $$.innerRadius + (($$.radius - $$.innerRadius) / 2) + \"px\")\n                .attr(\"dy\", \"1.2em\")\n                .text(config.gauge_label_show ? config.gauge_max : '');\n        }\n    };\n    c3_chart_internal_fn.initGauge = function () {\n        var arcs = this.arcs;\n        if (this.hasType('gauge')) {\n            arcs.append('path')\n                .attr(\"class\", CLASS.chartArcsBackground);\n            arcs.append(\"text\")\n                .attr(\"class\", CLASS.chartArcsGaugeUnit)\n                .style(\"text-anchor\", \"middle\")\n                .style(\"pointer-events\", \"none\");\n            arcs.append(\"text\")\n                .attr(\"class\", CLASS.chartArcsGaugeMin)\n                .style(\"text-anchor\", \"middle\")\n                .style(\"pointer-events\", \"none\");\n            arcs.append(\"text\")\n                .attr(\"class\", CLASS.chartArcsGaugeMax)\n                .style(\"text-anchor\", \"middle\")\n                .style(\"pointer-events\", \"none\");\n        }\n    };\n    c3_chart_internal_fn.getGaugeLabelHeight = function () {\n        return this.config.gauge_label_show ? 20 : 0;\n    };\n\n    c3_chart_internal_fn.initRegion = function () {\n        var $$ = this;\n        $$.region = $$.main.append('g')\n            .attr(\"clip-path\", $$.clipPath)\n            .attr(\"class\", CLASS.regions);\n    };\n    c3_chart_internal_fn.updateRegion = function (duration) {\n        var $$ = this, config = $$.config;\n\n        // hide if arc type\n        $$.region.style('visibility', $$.hasArcType() ? 'hidden' : 'visible');\n\n        $$.mainRegion = $$.main.select('.' + CLASS.regions).selectAll('.' + CLASS.region)\n            .data(config.regions);\n        $$.mainRegion.enter().append('g')\n            .attr('class', $$.classRegion.bind($$))\n          .append('rect')\n            .style(\"fill-opacity\", 0);\n        $$.mainRegion.exit().transition().duration(duration)\n            .style(\"opacity\", 0)\n            .remove();\n    };\n    c3_chart_internal_fn.redrawRegion = function (withTransition) {\n        var $$ = this,\n            regions = $$.mainRegion.selectAll('rect'),\n            x = $$.regionX.bind($$),\n            y = $$.regionY.bind($$),\n            w = $$.regionWidth.bind($$),\n            h = $$.regionHeight.bind($$);\n        return [\n            (withTransition ? regions.transition() : regions)\n                .attr(\"x\", x)\n                .attr(\"y\", y)\n                .attr(\"width\", w)\n                .attr(\"height\", h)\n                .style(\"fill-opacity\", function (d) { return isValue(d.opacity) ? d.opacity : 0.1; })\n        ];\n    };\n    c3_chart_internal_fn.regionX = function (d) {\n        var $$ = this, config = $$.config,\n            xPos, yScale = d.axis === 'y' ? $$.y : $$.y2;\n        if (d.axis === 'y' || d.axis === 'y2') {\n            xPos = config.axis_rotated ? ('start' in d ? yScale(d.start) : 0) : 0;\n        } else {\n            xPos = config.axis_rotated ? 0 : ('start' in d ? $$.x($$.isTimeSeries() ? $$.parseDate(d.start) : d.start) : 0);\n        }\n        return xPos;\n    };\n    c3_chart_internal_fn.regionY = function (d) {\n        var $$ = this, config = $$.config,\n            yPos, yScale = d.axis === 'y' ? $$.y : $$.y2;\n        if (d.axis === 'y' || d.axis === 'y2') {\n            yPos = config.axis_rotated ? 0 : ('end' in d ? yScale(d.end) : 0);\n        } else {\n            yPos = config.axis_rotated ? ('start' in d ? $$.x($$.isTimeSeries() ? $$.parseDate(d.start) : d.start) : 0) : 0;\n        }\n        return yPos;\n    };\n    c3_chart_internal_fn.regionWidth = function (d) {\n        var $$ = this, config = $$.config,\n            start = $$.regionX(d), end, yScale = d.axis === 'y' ? $$.y : $$.y2;\n        if (d.axis === 'y' || d.axis === 'y2') {\n            end = config.axis_rotated ? ('end' in d ? yScale(d.end) : $$.width) : $$.width;\n        } else {\n            end = config.axis_rotated ? $$.width : ('end' in d ? $$.x($$.isTimeSeries() ? $$.parseDate(d.end) : d.end) : $$.width);\n        }\n        return end < start ? 0 : end - start;\n    };\n    c3_chart_internal_fn.regionHeight = function (d) {\n        var $$ = this, config = $$.config,\n            start = this.regionY(d), end, yScale = d.axis === 'y' ? $$.y : $$.y2;\n        if (d.axis === 'y' || d.axis === 'y2') {\n            end = config.axis_rotated ? $$.height : ('start' in d ? yScale(d.start) : $$.height);\n        } else {\n            end = config.axis_rotated ? ('end' in d ? $$.x($$.isTimeSeries() ? $$.parseDate(d.end) : d.end) : $$.height) : $$.height;\n        }\n        return end < start ? 0 : end - start;\n    };\n    c3_chart_internal_fn.isRegionOnX = function (d) {\n        return !d.axis || d.axis === 'x';\n    };\n\n    c3_chart_internal_fn.drag = function (mouse) {\n        var $$ = this, config = $$.config, main = $$.main, d3 = $$.d3;\n        var sx, sy, mx, my, minX, maxX, minY, maxY;\n\n        if ($$.hasArcType()) { return; }\n        if (! config.data_selection_enabled) { return; } // do nothing if not selectable\n        if (config.zoom_enabled && ! $$.zoom.altDomain) { return; } // skip if zoomable because of conflict drag dehavior\n        if (!config.data_selection_multiple) { return; } // skip when single selection because drag is used for multiple selection\n\n        sx = $$.dragStart[0];\n        sy = $$.dragStart[1];\n        mx = mouse[0];\n        my = mouse[1];\n        minX = Math.min(sx, mx);\n        maxX = Math.max(sx, mx);\n        minY = (config.data_selection_grouped) ? $$.margin.top : Math.min(sy, my);\n        maxY = (config.data_selection_grouped) ? $$.height : Math.max(sy, my);\n\n        main.select('.' + CLASS.dragarea)\n            .attr('x', minX)\n            .attr('y', minY)\n            .attr('width', maxX - minX)\n            .attr('height', maxY - minY);\n        // TODO: binary search when multiple xs\n        main.selectAll('.' + CLASS.shapes).selectAll('.' + CLASS.shape)\n            .filter(function (d) { return config.data_selection_isselectable(d); })\n            .each(function (d, i) {\n                var shape = d3.select(this),\n                    isSelected = shape.classed(CLASS.SELECTED),\n                    isIncluded = shape.classed(CLASS.INCLUDED),\n                    _x, _y, _w, _h, toggle, isWithin = false, box;\n                if (shape.classed(CLASS.circle)) {\n                    _x = shape.attr(\"cx\") * 1;\n                    _y = shape.attr(\"cy\") * 1;\n                    toggle = $$.togglePoint;\n                    isWithin = minX < _x && _x < maxX && minY < _y && _y < maxY;\n                }\n                else if (shape.classed(CLASS.bar)) {\n                    box = getPathBox(this);\n                    _x = box.x;\n                    _y = box.y;\n                    _w = box.width;\n                    _h = box.height;\n                    toggle = $$.togglePath;\n                    isWithin = !(maxX < _x || _x + _w < minX) && !(maxY < _y || _y + _h < minY);\n                } else {\n                    // line/area selection not supported yet\n                    return;\n                }\n                if (isWithin ^ isIncluded) {\n                    shape.classed(CLASS.INCLUDED, !isIncluded);\n                    // TODO: included/unincluded callback here\n                    shape.classed(CLASS.SELECTED, !isSelected);\n                    toggle.call($$, !isSelected, shape, d, i);\n                }\n            });\n    };\n\n    c3_chart_internal_fn.dragstart = function (mouse) {\n        var $$ = this, config = $$.config;\n        if ($$.hasArcType()) { return; }\n        if (! config.data_selection_enabled) { return; } // do nothing if not selectable\n        $$.dragStart = mouse;\n        $$.main.select('.' + CLASS.chart).append('rect')\n            .attr('class', CLASS.dragarea)\n            .style('opacity', 0.1);\n        $$.dragging = true;\n    };\n\n    c3_chart_internal_fn.dragend = function () {\n        var $$ = this, config = $$.config;\n        if ($$.hasArcType()) { return; }\n        if (! config.data_selection_enabled) { return; } // do nothing if not selectable\n        $$.main.select('.' + CLASS.dragarea)\n            .transition().duration(100)\n            .style('opacity', 0)\n            .remove();\n        $$.main.selectAll('.' + CLASS.shape)\n            .classed(CLASS.INCLUDED, false);\n        $$.dragging = false;\n    };\n\n    c3_chart_internal_fn.selectPoint = function (target, d, i) {\n        var $$ = this, config = $$.config,\n            cx = (config.axis_rotated ? $$.circleY : $$.circleX).bind($$),\n            cy = (config.axis_rotated ? $$.circleX : $$.circleY).bind($$),\n            r = $$.pointSelectR.bind($$);\n        config.data_onselected.call($$.api, d, target.node());\n        // add selected-circle on low layer g\n        $$.main.select('.' + CLASS.selectedCircles + $$.getTargetSelectorSuffix(d.id)).selectAll('.' + CLASS.selectedCircle + '-' + i)\n            .data([d])\n            .enter().append('circle')\n            .attr(\"class\", function () { return $$.generateClass(CLASS.selectedCircle, i); })\n            .attr(\"cx\", cx)\n            .attr(\"cy\", cy)\n            .attr(\"stroke\", function () { return $$.color(d); })\n            .attr(\"r\", function (d) { return $$.pointSelectR(d) * 1.4; })\n            .transition().duration(100)\n            .attr(\"r\", r);\n    };\n    c3_chart_internal_fn.unselectPoint = function (target, d, i) {\n        var $$ = this;\n        $$.config.data_onunselected(d, target.node());\n        // remove selected-circle from low layer g\n        $$.main.select('.' + CLASS.selectedCircles + $$.getTargetSelectorSuffix(d.id)).selectAll('.' + CLASS.selectedCircle + '-' + i)\n            .transition().duration(100).attr('r', 0)\n            .remove();\n    };\n    c3_chart_internal_fn.togglePoint = function (selected, target, d, i) {\n        selected ? this.selectPoint(target, d, i) : this.unselectPoint(target, d, i);\n    };\n    c3_chart_internal_fn.selectPath = function (target, d) {\n        var $$ = this;\n        $$.config.data_onselected.call($$, d, target.node());\n        target.transition().duration(100)\n            .style(\"fill\", function () { return $$.d3.rgb($$.color(d)).brighter(0.75); });\n    };\n    c3_chart_internal_fn.unselectPath = function (target, d) {\n        var $$ = this;\n        $$.config.data_onunselected.call($$, d, target.node());\n        target.transition().duration(100)\n            .style(\"fill\", function () { return $$.color(d); });\n    };\n    c3_chart_internal_fn.togglePath = function (selected, target, d, i) {\n        selected ? this.selectPath(target, d, i) : this.unselectPath(target, d, i);\n    };\n    c3_chart_internal_fn.getToggle = function (that, d) {\n        var $$ = this, toggle;\n        if (that.nodeName === 'circle') {\n            if ($$.isStepType(d)) {\n                // circle is hidden in step chart, so treat as within the click area\n                toggle = function () {}; // TODO: how to select step chart?\n            } else {\n                toggle = $$.togglePoint;\n            }\n        }\n        else if (that.nodeName === 'path') {\n            toggle = $$.togglePath;\n        }\n        return toggle;\n    };\n    c3_chart_internal_fn.toggleShape = function (that, d, i) {\n        var $$ = this, d3 = $$.d3, config = $$.config,\n            shape = d3.select(that), isSelected = shape.classed(CLASS.SELECTED),\n            toggle = $$.getToggle(that, d).bind($$);\n\n        if (config.data_selection_enabled && config.data_selection_isselectable(d)) {\n            if (!config.data_selection_multiple) {\n                $$.main.selectAll('.' + CLASS.shapes + (config.data_selection_grouped ? $$.getTargetSelectorSuffix(d.id) : \"\")).selectAll('.' + CLASS.shape).each(function (d, i) {\n                    var shape = d3.select(this);\n                    if (shape.classed(CLASS.SELECTED)) { toggle(false, shape.classed(CLASS.SELECTED, false), d, i); }\n                });\n            }\n            shape.classed(CLASS.SELECTED, !isSelected);\n            toggle(!isSelected, shape, d, i);\n        }\n    };\n\n    c3_chart_internal_fn.initBrush = function () {\n        var $$ = this, d3 = $$.d3;\n        $$.brush = d3.svg.brush().on(\"brush\", function () { $$.redrawForBrush(); });\n        $$.brush.update = function () {\n            if ($$.context) { $$.context.select('.' + CLASS.brush).call(this); }\n            return this;\n        };\n        $$.brush.scale = function (scale) {\n            return $$.config.axis_rotated ? this.y(scale) : this.x(scale);\n        };\n    };\n    c3_chart_internal_fn.initSubchart = function () {\n        var $$ = this, config = $$.config,\n            context = $$.context = $$.svg.append(\"g\").attr(\"transform\", $$.getTranslate('context'));\n\n        context.style('visibility', config.subchart_show ? 'visible' : 'hidden');\n\n        // Define g for chart area\n        context.append('g')\n            .attr(\"clip-path\", $$.clipPathForSubchart)\n            .attr('class', CLASS.chart);\n\n        // Define g for bar chart area\n        context.select('.' + CLASS.chart).append(\"g\")\n            .attr(\"class\", CLASS.chartBars);\n\n        // Define g for line chart area\n        context.select('.' + CLASS.chart).append(\"g\")\n            .attr(\"class\", CLASS.chartLines);\n\n        // Add extent rect for Brush\n        context.append(\"g\")\n            .attr(\"clip-path\", $$.clipPath)\n            .attr(\"class\", CLASS.brush)\n            .call($$.brush);\n\n        // ATTENTION: This must be called AFTER chart added\n        // Add Axis\n        $$.axes.subx = context.append(\"g\")\n            .attr(\"class\", CLASS.axisX)\n            .attr(\"transform\", $$.getTranslate('subx'))\n            .attr(\"clip-path\", config.axis_rotated ? \"\" : $$.clipPathForXAxis);\n    };\n    c3_chart_internal_fn.updateTargetsForSubchart = function (targets) {\n        var $$ = this, context = $$.context, config = $$.config,\n            contextLineEnter, contextLineUpdate, contextBarEnter, contextBarUpdate,\n            classChartBar = $$.classChartBar.bind($$),\n            classBars = $$.classBars.bind($$),\n            classChartLine = $$.classChartLine.bind($$),\n            classLines = $$.classLines.bind($$),\n            classAreas = $$.classAreas.bind($$);\n\n        if (config.subchart_show) {\n            //-- Bar --//\n            contextBarUpdate = context.select('.' + CLASS.chartBars).selectAll('.' + CLASS.chartBar)\n                .data(targets)\n                .attr('class', classChartBar);\n            contextBarEnter = contextBarUpdate.enter().append('g')\n                .style('opacity', 0)\n                .attr('class', classChartBar);\n            // Bars for each data\n            contextBarEnter.append('g')\n                .attr(\"class\", classBars);\n\n            //-- Line --//\n            contextLineUpdate = context.select('.' + CLASS.chartLines).selectAll('.' + CLASS.chartLine)\n                .data(targets)\n                .attr('class', classChartLine);\n            contextLineEnter = contextLineUpdate.enter().append('g')\n                .style('opacity', 0)\n                .attr('class', classChartLine);\n            // Lines for each data\n            contextLineEnter.append(\"g\")\n                .attr(\"class\", classLines);\n            // Area\n            contextLineEnter.append(\"g\")\n                .attr(\"class\", classAreas);\n\n            //-- Brush --//\n            context.selectAll('.' + CLASS.brush + ' rect')\n                .attr(config.axis_rotated ? \"width\" : \"height\", config.axis_rotated ? $$.width2 : $$.height2);\n        }\n    };\n    c3_chart_internal_fn.updateBarForSubchart = function (durationForExit) {\n        var $$ = this;\n        $$.contextBar = $$.context.selectAll('.' + CLASS.bars).selectAll('.' + CLASS.bar)\n            .data($$.barData.bind($$));\n        $$.contextBar.enter().append('path')\n            .attr(\"class\", $$.classBar.bind($$))\n            .style(\"stroke\", 'none')\n            .style(\"fill\", $$.color);\n        $$.contextBar\n            .style(\"opacity\", $$.initialOpacity.bind($$));\n        $$.contextBar.exit().transition().duration(durationForExit)\n            .style('opacity', 0)\n            .remove();\n    };\n    c3_chart_internal_fn.redrawBarForSubchart = function (drawBarOnSub, withTransition, duration) {\n        (withTransition ? this.contextBar.transition().duration(duration) : this.contextBar)\n            .attr('d', drawBarOnSub)\n            .style('opacity', 1);\n    };\n    c3_chart_internal_fn.updateLineForSubchart = function (durationForExit) {\n        var $$ = this;\n        $$.contextLine = $$.context.selectAll('.' + CLASS.lines).selectAll('.' + CLASS.line)\n            .data($$.lineData.bind($$));\n        $$.contextLine.enter().append('path')\n            .attr('class', $$.classLine.bind($$))\n            .style('stroke', $$.color);\n        $$.contextLine\n            .style(\"opacity\", $$.initialOpacity.bind($$));\n        $$.contextLine.exit().transition().duration(durationForExit)\n            .style('opacity', 0)\n            .remove();\n    };\n    c3_chart_internal_fn.redrawLineForSubchart = function (drawLineOnSub, withTransition, duration) {\n        (withTransition ? this.contextLine.transition().duration(duration) : this.contextLine)\n            .attr(\"d\", drawLineOnSub)\n            .style('opacity', 1);\n    };\n    c3_chart_internal_fn.updateAreaForSubchart = function (durationForExit) {\n        var $$ = this, d3 = $$.d3;\n        $$.contextArea = $$.context.selectAll('.' + CLASS.areas).selectAll('.' + CLASS.area)\n            .data($$.lineData.bind($$));\n        $$.contextArea.enter().append('path')\n            .attr(\"class\", $$.classArea.bind($$))\n            .style(\"fill\", $$.color)\n            .style(\"opacity\", function () { $$.orgAreaOpacity = +d3.select(this).style('opacity'); return 0; });\n        $$.contextArea\n            .style(\"opacity\", 0);\n        $$.contextArea.exit().transition().duration(durationForExit)\n            .style('opacity', 0)\n            .remove();\n    };\n    c3_chart_internal_fn.redrawAreaForSubchart = function (drawAreaOnSub, withTransition, duration) {\n        (withTransition ? this.contextArea.transition().duration(duration) : this.contextArea)\n            .attr(\"d\", drawAreaOnSub)\n            .style(\"fill\", this.color)\n            .style(\"opacity\", this.orgAreaOpacity);\n    };\n    c3_chart_internal_fn.redrawSubchart = function (withSubchart, transitions, duration, durationForExit, areaIndices, barIndices, lineIndices) {\n        var $$ = this, d3 = $$.d3, config = $$.config,\n            drawAreaOnSub, drawBarOnSub, drawLineOnSub;\n\n        $$.context.style('visibility', config.subchart_show ? 'visible' : 'hidden');\n\n        // subchart\n        if (config.subchart_show) {\n            // reflect main chart to extent on subchart if zoomed\n            if (d3.event && d3.event.type === 'zoom') {\n                $$.brush.extent($$.x.orgDomain()).update();\n            }\n            // update subchart elements if needed\n            if (withSubchart) {\n\n                // extent rect\n                if (!$$.brush.empty()) {\n                    $$.brush.extent($$.x.orgDomain()).update();\n                }\n                // setup drawer - MEMO: this must be called after axis updated\n                drawAreaOnSub = $$.generateDrawArea(areaIndices, true);\n                drawBarOnSub = $$.generateDrawBar(barIndices, true);\n                drawLineOnSub = $$.generateDrawLine(lineIndices, true);\n\n                $$.updateBarForSubchart(duration);\n                $$.updateLineForSubchart(duration);\n                $$.updateAreaForSubchart(duration);\n\n                $$.redrawBarForSubchart(drawBarOnSub, duration, duration);\n                $$.redrawLineForSubchart(drawLineOnSub, duration, duration);\n                $$.redrawAreaForSubchart(drawAreaOnSub, duration, duration);\n            }\n        }\n    };\n    c3_chart_internal_fn.redrawForBrush = function () {\n        var $$ = this, x = $$.x;\n        $$.redraw({\n            withTransition: false,\n            withY: $$.config.zoom_rescale,\n            withSubchart: false,\n            withUpdateXDomain: true,\n            withDimension: false\n        });\n        $$.config.subchart_onbrush.call($$.api, x.orgDomain());\n    };\n    c3_chart_internal_fn.transformContext = function (withTransition, transitions) {\n        var $$ = this, subXAxis;\n        if (transitions && transitions.axisSubX) {\n            subXAxis = transitions.axisSubX;\n        } else {\n            subXAxis = $$.context.select('.' + CLASS.axisX);\n            if (withTransition) { subXAxis = subXAxis.transition(); }\n        }\n        $$.context.attr(\"transform\", $$.getTranslate('context'));\n        subXAxis.attr(\"transform\", $$.getTranslate('subx'));\n    };\n    c3_chart_internal_fn.getDefaultExtent = function () {\n        var $$ = this, config = $$.config,\n            extent = isFunction(config.axis_x_extent) ? config.axis_x_extent($$.getXDomain($$.data.targets)) : config.axis_x_extent;\n        if ($$.isTimeSeries()) {\n            extent = [$$.parseDate(extent[0]), $$.parseDate(extent[1])];\n        }\n        return extent;\n    };\n\n    c3_chart_internal_fn.initZoom = function () {\n        var $$ = this, d3 = $$.d3, config = $$.config, startEvent;\n\n        $$.zoom = d3.behavior.zoom()\n            .on(\"zoomstart\", function () {\n                startEvent = d3.event.sourceEvent;\n                $$.zoom.altDomain = d3.event.sourceEvent.altKey ? $$.x.orgDomain() : null;\n                config.zoom_onzoomstart.call($$.api, d3.event.sourceEvent);\n            })\n            .on(\"zoom\", function () {\n                $$.redrawForZoom.call($$);\n            })\n            .on('zoomend', function () {\n                var event = d3.event.sourceEvent;\n                // if click, do nothing. otherwise, click interaction will be canceled.\n                if (event && startEvent.clientX === event.clientX && startEvent.clientY === event.clientY) {\n                    return;\n                }\n                $$.redrawEventRect();\n                $$.updateZoom();\n                config.zoom_onzoomend.call($$.api, $$.x.orgDomain());\n            });\n        $$.zoom.scale = function (scale) {\n            return config.axis_rotated ? this.y(scale) : this.x(scale);\n        };\n        $$.zoom.orgScaleExtent = function () {\n            var extent = config.zoom_extent ? config.zoom_extent : [1, 10];\n            return [extent[0], Math.max($$.getMaxDataCount() / extent[1], extent[1])];\n        };\n        $$.zoom.updateScaleExtent = function () {\n            var ratio = diffDomain($$.x.orgDomain()) / diffDomain($$.orgXDomain),\n                extent = this.orgScaleExtent();\n            this.scaleExtent([extent[0] * ratio, extent[1] * ratio]);\n            return this;\n        };\n    };\n    c3_chart_internal_fn.updateZoom = function () {\n        var $$ = this, z = $$.config.zoom_enabled ? $$.zoom : function () {};\n        $$.main.select('.' + CLASS.zoomRect).call(z).on(\"dblclick.zoom\", null);\n        $$.main.selectAll('.' + CLASS.eventRect).call(z).on(\"dblclick.zoom\", null);\n    };\n    c3_chart_internal_fn.redrawForZoom = function () {\n        var $$ = this, d3 = $$.d3, config = $$.config, zoom = $$.zoom, x = $$.x;\n        if (!config.zoom_enabled) {\n            return;\n        }\n        if ($$.filterTargetsToShow($$.data.targets).length === 0) {\n            return;\n        }\n        if (d3.event.sourceEvent.type === 'mousemove' && zoom.altDomain) {\n            x.domain(zoom.altDomain);\n            zoom.scale(x).updateScaleExtent();\n            return;\n        }\n        if ($$.isCategorized() && x.orgDomain()[0] === $$.orgXDomain[0]) {\n            x.domain([$$.orgXDomain[0] - 1e-10, x.orgDomain()[1]]);\n        }\n        $$.redraw({\n            withTransition: false,\n            withY: config.zoom_rescale,\n            withSubchart: false,\n            withEventRect: false,\n            withDimension: false\n        });\n        if (d3.event.sourceEvent.type === 'mousemove') {\n            $$.cancelClick = true;\n        }\n        config.zoom_onzoom.call($$.api, x.orgDomain());\n    };\n\n    c3_chart_internal_fn.generateColor = function () {\n        var $$ = this, config = $$.config, d3 = $$.d3,\n            colors = config.data_colors,\n            pattern = notEmpty(config.color_pattern) ? config.color_pattern : d3.scale.category10().range(),\n            callback = config.data_color,\n            ids = [];\n\n        return function (d) {\n            var id = d.id || (d.data && d.data.id) || d, color;\n\n            // if callback function is provided\n            if (colors[id] instanceof Function) {\n                color = colors[id](d);\n            }\n            // if specified, choose that color\n            else if (colors[id]) {\n                color = colors[id];\n            }\n            // if not specified, choose from pattern\n            else {\n                if (ids.indexOf(id) < 0) { ids.push(id); }\n                color = pattern[ids.indexOf(id) % pattern.length];\n                colors[id] = color;\n            }\n            return callback instanceof Function ? callback(color, d) : color;\n        };\n    };\n    c3_chart_internal_fn.generateLevelColor = function () {\n        var $$ = this, config = $$.config,\n            colors = config.color_pattern,\n            threshold = config.color_threshold,\n            asValue = threshold.unit === 'value',\n            values = threshold.values && threshold.values.length ? threshold.values : [],\n            max = threshold.max || 100;\n        return notEmpty(config.color_threshold) ? function (value) {\n            var i, v, color = colors[colors.length - 1];\n            for (i = 0; i < values.length; i++) {\n                v = asValue ? value : (value * 100 / max);\n                if (v < values[i]) {\n                    color = colors[i];\n                    break;\n                }\n            }\n            return color;\n        } : null;\n    };\n\n    c3_chart_internal_fn.getYFormat = function (forArc) {\n        var $$ = this,\n            formatForY = forArc && !$$.hasType('gauge') ? $$.defaultArcValueFormat : $$.yFormat,\n            formatForY2 = forArc && !$$.hasType('gauge') ? $$.defaultArcValueFormat : $$.y2Format;\n        return function (v, ratio, id) {\n            var format = $$.axis.getId(id) === 'y2' ? formatForY2 : formatForY;\n            return format.call($$, v, ratio);\n        };\n    };\n    c3_chart_internal_fn.yFormat = function (v) {\n        var $$ = this, config = $$.config,\n            format = config.axis_y_tick_format ? config.axis_y_tick_format : $$.defaultValueFormat;\n        return format(v);\n    };\n    c3_chart_internal_fn.y2Format = function (v) {\n        var $$ = this, config = $$.config,\n            format = config.axis_y2_tick_format ? config.axis_y2_tick_format : $$.defaultValueFormat;\n        return format(v);\n    };\n    c3_chart_internal_fn.defaultValueFormat = function (v) {\n        return isValue(v) ? +v : \"\";\n    };\n    c3_chart_internal_fn.defaultArcValueFormat = function (v, ratio) {\n        return (ratio * 100).toFixed(1) + '%';\n    };\n    c3_chart_internal_fn.dataLabelFormat = function (targetId) {\n        var $$ = this, data_labels = $$.config.data_labels,\n            format, defaultFormat = function (v) { return isValue(v) ? +v : \"\"; };\n        // find format according to axis id\n        if (typeof data_labels.format === 'function') {\n            format = data_labels.format;\n        } else if (typeof data_labels.format === 'object') {\n            if (data_labels.format[targetId]) {\n                format = data_labels.format[targetId] === true ? defaultFormat : data_labels.format[targetId];\n            } else {\n                format = function () { return ''; };\n            }\n        } else {\n            format = defaultFormat;\n        }\n        return format;\n    };\n\n    c3_chart_internal_fn.hasCaches = function (ids) {\n        for (var i = 0; i < ids.length; i++) {\n            if (! (ids[i] in this.cache)) { return false; }\n        }\n        return true;\n    };\n    c3_chart_internal_fn.addCache = function (id, target) {\n        this.cache[id] = this.cloneTarget(target);\n    };\n    c3_chart_internal_fn.getCaches = function (ids) {\n        var targets = [], i;\n        for (i = 0; i < ids.length; i++) {\n            if (ids[i] in this.cache) { targets.push(this.cloneTarget(this.cache[ids[i]])); }\n        }\n        return targets;\n    };\n\n    var CLASS = c3_chart_internal_fn.CLASS = {\n        target: 'c3-target',\n        chart: 'c3-chart',\n        chartLine: 'c3-chart-line',\n        chartLines: 'c3-chart-lines',\n        chartBar: 'c3-chart-bar',\n        chartBars: 'c3-chart-bars',\n        chartText: 'c3-chart-text',\n        chartTexts: 'c3-chart-texts',\n        chartArc: 'c3-chart-arc',\n        chartArcs: 'c3-chart-arcs',\n        chartArcsTitle: 'c3-chart-arcs-title',\n        chartArcsBackground: 'c3-chart-arcs-background',\n        chartArcsGaugeUnit: 'c3-chart-arcs-gauge-unit',\n        chartArcsGaugeMax: 'c3-chart-arcs-gauge-max',\n        chartArcsGaugeMin: 'c3-chart-arcs-gauge-min',\n        selectedCircle: 'c3-selected-circle',\n        selectedCircles: 'c3-selected-circles',\n        eventRect: 'c3-event-rect',\n        eventRects: 'c3-event-rects',\n        eventRectsSingle: 'c3-event-rects-single',\n        eventRectsMultiple: 'c3-event-rects-multiple',\n        zoomRect: 'c3-zoom-rect',\n        brush: 'c3-brush',\n        focused: 'c3-focused',\n        defocused: 'c3-defocused',\n        region: 'c3-region',\n        regions: 'c3-regions',\n        tooltipContainer: 'c3-tooltip-container',\n        tooltip: 'c3-tooltip',\n        tooltipName: 'c3-tooltip-name',\n        shape: 'c3-shape',\n        shapes: 'c3-shapes',\n        line: 'c3-line',\n        lines: 'c3-lines',\n        bar: 'c3-bar',\n        bars: 'c3-bars',\n        circle: 'c3-circle',\n        circles: 'c3-circles',\n        arc: 'c3-arc',\n        arcs: 'c3-arcs',\n        area: 'c3-area',\n        areas: 'c3-areas',\n        empty: 'c3-empty',\n        text: 'c3-text',\n        texts: 'c3-texts',\n        gaugeValue: 'c3-gauge-value',\n        grid: 'c3-grid',\n        gridLines: 'c3-grid-lines',\n        xgrid: 'c3-xgrid',\n        xgrids: 'c3-xgrids',\n        xgridLine: 'c3-xgrid-line',\n        xgridLines: 'c3-xgrid-lines',\n        xgridFocus: 'c3-xgrid-focus',\n        ygrid: 'c3-ygrid',\n        ygrids: 'c3-ygrids',\n        ygridLine: 'c3-ygrid-line',\n        ygridLines: 'c3-ygrid-lines',\n        axis: 'c3-axis',\n        axisX: 'c3-axis-x',\n        axisXLabel: 'c3-axis-x-label',\n        axisY: 'c3-axis-y',\n        axisYLabel: 'c3-axis-y-label',\n        axisY2: 'c3-axis-y2',\n        axisY2Label: 'c3-axis-y2-label',\n        legendBackground: 'c3-legend-background',\n        legendItem: 'c3-legend-item',\n        legendItemEvent: 'c3-legend-item-event',\n        legendItemTile: 'c3-legend-item-tile',\n        legendItemHidden: 'c3-legend-item-hidden',\n        legendItemFocused: 'c3-legend-item-focused',\n        dragarea: 'c3-dragarea',\n        EXPANDED: '_expanded_',\n        SELECTED: '_selected_',\n        INCLUDED: '_included_'\n    };\n    c3_chart_internal_fn.generateClass = function (prefix, targetId) {\n        return \" \" + prefix + \" \" + prefix + this.getTargetSelectorSuffix(targetId);\n    };\n    c3_chart_internal_fn.classText = function (d) {\n        return this.generateClass(CLASS.text, d.index);\n    };\n    c3_chart_internal_fn.classTexts = function (d) {\n        return this.generateClass(CLASS.texts, d.id);\n    };\n    c3_chart_internal_fn.classShape = function (d) {\n        return this.generateClass(CLASS.shape, d.index);\n    };\n    c3_chart_internal_fn.classShapes = function (d) {\n        return this.generateClass(CLASS.shapes, d.id);\n    };\n    c3_chart_internal_fn.classLine = function (d) {\n        return this.classShape(d) + this.generateClass(CLASS.line, d.id);\n    };\n    c3_chart_internal_fn.classLines = function (d) {\n        return this.classShapes(d) + this.generateClass(CLASS.lines, d.id);\n    };\n    c3_chart_internal_fn.classCircle = function (d) {\n        return this.classShape(d) + this.generateClass(CLASS.circle, d.index);\n    };\n    c3_chart_internal_fn.classCircles = function (d) {\n        return this.classShapes(d) + this.generateClass(CLASS.circles, d.id);\n    };\n    c3_chart_internal_fn.classBar = function (d) {\n        return this.classShape(d) + this.generateClass(CLASS.bar, d.index);\n    };\n    c3_chart_internal_fn.classBars = function (d) {\n        return this.classShapes(d) + this.generateClass(CLASS.bars, d.id);\n    };\n    c3_chart_internal_fn.classArc = function (d) {\n        return this.classShape(d.data) + this.generateClass(CLASS.arc, d.data.id);\n    };\n    c3_chart_internal_fn.classArcs = function (d) {\n        return this.classShapes(d.data) + this.generateClass(CLASS.arcs, d.data.id);\n    };\n    c3_chart_internal_fn.classArea = function (d) {\n        return this.classShape(d) + this.generateClass(CLASS.area, d.id);\n    };\n    c3_chart_internal_fn.classAreas = function (d) {\n        return this.classShapes(d) + this.generateClass(CLASS.areas, d.id);\n    };\n    c3_chart_internal_fn.classRegion = function (d, i) {\n        return this.generateClass(CLASS.region, i) + ' ' + ('class' in d ? d['class'] : '');\n    };\n    c3_chart_internal_fn.classEvent = function (d) {\n        return this.generateClass(CLASS.eventRect, d.index);\n    };\n    c3_chart_internal_fn.classTarget = function (id) {\n        var $$ = this;\n        var additionalClassSuffix = $$.config.data_classes[id], additionalClass = '';\n        if (additionalClassSuffix) {\n            additionalClass = ' ' + CLASS.target + '-' + additionalClassSuffix;\n        }\n        return $$.generateClass(CLASS.target, id) + additionalClass;\n    };\n    c3_chart_internal_fn.classFocus = function (d) {\n        return this.classFocused(d) + this.classDefocused(d);\n    };\n    c3_chart_internal_fn.classFocused = function (d) {\n        return ' ' + (this.focusedTargetIds.indexOf(d.id) >= 0 ? CLASS.focused : '');\n    };\n    c3_chart_internal_fn.classDefocused = function (d) {\n        return ' ' + (this.defocusedTargetIds.indexOf(d.id) >= 0 ? CLASS.defocused : '');\n    };\n    c3_chart_internal_fn.classChartText = function (d) {\n        return CLASS.chartText + this.classTarget(d.id);\n    };\n    c3_chart_internal_fn.classChartLine = function (d) {\n        return CLASS.chartLine + this.classTarget(d.id);\n    };\n    c3_chart_internal_fn.classChartBar = function (d) {\n        return CLASS.chartBar + this.classTarget(d.id);\n    };\n    c3_chart_internal_fn.classChartArc = function (d) {\n        return CLASS.chartArc + this.classTarget(d.data.id);\n    };\n    c3_chart_internal_fn.getTargetSelectorSuffix = function (targetId) {\n        return targetId || targetId === 0 ? ('-' + targetId).replace(/[\\s?!@#$%^&*()_=+,.<>'\":;\\[\\]\\/|~`{}\\\\]/g, '-') : '';\n    };\n    c3_chart_internal_fn.selectorTarget = function (id, prefix) {\n        return (prefix || '') + '.' + CLASS.target + this.getTargetSelectorSuffix(id);\n    };\n    c3_chart_internal_fn.selectorTargets = function (ids, prefix) {\n        var $$ = this;\n        ids = ids || [];\n        return ids.length ? ids.map(function (id) { return $$.selectorTarget(id, prefix); }) : null;\n    };\n    c3_chart_internal_fn.selectorLegend = function (id) {\n        return '.' + CLASS.legendItem + this.getTargetSelectorSuffix(id);\n    };\n    c3_chart_internal_fn.selectorLegends = function (ids) {\n        var $$ = this;\n        return ids && ids.length ? ids.map(function (id) { return $$.selectorLegend(id); }) : null;\n    };\n\n    var isValue = c3_chart_internal_fn.isValue = function (v) {\n        return v || v === 0;\n    },\n        isFunction = c3_chart_internal_fn.isFunction = function (o) {\n            return typeof o === 'function';\n        },\n        isString = c3_chart_internal_fn.isString = function (o) {\n            return typeof o === 'string';\n        },\n        isUndefined = c3_chart_internal_fn.isUndefined = function (v) {\n            return typeof v === 'undefined';\n        },\n        isDefined = c3_chart_internal_fn.isDefined = function (v) {\n            return typeof v !== 'undefined';\n        },\n        ceil10 = c3_chart_internal_fn.ceil10 = function (v) {\n            return Math.ceil(v / 10) * 10;\n        },\n        asHalfPixel = c3_chart_internal_fn.asHalfPixel = function (n) {\n            return Math.ceil(n) + 0.5;\n        },\n        diffDomain = c3_chart_internal_fn.diffDomain = function (d) {\n            return d[1] - d[0];\n        },\n        isEmpty = c3_chart_internal_fn.isEmpty = function (o) {\n            return !o || (isString(o) && o.length === 0) || (typeof o === 'object' && Object.keys(o).length === 0);\n        },\n        notEmpty = c3_chart_internal_fn.notEmpty = function (o) {\n            return Object.keys(o).length > 0;\n        },\n        getOption = c3_chart_internal_fn.getOption = function (options, key, defaultValue) {\n            return isDefined(options[key]) ? options[key] : defaultValue;\n        },\n        hasValue = c3_chart_internal_fn.hasValue = function (dict, value) {\n            var found = false;\n            Object.keys(dict).forEach(function (key) {\n                if (dict[key] === value) { found = true; }\n            });\n            return found;\n        },\n        getPathBox = c3_chart_internal_fn.getPathBox = function (path) {\n            var box = path.getBoundingClientRect(),\n                items = [path.pathSegList.getItem(0), path.pathSegList.getItem(1)],\n                minX = items[0].x, minY = Math.min(items[0].y, items[1].y);\n            return {x: minX, y: minY, width: box.width, height: box.height};\n        };\n\n    c3_chart_fn.focus = function (targetIds) {\n        var $$ = this.internal, candidates;\n\n        targetIds = $$.mapToTargetIds(targetIds);\n        candidates = $$.svg.selectAll($$.selectorTargets(targetIds.filter($$.isTargetToShow, $$))),\n\n        this.revert();\n        this.defocus();\n        candidates.classed(CLASS.focused, true).classed(CLASS.defocused, false);\n        if ($$.hasArcType()) {\n            $$.expandArc(targetIds);\n        }\n        $$.toggleFocusLegend(targetIds, true);\n\n        $$.focusedTargetIds = targetIds;\n        $$.defocusedTargetIds = $$.defocusedTargetIds.filter(function (id) {\n            return targetIds.indexOf(id) < 0;\n        });\n    };\n\n    c3_chart_fn.defocus = function (targetIds) {\n        var $$ = this.internal, candidates;\n\n        targetIds = $$.mapToTargetIds(targetIds);\n        candidates = $$.svg.selectAll($$.selectorTargets(targetIds.filter($$.isTargetToShow, $$))),\n\n        candidates.classed(CLASS.focused, false).classed(CLASS.defocused, true);\n        if ($$.hasArcType()) {\n            $$.unexpandArc(targetIds);\n        }\n        $$.toggleFocusLegend(targetIds, false);\n\n        $$.focusedTargetIds = $$.focusedTargetIds.filter(function (id) {\n            return targetIds.indexOf(id) < 0;\n        });\n        $$.defocusedTargetIds = targetIds;\n    };\n\n    c3_chart_fn.revert = function (targetIds) {\n        var $$ = this.internal, candidates;\n\n        targetIds = $$.mapToTargetIds(targetIds);\n        candidates = $$.svg.selectAll($$.selectorTargets(targetIds)); // should be for all targets\n\n        candidates.classed(CLASS.focused, false).classed(CLASS.defocused, false);\n        if ($$.hasArcType()) {\n            $$.unexpandArc(targetIds);\n        }\n        if ($$.config.legend_show) {\n            $$.showLegend(targetIds.filter($$.isLegendToShow.bind($$)));\n            $$.legend.selectAll($$.selectorLegends(targetIds))\n                .filter(function () {\n                    return $$.d3.select(this).classed(CLASS.legendItemFocused);\n                })\n                .classed(CLASS.legendItemFocused, false);\n        }\n\n        $$.focusedTargetIds = [];\n        $$.defocusedTargetIds = [];\n    };\n\n    c3_chart_fn.show = function (targetIds, options) {\n        var $$ = this.internal, targets;\n\n        targetIds = $$.mapToTargetIds(targetIds);\n        options = options || {};\n\n        $$.removeHiddenTargetIds(targetIds);\n        targets = $$.svg.selectAll($$.selectorTargets(targetIds));\n\n        targets.transition()\n            .style('opacity', 1, 'important')\n            .call($$.endall, function () {\n                targets.style('opacity', null).style('opacity', 1);\n            });\n\n        if (options.withLegend) {\n            $$.showLegend(targetIds);\n        }\n\n        $$.redraw({withUpdateOrgXDomain: true, withUpdateXDomain: true, withLegend: true});\n    };\n\n    c3_chart_fn.hide = function (targetIds, options) {\n        var $$ = this.internal, targets;\n\n        targetIds = $$.mapToTargetIds(targetIds);\n        options = options || {};\n\n        $$.addHiddenTargetIds(targetIds);\n        targets = $$.svg.selectAll($$.selectorTargets(targetIds));\n\n        targets.transition()\n            .style('opacity', 0, 'important')\n            .call($$.endall, function () {\n                targets.style('opacity', null).style('opacity', 0);\n            });\n\n        if (options.withLegend) {\n            $$.hideLegend(targetIds);\n        }\n\n        $$.redraw({withUpdateOrgXDomain: true, withUpdateXDomain: true, withLegend: true});\n    };\n\n    c3_chart_fn.toggle = function (targetIds, options) {\n        var that = this, $$ = this.internal;\n        $$.mapToTargetIds(targetIds).forEach(function (targetId) {\n            $$.isTargetToShow(targetId) ? that.hide(targetId, options) : that.show(targetId, options);\n        });\n    };\n\n    c3_chart_fn.zoom = function (domain) {\n        var $$ = this.internal;\n        if (domain) {\n            if ($$.isTimeSeries()) {\n                domain = domain.map(function (x) { return $$.parseDate(x); });\n            }\n            $$.brush.extent(domain);\n            $$.redraw({withUpdateXDomain: true, withY: $$.config.zoom_rescale});\n            $$.config.zoom_onzoom.call(this, $$.x.orgDomain());\n        }\n        return $$.brush.extent();\n    };\n    c3_chart_fn.zoom.enable = function (enabled) {\n        var $$ = this.internal;\n        $$.config.zoom_enabled = enabled;\n        $$.updateAndRedraw();\n    };\n    c3_chart_fn.unzoom = function () {\n        var $$ = this.internal;\n        $$.brush.clear().update();\n        $$.redraw({withUpdateXDomain: true});\n    };\n\n    c3_chart_fn.load = function (args) {\n        var $$ = this.internal, config = $$.config;\n        // update xs if specified\n        if (args.xs) {\n            $$.addXs(args.xs);\n        }\n        // update classes if exists\n        if ('classes' in args) {\n            Object.keys(args.classes).forEach(function (id) {\n                config.data_classes[id] = args.classes[id];\n            });\n        }\n        // update categories if exists\n        if ('categories' in args && $$.isCategorized()) {\n            config.axis_x_categories = args.categories;\n        }\n        // update axes if exists\n        if ('axes' in args) {\n            Object.keys(args.axes).forEach(function (id) {\n                config.data_axes[id] = args.axes[id];\n            });\n        }\n        // update colors if exists\n        if ('colors' in args) {\n            Object.keys(args.colors).forEach(function (id) {\n                config.data_colors[id] = args.colors[id];\n            });\n        }\n        // use cache if exists\n        if ('cacheIds' in args && $$.hasCaches(args.cacheIds)) {\n            $$.load($$.getCaches(args.cacheIds), args.done);\n            return;\n        }\n        // unload if needed\n        if ('unload' in args) {\n            // TODO: do not unload if target will load (included in url/rows/columns)\n            $$.unload($$.mapToTargetIds((typeof args.unload === 'boolean' && args.unload) ? null : args.unload), function () {\n                $$.loadFromArgs(args);\n            });\n        } else {\n            $$.loadFromArgs(args);\n        }\n    };\n\n    c3_chart_fn.unload = function (args) {\n        var $$ = this.internal;\n        args = args || {};\n        if (args instanceof Array) {\n            args = {ids: args};\n        } else if (typeof args === 'string') {\n            args = {ids: [args]};\n        }\n        $$.unload($$.mapToTargetIds(args.ids), function () {\n            $$.redraw({withUpdateOrgXDomain: true, withUpdateXDomain: true, withLegend: true});\n            if (args.done) { args.done(); }\n        });\n    };\n\n    c3_chart_fn.flow = function (args) {\n        var $$ = this.internal,\n            targets, data, notfoundIds = [], orgDataCount = $$.getMaxDataCount(),\n            dataCount, domain, baseTarget, baseValue, length = 0, tail = 0, diff, to;\n\n        if (args.json) {\n            data = $$.convertJsonToData(args.json, args.keys);\n        }\n        else if (args.rows) {\n            data = $$.convertRowsToData(args.rows);\n        }\n        else if (args.columns) {\n            data = $$.convertColumnsToData(args.columns);\n        }\n        else {\n            return;\n        }\n        targets = $$.convertDataToTargets(data, true);\n\n        // Update/Add data\n        $$.data.targets.forEach(function (t) {\n            var found = false, i, j;\n            for (i = 0; i < targets.length; i++) {\n                if (t.id === targets[i].id) {\n                    found = true;\n\n                    if (t.values[t.values.length - 1]) {\n                        tail = t.values[t.values.length - 1].index + 1;\n                    }\n                    length = targets[i].values.length;\n\n                    for (j = 0; j < length; j++) {\n                        targets[i].values[j].index = tail + j;\n                        if (!$$.isTimeSeries()) {\n                            targets[i].values[j].x = tail + j;\n                        }\n                    }\n                    t.values = t.values.concat(targets[i].values);\n\n                    targets.splice(i, 1);\n                    break;\n                }\n            }\n            if (!found) { notfoundIds.push(t.id); }\n        });\n\n        // Append null for not found targets\n        $$.data.targets.forEach(function (t) {\n            var i, j;\n            for (i = 0; i < notfoundIds.length; i++) {\n                if (t.id === notfoundIds[i]) {\n                    tail = t.values[t.values.length - 1].index + 1;\n                    for (j = 0; j < length; j++) {\n                        t.values.push({\n                            id: t.id,\n                            index: tail + j,\n                            x: $$.isTimeSeries() ? $$.getOtherTargetX(tail + j) : tail + j,\n                            value: null\n                        });\n                    }\n                }\n            }\n        });\n\n        // Generate null values for new target\n        if ($$.data.targets.length) {\n            targets.forEach(function (t) {\n                var i, missing = [];\n                for (i = $$.data.targets[0].values[0].index; i < tail; i++) {\n                    missing.push({\n                        id: t.id,\n                        index: i,\n                        x: $$.isTimeSeries() ? $$.getOtherTargetX(i) : i,\n                        value: null\n                    });\n                }\n                t.values.forEach(function (v) {\n                    v.index += tail;\n                    if (!$$.isTimeSeries()) {\n                        v.x += tail;\n                    }\n                });\n                t.values = missing.concat(t.values);\n            });\n        }\n        $$.data.targets = $$.data.targets.concat(targets); // add remained\n\n        // check data count because behavior needs to change when it's only one\n        dataCount = $$.getMaxDataCount();\n        baseTarget = $$.data.targets[0];\n        baseValue = baseTarget.values[0];\n\n        // Update length to flow if needed\n        if (isDefined(args.to)) {\n            length = 0;\n            to = $$.isTimeSeries() ? $$.parseDate(args.to) : args.to;\n            baseTarget.values.forEach(function (v) {\n                if (v.x < to) { length++; }\n            });\n        } else if (isDefined(args.length)) {\n            length = args.length;\n        }\n\n        // If only one data, update the domain to flow from left edge of the chart\n        if (!orgDataCount) {\n            if ($$.isTimeSeries()) {\n                if (baseTarget.values.length > 1) {\n                    diff = baseTarget.values[baseTarget.values.length - 1].x - baseValue.x;\n                } else {\n                    diff = baseValue.x - $$.getXDomain($$.data.targets)[0];\n                }\n            } else {\n                diff = 1;\n            }\n            domain = [baseValue.x - diff, baseValue.x];\n            $$.updateXDomain(null, true, true, false, domain);\n        } else if (orgDataCount === 1) {\n            if ($$.isTimeSeries()) {\n                diff = (baseTarget.values[baseTarget.values.length - 1].x - baseValue.x) / 2;\n                domain = [new Date(+baseValue.x - diff), new Date(+baseValue.x + diff)];\n                $$.updateXDomain(null, true, true, false, domain);\n            }\n        }\n\n        // Set targets\n        $$.updateTargets($$.data.targets);\n\n        // Redraw with new targets\n        $$.redraw({\n            flow: {\n                index: baseValue.index,\n                length: length,\n                duration: isValue(args.duration) ? args.duration : $$.config.transition_duration,\n                done: args.done,\n                orgDataCount: orgDataCount,\n            },\n            withLegend: true,\n            withTransition: orgDataCount > 1,\n            withTrimXDomain: false,\n            withUpdateXAxis: true,\n        });\n    };\n\n    c3_chart_internal_fn.generateFlow = function (args) {\n        var $$ = this, config = $$.config, d3 = $$.d3;\n\n        return function () {\n            var targets = args.targets,\n                flow = args.flow,\n                drawBar = args.drawBar,\n                drawLine = args.drawLine,\n                drawArea = args.drawArea,\n                cx = args.cx,\n                cy = args.cy,\n                xv = args.xv,\n                xForText = args.xForText,\n                yForText = args.yForText,\n                duration = args.duration;\n\n            var translateX, scaleX = 1, transform,\n                flowIndex = flow.index,\n                flowLength = flow.length,\n                flowStart = $$.getValueOnIndex($$.data.targets[0].values, flowIndex),\n                flowEnd = $$.getValueOnIndex($$.data.targets[0].values, flowIndex + flowLength),\n                orgDomain = $$.x.domain(), domain,\n                durationForFlow = flow.duration || duration,\n                done = flow.done || function () {},\n                wait = $$.generateWait();\n\n            var xgrid = $$.xgrid || d3.selectAll([]),\n                xgridLines = $$.xgridLines || d3.selectAll([]),\n                mainRegion = $$.mainRegion || d3.selectAll([]),\n                mainText = $$.mainText || d3.selectAll([]),\n                mainBar = $$.mainBar || d3.selectAll([]),\n                mainLine = $$.mainLine || d3.selectAll([]),\n                mainArea = $$.mainArea || d3.selectAll([]),\n                mainCircle = $$.mainCircle || d3.selectAll([]);\n\n            // set flag\n            $$.flowing = true;\n\n            // remove head data after rendered\n            $$.data.targets.forEach(function (d) {\n                d.values.splice(0, flowLength);\n            });\n\n            // update x domain to generate axis elements for flow\n            domain = $$.updateXDomain(targets, true, true);\n            // update elements related to x scale\n            if ($$.updateXGrid) { $$.updateXGrid(true); }\n\n            // generate transform to flow\n            if (!flow.orgDataCount) { // if empty\n                if ($$.data.targets[0].values.length !== 1) {\n                    translateX = $$.x(orgDomain[0]) - $$.x(domain[0]);\n                } else {\n                    if ($$.isTimeSeries()) {\n                        flowStart = $$.getValueOnIndex($$.data.targets[0].values, 0);\n                        flowEnd = $$.getValueOnIndex($$.data.targets[0].values, $$.data.targets[0].values.length - 1);\n                        translateX = $$.x(flowStart.x) - $$.x(flowEnd.x);\n                    } else {\n                        translateX = diffDomain(domain) / 2;\n                    }\n                }\n            } else if (flow.orgDataCount === 1 || flowStart.x === flowEnd.x) {\n                translateX = $$.x(orgDomain[0]) - $$.x(domain[0]);\n            } else {\n                if ($$.isTimeSeries()) {\n                    translateX = ($$.x(orgDomain[0]) - $$.x(domain[0]));\n                } else {\n                    translateX = ($$.x(flowStart.x) - $$.x(flowEnd.x));\n                }\n            }\n            scaleX = (diffDomain(orgDomain) / diffDomain(domain));\n            transform = 'translate(' + translateX + ',0) scale(' + scaleX + ',1)';\n\n            // hide tooltip\n            $$.hideXGridFocus();\n            $$.hideTooltip();\n\n            d3.transition().ease('linear').duration(durationForFlow).each(function () {\n                wait.add($$.axes.x.transition().call($$.xAxis));\n                wait.add(mainBar.transition().attr('transform', transform));\n                wait.add(mainLine.transition().attr('transform', transform));\n                wait.add(mainArea.transition().attr('transform', transform));\n                wait.add(mainCircle.transition().attr('transform', transform));\n                wait.add(mainText.transition().attr('transform', transform));\n                wait.add(mainRegion.filter($$.isRegionOnX).transition().attr('transform', transform));\n                wait.add(xgrid.transition().attr('transform', transform));\n                wait.add(xgridLines.transition().attr('transform', transform));\n            })\n            .call(wait, function () {\n                var i, shapes = [], texts = [], eventRects = [];\n\n                // remove flowed elements\n                if (flowLength) {\n                    for (i = 0; i < flowLength; i++) {\n                        shapes.push('.' + CLASS.shape + '-' + (flowIndex + i));\n                        texts.push('.' + CLASS.text + '-' + (flowIndex + i));\n                        eventRects.push('.' + CLASS.eventRect + '-' + (flowIndex + i));\n                    }\n                    $$.svg.selectAll('.' + CLASS.shapes).selectAll(shapes).remove();\n                    $$.svg.selectAll('.' + CLASS.texts).selectAll(texts).remove();\n                    $$.svg.selectAll('.' + CLASS.eventRects).selectAll(eventRects).remove();\n                    $$.svg.select('.' + CLASS.xgrid).remove();\n                }\n\n                // draw again for removing flowed elements and reverting attr\n                xgrid\n                    .attr('transform', null)\n                    .attr($$.xgridAttr);\n                xgridLines\n                    .attr('transform', null);\n                xgridLines.select('line')\n                    .attr(\"x1\", config.axis_rotated ? 0 : xv)\n                    .attr(\"x2\", config.axis_rotated ? $$.width : xv);\n                xgridLines.select('text')\n                    .attr(\"x\", config.axis_rotated ? $$.width : 0)\n                    .attr(\"y\", xv);\n                mainBar\n                    .attr('transform', null)\n                    .attr(\"d\", drawBar);\n                mainLine\n                    .attr('transform', null)\n                    .attr(\"d\", drawLine);\n                mainArea\n                    .attr('transform', null)\n                    .attr(\"d\", drawArea);\n                mainCircle\n                    .attr('transform', null)\n                    .attr(\"cx\", cx)\n                    .attr(\"cy\", cy);\n                mainText\n                    .attr('transform', null)\n                    .attr('x', xForText)\n                    .attr('y', yForText)\n                    .style('fill-opacity', $$.opacityForText.bind($$));\n                mainRegion\n                    .attr('transform', null);\n                mainRegion.select('rect').filter($$.isRegionOnX)\n                    .attr(\"x\", $$.regionX.bind($$))\n                    .attr(\"width\", $$.regionWidth.bind($$));\n\n                if (config.interaction_enabled) {\n                    $$.redrawEventRect();\n                }\n\n                // callback for end of flow\n                done();\n\n                $$.flowing = false;\n            });\n        };\n    };\n\n    c3_chart_fn.selected = function (targetId) {\n        var $$ = this.internal, d3 = $$.d3;\n        return d3.merge(\n            $$.main.selectAll('.' + CLASS.shapes + $$.getTargetSelectorSuffix(targetId)).selectAll('.' + CLASS.shape)\n                .filter(function () { return d3.select(this).classed(CLASS.SELECTED); })\n                .map(function (d) { return d.map(function (d) { var data = d.__data__; return data.data ? data.data : data; }); })\n        );\n    };\n    c3_chart_fn.select = function (ids, indices, resetOther) {\n        var $$ = this.internal, d3 = $$.d3, config = $$.config;\n        if (! config.data_selection_enabled) { return; }\n        $$.main.selectAll('.' + CLASS.shapes).selectAll('.' + CLASS.shape).each(function (d, i) {\n            var shape = d3.select(this), id = d.data ? d.data.id : d.id,\n                toggle = $$.getToggle(this, d).bind($$),\n                isTargetId = config.data_selection_grouped || !ids || ids.indexOf(id) >= 0,\n                isTargetIndex = !indices || indices.indexOf(i) >= 0,\n                isSelected = shape.classed(CLASS.SELECTED);\n            // line/area selection not supported yet\n            if (shape.classed(CLASS.line) || shape.classed(CLASS.area)) {\n                return;\n            }\n            if (isTargetId && isTargetIndex) {\n                if (config.data_selection_isselectable(d) && !isSelected) {\n                    toggle(true, shape.classed(CLASS.SELECTED, true), d, i);\n                }\n            } else if (isDefined(resetOther) && resetOther) {\n                if (isSelected) {\n                    toggle(false, shape.classed(CLASS.SELECTED, false), d, i);\n                }\n            }\n        });\n    };\n    c3_chart_fn.unselect = function (ids, indices) {\n        var $$ = this.internal, d3 = $$.d3, config = $$.config;\n        if (! config.data_selection_enabled) { return; }\n        $$.main.selectAll('.' + CLASS.shapes).selectAll('.' + CLASS.shape).each(function (d, i) {\n            var shape = d3.select(this), id = d.data ? d.data.id : d.id,\n                toggle = $$.getToggle(this, d).bind($$),\n                isTargetId = config.data_selection_grouped || !ids || ids.indexOf(id) >= 0,\n                isTargetIndex = !indices || indices.indexOf(i) >= 0,\n                isSelected = shape.classed(CLASS.SELECTED);\n            // line/area selection not supported yet\n            if (shape.classed(CLASS.line) || shape.classed(CLASS.area)) {\n                return;\n            }\n            if (isTargetId && isTargetIndex) {\n                if (config.data_selection_isselectable(d)) {\n                    if (isSelected) {\n                        toggle(false, shape.classed(CLASS.SELECTED, false), d, i);\n                    }\n                }\n            }\n        });\n    };\n\n    c3_chart_fn.transform = function (type, targetIds) {\n        var $$ = this.internal,\n            options = ['pie', 'donut'].indexOf(type) >= 0 ? {withTransform: true} : null;\n        $$.transformTo(targetIds, type, options);\n    };\n\n    c3_chart_internal_fn.transformTo = function (targetIds, type, optionsForRedraw) {\n        var $$ = this,\n            withTransitionForAxis = !$$.hasArcType(),\n            options = optionsForRedraw || {withTransitionForAxis: withTransitionForAxis};\n        options.withTransitionForTransform = false;\n        $$.transiting = false;\n        $$.setTargetType(targetIds, type);\n        $$.updateTargets($$.data.targets); // this is needed when transforming to arc\n        $$.updateAndRedraw(options);\n    };\n\n    c3_chart_fn.groups = function (groups) {\n        var $$ = this.internal, config = $$.config;\n        if (isUndefined(groups)) { return config.data_groups; }\n        config.data_groups = groups;\n        $$.redraw();\n        return config.data_groups;\n    };\n\n    c3_chart_fn.xgrids = function (grids) {\n        var $$ = this.internal, config = $$.config;\n        if (! grids) { return config.grid_x_lines; }\n        config.grid_x_lines = grids;\n        $$.redrawWithoutRescale();\n        return config.grid_x_lines;\n    };\n    c3_chart_fn.xgrids.add = function (grids) {\n        var $$ = this.internal;\n        return this.xgrids($$.config.grid_x_lines.concat(grids ? grids : []));\n    };\n    c3_chart_fn.xgrids.remove = function (params) { // TODO: multiple\n        var $$ = this.internal;\n        $$.removeGridLines(params, true);\n    };\n\n    c3_chart_fn.ygrids = function (grids) {\n        var $$ = this.internal, config = $$.config;\n        if (! grids) { return config.grid_y_lines; }\n        config.grid_y_lines = grids;\n        $$.redrawWithoutRescale();\n        return config.grid_y_lines;\n    };\n    c3_chart_fn.ygrids.add = function (grids) {\n        var $$ = this.internal;\n        return this.ygrids($$.config.grid_y_lines.concat(grids ? grids : []));\n    };\n    c3_chart_fn.ygrids.remove = function (params) { // TODO: multiple\n        var $$ = this.internal;\n        $$.removeGridLines(params, false);\n    };\n\n    c3_chart_fn.regions = function (regions) {\n        var $$ = this.internal, config = $$.config;\n        if (!regions) { return config.regions; }\n        config.regions = regions;\n        $$.redrawWithoutRescale();\n        return config.regions;\n    };\n    c3_chart_fn.regions.add = function (regions) {\n        var $$ = this.internal, config = $$.config;\n        if (!regions) { return config.regions; }\n        config.regions = config.regions.concat(regions);\n        $$.redrawWithoutRescale();\n        return config.regions;\n    };\n    c3_chart_fn.regions.remove = function (options) {\n        var $$ = this.internal, config = $$.config,\n            duration, classes, regions;\n\n        options = options || {};\n        duration = $$.getOption(options, \"duration\", config.transition_duration);\n        classes = $$.getOption(options, \"classes\", [CLASS.region]);\n\n        regions = $$.main.select('.' + CLASS.regions).selectAll(classes.map(function (c) { return '.' + c; }));\n        (duration ? regions.transition().duration(duration) : regions)\n            .style('opacity', 0)\n            .remove();\n\n        config.regions = config.regions.filter(function (region) {\n            var found = false;\n            if (!region['class']) {\n                return true;\n            }\n            region['class'].split(' ').forEach(function (c) {\n                if (classes.indexOf(c) >= 0) { found = true; }\n            });\n            return !found;\n        });\n\n        return config.regions;\n    };\n\n    c3_chart_fn.data = function (targetIds) {\n        var targets = this.internal.data.targets;\n        return typeof targetIds === 'undefined' ? targets : targets.filter(function (t) {\n            return [].concat(targetIds).indexOf(t.id) >= 0;\n        });\n    };\n    c3_chart_fn.data.shown = function (targetIds) {\n        return this.internal.filterTargetsToShow(this.data(targetIds));\n    };\n    c3_chart_fn.data.values = function (targetId) {\n        var targets, values = null;\n        if (targetId) {\n            targets = this.data(targetId);\n            values = targets[0] ? targets[0].values.map(function (d) { return d.value; }) : null;\n        }\n        return values;\n    };\n    c3_chart_fn.data.names = function (names) {\n        this.internal.clearLegendItemTextBoxCache();\n        return this.internal.updateDataAttributes('names', names);\n    };\n    c3_chart_fn.data.colors = function (colors) {\n        return this.internal.updateDataAttributes('colors', colors);\n    };\n    c3_chart_fn.data.axes = function (axes) {\n        return this.internal.updateDataAttributes('axes', axes);\n    };\n\n    c3_chart_fn.category = function (i, category) {\n        var $$ = this.internal, config = $$.config;\n        if (arguments.length > 1) {\n            config.axis_x_categories[i] = category;\n            $$.redraw();\n        }\n        return config.axis_x_categories[i];\n    };\n    c3_chart_fn.categories = function (categories) {\n        var $$ = this.internal, config = $$.config;\n        if (!arguments.length) { return config.axis_x_categories; }\n        config.axis_x_categories = categories;\n        $$.redraw();\n        return config.axis_x_categories;\n    };\n\n    // TODO: fix\n    c3_chart_fn.color = function (id) {\n        var $$ = this.internal;\n        return $$.color(id); // more patterns\n    };\n\n    c3_chart_fn.x = function (x) {\n        var $$ = this.internal;\n        if (arguments.length) {\n            $$.updateTargetX($$.data.targets, x);\n            $$.redraw({withUpdateOrgXDomain: true, withUpdateXDomain: true});\n        }\n        return $$.data.xs;\n    };\n    c3_chart_fn.xs = function (xs) {\n        var $$ = this.internal;\n        if (arguments.length) {\n            $$.updateTargetXs($$.data.targets, xs);\n            $$.redraw({withUpdateOrgXDomain: true, withUpdateXDomain: true});\n        }\n        return $$.data.xs;\n    };\n\n    c3_chart_fn.axis = function () {};\n    c3_chart_fn.axis.labels = function (labels) {\n        var $$ = this.internal;\n        if (arguments.length) {\n            Object.keys(labels).forEach(function (axisId) {\n                $$.axis.setLabelText(axisId, labels[axisId]);\n            });\n            $$.axis.updateLabels();\n        }\n        // TODO: return some values?\n    };\n    c3_chart_fn.axis.max = function (max) {\n        var $$ = this.internal, config = $$.config;\n        if (arguments.length) {\n            if (typeof max === 'object') {\n                if (isValue(max.x)) { config.axis_x_max = max.x; }\n                if (isValue(max.y)) { config.axis_y_max = max.y; }\n                if (isValue(max.y2)) { config.axis_y2_max = max.y2; }\n            } else {\n                config.axis_y_max = config.axis_y2_max = max;\n            }\n            $$.redraw({withUpdateOrgXDomain: true, withUpdateXDomain: true});\n        } else {\n            return {\n                x: config.axis_x_max,\n                y: config.axis_y_max,\n                y2: config.axis_y2_max\n            };\n        }\n    };\n    c3_chart_fn.axis.min = function (min) {\n        var $$ = this.internal, config = $$.config;\n        if (arguments.length) {\n            if (typeof min === 'object') {\n                if (isValue(min.x)) { config.axis_x_min = min.x; }\n                if (isValue(min.y)) { config.axis_y_min = min.y; }\n                if (isValue(min.y2)) { config.axis_y2_min = min.y2; }\n            } else {\n                config.axis_y_min = config.axis_y2_min = min;\n            }\n            $$.redraw({withUpdateOrgXDomain: true, withUpdateXDomain: true});\n        } else {\n            return {\n                x: config.axis_x_min,\n                y: config.axis_y_min,\n                y2: config.axis_y2_min\n            };\n        }\n    };\n    c3_chart_fn.axis.range = function (range) {\n        if (arguments.length) {\n            if (isDefined(range.max)) { this.axis.max(range.max); }\n            if (isDefined(range.min)) { this.axis.min(range.min); }\n        } else {\n            return {\n                max: this.axis.max(),\n                min: this.axis.min()\n            };\n        }\n    };\n\n    c3_chart_fn.legend = function () {};\n    c3_chart_fn.legend.show = function (targetIds) {\n        var $$ = this.internal;\n        $$.showLegend($$.mapToTargetIds(targetIds));\n        $$.updateAndRedraw({withLegend: true});\n    };\n    c3_chart_fn.legend.hide = function (targetIds) {\n        var $$ = this.internal;\n        $$.hideLegend($$.mapToTargetIds(targetIds));\n        $$.updateAndRedraw({withLegend: true});\n    };\n\n    c3_chart_fn.resize = function (size) {\n        var $$ = this.internal, config = $$.config;\n        config.size_width = size ? size.width : null;\n        config.size_height = size ? size.height : null;\n        this.flush();\n    };\n\n    c3_chart_fn.flush = function () {\n        var $$ = this.internal;\n        $$.updateAndRedraw({withLegend: true, withTransition: false, withTransitionForTransform: false});\n    };\n\n    c3_chart_fn.destroy = function () {\n        var $$ = this.internal;\n\n        window.clearInterval($$.intervalForObserveInserted);\n        window.onresize = null;\n\n        $$.selectChart.classed('c3', false).html(\"\");\n\n        // MEMO: this is needed because the reference of some elements will not be released, then memory leak will happen.\n        Object.keys($$).forEach(function (key) {\n            $$[key] = null;\n        });\n\n        return null;\n    };\n\n    c3_chart_fn.tooltip = function () {};\n    c3_chart_fn.tooltip.show = function (args) {\n        var $$ = this.internal, index, mouse;\n\n        // determine mouse position on the chart\n        if (args.mouse) {\n            mouse = args.mouse;\n        }\n\n        // determine focus data\n        if (args.data) {\n            if ($$.isMultipleX()) {\n                // if multiple xs, target point will be determined by mouse\n                mouse = [$$.x(args.data.x), $$.getYScale(args.data.id)(args.data.value)];\n                index = null;\n            } else {\n                // TODO: when tooltip_grouped = false\n                index = isValue(args.data.index) ? args.data.index : $$.getIndexByX(args.data.x);\n            }\n        }\n        else if (typeof args.x !== 'undefined') {\n            index = $$.getIndexByX(args.x);\n        }\n        else if (typeof args.index !== 'undefined') {\n            index = args.index;\n        }\n\n        // emulate mouse events to show\n        $$.dispatchEvent('mouseover', index, mouse);\n        $$.dispatchEvent('mousemove', index, mouse);\n    };\n    c3_chart_fn.tooltip.hide = function () {\n        // TODO: get target data by checking the state of focus\n        this.internal.dispatchEvent('mouseout', 0);\n    };\n\n    // Features:\n    // 1. category axis\n    // 2. ceil values of translate/x/y to int for half pixel antialiasing\n    // 3. multiline tick text\n    var tickTextCharSize;\n    function c3_axis(d3, params) {\n        var scale = d3.scale.linear(), orient = \"bottom\", innerTickSize = 6, outerTickSize, tickPadding = 3, tickValues = null, tickFormat, tickArguments;\n\n        var tickOffset = 0, tickCulling = true, tickCentered;\n\n        params = params || {};\n        outerTickSize = params.withOuterTick ? 6 : 0;\n\n        function axisX(selection, x) {\n            selection.attr(\"transform\", function (d) {\n                return \"translate(\" + Math.ceil(x(d) + tickOffset) + \", 0)\";\n            });\n        }\n        function axisY(selection, y) {\n            selection.attr(\"transform\", function (d) {\n                return \"translate(0,\" + Math.ceil(y(d)) + \")\";\n            });\n        }\n        function scaleExtent(domain) {\n            var start = domain[0], stop = domain[domain.length - 1];\n            return start < stop ? [ start, stop ] : [ stop, start ];\n        }\n        function generateTicks(scale) {\n            var i, domain, ticks = [];\n            if (scale.ticks) {\n                return scale.ticks.apply(scale, tickArguments);\n            }\n            domain = scale.domain();\n            for (i = Math.ceil(domain[0]); i < domain[1]; i++) {\n                ticks.push(i);\n            }\n            if (ticks.length > 0 && ticks[0] > 0) {\n                ticks.unshift(ticks[0] - (ticks[1] - ticks[0]));\n            }\n            return ticks;\n        }\n        function copyScale() {\n            var newScale = scale.copy(), domain;\n            if (params.isCategory) {\n                domain = scale.domain();\n                newScale.domain([domain[0], domain[1] - 1]);\n            }\n            return newScale;\n        }\n        function textFormatted(v) {\n            var formatted = tickFormat ? tickFormat(v) : v;\n            return typeof formatted !== 'undefined' ? formatted : '';\n        }\n        function getSizeFor1Char(tick) {\n            if (tickTextCharSize) {\n                return tickTextCharSize;\n            }\n            var size = {\n                h: 11.5,\n                w: 5.5\n            };\n            tick.select('text').text(textFormatted).each(function (d) {\n                var box = this.getBoundingClientRect(),\n                    text = textFormatted(d),\n                    h = box.height,\n                    w = text ? (box.width / text.length) : undefined;\n                if (h && w) {\n                    size.h = h;\n                    size.w = w;\n                }\n            }).text('');\n            tickTextCharSize = size;\n            return size;\n        }\n        function transitionise(selection) {\n            return params.withoutTransition ? selection : d3.transition(selection);\n        }\n        function axis(g) {\n            g.each(function () {\n                var g = axis.g = d3.select(this);\n\n                var scale0 = this.__chart__ || scale, scale1 = this.__chart__ = copyScale();\n\n                var ticks = tickValues ? tickValues : generateTicks(scale1),\n                    tick = g.selectAll(\".tick\").data(ticks, scale1),\n                    tickEnter = tick.enter().insert(\"g\", \".domain\").attr(\"class\", \"tick\").style(\"opacity\", 1e-6),\n                    // MEMO: No exit transition. The reason is this transition affects max tick width calculation because old tick will be included in the ticks.\n                    tickExit = tick.exit().remove(),\n                    tickUpdate = transitionise(tick).style(\"opacity\", 1),\n                    tickTransform, tickX, tickY;\n\n                var range = scale.rangeExtent ? scale.rangeExtent() : scaleExtent(scale.range()),\n                    path = g.selectAll(\".domain\").data([ 0 ]),\n                    pathUpdate = (path.enter().append(\"path\").attr(\"class\", \"domain\"), transitionise(path));\n                tickEnter.append(\"line\");\n                tickEnter.append(\"text\");\n\n                var lineEnter = tickEnter.select(\"line\"),\n                    lineUpdate = tickUpdate.select(\"line\"),\n                    textEnter = tickEnter.select(\"text\"),\n                    textUpdate = tickUpdate.select(\"text\");\n\n                if (params.isCategory) {\n                    tickOffset = Math.ceil((scale1(1) - scale1(0)) / 2);\n                    tickX = tickCentered ? 0 : tickOffset;\n                    tickY = tickCentered ? tickOffset : 0;\n                } else {\n                    tickOffset = tickX = 0;\n                }\n\n                var text, tspan, sizeFor1Char = getSizeFor1Char(g.select('.tick')), counts = [];\n                var tickLength = Math.max(innerTickSize, 0) + tickPadding,\n                    isVertical = orient === 'left' || orient === 'right';\n\n                // this should be called only when category axis\n                function splitTickText(d, maxWidth) {\n                    var tickText = textFormatted(d),\n                        subtext, spaceIndex, textWidth, splitted = [];\n\n                    if (Object.prototype.toString.call(tickText) === \"[object Array]\") {\n                        return tickText;\n                    }\n\n                    if (!maxWidth || maxWidth <= 0) {\n                        maxWidth = isVertical ? 95 : params.isCategory ? (Math.ceil(scale1(ticks[1]) - scale1(ticks[0])) - 12) : 110;\n                    }\n\n                    function split(splitted, text) {\n                        spaceIndex = undefined;\n                        for (var i = 1; i < text.length; i++) {\n                            if (text.charAt(i) === ' ') {\n                                spaceIndex = i;\n                            }\n                            subtext = text.substr(0, i + 1);\n                            textWidth = sizeFor1Char.w * subtext.length;\n                            // if text width gets over tick width, split by space index or crrent index\n                            if (maxWidth < textWidth) {\n                                return split(\n                                    splitted.concat(text.substr(0, spaceIndex ? spaceIndex : i)),\n                                    text.slice(spaceIndex ? spaceIndex + 1 : i)\n                                );\n                            }\n                        }\n                        return splitted.concat(text);\n                    }\n\n                    return split(splitted, tickText + \"\");\n                }\n\n                function tspanDy(d, i) {\n                    var dy = sizeFor1Char.h;\n                    if (i === 0) {\n                        if (orient === 'left' || orient === 'right') {\n                            dy = -((counts[d.index] - 1) * (sizeFor1Char.h / 2) - 3);\n                        } else {\n                            dy = \".71em\";\n                        }\n                    }\n                    return dy;\n                }\n\n                function tickSize(d) {\n                    var tickPosition = scale(d) + (tickCentered ? 0 : tickOffset);\n                    return range[0] < tickPosition && tickPosition < range[1] ? innerTickSize : 0;\n                }\n\n                text = tick.select(\"text\");\n                tspan = text.selectAll('tspan')\n                    .data(function (d, i) {\n                        var splitted = params.tickMultiline ? splitTickText(d, params.tickWidth) : [].concat(textFormatted(d));\n                        counts[i] = splitted.length;\n                        return splitted.map(function (s) {\n                            return { index: i, splitted: s };\n                        });\n                    });\n                tspan.enter().append('tspan');\n                tspan.exit().remove();\n                tspan.text(function (d) { return d.splitted; });\n\n                var rotate = params.tickTextRotate;\n\n                function textAnchorForText(rotate) {\n                    if (!rotate) {\n                        return 'middle';\n                    }\n                    return rotate > 0 ? \"start\" : \"end\";\n                }\n                function textTransform(rotate) {\n                    if (!rotate) {\n                        return '';\n                    }\n                    return \"rotate(\" + rotate + \")\";\n                }\n                function dxForText(rotate) {\n                    if (!rotate) {\n                        return 0;\n                    }\n                    return 8 * Math.sin(Math.PI * (rotate / 180));\n                }\n                function yForText(rotate) {\n                    if (!rotate) {\n                        return tickLength;\n                    }\n                    return 11.5 - 2.5 * (rotate / 15) * (rotate > 0 ? 1 : -1);\n                }\n\n                switch (orient) {\n                case \"bottom\":\n                    {\n                        tickTransform = axisX;\n                        lineEnter.attr(\"y2\", innerTickSize);\n                        textEnter.attr(\"y\", tickLength);\n                        lineUpdate.attr(\"x1\", tickX).attr(\"x2\", tickX).attr(\"y2\", tickSize);\n                        textUpdate.attr(\"x\", 0).attr(\"y\", yForText(rotate))\n                            .style(\"text-anchor\", textAnchorForText(rotate))\n                            .attr(\"transform\", textTransform(rotate));\n                        tspan.attr('x', 0).attr(\"dy\", tspanDy).attr('dx', dxForText(rotate));\n                        pathUpdate.attr(\"d\", \"M\" + range[0] + \",\" + outerTickSize + \"V0H\" + range[1] + \"V\" + outerTickSize);\n                        break;\n                    }\n                case \"top\":\n                    {\n                        // TODO: rotated tick text\n                        tickTransform = axisX;\n                        lineEnter.attr(\"y2\", -innerTickSize);\n                        textEnter.attr(\"y\", -tickLength);\n                        lineUpdate.attr(\"x2\", 0).attr(\"y2\", -innerTickSize);\n                        textUpdate.attr(\"x\", 0).attr(\"y\", -tickLength);\n                        text.style(\"text-anchor\", \"middle\");\n                        tspan.attr('x', 0).attr(\"dy\", \"0em\");\n                        pathUpdate.attr(\"d\", \"M\" + range[0] + \",\" + -outerTickSize + \"V0H\" + range[1] + \"V\" + -outerTickSize);\n                        break;\n                    }\n                case \"left\":\n                    {\n                        tickTransform = axisY;\n                        lineEnter.attr(\"x2\", -innerTickSize);\n                        textEnter.attr(\"x\", -tickLength);\n                        lineUpdate.attr(\"x2\", -innerTickSize).attr(\"y1\", tickY).attr(\"y2\", tickY);\n                        textUpdate.attr(\"x\", -tickLength).attr(\"y\", tickOffset);\n                        text.style(\"text-anchor\", \"end\");\n                        tspan.attr('x', -tickLength).attr(\"dy\", tspanDy);\n                        pathUpdate.attr(\"d\", \"M\" + -outerTickSize + \",\" + range[0] + \"H0V\" + range[1] + \"H\" + -outerTickSize);\n                        break;\n                    }\n                case \"right\":\n                    {\n                        tickTransform = axisY;\n                        lineEnter.attr(\"x2\", innerTickSize);\n                        textEnter.attr(\"x\", tickLength);\n                        lineUpdate.attr(\"x2\", innerTickSize).attr(\"y2\", 0);\n                        textUpdate.attr(\"x\", tickLength).attr(\"y\", 0);\n                        text.style(\"text-anchor\", \"start\");\n                        tspan.attr('x', tickLength).attr(\"dy\", tspanDy);\n                        pathUpdate.attr(\"d\", \"M\" + outerTickSize + \",\" + range[0] + \"H0V\" + range[1] + \"H\" + outerTickSize);\n                        break;\n                    }\n                }\n                if (scale1.rangeBand) {\n                    var x = scale1, dx = x.rangeBand() / 2;\n                    scale0 = scale1 = function (d) {\n                        return x(d) + dx;\n                    };\n                } else if (scale0.rangeBand) {\n                    scale0 = scale1;\n                } else {\n                    tickExit.call(tickTransform, scale1);\n                }\n                tickEnter.call(tickTransform, scale0);\n                tickUpdate.call(tickTransform, scale1);\n            });\n        }\n        axis.scale = function (x) {\n            if (!arguments.length) { return scale; }\n            scale = x;\n            return axis;\n        };\n        axis.orient = function (x) {\n            if (!arguments.length) { return orient; }\n            orient = x in {top: 1, right: 1, bottom: 1, left: 1} ? x + \"\" : \"bottom\";\n            return axis;\n        };\n        axis.tickFormat = function (format) {\n            if (!arguments.length) { return tickFormat; }\n            tickFormat = format;\n            return axis;\n        };\n        axis.tickCentered = function (isCentered) {\n            if (!arguments.length) { return tickCentered; }\n            tickCentered = isCentered;\n            return axis;\n        };\n        axis.tickOffset = function () {\n            return tickOffset;\n        };\n        axis.tickInterval = function () {\n            var interval, length;\n            if (params.isCategory) {\n                interval = tickOffset * 2;\n            }\n            else {\n                length = axis.g.select('path.domain').node().getTotalLength() - outerTickSize * 2;\n                interval = length / axis.g.selectAll('line').size();\n            }\n            return interval === Infinity ? 0 : interval;\n        };\n        axis.ticks = function () {\n            if (!arguments.length) { return tickArguments; }\n            tickArguments = arguments;\n            return axis;\n        };\n        axis.tickCulling = function (culling) {\n            if (!arguments.length) { return tickCulling; }\n            tickCulling = culling;\n            return axis;\n        };\n        axis.tickValues = function (x) {\n            if (typeof x === 'function') {\n                tickValues = function () {\n                    return x(scale.domain());\n                };\n            }\n            else {\n                if (!arguments.length) { return tickValues; }\n                tickValues = x;\n            }\n            return axis;\n        };\n        return axis;\n    }\n\n    c3_chart_internal_fn.isSafari = function () {\n        var ua = window.navigator.userAgent;\n        return ua.indexOf('Safari') >= 0 && ua.indexOf('Chrome') < 0;\n    };\n    c3_chart_internal_fn.isChrome = function () {\n        var ua = window.navigator.userAgent;\n        return ua.indexOf('Chrome') >= 0;\n    };\n\n    // PhantomJS doesn't have support for Function.prototype.bind, which has caused confusion. Use\n    // this polyfill to avoid the confusion.\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind#Polyfill\n\n    if (!Function.prototype.bind) {\n      Function.prototype.bind = function(oThis) {\n        if (typeof this !== 'function') {\n          // closest thing possible to the ECMAScript 5\n          // internal IsCallable function\n          throw new TypeError('Function.prototype.bind - what is trying to be bound is not callable');\n        }\n\n        var aArgs   = Array.prototype.slice.call(arguments, 1),\n            fToBind = this,\n            fNOP    = function() {},\n            fBound  = function() {\n              return fToBind.apply(this instanceof fNOP ? this : oThis, aArgs.concat(Array.prototype.slice.call(arguments)));\n            };\n\n        fNOP.prototype = this.prototype;\n        fBound.prototype = new fNOP();\n\n        return fBound;\n      };\n    }\n\n    if (typeof define === 'function' && define.amd) {\n        define(\"c3\", [\"d3\"], c3);\n    } else if ('undefined' !== typeof exports && 'undefined' !== typeof module) {\n        module.exports = c3;\n    } else {\n        window.c3 = c3;\n    }\n\n})(window);\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/c3/c3.js\n ** module id = 1356\n ** module chunks = 4\n **/","!function() {\n  var d3 = {\n    version: \"3.5.0\"\n  };\n  if (!Date.now) Date.now = function() {\n    return +new Date();\n  };\n  var d3_arraySlice = [].slice, d3_array = function(list) {\n    return d3_arraySlice.call(list);\n  };\n  var d3_document = document, d3_documentElement = d3_document.documentElement, d3_window = window;\n  try {\n    d3_array(d3_documentElement.childNodes)[0].nodeType;\n  } catch (e) {\n    d3_array = function(list) {\n      var i = list.length, array = new Array(i);\n      while (i--) array[i] = list[i];\n      return array;\n    };\n  }\n  try {\n    d3_document.createElement(\"div\").style.setProperty(\"opacity\", 0, \"\");\n  } catch (error) {\n    var d3_element_prototype = d3_window.Element.prototype, d3_element_setAttribute = d3_element_prototype.setAttribute, d3_element_setAttributeNS = d3_element_prototype.setAttributeNS, d3_style_prototype = d3_window.CSSStyleDeclaration.prototype, d3_style_setProperty = d3_style_prototype.setProperty;\n    d3_element_prototype.setAttribute = function(name, value) {\n      d3_element_setAttribute.call(this, name, value + \"\");\n    };\n    d3_element_prototype.setAttributeNS = function(space, local, value) {\n      d3_element_setAttributeNS.call(this, space, local, value + \"\");\n    };\n    d3_style_prototype.setProperty = function(name, value, priority) {\n      d3_style_setProperty.call(this, name, value + \"\", priority);\n    };\n  }\n  d3.ascending = d3_ascending;\n  function d3_ascending(a, b) {\n    return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;\n  }\n  d3.descending = function(a, b) {\n    return b < a ? -1 : b > a ? 1 : b >= a ? 0 : NaN;\n  };\n  d3.min = function(array, f) {\n    var i = -1, n = array.length, a, b;\n    if (arguments.length === 1) {\n      while (++i < n) if ((b = array[i]) != null && b >= b) {\n        a = b;\n        break;\n      }\n      while (++i < n) if ((b = array[i]) != null && a > b) a = b;\n    } else {\n      while (++i < n) if ((b = f.call(array, array[i], i)) != null && b >= b) {\n        a = b;\n        break;\n      }\n      while (++i < n) if ((b = f.call(array, array[i], i)) != null && a > b) a = b;\n    }\n    return a;\n  };\n  d3.max = function(array, f) {\n    var i = -1, n = array.length, a, b;\n    if (arguments.length === 1) {\n      while (++i < n) if ((b = array[i]) != null && b >= b) {\n        a = b;\n        break;\n      }\n      while (++i < n) if ((b = array[i]) != null && b > a) a = b;\n    } else {\n      while (++i < n) if ((b = f.call(array, array[i], i)) != null && b >= b) {\n        a = b;\n        break;\n      }\n      while (++i < n) if ((b = f.call(array, array[i], i)) != null && b > a) a = b;\n    }\n    return a;\n  };\n  d3.extent = function(array, f) {\n    var i = -1, n = array.length, a, b, c;\n    if (arguments.length === 1) {\n      while (++i < n) if ((b = array[i]) != null && b >= b) {\n        a = c = b;\n        break;\n      }\n      while (++i < n) if ((b = array[i]) != null) {\n        if (a > b) a = b;\n        if (c < b) c = b;\n      }\n    } else {\n      while (++i < n) if ((b = f.call(array, array[i], i)) != null && b >= b) {\n        a = c = b;\n        break;\n      }\n      while (++i < n) if ((b = f.call(array, array[i], i)) != null) {\n        if (a > b) a = b;\n        if (c < b) c = b;\n      }\n    }\n    return [ a, c ];\n  };\n  function d3_number(x) {\n    return x === null ? NaN : +x;\n  }\n  function d3_numeric(x) {\n    return !isNaN(x);\n  }\n  d3.sum = function(array, f) {\n    var s = 0, n = array.length, a, i = -1;\n    if (arguments.length === 1) {\n      while (++i < n) if (d3_numeric(a = +array[i])) s += a;\n    } else {\n      while (++i < n) if (d3_numeric(a = +f.call(array, array[i], i))) s += a;\n    }\n    return s;\n  };\n  d3.mean = function(array, f) {\n    var s = 0, n = array.length, a, i = -1, j = n;\n    if (arguments.length === 1) {\n      while (++i < n) if (d3_numeric(a = d3_number(array[i]))) s += a; else --j;\n    } else {\n      while (++i < n) if (d3_numeric(a = d3_number(f.call(array, array[i], i)))) s += a; else --j;\n    }\n    if (j) return s / j;\n  };\n  d3.quantile = function(values, p) {\n    var H = (values.length - 1) * p + 1, h = Math.floor(H), v = +values[h - 1], e = H - h;\n    return e ? v + e * (values[h] - v) : v;\n  };\n  d3.median = function(array, f) {\n    var numbers = [], n = array.length, a, i = -1;\n    if (arguments.length === 1) {\n      while (++i < n) if (d3_numeric(a = d3_number(array[i]))) numbers.push(a);\n    } else {\n      while (++i < n) if (d3_numeric(a = d3_number(f.call(array, array[i], i)))) numbers.push(a);\n    }\n    if (numbers.length) return d3.quantile(numbers.sort(d3_ascending), .5);\n  };\n  function d3_bisector(compare) {\n    return {\n      left: function(a, x, lo, hi) {\n        if (arguments.length < 3) lo = 0;\n        if (arguments.length < 4) hi = a.length;\n        while (lo < hi) {\n          var mid = lo + hi >>> 1;\n          if (compare(a[mid], x) < 0) lo = mid + 1; else hi = mid;\n        }\n        return lo;\n      },\n      right: function(a, x, lo, hi) {\n        if (arguments.length < 3) lo = 0;\n        if (arguments.length < 4) hi = a.length;\n        while (lo < hi) {\n          var mid = lo + hi >>> 1;\n          if (compare(a[mid], x) > 0) hi = mid; else lo = mid + 1;\n        }\n        return lo;\n      }\n    };\n  }\n  var d3_bisect = d3_bisector(d3_ascending);\n  d3.bisectLeft = d3_bisect.left;\n  d3.bisect = d3.bisectRight = d3_bisect.right;\n  d3.bisector = function(f) {\n    return d3_bisector(f.length === 1 ? function(d, x) {\n      return d3_ascending(f(d), x);\n    } : f);\n  };\n  d3.shuffle = function(array, i0, i1) {\n    if ((m = arguments.length) < 3) {\n      i1 = array.length;\n      if (m < 2) i0 = 0;\n    }\n    var m = i1 - i0, t, i;\n    while (m) {\n      i = Math.random() * m-- | 0;\n      t = array[m + i0], array[m + i0] = array[i + i0], array[i + i0] = t;\n    }\n    return array;\n  };\n  d3.permute = function(array, indexes) {\n    var i = indexes.length, permutes = new Array(i);\n    while (i--) permutes[i] = array[indexes[i]];\n    return permutes;\n  };\n  d3.pairs = function(array) {\n    var i = 0, n = array.length - 1, p0, p1 = array[0], pairs = new Array(n < 0 ? 0 : n);\n    while (i < n) pairs[i] = [ p0 = p1, p1 = array[++i] ];\n    return pairs;\n  };\n  d3.zip = function() {\n    if (!(n = arguments.length)) return [];\n    for (var i = -1, m = d3.min(arguments, d3_zipLength), zips = new Array(m); ++i < m; ) {\n      for (var j = -1, n, zip = zips[i] = new Array(n); ++j < n; ) {\n        zip[j] = arguments[j][i];\n      }\n    }\n    return zips;\n  };\n  function d3_zipLength(d) {\n    return d.length;\n  }\n  d3.transpose = function(matrix) {\n    return d3.zip.apply(d3, matrix);\n  };\n  d3.keys = function(map) {\n    var keys = [];\n    for (var key in map) keys.push(key);\n    return keys;\n  };\n  d3.values = function(map) {\n    var values = [];\n    for (var key in map) values.push(map[key]);\n    return values;\n  };\n  d3.entries = function(map) {\n    var entries = [];\n    for (var key in map) entries.push({\n      key: key,\n      value: map[key]\n    });\n    return entries;\n  };\n  d3.merge = function(arrays) {\n    var n = arrays.length, m, i = -1, j = 0, merged, array;\n    while (++i < n) j += arrays[i].length;\n    merged = new Array(j);\n    while (--n >= 0) {\n      array = arrays[n];\n      m = array.length;\n      while (--m >= 0) {\n        merged[--j] = array[m];\n      }\n    }\n    return merged;\n  };\n  var abs = Math.abs;\n  d3.range = function(start, stop, step) {\n    if (arguments.length < 3) {\n      step = 1;\n      if (arguments.length < 2) {\n        stop = start;\n        start = 0;\n      }\n    }\n    if ((stop - start) / step === Infinity) throw new Error(\"infinite range\");\n    var range = [], k = d3_range_integerScale(abs(step)), i = -1, j;\n    start *= k, stop *= k, step *= k;\n    if (step < 0) while ((j = start + step * ++i) > stop) range.push(j / k); else while ((j = start + step * ++i) < stop) range.push(j / k);\n    return range;\n  };\n  function d3_range_integerScale(x) {\n    var k = 1;\n    while (x * k % 1) k *= 10;\n    return k;\n  }\n  function d3_class(ctor, properties) {\n    for (var key in properties) {\n      Object.defineProperty(ctor.prototype, key, {\n        value: properties[key],\n        enumerable: false\n      });\n    }\n  }\n  d3.map = function(object, f) {\n    var map = new d3_Map();\n    if (object instanceof d3_Map) {\n      object.forEach(function(key, value) {\n        map.set(key, value);\n      });\n    } else if (Array.isArray(object)) {\n      var i = -1, n = object.length, o;\n      if (arguments.length === 1) while (++i < n) map.set(i, object[i]); else while (++i < n) map.set(f.call(object, o = object[i], i), o);\n    } else {\n      for (var key in object) map.set(key, object[key]);\n    }\n    return map;\n  };\n  function d3_Map() {\n    this._ = Object.create(null);\n  }\n  var d3_map_proto = \"__proto__\", d3_map_zero = \"\\x00\";\n  d3_class(d3_Map, {\n    has: d3_map_has,\n    get: function(key) {\n      return this._[d3_map_escape(key)];\n    },\n    set: function(key, value) {\n      return this._[d3_map_escape(key)] = value;\n    },\n    remove: d3_map_remove,\n    keys: d3_map_keys,\n    values: function() {\n      var values = [];\n      for (var key in this._) values.push(this._[key]);\n      return values;\n    },\n    entries: function() {\n      var entries = [];\n      for (var key in this._) entries.push({\n        key: d3_map_unescape(key),\n        value: this._[key]\n      });\n      return entries;\n    },\n    size: d3_map_size,\n    empty: d3_map_empty,\n    forEach: function(f) {\n      for (var key in this._) f.call(this, d3_map_unescape(key), this._[key]);\n    }\n  });\n  function d3_map_escape(key) {\n    return (key += \"\") === d3_map_proto || key[0] === d3_map_zero ? d3_map_zero + key : key;\n  }\n  function d3_map_unescape(key) {\n    return (key += \"\")[0] === d3_map_zero ? key.slice(1) : key;\n  }\n  function d3_map_has(key) {\n    return d3_map_escape(key) in this._;\n  }\n  function d3_map_remove(key) {\n    return (key = d3_map_escape(key)) in this._ && delete this._[key];\n  }\n  function d3_map_keys() {\n    var keys = [];\n    for (var key in this._) keys.push(d3_map_unescape(key));\n    return keys;\n  }\n  function d3_map_size() {\n    var size = 0;\n    for (var key in this._) ++size;\n    return size;\n  }\n  function d3_map_empty() {\n    for (var key in this._) return false;\n    return true;\n  }\n  d3.nest = function() {\n    var nest = {}, keys = [], sortKeys = [], sortValues, rollup;\n    function map(mapType, array, depth) {\n      if (depth >= keys.length) return rollup ? rollup.call(nest, array) : sortValues ? array.sort(sortValues) : array;\n      var i = -1, n = array.length, key = keys[depth++], keyValue, object, setter, valuesByKey = new d3_Map(), values;\n      while (++i < n) {\n        if (values = valuesByKey.get(keyValue = key(object = array[i]))) {\n          values.push(object);\n        } else {\n          valuesByKey.set(keyValue, [ object ]);\n        }\n      }\n      if (mapType) {\n        object = mapType();\n        setter = function(keyValue, values) {\n          object.set(keyValue, map(mapType, values, depth));\n        };\n      } else {\n        object = {};\n        setter = function(keyValue, values) {\n          object[keyValue] = map(mapType, values, depth);\n        };\n      }\n      valuesByKey.forEach(setter);\n      return object;\n    }\n    function entries(map, depth) {\n      if (depth >= keys.length) return map;\n      var array = [], sortKey = sortKeys[depth++];\n      map.forEach(function(key, keyMap) {\n        array.push({\n          key: key,\n          values: entries(keyMap, depth)\n        });\n      });\n      return sortKey ? array.sort(function(a, b) {\n        return sortKey(a.key, b.key);\n      }) : array;\n    }\n    nest.map = function(array, mapType) {\n      return map(mapType, array, 0);\n    };\n    nest.entries = function(array) {\n      return entries(map(d3.map, array, 0), 0);\n    };\n    nest.key = function(d) {\n      keys.push(d);\n      return nest;\n    };\n    nest.sortKeys = function(order) {\n      sortKeys[keys.length - 1] = order;\n      return nest;\n    };\n    nest.sortValues = function(order) {\n      sortValues = order;\n      return nest;\n    };\n    nest.rollup = function(f) {\n      rollup = f;\n      return nest;\n    };\n    return nest;\n  };\n  d3.set = function(array) {\n    var set = new d3_Set();\n    if (array) for (var i = 0, n = array.length; i < n; ++i) set.add(array[i]);\n    return set;\n  };\n  function d3_Set() {\n    this._ = Object.create(null);\n  }\n  d3_class(d3_Set, {\n    has: d3_map_has,\n    add: function(key) {\n      this._[d3_map_escape(key += \"\")] = true;\n      return key;\n    },\n    remove: d3_map_remove,\n    values: d3_map_keys,\n    size: d3_map_size,\n    empty: d3_map_empty,\n    forEach: function(f) {\n      for (var key in this._) f.call(this, d3_map_unescape(key));\n    }\n  });\n  d3.behavior = {};\n  d3.rebind = function(target, source) {\n    var i = 1, n = arguments.length, method;\n    while (++i < n) target[method = arguments[i]] = d3_rebind(target, source, source[method]);\n    return target;\n  };\n  function d3_rebind(target, source, method) {\n    return function() {\n      var value = method.apply(source, arguments);\n      return value === source ? target : value;\n    };\n  }\n  function d3_vendorSymbol(object, name) {\n    if (name in object) return name;\n    name = name.charAt(0).toUpperCase() + name.slice(1);\n    for (var i = 0, n = d3_vendorPrefixes.length; i < n; ++i) {\n      var prefixName = d3_vendorPrefixes[i] + name;\n      if (prefixName in object) return prefixName;\n    }\n  }\n  var d3_vendorPrefixes = [ \"webkit\", \"ms\", \"moz\", \"Moz\", \"o\", \"O\" ];\n  function d3_noop() {}\n  d3.dispatch = function() {\n    var dispatch = new d3_dispatch(), i = -1, n = arguments.length;\n    while (++i < n) dispatch[arguments[i]] = d3_dispatch_event(dispatch);\n    return dispatch;\n  };\n  function d3_dispatch() {}\n  d3_dispatch.prototype.on = function(type, listener) {\n    var i = type.indexOf(\".\"), name = \"\";\n    if (i >= 0) {\n      name = type.slice(i + 1);\n      type = type.slice(0, i);\n    }\n    if (type) return arguments.length < 2 ? this[type].on(name) : this[type].on(name, listener);\n    if (arguments.length === 2) {\n      if (listener == null) for (type in this) {\n        if (this.hasOwnProperty(type)) this[type].on(name, null);\n      }\n      return this;\n    }\n  };\n  function d3_dispatch_event(dispatch) {\n    var listeners = [], listenerByName = new d3_Map();\n    function event() {\n      var z = listeners, i = -1, n = z.length, l;\n      while (++i < n) if (l = z[i].on) l.apply(this, arguments);\n      return dispatch;\n    }\n    event.on = function(name, listener) {\n      var l = listenerByName.get(name), i;\n      if (arguments.length < 2) return l && l.on;\n      if (l) {\n        l.on = null;\n        listeners = listeners.slice(0, i = listeners.indexOf(l)).concat(listeners.slice(i + 1));\n        listenerByName.remove(name);\n      }\n      if (listener) listeners.push(listenerByName.set(name, {\n        on: listener\n      }));\n      return dispatch;\n    };\n    return event;\n  }\n  d3.event = null;\n  function d3_eventPreventDefault() {\n    d3.event.preventDefault();\n  }\n  function d3_eventSource() {\n    var e = d3.event, s;\n    while (s = e.sourceEvent) e = s;\n    return e;\n  }\n  function d3_eventDispatch(target) {\n    var dispatch = new d3_dispatch(), i = 0, n = arguments.length;\n    while (++i < n) dispatch[arguments[i]] = d3_dispatch_event(dispatch);\n    dispatch.of = function(thiz, argumentz) {\n      return function(e1) {\n        try {\n          var e0 = e1.sourceEvent = d3.event;\n          e1.target = target;\n          d3.event = e1;\n          dispatch[e1.type].apply(thiz, argumentz);\n        } finally {\n          d3.event = e0;\n        }\n      };\n    };\n    return dispatch;\n  }\n  d3.requote = function(s) {\n    return s.replace(d3_requote_re, \"\\\\$&\");\n  };\n  var d3_requote_re = /[\\\\\\^\\$\\*\\+\\?\\|\\[\\]\\(\\)\\.\\{\\}]/g;\n  var d3_subclass = {}.__proto__ ? function(object, prototype) {\n    object.__proto__ = prototype;\n  } : function(object, prototype) {\n    for (var property in prototype) object[property] = prototype[property];\n  };\n  function d3_selection(groups) {\n    d3_subclass(groups, d3_selectionPrototype);\n    return groups;\n  }\n  var d3_select = function(s, n) {\n    return n.querySelector(s);\n  }, d3_selectAll = function(s, n) {\n    return n.querySelectorAll(s);\n  }, d3_selectMatcher = d3_documentElement.matches || d3_documentElement[d3_vendorSymbol(d3_documentElement, \"matchesSelector\")], d3_selectMatches = function(n, s) {\n    return d3_selectMatcher.call(n, s);\n  };\n  if (typeof Sizzle === \"function\") {\n    d3_select = function(s, n) {\n      return Sizzle(s, n)[0] || null;\n    };\n    d3_selectAll = Sizzle;\n    d3_selectMatches = Sizzle.matchesSelector;\n  }\n  d3.selection = function() {\n    return d3_selectionRoot;\n  };\n  var d3_selectionPrototype = d3.selection.prototype = [];\n  d3_selectionPrototype.select = function(selector) {\n    var subgroups = [], subgroup, subnode, group, node;\n    selector = d3_selection_selector(selector);\n    for (var j = -1, m = this.length; ++j < m; ) {\n      subgroups.push(subgroup = []);\n      subgroup.parentNode = (group = this[j]).parentNode;\n      for (var i = -1, n = group.length; ++i < n; ) {\n        if (node = group[i]) {\n          subgroup.push(subnode = selector.call(node, node.__data__, i, j));\n          if (subnode && \"__data__\" in node) subnode.__data__ = node.__data__;\n        } else {\n          subgroup.push(null);\n        }\n      }\n    }\n    return d3_selection(subgroups);\n  };\n  function d3_selection_selector(selector) {\n    return typeof selector === \"function\" ? selector : function() {\n      return d3_select(selector, this);\n    };\n  }\n  d3_selectionPrototype.selectAll = function(selector) {\n    var subgroups = [], subgroup, node;\n    selector = d3_selection_selectorAll(selector);\n    for (var j = -1, m = this.length; ++j < m; ) {\n      for (var group = this[j], i = -1, n = group.length; ++i < n; ) {\n        if (node = group[i]) {\n          subgroups.push(subgroup = d3_array(selector.call(node, node.__data__, i, j)));\n          subgroup.parentNode = node;\n        }\n      }\n    }\n    return d3_selection(subgroups);\n  };\n  function d3_selection_selectorAll(selector) {\n    return typeof selector === \"function\" ? selector : function() {\n      return d3_selectAll(selector, this);\n    };\n  }\n  var d3_nsPrefix = {\n    svg: \"http://www.w3.org/2000/svg\",\n    xhtml: \"http://www.w3.org/1999/xhtml\",\n    xlink: \"http://www.w3.org/1999/xlink\",\n    xml: \"http://www.w3.org/XML/1998/namespace\",\n    xmlns: \"http://www.w3.org/2000/xmlns/\"\n  };\n  d3.ns = {\n    prefix: d3_nsPrefix,\n    qualify: function(name) {\n      var i = name.indexOf(\":\"), prefix = name;\n      if (i >= 0) {\n        prefix = name.slice(0, i);\n        name = name.slice(i + 1);\n      }\n      return d3_nsPrefix.hasOwnProperty(prefix) ? {\n        space: d3_nsPrefix[prefix],\n        local: name\n      } : name;\n    }\n  };\n  d3_selectionPrototype.attr = function(name, value) {\n    if (arguments.length < 2) {\n      if (typeof name === \"string\") {\n        var node = this.node();\n        name = d3.ns.qualify(name);\n        return name.local ? node.getAttributeNS(name.space, name.local) : node.getAttribute(name);\n      }\n      for (value in name) this.each(d3_selection_attr(value, name[value]));\n      return this;\n    }\n    return this.each(d3_selection_attr(name, value));\n  };\n  function d3_selection_attr(name, value) {\n    name = d3.ns.qualify(name);\n    function attrNull() {\n      this.removeAttribute(name);\n    }\n    function attrNullNS() {\n      this.removeAttributeNS(name.space, name.local);\n    }\n    function attrConstant() {\n      this.setAttribute(name, value);\n    }\n    function attrConstantNS() {\n      this.setAttributeNS(name.space, name.local, value);\n    }\n    function attrFunction() {\n      var x = value.apply(this, arguments);\n      if (x == null) this.removeAttribute(name); else this.setAttribute(name, x);\n    }\n    function attrFunctionNS() {\n      var x = value.apply(this, arguments);\n      if (x == null) this.removeAttributeNS(name.space, name.local); else this.setAttributeNS(name.space, name.local, x);\n    }\n    return value == null ? name.local ? attrNullNS : attrNull : typeof value === \"function\" ? name.local ? attrFunctionNS : attrFunction : name.local ? attrConstantNS : attrConstant;\n  }\n  function d3_collapse(s) {\n    return s.trim().replace(/\\s+/g, \" \");\n  }\n  d3_selectionPrototype.classed = function(name, value) {\n    if (arguments.length < 2) {\n      if (typeof name === \"string\") {\n        var node = this.node(), n = (name = d3_selection_classes(name)).length, i = -1;\n        if (value = node.classList) {\n          while (++i < n) if (!value.contains(name[i])) return false;\n        } else {\n          value = node.getAttribute(\"class\");\n          while (++i < n) if (!d3_selection_classedRe(name[i]).test(value)) return false;\n        }\n        return true;\n      }\n      for (value in name) this.each(d3_selection_classed(value, name[value]));\n      return this;\n    }\n    return this.each(d3_selection_classed(name, value));\n  };\n  function d3_selection_classedRe(name) {\n    return new RegExp(\"(?:^|\\\\s+)\" + d3.requote(name) + \"(?:\\\\s+|$)\", \"g\");\n  }\n  function d3_selection_classes(name) {\n    return (name + \"\").trim().split(/^|\\s+/);\n  }\n  function d3_selection_classed(name, value) {\n    name = d3_selection_classes(name).map(d3_selection_classedName);\n    var n = name.length;\n    function classedConstant() {\n      var i = -1;\n      while (++i < n) name[i](this, value);\n    }\n    function classedFunction() {\n      var i = -1, x = value.apply(this, arguments);\n      while (++i < n) name[i](this, x);\n    }\n    return typeof value === \"function\" ? classedFunction : classedConstant;\n  }\n  function d3_selection_classedName(name) {\n    var re = d3_selection_classedRe(name);\n    return function(node, value) {\n      if (c = node.classList) return value ? c.add(name) : c.remove(name);\n      var c = node.getAttribute(\"class\") || \"\";\n      if (value) {\n        re.lastIndex = 0;\n        if (!re.test(c)) node.setAttribute(\"class\", d3_collapse(c + \" \" + name));\n      } else {\n        node.setAttribute(\"class\", d3_collapse(c.replace(re, \" \")));\n      }\n    };\n  }\n  d3_selectionPrototype.style = function(name, value, priority) {\n    var n = arguments.length;\n    if (n < 3) {\n      if (typeof name !== \"string\") {\n        if (n < 2) value = \"\";\n        for (priority in name) this.each(d3_selection_style(priority, name[priority], value));\n        return this;\n      }\n      if (n < 2) return d3_window.getComputedStyle(this.node(), null).getPropertyValue(name);\n      priority = \"\";\n    }\n    return this.each(d3_selection_style(name, value, priority));\n  };\n  function d3_selection_style(name, value, priority) {\n    function styleNull() {\n      this.style.removeProperty(name);\n    }\n    function styleConstant() {\n      this.style.setProperty(name, value, priority);\n    }\n    function styleFunction() {\n      var x = value.apply(this, arguments);\n      if (x == null) this.style.removeProperty(name); else this.style.setProperty(name, x, priority);\n    }\n    return value == null ? styleNull : typeof value === \"function\" ? styleFunction : styleConstant;\n  }\n  d3_selectionPrototype.property = function(name, value) {\n    if (arguments.length < 2) {\n      if (typeof name === \"string\") return this.node()[name];\n      for (value in name) this.each(d3_selection_property(value, name[value]));\n      return this;\n    }\n    return this.each(d3_selection_property(name, value));\n  };\n  function d3_selection_property(name, value) {\n    function propertyNull() {\n      delete this[name];\n    }\n    function propertyConstant() {\n      this[name] = value;\n    }\n    function propertyFunction() {\n      var x = value.apply(this, arguments);\n      if (x == null) delete this[name]; else this[name] = x;\n    }\n    return value == null ? propertyNull : typeof value === \"function\" ? propertyFunction : propertyConstant;\n  }\n  d3_selectionPrototype.text = function(value) {\n    return arguments.length ? this.each(typeof value === \"function\" ? function() {\n      var v = value.apply(this, arguments);\n      this.textContent = v == null ? \"\" : v;\n    } : value == null ? function() {\n      this.textContent = \"\";\n    } : function() {\n      this.textContent = value;\n    }) : this.node().textContent;\n  };\n  d3_selectionPrototype.html = function(value) {\n    return arguments.length ? this.each(typeof value === \"function\" ? function() {\n      var v = value.apply(this, arguments);\n      this.innerHTML = v == null ? \"\" : v;\n    } : value == null ? function() {\n      this.innerHTML = \"\";\n    } : function() {\n      this.innerHTML = value;\n    }) : this.node().innerHTML;\n  };\n  d3_selectionPrototype.append = function(name) {\n    name = d3_selection_creator(name);\n    return this.select(function() {\n      return this.appendChild(name.apply(this, arguments));\n    });\n  };\n  function d3_selection_creator(name) {\n    return typeof name === \"function\" ? name : (name = d3.ns.qualify(name)).local ? function() {\n      return this.ownerDocument.createElementNS(name.space, name.local);\n    } : function() {\n      return this.ownerDocument.createElementNS(this.namespaceURI, name);\n    };\n  }\n  d3_selectionPrototype.insert = function(name, before) {\n    name = d3_selection_creator(name);\n    before = d3_selection_selector(before);\n    return this.select(function() {\n      return this.insertBefore(name.apply(this, arguments), before.apply(this, arguments) || null);\n    });\n  };\n  d3_selectionPrototype.remove = function() {\n    return this.each(d3_selectionRemove);\n  };\n  function d3_selectionRemove() {\n    var parent = this.parentNode;\n    if (parent) parent.removeChild(this);\n  }\n  d3_selectionPrototype.data = function(value, key) {\n    var i = -1, n = this.length, group, node;\n    if (!arguments.length) {\n      value = new Array(n = (group = this[0]).length);\n      while (++i < n) {\n        if (node = group[i]) {\n          value[i] = node.__data__;\n        }\n      }\n      return value;\n    }\n    function bind(group, groupData) {\n      var i, n = group.length, m = groupData.length, n0 = Math.min(n, m), updateNodes = new Array(m), enterNodes = new Array(m), exitNodes = new Array(n), node, nodeData;\n      if (key) {\n        var nodeByKeyValue = new d3_Map(), keyValues = new Array(n), keyValue;\n        for (i = -1; ++i < n; ) {\n          if (nodeByKeyValue.has(keyValue = key.call(node = group[i], node.__data__, i))) {\n            exitNodes[i] = node;\n          } else {\n            nodeByKeyValue.set(keyValue, node);\n          }\n          keyValues[i] = keyValue;\n        }\n        for (i = -1; ++i < m; ) {\n          if (!(node = nodeByKeyValue.get(keyValue = key.call(groupData, nodeData = groupData[i], i)))) {\n            enterNodes[i] = d3_selection_dataNode(nodeData);\n          } else if (node !== true) {\n            updateNodes[i] = node;\n            node.__data__ = nodeData;\n          }\n          nodeByKeyValue.set(keyValue, true);\n        }\n        for (i = -1; ++i < n; ) {\n          if (nodeByKeyValue.get(keyValues[i]) !== true) {\n            exitNodes[i] = group[i];\n          }\n        }\n      } else {\n        for (i = -1; ++i < n0; ) {\n          node = group[i];\n          nodeData = groupData[i];\n          if (node) {\n            node.__data__ = nodeData;\n            updateNodes[i] = node;\n          } else {\n            enterNodes[i] = d3_selection_dataNode(nodeData);\n          }\n        }\n        for (;i < m; ++i) {\n          enterNodes[i] = d3_selection_dataNode(groupData[i]);\n        }\n        for (;i < n; ++i) {\n          exitNodes[i] = group[i];\n        }\n      }\n      enterNodes.update = updateNodes;\n      enterNodes.parentNode = updateNodes.parentNode = exitNodes.parentNode = group.parentNode;\n      enter.push(enterNodes);\n      update.push(updateNodes);\n      exit.push(exitNodes);\n    }\n    var enter = d3_selection_enter([]), update = d3_selection([]), exit = d3_selection([]);\n    if (typeof value === \"function\") {\n      while (++i < n) {\n        bind(group = this[i], value.call(group, group.parentNode.__data__, i));\n      }\n    } else {\n      while (++i < n) {\n        bind(group = this[i], value);\n      }\n    }\n    update.enter = function() {\n      return enter;\n    };\n    update.exit = function() {\n      return exit;\n    };\n    return update;\n  };\n  function d3_selection_dataNode(data) {\n    return {\n      __data__: data\n    };\n  }\n  d3_selectionPrototype.datum = function(value) {\n    return arguments.length ? this.property(\"__data__\", value) : this.property(\"__data__\");\n  };\n  d3_selectionPrototype.filter = function(filter) {\n    var subgroups = [], subgroup, group, node;\n    if (typeof filter !== \"function\") filter = d3_selection_filter(filter);\n    for (var j = 0, m = this.length; j < m; j++) {\n      subgroups.push(subgroup = []);\n      subgroup.parentNode = (group = this[j]).parentNode;\n      for (var i = 0, n = group.length; i < n; i++) {\n        if ((node = group[i]) && filter.call(node, node.__data__, i, j)) {\n          subgroup.push(node);\n        }\n      }\n    }\n    return d3_selection(subgroups);\n  };\n  function d3_selection_filter(selector) {\n    return function() {\n      return d3_selectMatches(this, selector);\n    };\n  }\n  d3_selectionPrototype.order = function() {\n    for (var j = -1, m = this.length; ++j < m; ) {\n      for (var group = this[j], i = group.length - 1, next = group[i], node; --i >= 0; ) {\n        if (node = group[i]) {\n          if (next && next !== node.nextSibling) next.parentNode.insertBefore(node, next);\n          next = node;\n        }\n      }\n    }\n    return this;\n  };\n  d3_selectionPrototype.sort = function(comparator) {\n    comparator = d3_selection_sortComparator.apply(this, arguments);\n    for (var j = -1, m = this.length; ++j < m; ) this[j].sort(comparator);\n    return this.order();\n  };\n  function d3_selection_sortComparator(comparator) {\n    if (!arguments.length) comparator = d3_ascending;\n    return function(a, b) {\n      return a && b ? comparator(a.__data__, b.__data__) : !a - !b;\n    };\n  }\n  d3_selectionPrototype.each = function(callback) {\n    return d3_selection_each(this, function(node, i, j) {\n      callback.call(node, node.__data__, i, j);\n    });\n  };\n  function d3_selection_each(groups, callback) {\n    for (var j = 0, m = groups.length; j < m; j++) {\n      for (var group = groups[j], i = 0, n = group.length, node; i < n; i++) {\n        if (node = group[i]) callback(node, i, j);\n      }\n    }\n    return groups;\n  }\n  d3_selectionPrototype.call = function(callback) {\n    var args = d3_array(arguments);\n    callback.apply(args[0] = this, args);\n    return this;\n  };\n  d3_selectionPrototype.empty = function() {\n    return !this.node();\n  };\n  d3_selectionPrototype.node = function() {\n    for (var j = 0, m = this.length; j < m; j++) {\n      for (var group = this[j], i = 0, n = group.length; i < n; i++) {\n        var node = group[i];\n        if (node) return node;\n      }\n    }\n    return null;\n  };\n  d3_selectionPrototype.size = function() {\n    var n = 0;\n    d3_selection_each(this, function() {\n      ++n;\n    });\n    return n;\n  };\n  function d3_selection_enter(selection) {\n    d3_subclass(selection, d3_selection_enterPrototype);\n    return selection;\n  }\n  var d3_selection_enterPrototype = [];\n  d3.selection.enter = d3_selection_enter;\n  d3.selection.enter.prototype = d3_selection_enterPrototype;\n  d3_selection_enterPrototype.append = d3_selectionPrototype.append;\n  d3_selection_enterPrototype.empty = d3_selectionPrototype.empty;\n  d3_selection_enterPrototype.node = d3_selectionPrototype.node;\n  d3_selection_enterPrototype.call = d3_selectionPrototype.call;\n  d3_selection_enterPrototype.size = d3_selectionPrototype.size;\n  d3_selection_enterPrototype.select = function(selector) {\n    var subgroups = [], subgroup, subnode, upgroup, group, node;\n    for (var j = -1, m = this.length; ++j < m; ) {\n      upgroup = (group = this[j]).update;\n      subgroups.push(subgroup = []);\n      subgroup.parentNode = group.parentNode;\n      for (var i = -1, n = group.length; ++i < n; ) {\n        if (node = group[i]) {\n          subgroup.push(upgroup[i] = subnode = selector.call(group.parentNode, node.__data__, i, j));\n          subnode.__data__ = node.__data__;\n        } else {\n          subgroup.push(null);\n        }\n      }\n    }\n    return d3_selection(subgroups);\n  };\n  d3_selection_enterPrototype.insert = function(name, before) {\n    if (arguments.length < 2) before = d3_selection_enterInsertBefore(this);\n    return d3_selectionPrototype.insert.call(this, name, before);\n  };\n  function d3_selection_enterInsertBefore(enter) {\n    var i0, j0;\n    return function(d, i, j) {\n      var group = enter[j].update, n = group.length, node;\n      if (j != j0) j0 = j, i0 = 0;\n      if (i >= i0) i0 = i + 1;\n      while (!(node = group[i0]) && ++i0 < n) ;\n      return node;\n    };\n  }\n  d3_selectionPrototype.transition = function(name) {\n    var id = d3_transitionInheritId || ++d3_transitionId, ns = d3_transitionNamespace(name), subgroups = [], subgroup, node, transition = d3_transitionInherit || {\n      time: Date.now(),\n      ease: d3_ease_cubicInOut,\n      delay: 0,\n      duration: 250\n    };\n    for (var j = -1, m = this.length; ++j < m; ) {\n      subgroups.push(subgroup = []);\n      for (var group = this[j], i = -1, n = group.length; ++i < n; ) {\n        if (node = group[i]) d3_transitionNode(node, i, ns, id, transition);\n        subgroup.push(node);\n      }\n    }\n    return d3_transition(subgroups, ns, id);\n  };\n  d3_selectionPrototype.interrupt = function(name) {\n    var ns = d3_transitionNamespace(name);\n    return this.each(function() {\n      var lock = this[ns];\n      if (lock) ++lock.active;\n    });\n  };\n  function d3_selection_interrupt(that) {\n    var lock = that.__transition__;\n    if (lock) ++lock.active;\n  }\n  d3.select = function(node) {\n    var group = [ typeof node === \"string\" ? d3_select(node, d3_document) : node ];\n    group.parentNode = d3_documentElement;\n    return d3_selection([ group ]);\n  };\n  d3.selectAll = function(nodes) {\n    var group = d3_array(typeof nodes === \"string\" ? d3_selectAll(nodes, d3_document) : nodes);\n    group.parentNode = d3_documentElement;\n    return d3_selection([ group ]);\n  };\n  var d3_selectionRoot = d3.select(d3_documentElement);\n  d3_selectionPrototype.on = function(type, listener, capture) {\n    var n = arguments.length;\n    if (n < 3) {\n      if (typeof type !== \"string\") {\n        if (n < 2) listener = false;\n        for (capture in type) this.each(d3_selection_on(capture, type[capture], listener));\n        return this;\n      }\n      if (n < 2) return (n = this.node()[\"__on\" + type]) && n._;\n      capture = false;\n    }\n    return this.each(d3_selection_on(type, listener, capture));\n  };\n  function d3_selection_on(type, listener, capture) {\n    var name = \"__on\" + type, i = type.indexOf(\".\"), wrap = d3_selection_onListener;\n    if (i > 0) type = type.slice(0, i);\n    var filter = d3_selection_onFilters.get(type);\n    if (filter) type = filter, wrap = d3_selection_onFilter;\n    function onRemove() {\n      var l = this[name];\n      if (l) {\n        this.removeEventListener(type, l, l.$);\n        delete this[name];\n      }\n    }\n    function onAdd() {\n      var l = wrap(listener, d3_array(arguments));\n      onRemove.call(this);\n      this.addEventListener(type, this[name] = l, l.$ = capture);\n      l._ = listener;\n    }\n    function removeAll() {\n      var re = new RegExp(\"^__on([^.]+)\" + d3.requote(type) + \"$\"), match;\n      for (var name in this) {\n        if (match = name.match(re)) {\n          var l = this[name];\n          this.removeEventListener(match[1], l, l.$);\n          delete this[name];\n        }\n      }\n    }\n    return i ? listener ? onAdd : onRemove : listener ? d3_noop : removeAll;\n  }\n  var d3_selection_onFilters = d3.map({\n    mouseenter: \"mouseover\",\n    mouseleave: \"mouseout\"\n  });\n  d3_selection_onFilters.forEach(function(k) {\n    if (\"on\" + k in d3_document) d3_selection_onFilters.remove(k);\n  });\n  function d3_selection_onListener(listener, argumentz) {\n    return function(e) {\n      var o = d3.event;\n      d3.event = e;\n      argumentz[0] = this.__data__;\n      try {\n        listener.apply(this, argumentz);\n      } finally {\n        d3.event = o;\n      }\n    };\n  }\n  function d3_selection_onFilter(listener, argumentz) {\n    var l = d3_selection_onListener(listener, argumentz);\n    return function(e) {\n      var target = this, related = e.relatedTarget;\n      if (!related || related !== target && !(related.compareDocumentPosition(target) & 8)) {\n        l.call(target, e);\n      }\n    };\n  }\n  var d3_event_dragSelect = \"onselectstart\" in d3_document ? null : d3_vendorSymbol(d3_documentElement.style, \"userSelect\"), d3_event_dragId = 0;\n  function d3_event_dragSuppress() {\n    var name = \".dragsuppress-\" + ++d3_event_dragId, click = \"click\" + name, w = d3.select(d3_window).on(\"touchmove\" + name, d3_eventPreventDefault).on(\"dragstart\" + name, d3_eventPreventDefault).on(\"selectstart\" + name, d3_eventPreventDefault);\n    if (d3_event_dragSelect) {\n      var style = d3_documentElement.style, select = style[d3_event_dragSelect];\n      style[d3_event_dragSelect] = \"none\";\n    }\n    return function(suppressClick) {\n      w.on(name, null);\n      if (d3_event_dragSelect) style[d3_event_dragSelect] = select;\n      if (suppressClick) {\n        var off = function() {\n          w.on(click, null);\n        };\n        w.on(click, function() {\n          d3_eventPreventDefault();\n          off();\n        }, true);\n        setTimeout(off, 0);\n      }\n    };\n  }\n  d3.mouse = function(container) {\n    return d3_mousePoint(container, d3_eventSource());\n  };\n  var d3_mouse_bug44083 = /WebKit/.test(d3_window.navigator.userAgent) ? -1 : 0;\n  function d3_mousePoint(container, e) {\n    if (e.changedTouches) e = e.changedTouches[0];\n    var svg = container.ownerSVGElement || container;\n    if (svg.createSVGPoint) {\n      var point = svg.createSVGPoint();\n      if (d3_mouse_bug44083 < 0 && (d3_window.scrollX || d3_window.scrollY)) {\n        svg = d3.select(\"body\").append(\"svg\").style({\n          position: \"absolute\",\n          top: 0,\n          left: 0,\n          margin: 0,\n          padding: 0,\n          border: \"none\"\n        }, \"important\");\n        var ctm = svg[0][0].getScreenCTM();\n        d3_mouse_bug44083 = !(ctm.f || ctm.e);\n        svg.remove();\n      }\n      if (d3_mouse_bug44083) point.x = e.pageX, point.y = e.pageY; else point.x = e.clientX, \n      point.y = e.clientY;\n      point = point.matrixTransform(container.getScreenCTM().inverse());\n      return [ point.x, point.y ];\n    }\n    var rect = container.getBoundingClientRect();\n    return [ e.clientX - rect.left - container.clientLeft, e.clientY - rect.top - container.clientTop ];\n  }\n  d3.touch = function(container, touches, identifier) {\n    if (arguments.length < 3) identifier = touches, touches = d3_eventSource().changedTouches;\n    if (touches) for (var i = 0, n = touches.length, touch; i < n; ++i) {\n      if ((touch = touches[i]).identifier === identifier) {\n        return d3_mousePoint(container, touch);\n      }\n    }\n  };\n  d3.behavior.drag = function() {\n    var event = d3_eventDispatch(drag, \"drag\", \"dragstart\", \"dragend\"), origin = null, mousedown = dragstart(d3_noop, d3.mouse, d3_behavior_dragMouseSubject, \"mousemove\", \"mouseup\"), touchstart = dragstart(d3_behavior_dragTouchId, d3.touch, d3_behavior_dragTouchSubject, \"touchmove\", \"touchend\");\n    function drag() {\n      this.on(\"mousedown.drag\", mousedown).on(\"touchstart.drag\", touchstart);\n    }\n    function dragstart(id, position, subject, move, end) {\n      return function() {\n        var that = this, target = d3.event.target, parent = that.parentNode, dispatch = event.of(that, arguments), dragged = 0, dragId = id(), dragName = \".drag\" + (dragId == null ? \"\" : \"-\" + dragId), dragOffset, dragSubject = d3.select(subject()).on(move + dragName, moved).on(end + dragName, ended), dragRestore = d3_event_dragSuppress(), position0 = position(parent, dragId);\n        if (origin) {\n          dragOffset = origin.apply(that, arguments);\n          dragOffset = [ dragOffset.x - position0[0], dragOffset.y - position0[1] ];\n        } else {\n          dragOffset = [ 0, 0 ];\n        }\n        dispatch({\n          type: \"dragstart\"\n        });\n        function moved() {\n          var position1 = position(parent, dragId), dx, dy;\n          if (!position1) return;\n          dx = position1[0] - position0[0];\n          dy = position1[1] - position0[1];\n          dragged |= dx | dy;\n          position0 = position1;\n          dispatch({\n            type: \"drag\",\n            x: position1[0] + dragOffset[0],\n            y: position1[1] + dragOffset[1],\n            dx: dx,\n            dy: dy\n          });\n        }\n        function ended() {\n          if (!position(parent, dragId)) return;\n          dragSubject.on(move + dragName, null).on(end + dragName, null);\n          dragRestore(dragged && d3.event.target === target);\n          dispatch({\n            type: \"dragend\"\n          });\n        }\n      };\n    }\n    drag.origin = function(x) {\n      if (!arguments.length) return origin;\n      origin = x;\n      return drag;\n    };\n    return d3.rebind(drag, event, \"on\");\n  };\n  function d3_behavior_dragTouchId() {\n    return d3.event.changedTouches[0].identifier;\n  }\n  function d3_behavior_dragTouchSubject() {\n    return d3.event.target;\n  }\n  function d3_behavior_dragMouseSubject() {\n    return d3_window;\n  }\n  d3.touches = function(container, touches) {\n    if (arguments.length < 2) touches = d3_eventSource().touches;\n    return touches ? d3_array(touches).map(function(touch) {\n      var point = d3_mousePoint(container, touch);\n      point.identifier = touch.identifier;\n      return point;\n    }) : [];\n  };\n  var ε = 1e-6, ε2 = ε * ε, π = Math.PI, τ = 2 * π, τε = τ - ε, halfπ = π / 2, d3_radians = π / 180, d3_degrees = 180 / π;\n  function d3_sgn(x) {\n    return x > 0 ? 1 : x < 0 ? -1 : 0;\n  }\n  function d3_cross2d(a, b, c) {\n    return (b[0] - a[0]) * (c[1] - a[1]) - (b[1] - a[1]) * (c[0] - a[0]);\n  }\n  function d3_acos(x) {\n    return x > 1 ? 0 : x < -1 ? π : Math.acos(x);\n  }\n  function d3_asin(x) {\n    return x > 1 ? halfπ : x < -1 ? -halfπ : Math.asin(x);\n  }\n  function d3_sinh(x) {\n    return ((x = Math.exp(x)) - 1 / x) / 2;\n  }\n  function d3_cosh(x) {\n    return ((x = Math.exp(x)) + 1 / x) / 2;\n  }\n  function d3_tanh(x) {\n    return ((x = Math.exp(2 * x)) - 1) / (x + 1);\n  }\n  function d3_haversin(x) {\n    return (x = Math.sin(x / 2)) * x;\n  }\n  var ρ = Math.SQRT2, ρ2 = 2, ρ4 = 4;\n  d3.interpolateZoom = function(p0, p1) {\n    var ux0 = p0[0], uy0 = p0[1], w0 = p0[2], ux1 = p1[0], uy1 = p1[1], w1 = p1[2];\n    var dx = ux1 - ux0, dy = uy1 - uy0, d2 = dx * dx + dy * dy, d1 = Math.sqrt(d2), b0 = (w1 * w1 - w0 * w0 + ρ4 * d2) / (2 * w0 * ρ2 * d1), b1 = (w1 * w1 - w0 * w0 - ρ4 * d2) / (2 * w1 * ρ2 * d1), r0 = Math.log(Math.sqrt(b0 * b0 + 1) - b0), r1 = Math.log(Math.sqrt(b1 * b1 + 1) - b1), dr = r1 - r0, S = (dr || Math.log(w1 / w0)) / ρ;\n    function interpolate(t) {\n      var s = t * S;\n      if (dr) {\n        var coshr0 = d3_cosh(r0), u = w0 / (ρ2 * d1) * (coshr0 * d3_tanh(ρ * s + r0) - d3_sinh(r0));\n        return [ ux0 + u * dx, uy0 + u * dy, w0 * coshr0 / d3_cosh(ρ * s + r0) ];\n      }\n      return [ ux0 + t * dx, uy0 + t * dy, w0 * Math.exp(ρ * s) ];\n    }\n    interpolate.duration = S * 1e3;\n    return interpolate;\n  };\n  d3.behavior.zoom = function() {\n    var view = {\n      x: 0,\n      y: 0,\n      k: 1\n    }, translate0, center0, center, size = [ 960, 500 ], scaleExtent = d3_behavior_zoomInfinity, duration = 250, zooming = 0, mousedown = \"mousedown.zoom\", mousemove = \"mousemove.zoom\", mouseup = \"mouseup.zoom\", mousewheelTimer, touchstart = \"touchstart.zoom\", touchtime, event = d3_eventDispatch(zoom, \"zoomstart\", \"zoom\", \"zoomend\"), x0, x1, y0, y1;\n    function zoom(g) {\n      g.on(mousedown, mousedowned).on(d3_behavior_zoomWheel + \".zoom\", mousewheeled).on(\"dblclick.zoom\", dblclicked).on(touchstart, touchstarted);\n    }\n    zoom.event = function(g) {\n      g.each(function() {\n        var dispatch = event.of(this, arguments), view1 = view;\n        if (d3_transitionInheritId) {\n          d3.select(this).transition().each(\"start.zoom\", function() {\n            view = this.__chart__ || {\n              x: 0,\n              y: 0,\n              k: 1\n            };\n            zoomstarted(dispatch);\n          }).tween(\"zoom:zoom\", function() {\n            var dx = size[0], dy = size[1], cx = center0 ? center0[0] : dx / 2, cy = center0 ? center0[1] : dy / 2, i = d3.interpolateZoom([ (cx - view.x) / view.k, (cy - view.y) / view.k, dx / view.k ], [ (cx - view1.x) / view1.k, (cy - view1.y) / view1.k, dx / view1.k ]);\n            return function(t) {\n              var l = i(t), k = dx / l[2];\n              this.__chart__ = view = {\n                x: cx - l[0] * k,\n                y: cy - l[1] * k,\n                k: k\n              };\n              zoomed(dispatch);\n            };\n          }).each(\"interrupt.zoom\", function() {\n            zoomended(dispatch);\n          }).each(\"end.zoom\", function() {\n            zoomended(dispatch);\n          });\n        } else {\n          this.__chart__ = view;\n          zoomstarted(dispatch);\n          zoomed(dispatch);\n          zoomended(dispatch);\n        }\n      });\n    };\n    zoom.translate = function(_) {\n      if (!arguments.length) return [ view.x, view.y ];\n      view = {\n        x: +_[0],\n        y: +_[1],\n        k: view.k\n      };\n      rescale();\n      return zoom;\n    };\n    zoom.scale = function(_) {\n      if (!arguments.length) return view.k;\n      view = {\n        x: view.x,\n        y: view.y,\n        k: +_\n      };\n      rescale();\n      return zoom;\n    };\n    zoom.scaleExtent = function(_) {\n      if (!arguments.length) return scaleExtent;\n      scaleExtent = _ == null ? d3_behavior_zoomInfinity : [ +_[0], +_[1] ];\n      return zoom;\n    };\n    zoom.center = function(_) {\n      if (!arguments.length) return center;\n      center = _ && [ +_[0], +_[1] ];\n      return zoom;\n    };\n    zoom.size = function(_) {\n      if (!arguments.length) return size;\n      size = _ && [ +_[0], +_[1] ];\n      return zoom;\n    };\n    zoom.duration = function(_) {\n      if (!arguments.length) return duration;\n      duration = +_;\n      return zoom;\n    };\n    zoom.x = function(z) {\n      if (!arguments.length) return x1;\n      x1 = z;\n      x0 = z.copy();\n      view = {\n        x: 0,\n        y: 0,\n        k: 1\n      };\n      return zoom;\n    };\n    zoom.y = function(z) {\n      if (!arguments.length) return y1;\n      y1 = z;\n      y0 = z.copy();\n      view = {\n        x: 0,\n        y: 0,\n        k: 1\n      };\n      return zoom;\n    };\n    function location(p) {\n      return [ (p[0] - view.x) / view.k, (p[1] - view.y) / view.k ];\n    }\n    function point(l) {\n      return [ l[0] * view.k + view.x, l[1] * view.k + view.y ];\n    }\n    function scaleTo(s) {\n      view.k = Math.max(scaleExtent[0], Math.min(scaleExtent[1], s));\n    }\n    function translateTo(p, l) {\n      l = point(l);\n      view.x += p[0] - l[0];\n      view.y += p[1] - l[1];\n    }\n    function zoomTo(that, p, l, k) {\n      that.__chart__ = {\n        x: view.x,\n        y: view.y,\n        k: view.k\n      };\n      scaleTo(Math.pow(2, k));\n      translateTo(center0 = p, l);\n      that = d3.select(that);\n      if (duration > 0) that = that.transition().duration(duration);\n      that.call(zoom.event);\n    }\n    function rescale() {\n      if (x1) x1.domain(x0.range().map(function(x) {\n        return (x - view.x) / view.k;\n      }).map(x0.invert));\n      if (y1) y1.domain(y0.range().map(function(y) {\n        return (y - view.y) / view.k;\n      }).map(y0.invert));\n    }\n    function zoomstarted(dispatch) {\n      if (!zooming++) dispatch({\n        type: \"zoomstart\"\n      });\n    }\n    function zoomed(dispatch) {\n      rescale();\n      dispatch({\n        type: \"zoom\",\n        scale: view.k,\n        translate: [ view.x, view.y ]\n      });\n    }\n    function zoomended(dispatch) {\n      if (!--zooming) dispatch({\n        type: \"zoomend\"\n      });\n      center0 = null;\n    }\n    function mousedowned() {\n      var that = this, target = d3.event.target, dispatch = event.of(that, arguments), dragged = 0, subject = d3.select(d3_window).on(mousemove, moved).on(mouseup, ended), location0 = location(d3.mouse(that)), dragRestore = d3_event_dragSuppress();\n      d3_selection_interrupt(that);\n      zoomstarted(dispatch);\n      function moved() {\n        dragged = 1;\n        translateTo(d3.mouse(that), location0);\n        zoomed(dispatch);\n      }\n      function ended() {\n        subject.on(mousemove, null).on(mouseup, null);\n        dragRestore(dragged && d3.event.target === target);\n        zoomended(dispatch);\n      }\n    }\n    function touchstarted() {\n      var that = this, dispatch = event.of(that, arguments), locations0 = {}, distance0 = 0, scale0, zoomName = \".zoom-\" + d3.event.changedTouches[0].identifier, touchmove = \"touchmove\" + zoomName, touchend = \"touchend\" + zoomName, targets = [], subject = d3.select(that), dragRestore = d3_event_dragSuppress();\n      started();\n      zoomstarted(dispatch);\n      subject.on(mousedown, null).on(touchstart, started);\n      function relocate() {\n        var touches = d3.touches(that);\n        scale0 = view.k;\n        touches.forEach(function(t) {\n          if (t.identifier in locations0) locations0[t.identifier] = location(t);\n        });\n        return touches;\n      }\n      function started() {\n        var target = d3.event.target;\n        d3.select(target).on(touchmove, moved).on(touchend, ended);\n        targets.push(target);\n        var changed = d3.event.changedTouches;\n        for (var i = 0, n = changed.length; i < n; ++i) {\n          locations0[changed[i].identifier] = null;\n        }\n        var touches = relocate(), now = Date.now();\n        if (touches.length === 1) {\n          if (now - touchtime < 500) {\n            var p = touches[0];\n            zoomTo(that, p, locations0[p.identifier], Math.floor(Math.log(view.k) / Math.LN2) + 1);\n            d3_eventPreventDefault();\n          }\n          touchtime = now;\n        } else if (touches.length > 1) {\n          var p = touches[0], q = touches[1], dx = p[0] - q[0], dy = p[1] - q[1];\n          distance0 = dx * dx + dy * dy;\n        }\n      }\n      function moved() {\n        var touches = d3.touches(that), p0, l0, p1, l1;\n        d3_selection_interrupt(that);\n        for (var i = 0, n = touches.length; i < n; ++i, l1 = null) {\n          p1 = touches[i];\n          if (l1 = locations0[p1.identifier]) {\n            if (l0) break;\n            p0 = p1, l0 = l1;\n          }\n        }\n        if (l1) {\n          var distance1 = (distance1 = p1[0] - p0[0]) * distance1 + (distance1 = p1[1] - p0[1]) * distance1, scale1 = distance0 && Math.sqrt(distance1 / distance0);\n          p0 = [ (p0[0] + p1[0]) / 2, (p0[1] + p1[1]) / 2 ];\n          l0 = [ (l0[0] + l1[0]) / 2, (l0[1] + l1[1]) / 2 ];\n          scaleTo(scale1 * scale0);\n        }\n        touchtime = null;\n        translateTo(p0, l0);\n        zoomed(dispatch);\n      }\n      function ended() {\n        if (d3.event.touches.length) {\n          var changed = d3.event.changedTouches;\n          for (var i = 0, n = changed.length; i < n; ++i) {\n            delete locations0[changed[i].identifier];\n          }\n          for (var identifier in locations0) {\n            return void relocate();\n          }\n        }\n        d3.selectAll(targets).on(zoomName, null);\n        subject.on(mousedown, mousedowned).on(touchstart, touchstarted);\n        dragRestore();\n        zoomended(dispatch);\n      }\n    }\n    function mousewheeled() {\n      var dispatch = event.of(this, arguments);\n      if (mousewheelTimer) clearTimeout(mousewheelTimer); else translate0 = location(center0 = center || d3.mouse(this)), \n      d3_selection_interrupt(this), zoomstarted(dispatch);\n      mousewheelTimer = setTimeout(function() {\n        mousewheelTimer = null;\n        zoomended(dispatch);\n      }, 50);\n      d3_eventPreventDefault();\n      scaleTo(Math.pow(2, d3_behavior_zoomDelta() * .002) * view.k);\n      translateTo(center0, translate0);\n      zoomed(dispatch);\n    }\n    function dblclicked() {\n      var p = d3.mouse(this), k = Math.log(view.k) / Math.LN2;\n      zoomTo(this, p, location(p), d3.event.shiftKey ? Math.ceil(k) - 1 : Math.floor(k) + 1);\n    }\n    return d3.rebind(zoom, event, \"on\");\n  };\n  var d3_behavior_zoomInfinity = [ 0, Infinity ];\n  var d3_behavior_zoomDelta, d3_behavior_zoomWheel = \"onwheel\" in d3_document ? (d3_behavior_zoomDelta = function() {\n    return -d3.event.deltaY * (d3.event.deltaMode ? 120 : 1);\n  }, \"wheel\") : \"onmousewheel\" in d3_document ? (d3_behavior_zoomDelta = function() {\n    return d3.event.wheelDelta;\n  }, \"mousewheel\") : (d3_behavior_zoomDelta = function() {\n    return -d3.event.detail;\n  }, \"MozMousePixelScroll\");\n  d3.color = d3_color;\n  function d3_color() {}\n  d3_color.prototype.toString = function() {\n    return this.rgb() + \"\";\n  };\n  d3.hsl = d3_hsl;\n  function d3_hsl(h, s, l) {\n    return this instanceof d3_hsl ? void (this.h = +h, this.s = +s, this.l = +l) : arguments.length < 2 ? h instanceof d3_hsl ? new d3_hsl(h.h, h.s, h.l) : d3_rgb_parse(\"\" + h, d3_rgb_hsl, d3_hsl) : new d3_hsl(h, s, l);\n  }\n  var d3_hslPrototype = d3_hsl.prototype = new d3_color();\n  d3_hslPrototype.brighter = function(k) {\n    k = Math.pow(.7, arguments.length ? k : 1);\n    return new d3_hsl(this.h, this.s, this.l / k);\n  };\n  d3_hslPrototype.darker = function(k) {\n    k = Math.pow(.7, arguments.length ? k : 1);\n    return new d3_hsl(this.h, this.s, k * this.l);\n  };\n  d3_hslPrototype.rgb = function() {\n    return d3_hsl_rgb(this.h, this.s, this.l);\n  };\n  function d3_hsl_rgb(h, s, l) {\n    var m1, m2;\n    h = isNaN(h) ? 0 : (h %= 360) < 0 ? h + 360 : h;\n    s = isNaN(s) ? 0 : s < 0 ? 0 : s > 1 ? 1 : s;\n    l = l < 0 ? 0 : l > 1 ? 1 : l;\n    m2 = l <= .5 ? l * (1 + s) : l + s - l * s;\n    m1 = 2 * l - m2;\n    function v(h) {\n      if (h > 360) h -= 360; else if (h < 0) h += 360;\n      if (h < 60) return m1 + (m2 - m1) * h / 60;\n      if (h < 180) return m2;\n      if (h < 240) return m1 + (m2 - m1) * (240 - h) / 60;\n      return m1;\n    }\n    function vv(h) {\n      return Math.round(v(h) * 255);\n    }\n    return new d3_rgb(vv(h + 120), vv(h), vv(h - 120));\n  }\n  d3.hcl = d3_hcl;\n  function d3_hcl(h, c, l) {\n    return this instanceof d3_hcl ? void (this.h = +h, this.c = +c, this.l = +l) : arguments.length < 2 ? h instanceof d3_hcl ? new d3_hcl(h.h, h.c, h.l) : h instanceof d3_lab ? d3_lab_hcl(h.l, h.a, h.b) : d3_lab_hcl((h = d3_rgb_lab((h = d3.rgb(h)).r, h.g, h.b)).l, h.a, h.b) : new d3_hcl(h, c, l);\n  }\n  var d3_hclPrototype = d3_hcl.prototype = new d3_color();\n  d3_hclPrototype.brighter = function(k) {\n    return new d3_hcl(this.h, this.c, Math.min(100, this.l + d3_lab_K * (arguments.length ? k : 1)));\n  };\n  d3_hclPrototype.darker = function(k) {\n    return new d3_hcl(this.h, this.c, Math.max(0, this.l - d3_lab_K * (arguments.length ? k : 1)));\n  };\n  d3_hclPrototype.rgb = function() {\n    return d3_hcl_lab(this.h, this.c, this.l).rgb();\n  };\n  function d3_hcl_lab(h, c, l) {\n    if (isNaN(h)) h = 0;\n    if (isNaN(c)) c = 0;\n    return new d3_lab(l, Math.cos(h *= d3_radians) * c, Math.sin(h) * c);\n  }\n  d3.lab = d3_lab;\n  function d3_lab(l, a, b) {\n    return this instanceof d3_lab ? void (this.l = +l, this.a = +a, this.b = +b) : arguments.length < 2 ? l instanceof d3_lab ? new d3_lab(l.l, l.a, l.b) : l instanceof d3_hcl ? d3_hcl_lab(l.h, l.c, l.l) : d3_rgb_lab((l = d3_rgb(l)).r, l.g, l.b) : new d3_lab(l, a, b);\n  }\n  var d3_lab_K = 18;\n  var d3_lab_X = .95047, d3_lab_Y = 1, d3_lab_Z = 1.08883;\n  var d3_labPrototype = d3_lab.prototype = new d3_color();\n  d3_labPrototype.brighter = function(k) {\n    return new d3_lab(Math.min(100, this.l + d3_lab_K * (arguments.length ? k : 1)), this.a, this.b);\n  };\n  d3_labPrototype.darker = function(k) {\n    return new d3_lab(Math.max(0, this.l - d3_lab_K * (arguments.length ? k : 1)), this.a, this.b);\n  };\n  d3_labPrototype.rgb = function() {\n    return d3_lab_rgb(this.l, this.a, this.b);\n  };\n  function d3_lab_rgb(l, a, b) {\n    var y = (l + 16) / 116, x = y + a / 500, z = y - b / 200;\n    x = d3_lab_xyz(x) * d3_lab_X;\n    y = d3_lab_xyz(y) * d3_lab_Y;\n    z = d3_lab_xyz(z) * d3_lab_Z;\n    return new d3_rgb(d3_xyz_rgb(3.2404542 * x - 1.5371385 * y - .4985314 * z), d3_xyz_rgb(-.969266 * x + 1.8760108 * y + .041556 * z), d3_xyz_rgb(.0556434 * x - .2040259 * y + 1.0572252 * z));\n  }\n  function d3_lab_hcl(l, a, b) {\n    return l > 0 ? new d3_hcl(Math.atan2(b, a) * d3_degrees, Math.sqrt(a * a + b * b), l) : new d3_hcl(NaN, NaN, l);\n  }\n  function d3_lab_xyz(x) {\n    return x > .206893034 ? x * x * x : (x - 4 / 29) / 7.787037;\n  }\n  function d3_xyz_lab(x) {\n    return x > .008856 ? Math.pow(x, 1 / 3) : 7.787037 * x + 4 / 29;\n  }\n  function d3_xyz_rgb(r) {\n    return Math.round(255 * (r <= .00304 ? 12.92 * r : 1.055 * Math.pow(r, 1 / 2.4) - .055));\n  }\n  d3.rgb = d3_rgb;\n  function d3_rgb(r, g, b) {\n    return this instanceof d3_rgb ? void (this.r = ~~r, this.g = ~~g, this.b = ~~b) : arguments.length < 2 ? r instanceof d3_rgb ? new d3_rgb(r.r, r.g, r.b) : d3_rgb_parse(\"\" + r, d3_rgb, d3_hsl_rgb) : new d3_rgb(r, g, b);\n  }\n  function d3_rgbNumber(value) {\n    return new d3_rgb(value >> 16, value >> 8 & 255, value & 255);\n  }\n  function d3_rgbString(value) {\n    return d3_rgbNumber(value) + \"\";\n  }\n  var d3_rgbPrototype = d3_rgb.prototype = new d3_color();\n  d3_rgbPrototype.brighter = function(k) {\n    k = Math.pow(.7, arguments.length ? k : 1);\n    var r = this.r, g = this.g, b = this.b, i = 30;\n    if (!r && !g && !b) return new d3_rgb(i, i, i);\n    if (r && r < i) r = i;\n    if (g && g < i) g = i;\n    if (b && b < i) b = i;\n    return new d3_rgb(Math.min(255, r / k), Math.min(255, g / k), Math.min(255, b / k));\n  };\n  d3_rgbPrototype.darker = function(k) {\n    k = Math.pow(.7, arguments.length ? k : 1);\n    return new d3_rgb(k * this.r, k * this.g, k * this.b);\n  };\n  d3_rgbPrototype.hsl = function() {\n    return d3_rgb_hsl(this.r, this.g, this.b);\n  };\n  d3_rgbPrototype.toString = function() {\n    return \"#\" + d3_rgb_hex(this.r) + d3_rgb_hex(this.g) + d3_rgb_hex(this.b);\n  };\n  function d3_rgb_hex(v) {\n    return v < 16 ? \"0\" + Math.max(0, v).toString(16) : Math.min(255, v).toString(16);\n  }\n  function d3_rgb_parse(format, rgb, hsl) {\n    var r = 0, g = 0, b = 0, m1, m2, color;\n    m1 = /([a-z]+)\\((.*)\\)/i.exec(format);\n    if (m1) {\n      m2 = m1[2].split(\",\");\n      switch (m1[1]) {\n       case \"hsl\":\n        {\n          return hsl(parseFloat(m2[0]), parseFloat(m2[1]) / 100, parseFloat(m2[2]) / 100);\n        }\n\n       case \"rgb\":\n        {\n          return rgb(d3_rgb_parseNumber(m2[0]), d3_rgb_parseNumber(m2[1]), d3_rgb_parseNumber(m2[2]));\n        }\n      }\n    }\n    if (color = d3_rgb_names.get(format)) return rgb(color.r, color.g, color.b);\n    if (format != null && format.charAt(0) === \"#\" && !isNaN(color = parseInt(format.slice(1), 16))) {\n      if (format.length === 4) {\n        r = (color & 3840) >> 4;\n        r = r >> 4 | r;\n        g = color & 240;\n        g = g >> 4 | g;\n        b = color & 15;\n        b = b << 4 | b;\n      } else if (format.length === 7) {\n        r = (color & 16711680) >> 16;\n        g = (color & 65280) >> 8;\n        b = color & 255;\n      }\n    }\n    return rgb(r, g, b);\n  }\n  function d3_rgb_hsl(r, g, b) {\n    var min = Math.min(r /= 255, g /= 255, b /= 255), max = Math.max(r, g, b), d = max - min, h, s, l = (max + min) / 2;\n    if (d) {\n      s = l < .5 ? d / (max + min) : d / (2 - max - min);\n      if (r == max) h = (g - b) / d + (g < b ? 6 : 0); else if (g == max) h = (b - r) / d + 2; else h = (r - g) / d + 4;\n      h *= 60;\n    } else {\n      h = NaN;\n      s = l > 0 && l < 1 ? 0 : h;\n    }\n    return new d3_hsl(h, s, l);\n  }\n  function d3_rgb_lab(r, g, b) {\n    r = d3_rgb_xyz(r);\n    g = d3_rgb_xyz(g);\n    b = d3_rgb_xyz(b);\n    var x = d3_xyz_lab((.4124564 * r + .3575761 * g + .1804375 * b) / d3_lab_X), y = d3_xyz_lab((.2126729 * r + .7151522 * g + .072175 * b) / d3_lab_Y), z = d3_xyz_lab((.0193339 * r + .119192 * g + .9503041 * b) / d3_lab_Z);\n    return d3_lab(116 * y - 16, 500 * (x - y), 200 * (y - z));\n  }\n  function d3_rgb_xyz(r) {\n    return (r /= 255) <= .04045 ? r / 12.92 : Math.pow((r + .055) / 1.055, 2.4);\n  }\n  function d3_rgb_parseNumber(c) {\n    var f = parseFloat(c);\n    return c.charAt(c.length - 1) === \"%\" ? Math.round(f * 2.55) : f;\n  }\n  var d3_rgb_names = d3.map({\n    aliceblue: 15792383,\n    antiquewhite: 16444375,\n    aqua: 65535,\n    aquamarine: 8388564,\n    azure: 15794175,\n    beige: 16119260,\n    bisque: 16770244,\n    black: 0,\n    blanchedalmond: 16772045,\n    blue: 255,\n    blueviolet: 9055202,\n    brown: 10824234,\n    burlywood: 14596231,\n    cadetblue: 6266528,\n    chartreuse: 8388352,\n    chocolate: 13789470,\n    coral: 16744272,\n    cornflowerblue: 6591981,\n    cornsilk: 16775388,\n    crimson: 14423100,\n    cyan: 65535,\n    darkblue: 139,\n    darkcyan: 35723,\n    darkgoldenrod: 12092939,\n    darkgray: 11119017,\n    darkgreen: 25600,\n    darkgrey: 11119017,\n    darkkhaki: 12433259,\n    darkmagenta: 9109643,\n    darkolivegreen: 5597999,\n    darkorange: 16747520,\n    darkorchid: 10040012,\n    darkred: 9109504,\n    darksalmon: 15308410,\n    darkseagreen: 9419919,\n    darkslateblue: 4734347,\n    darkslategray: 3100495,\n    darkslategrey: 3100495,\n    darkturquoise: 52945,\n    darkviolet: 9699539,\n    deeppink: 16716947,\n    deepskyblue: 49151,\n    dimgray: 6908265,\n    dimgrey: 6908265,\n    dodgerblue: 2003199,\n    firebrick: 11674146,\n    floralwhite: 16775920,\n    forestgreen: 2263842,\n    fuchsia: 16711935,\n    gainsboro: 14474460,\n    ghostwhite: 16316671,\n    gold: 16766720,\n    goldenrod: 14329120,\n    gray: 8421504,\n    green: 32768,\n    greenyellow: 11403055,\n    grey: 8421504,\n    honeydew: 15794160,\n    hotpink: 16738740,\n    indianred: 13458524,\n    indigo: 4915330,\n    ivory: 16777200,\n    khaki: 15787660,\n    lavender: 15132410,\n    lavenderblush: 16773365,\n    lawngreen: 8190976,\n    lemonchiffon: 16775885,\n    lightblue: 11393254,\n    lightcoral: 15761536,\n    lightcyan: 14745599,\n    lightgoldenrodyellow: 16448210,\n    lightgray: 13882323,\n    lightgreen: 9498256,\n    lightgrey: 13882323,\n    lightpink: 16758465,\n    lightsalmon: 16752762,\n    lightseagreen: 2142890,\n    lightskyblue: 8900346,\n    lightslategray: 7833753,\n    lightslategrey: 7833753,\n    lightsteelblue: 11584734,\n    lightyellow: 16777184,\n    lime: 65280,\n    limegreen: 3329330,\n    linen: 16445670,\n    magenta: 16711935,\n    maroon: 8388608,\n    mediumaquamarine: 6737322,\n    mediumblue: 205,\n    mediumorchid: 12211667,\n    mediumpurple: 9662683,\n    mediumseagreen: 3978097,\n    mediumslateblue: 8087790,\n    mediumspringgreen: 64154,\n    mediumturquoise: 4772300,\n    mediumvioletred: 13047173,\n    midnightblue: 1644912,\n    mintcream: 16121850,\n    mistyrose: 16770273,\n    moccasin: 16770229,\n    navajowhite: 16768685,\n    navy: 128,\n    oldlace: 16643558,\n    olive: 8421376,\n    olivedrab: 7048739,\n    orange: 16753920,\n    orangered: 16729344,\n    orchid: 14315734,\n    palegoldenrod: 15657130,\n    palegreen: 10025880,\n    paleturquoise: 11529966,\n    palevioletred: 14381203,\n    papayawhip: 16773077,\n    peachpuff: 16767673,\n    peru: 13468991,\n    pink: 16761035,\n    plum: 14524637,\n    powderblue: 11591910,\n    purple: 8388736,\n    red: 16711680,\n    rosybrown: 12357519,\n    royalblue: 4286945,\n    saddlebrown: 9127187,\n    salmon: 16416882,\n    sandybrown: 16032864,\n    seagreen: 3050327,\n    seashell: 16774638,\n    sienna: 10506797,\n    silver: 12632256,\n    skyblue: 8900331,\n    slateblue: 6970061,\n    slategray: 7372944,\n    slategrey: 7372944,\n    snow: 16775930,\n    springgreen: 65407,\n    steelblue: 4620980,\n    tan: 13808780,\n    teal: 32896,\n    thistle: 14204888,\n    tomato: 16737095,\n    turquoise: 4251856,\n    violet: 15631086,\n    wheat: 16113331,\n    white: 16777215,\n    whitesmoke: 16119285,\n    yellow: 16776960,\n    yellowgreen: 10145074\n  });\n  d3_rgb_names.forEach(function(key, value) {\n    d3_rgb_names.set(key, d3_rgbNumber(value));\n  });\n  function d3_functor(v) {\n    return typeof v === \"function\" ? v : function() {\n      return v;\n    };\n  }\n  d3.functor = d3_functor;\n  function d3_identity(d) {\n    return d;\n  }\n  d3.xhr = d3_xhrType(d3_identity);\n  function d3_xhrType(response) {\n    return function(url, mimeType, callback) {\n      if (arguments.length === 2 && typeof mimeType === \"function\") callback = mimeType, \n      mimeType = null;\n      return d3_xhr(url, mimeType, response, callback);\n    };\n  }\n  function d3_xhr(url, mimeType, response, callback) {\n    var xhr = {}, dispatch = d3.dispatch(\"beforesend\", \"progress\", \"load\", \"error\"), headers = {}, request = new XMLHttpRequest(), responseType = null;\n    if (d3_window.XDomainRequest && !(\"withCredentials\" in request) && /^(http(s)?:)?\\/\\//.test(url)) request = new XDomainRequest();\n    \"onload\" in request ? request.onload = request.onerror = respond : request.onreadystatechange = function() {\n      request.readyState > 3 && respond();\n    };\n    function respond() {\n      var status = request.status, result;\n      if (!status && d3_xhrHasResponse(request) || status >= 200 && status < 300 || status === 304) {\n        try {\n          result = response.call(xhr, request);\n        } catch (e) {\n          dispatch.error.call(xhr, e);\n          return;\n        }\n        dispatch.load.call(xhr, result);\n      } else {\n        dispatch.error.call(xhr, request);\n      }\n    }\n    request.onprogress = function(event) {\n      var o = d3.event;\n      d3.event = event;\n      try {\n        dispatch.progress.call(xhr, request);\n      } finally {\n        d3.event = o;\n      }\n    };\n    xhr.header = function(name, value) {\n      name = (name + \"\").toLowerCase();\n      if (arguments.length < 2) return headers[name];\n      if (value == null) delete headers[name]; else headers[name] = value + \"\";\n      return xhr;\n    };\n    xhr.mimeType = function(value) {\n      if (!arguments.length) return mimeType;\n      mimeType = value == null ? null : value + \"\";\n      return xhr;\n    };\n    xhr.responseType = function(value) {\n      if (!arguments.length) return responseType;\n      responseType = value;\n      return xhr;\n    };\n    xhr.response = function(value) {\n      response = value;\n      return xhr;\n    };\n    [ \"get\", \"post\" ].forEach(function(method) {\n      xhr[method] = function() {\n        return xhr.send.apply(xhr, [ method ].concat(d3_array(arguments)));\n      };\n    });\n    xhr.send = function(method, data, callback) {\n      if (arguments.length === 2 && typeof data === \"function\") callback = data, data = null;\n      request.open(method, url, true);\n      if (mimeType != null && !(\"accept\" in headers)) headers[\"accept\"] = mimeType + \",*/*\";\n      if (request.setRequestHeader) for (var name in headers) request.setRequestHeader(name, headers[name]);\n      if (mimeType != null && request.overrideMimeType) request.overrideMimeType(mimeType);\n      if (responseType != null) request.responseType = responseType;\n      if (callback != null) xhr.on(\"error\", callback).on(\"load\", function(request) {\n        callback(null, request);\n      });\n      dispatch.beforesend.call(xhr, request);\n      request.send(data == null ? null : data);\n      return xhr;\n    };\n    xhr.abort = function() {\n      request.abort();\n      return xhr;\n    };\n    d3.rebind(xhr, dispatch, \"on\");\n    return callback == null ? xhr : xhr.get(d3_xhr_fixCallback(callback));\n  }\n  function d3_xhr_fixCallback(callback) {\n    return callback.length === 1 ? function(error, request) {\n      callback(error == null ? request : null);\n    } : callback;\n  }\n  function d3_xhrHasResponse(request) {\n    var type = request.responseType;\n    return type && type !== \"text\" ? request.response : request.responseText;\n  }\n  d3.dsv = function(delimiter, mimeType) {\n    var reFormat = new RegExp('[\"' + delimiter + \"\\n]\"), delimiterCode = delimiter.charCodeAt(0);\n    function dsv(url, row, callback) {\n      if (arguments.length < 3) callback = row, row = null;\n      var xhr = d3_xhr(url, mimeType, row == null ? response : typedResponse(row), callback);\n      xhr.row = function(_) {\n        return arguments.length ? xhr.response((row = _) == null ? response : typedResponse(_)) : row;\n      };\n      return xhr;\n    }\n    function response(request) {\n      return dsv.parse(request.responseText);\n    }\n    function typedResponse(f) {\n      return function(request) {\n        return dsv.parse(request.responseText, f);\n      };\n    }\n    dsv.parse = function(text, f) {\n      var o;\n      return dsv.parseRows(text, function(row, i) {\n        if (o) return o(row, i - 1);\n        var a = new Function(\"d\", \"return {\" + row.map(function(name, i) {\n          return JSON.stringify(name) + \": d[\" + i + \"]\";\n        }).join(\",\") + \"}\");\n        o = f ? function(row, i) {\n          return f(a(row), i);\n        } : a;\n      });\n    };\n    dsv.parseRows = function(text, f) {\n      var EOL = {}, EOF = {}, rows = [], N = text.length, I = 0, n = 0, t, eol;\n      function token() {\n        if (I >= N) return EOF;\n        if (eol) return eol = false, EOL;\n        var j = I;\n        if (text.charCodeAt(j) === 34) {\n          var i = j;\n          while (i++ < N) {\n            if (text.charCodeAt(i) === 34) {\n              if (text.charCodeAt(i + 1) !== 34) break;\n              ++i;\n            }\n          }\n          I = i + 2;\n          var c = text.charCodeAt(i + 1);\n          if (c === 13) {\n            eol = true;\n            if (text.charCodeAt(i + 2) === 10) ++I;\n          } else if (c === 10) {\n            eol = true;\n          }\n          return text.slice(j + 1, i).replace(/\"\"/g, '\"');\n        }\n        while (I < N) {\n          var c = text.charCodeAt(I++), k = 1;\n          if (c === 10) eol = true; else if (c === 13) {\n            eol = true;\n            if (text.charCodeAt(I) === 10) ++I, ++k;\n          } else if (c !== delimiterCode) continue;\n          return text.slice(j, I - k);\n        }\n        return text.slice(j);\n      }\n      while ((t = token()) !== EOF) {\n        var a = [];\n        while (t !== EOL && t !== EOF) {\n          a.push(t);\n          t = token();\n        }\n        if (f && (a = f(a, n++)) == null) continue;\n        rows.push(a);\n      }\n      return rows;\n    };\n    dsv.format = function(rows) {\n      if (Array.isArray(rows[0])) return dsv.formatRows(rows);\n      var fieldSet = new d3_Set(), fields = [];\n      rows.forEach(function(row) {\n        for (var field in row) {\n          if (!fieldSet.has(field)) {\n            fields.push(fieldSet.add(field));\n          }\n        }\n      });\n      return [ fields.map(formatValue).join(delimiter) ].concat(rows.map(function(row) {\n        return fields.map(function(field) {\n          return formatValue(row[field]);\n        }).join(delimiter);\n      })).join(\"\\n\");\n    };\n    dsv.formatRows = function(rows) {\n      return rows.map(formatRow).join(\"\\n\");\n    };\n    function formatRow(row) {\n      return row.map(formatValue).join(delimiter);\n    }\n    function formatValue(text) {\n      return reFormat.test(text) ? '\"' + text.replace(/\\\"/g, '\"\"') + '\"' : text;\n    }\n    return dsv;\n  };\n  d3.csv = d3.dsv(\",\", \"text/csv\");\n  d3.tsv = d3.dsv(\"\t\", \"text/tab-separated-values\");\n  var d3_timer_queueHead, d3_timer_queueTail, d3_timer_interval, d3_timer_timeout, d3_timer_active, d3_timer_frame = d3_window[d3_vendorSymbol(d3_window, \"requestAnimationFrame\")] || function(callback) {\n    setTimeout(callback, 17);\n  };\n  d3.timer = function(callback, delay, then) {\n    var n = arguments.length;\n    if (n < 2) delay = 0;\n    if (n < 3) then = Date.now();\n    var time = then + delay, timer = {\n      c: callback,\n      t: time,\n      f: false,\n      n: null\n    };\n    if (d3_timer_queueTail) d3_timer_queueTail.n = timer; else d3_timer_queueHead = timer;\n    d3_timer_queueTail = timer;\n    if (!d3_timer_interval) {\n      d3_timer_timeout = clearTimeout(d3_timer_timeout);\n      d3_timer_interval = 1;\n      d3_timer_frame(d3_timer_step);\n    }\n  };\n  function d3_timer_step() {\n    var now = d3_timer_mark(), delay = d3_timer_sweep() - now;\n    if (delay > 24) {\n      if (isFinite(delay)) {\n        clearTimeout(d3_timer_timeout);\n        d3_timer_timeout = setTimeout(d3_timer_step, delay);\n      }\n      d3_timer_interval = 0;\n    } else {\n      d3_timer_interval = 1;\n      d3_timer_frame(d3_timer_step);\n    }\n  }\n  d3.timer.flush = function() {\n    d3_timer_mark();\n    d3_timer_sweep();\n  };\n  function d3_timer_mark() {\n    var now = Date.now();\n    d3_timer_active = d3_timer_queueHead;\n    while (d3_timer_active) {\n      if (now >= d3_timer_active.t) d3_timer_active.f = d3_timer_active.c(now - d3_timer_active.t);\n      d3_timer_active = d3_timer_active.n;\n    }\n    return now;\n  }\n  function d3_timer_sweep() {\n    var t0, t1 = d3_timer_queueHead, time = Infinity;\n    while (t1) {\n      if (t1.f) {\n        t1 = t0 ? t0.n = t1.n : d3_timer_queueHead = t1.n;\n      } else {\n        if (t1.t < time) time = t1.t;\n        t1 = (t0 = t1).n;\n      }\n    }\n    d3_timer_queueTail = t0;\n    return time;\n  }\n  function d3_format_precision(x, p) {\n    return p - (x ? Math.ceil(Math.log(x) / Math.LN10) : 1);\n  }\n  d3.round = function(x, n) {\n    return n ? Math.round(x * (n = Math.pow(10, n))) / n : Math.round(x);\n  };\n  var d3_formatPrefixes = [ \"y\", \"z\", \"a\", \"f\", \"p\", \"n\", \"µ\", \"m\", \"\", \"k\", \"M\", \"G\", \"T\", \"P\", \"E\", \"Z\", \"Y\" ].map(d3_formatPrefix);\n  d3.formatPrefix = function(value, precision) {\n    var i = 0;\n    if (value) {\n      if (value < 0) value *= -1;\n      if (precision) value = d3.round(value, d3_format_precision(value, precision));\n      i = 1 + Math.floor(1e-12 + Math.log(value) / Math.LN10);\n      i = Math.max(-24, Math.min(24, Math.floor((i - 1) / 3) * 3));\n    }\n    return d3_formatPrefixes[8 + i / 3];\n  };\n  function d3_formatPrefix(d, i) {\n    var k = Math.pow(10, abs(8 - i) * 3);\n    return {\n      scale: i > 8 ? function(d) {\n        return d / k;\n      } : function(d) {\n        return d * k;\n      },\n      symbol: d\n    };\n  }\n  function d3_locale_numberFormat(locale) {\n    var locale_decimal = locale.decimal, locale_thousands = locale.thousands, locale_grouping = locale.grouping, locale_currency = locale.currency, formatGroup = locale_grouping && locale_thousands ? function(value, width) {\n      var i = value.length, t = [], j = 0, g = locale_grouping[0], length = 0;\n      while (i > 0 && g > 0) {\n        if (length + g + 1 > width) g = Math.max(1, width - length);\n        t.push(value.substring(i -= g, i + g));\n        if ((length += g + 1) > width) break;\n        g = locale_grouping[j = (j + 1) % locale_grouping.length];\n      }\n      return t.reverse().join(locale_thousands);\n    } : d3_identity;\n    return function(specifier) {\n      var match = d3_format_re.exec(specifier), fill = match[1] || \" \", align = match[2] || \">\", sign = match[3] || \"-\", symbol = match[4] || \"\", zfill = match[5], width = +match[6], comma = match[7], precision = match[8], type = match[9], scale = 1, prefix = \"\", suffix = \"\", integer = false, exponent = true;\n      if (precision) precision = +precision.substring(1);\n      if (zfill || fill === \"0\" && align === \"=\") {\n        zfill = fill = \"0\";\n        align = \"=\";\n      }\n      switch (type) {\n       case \"n\":\n        comma = true;\n        type = \"g\";\n        break;\n\n       case \"%\":\n        scale = 100;\n        suffix = \"%\";\n        type = \"f\";\n        break;\n\n       case \"p\":\n        scale = 100;\n        suffix = \"%\";\n        type = \"r\";\n        break;\n\n       case \"b\":\n       case \"o\":\n       case \"x\":\n       case \"X\":\n        if (symbol === \"#\") prefix = \"0\" + type.toLowerCase();\n\n       case \"c\":\n        exponent = false;\n\n       case \"d\":\n        integer = true;\n        precision = 0;\n        break;\n\n       case \"s\":\n        scale = -1;\n        type = \"r\";\n        break;\n      }\n      if (symbol === \"$\") prefix = locale_currency[0], suffix = locale_currency[1];\n      if (type == \"r\" && !precision) type = \"g\";\n      if (precision != null) {\n        if (type == \"g\") precision = Math.max(1, Math.min(21, precision)); else if (type == \"e\" || type == \"f\") precision = Math.max(0, Math.min(20, precision));\n      }\n      type = d3_format_types.get(type) || d3_format_typeDefault;\n      var zcomma = zfill && comma;\n      return function(value) {\n        var fullSuffix = suffix;\n        if (integer && value % 1) return \"\";\n        var negative = value < 0 || value === 0 && 1 / value < 0 ? (value = -value, \"-\") : sign === \"-\" ? \"\" : sign;\n        if (scale < 0) {\n          var unit = d3.formatPrefix(value, precision);\n          value = unit.scale(value);\n          fullSuffix = unit.symbol + suffix;\n        } else {\n          value *= scale;\n        }\n        value = type(value, precision);\n        var i = value.lastIndexOf(\".\"), before, after;\n        if (i < 0) {\n          var j = exponent ? value.lastIndexOf(\"e\") : -1;\n          if (j < 0) before = value, after = \"\"; else before = value.substring(0, j), after = value.substring(j);\n        } else {\n          before = value.substring(0, i);\n          after = locale_decimal + value.substring(i + 1);\n        }\n        if (!zfill && comma) before = formatGroup(before, Infinity);\n        var length = prefix.length + before.length + after.length + (zcomma ? 0 : negative.length), padding = length < width ? new Array(length = width - length + 1).join(fill) : \"\";\n        if (zcomma) before = formatGroup(padding + before, padding.length ? width - after.length : Infinity);\n        negative += prefix;\n        value = before + after;\n        return (align === \"<\" ? negative + value + padding : align === \">\" ? padding + negative + value : align === \"^\" ? padding.substring(0, length >>= 1) + negative + value + padding.substring(length) : negative + (zcomma ? value : padding + value)) + fullSuffix;\n      };\n    };\n  }\n  var d3_format_re = /(?:([^{])?([<>=^]))?([+\\- ])?([$#])?(0)?(\\d+)?(,)?(\\.-?\\d+)?([a-z%])?/i;\n  var d3_format_types = d3.map({\n    b: function(x) {\n      return x.toString(2);\n    },\n    c: function(x) {\n      return String.fromCharCode(x);\n    },\n    o: function(x) {\n      return x.toString(8);\n    },\n    x: function(x) {\n      return x.toString(16);\n    },\n    X: function(x) {\n      return x.toString(16).toUpperCase();\n    },\n    g: function(x, p) {\n      return x.toPrecision(p);\n    },\n    e: function(x, p) {\n      return x.toExponential(p);\n    },\n    f: function(x, p) {\n      return x.toFixed(p);\n    },\n    r: function(x, p) {\n      return (x = d3.round(x, d3_format_precision(x, p))).toFixed(Math.max(0, Math.min(20, d3_format_precision(x * (1 + 1e-15), p))));\n    }\n  });\n  function d3_format_typeDefault(x) {\n    return x + \"\";\n  }\n  var d3_time = d3.time = {}, d3_date = Date;\n  function d3_date_utc() {\n    this._ = new Date(arguments.length > 1 ? Date.UTC.apply(this, arguments) : arguments[0]);\n  }\n  d3_date_utc.prototype = {\n    getDate: function() {\n      return this._.getUTCDate();\n    },\n    getDay: function() {\n      return this._.getUTCDay();\n    },\n    getFullYear: function() {\n      return this._.getUTCFullYear();\n    },\n    getHours: function() {\n      return this._.getUTCHours();\n    },\n    getMilliseconds: function() {\n      return this._.getUTCMilliseconds();\n    },\n    getMinutes: function() {\n      return this._.getUTCMinutes();\n    },\n    getMonth: function() {\n      return this._.getUTCMonth();\n    },\n    getSeconds: function() {\n      return this._.getUTCSeconds();\n    },\n    getTime: function() {\n      return this._.getTime();\n    },\n    getTimezoneOffset: function() {\n      return 0;\n    },\n    valueOf: function() {\n      return this._.valueOf();\n    },\n    setDate: function() {\n      d3_time_prototype.setUTCDate.apply(this._, arguments);\n    },\n    setDay: function() {\n      d3_time_prototype.setUTCDay.apply(this._, arguments);\n    },\n    setFullYear: function() {\n      d3_time_prototype.setUTCFullYear.apply(this._, arguments);\n    },\n    setHours: function() {\n      d3_time_prototype.setUTCHours.apply(this._, arguments);\n    },\n    setMilliseconds: function() {\n      d3_time_prototype.setUTCMilliseconds.apply(this._, arguments);\n    },\n    setMinutes: function() {\n      d3_time_prototype.setUTCMinutes.apply(this._, arguments);\n    },\n    setMonth: function() {\n      d3_time_prototype.setUTCMonth.apply(this._, arguments);\n    },\n    setSeconds: function() {\n      d3_time_prototype.setUTCSeconds.apply(this._, arguments);\n    },\n    setTime: function() {\n      d3_time_prototype.setTime.apply(this._, arguments);\n    }\n  };\n  var d3_time_prototype = Date.prototype;\n  function d3_time_interval(local, step, number) {\n    function round(date) {\n      var d0 = local(date), d1 = offset(d0, 1);\n      return date - d0 < d1 - date ? d0 : d1;\n    }\n    function ceil(date) {\n      step(date = local(new d3_date(date - 1)), 1);\n      return date;\n    }\n    function offset(date, k) {\n      step(date = new d3_date(+date), k);\n      return date;\n    }\n    function range(t0, t1, dt) {\n      var time = ceil(t0), times = [];\n      if (dt > 1) {\n        while (time < t1) {\n          if (!(number(time) % dt)) times.push(new Date(+time));\n          step(time, 1);\n        }\n      } else {\n        while (time < t1) times.push(new Date(+time)), step(time, 1);\n      }\n      return times;\n    }\n    function range_utc(t0, t1, dt) {\n      try {\n        d3_date = d3_date_utc;\n        var utc = new d3_date_utc();\n        utc._ = t0;\n        return range(utc, t1, dt);\n      } finally {\n        d3_date = Date;\n      }\n    }\n    local.floor = local;\n    local.round = round;\n    local.ceil = ceil;\n    local.offset = offset;\n    local.range = range;\n    var utc = local.utc = d3_time_interval_utc(local);\n    utc.floor = utc;\n    utc.round = d3_time_interval_utc(round);\n    utc.ceil = d3_time_interval_utc(ceil);\n    utc.offset = d3_time_interval_utc(offset);\n    utc.range = range_utc;\n    return local;\n  }\n  function d3_time_interval_utc(method) {\n    return function(date, k) {\n      try {\n        d3_date = d3_date_utc;\n        var utc = new d3_date_utc();\n        utc._ = date;\n        return method(utc, k)._;\n      } finally {\n        d3_date = Date;\n      }\n    };\n  }\n  d3_time.year = d3_time_interval(function(date) {\n    date = d3_time.day(date);\n    date.setMonth(0, 1);\n    return date;\n  }, function(date, offset) {\n    date.setFullYear(date.getFullYear() + offset);\n  }, function(date) {\n    return date.getFullYear();\n  });\n  d3_time.years = d3_time.year.range;\n  d3_time.years.utc = d3_time.year.utc.range;\n  d3_time.day = d3_time_interval(function(date) {\n    var day = new d3_date(2e3, 0);\n    day.setFullYear(date.getFullYear(), date.getMonth(), date.getDate());\n    return day;\n  }, function(date, offset) {\n    date.setDate(date.getDate() + offset);\n  }, function(date) {\n    return date.getDate() - 1;\n  });\n  d3_time.days = d3_time.day.range;\n  d3_time.days.utc = d3_time.day.utc.range;\n  d3_time.dayOfYear = function(date) {\n    var year = d3_time.year(date);\n    return Math.floor((date - year - (date.getTimezoneOffset() - year.getTimezoneOffset()) * 6e4) / 864e5);\n  };\n  [ \"sunday\", \"monday\", \"tuesday\", \"wednesday\", \"thursday\", \"friday\", \"saturday\" ].forEach(function(day, i) {\n    i = 7 - i;\n    var interval = d3_time[day] = d3_time_interval(function(date) {\n      (date = d3_time.day(date)).setDate(date.getDate() - (date.getDay() + i) % 7);\n      return date;\n    }, function(date, offset) {\n      date.setDate(date.getDate() + Math.floor(offset) * 7);\n    }, function(date) {\n      var day = d3_time.year(date).getDay();\n      return Math.floor((d3_time.dayOfYear(date) + (day + i) % 7) / 7) - (day !== i);\n    });\n    d3_time[day + \"s\"] = interval.range;\n    d3_time[day + \"s\"].utc = interval.utc.range;\n    d3_time[day + \"OfYear\"] = function(date) {\n      var day = d3_time.year(date).getDay();\n      return Math.floor((d3_time.dayOfYear(date) + (day + i) % 7) / 7);\n    };\n  });\n  d3_time.week = d3_time.sunday;\n  d3_time.weeks = d3_time.sunday.range;\n  d3_time.weeks.utc = d3_time.sunday.utc.range;\n  d3_time.weekOfYear = d3_time.sundayOfYear;\n  function d3_locale_timeFormat(locale) {\n    var locale_dateTime = locale.dateTime, locale_date = locale.date, locale_time = locale.time, locale_periods = locale.periods, locale_days = locale.days, locale_shortDays = locale.shortDays, locale_months = locale.months, locale_shortMonths = locale.shortMonths;\n    function d3_time_format(template) {\n      var n = template.length;\n      function format(date) {\n        var string = [], i = -1, j = 0, c, p, f;\n        while (++i < n) {\n          if (template.charCodeAt(i) === 37) {\n            string.push(template.slice(j, i));\n            if ((p = d3_time_formatPads[c = template.charAt(++i)]) != null) c = template.charAt(++i);\n            if (f = d3_time_formats[c]) c = f(date, p == null ? c === \"e\" ? \" \" : \"0\" : p);\n            string.push(c);\n            j = i + 1;\n          }\n        }\n        string.push(template.slice(j, i));\n        return string.join(\"\");\n      }\n      format.parse = function(string) {\n        var d = {\n          y: 1900,\n          m: 0,\n          d: 1,\n          H: 0,\n          M: 0,\n          S: 0,\n          L: 0,\n          Z: null\n        }, i = d3_time_parse(d, template, string, 0);\n        if (i != string.length) return null;\n        if (\"p\" in d) d.H = d.H % 12 + d.p * 12;\n        var localZ = d.Z != null && d3_date !== d3_date_utc, date = new (localZ ? d3_date_utc : d3_date)();\n        if (\"j\" in d) date.setFullYear(d.y, 0, d.j); else if (\"w\" in d && (\"W\" in d || \"U\" in d)) {\n          date.setFullYear(d.y, 0, 1);\n          date.setFullYear(d.y, 0, \"W\" in d ? (d.w + 6) % 7 + d.W * 7 - (date.getDay() + 5) % 7 : d.w + d.U * 7 - (date.getDay() + 6) % 7);\n        } else date.setFullYear(d.y, d.m, d.d);\n        date.setHours(d.H + (d.Z / 100 | 0), d.M + d.Z % 100, d.S, d.L);\n        return localZ ? date._ : date;\n      };\n      format.toString = function() {\n        return template;\n      };\n      return format;\n    }\n    function d3_time_parse(date, template, string, j) {\n      var c, p, t, i = 0, n = template.length, m = string.length;\n      while (i < n) {\n        if (j >= m) return -1;\n        c = template.charCodeAt(i++);\n        if (c === 37) {\n          t = template.charAt(i++);\n          p = d3_time_parsers[t in d3_time_formatPads ? template.charAt(i++) : t];\n          if (!p || (j = p(date, string, j)) < 0) return -1;\n        } else if (c != string.charCodeAt(j++)) {\n          return -1;\n        }\n      }\n      return j;\n    }\n    d3_time_format.utc = function(template) {\n      var local = d3_time_format(template);\n      function format(date) {\n        try {\n          d3_date = d3_date_utc;\n          var utc = new d3_date();\n          utc._ = date;\n          return local(utc);\n        } finally {\n          d3_date = Date;\n        }\n      }\n      format.parse = function(string) {\n        try {\n          d3_date = d3_date_utc;\n          var date = local.parse(string);\n          return date && date._;\n        } finally {\n          d3_date = Date;\n        }\n      };\n      format.toString = local.toString;\n      return format;\n    };\n    d3_time_format.multi = d3_time_format.utc.multi = d3_time_formatMulti;\n    var d3_time_periodLookup = d3.map(), d3_time_dayRe = d3_time_formatRe(locale_days), d3_time_dayLookup = d3_time_formatLookup(locale_days), d3_time_dayAbbrevRe = d3_time_formatRe(locale_shortDays), d3_time_dayAbbrevLookup = d3_time_formatLookup(locale_shortDays), d3_time_monthRe = d3_time_formatRe(locale_months), d3_time_monthLookup = d3_time_formatLookup(locale_months), d3_time_monthAbbrevRe = d3_time_formatRe(locale_shortMonths), d3_time_monthAbbrevLookup = d3_time_formatLookup(locale_shortMonths);\n    locale_periods.forEach(function(p, i) {\n      d3_time_periodLookup.set(p.toLowerCase(), i);\n    });\n    var d3_time_formats = {\n      a: function(d) {\n        return locale_shortDays[d.getDay()];\n      },\n      A: function(d) {\n        return locale_days[d.getDay()];\n      },\n      b: function(d) {\n        return locale_shortMonths[d.getMonth()];\n      },\n      B: function(d) {\n        return locale_months[d.getMonth()];\n      },\n      c: d3_time_format(locale_dateTime),\n      d: function(d, p) {\n        return d3_time_formatPad(d.getDate(), p, 2);\n      },\n      e: function(d, p) {\n        return d3_time_formatPad(d.getDate(), p, 2);\n      },\n      H: function(d, p) {\n        return d3_time_formatPad(d.getHours(), p, 2);\n      },\n      I: function(d, p) {\n        return d3_time_formatPad(d.getHours() % 12 || 12, p, 2);\n      },\n      j: function(d, p) {\n        return d3_time_formatPad(1 + d3_time.dayOfYear(d), p, 3);\n      },\n      L: function(d, p) {\n        return d3_time_formatPad(d.getMilliseconds(), p, 3);\n      },\n      m: function(d, p) {\n        return d3_time_formatPad(d.getMonth() + 1, p, 2);\n      },\n      M: function(d, p) {\n        return d3_time_formatPad(d.getMinutes(), p, 2);\n      },\n      p: function(d) {\n        return locale_periods[+(d.getHours() >= 12)];\n      },\n      S: function(d, p) {\n        return d3_time_formatPad(d.getSeconds(), p, 2);\n      },\n      U: function(d, p) {\n        return d3_time_formatPad(d3_time.sundayOfYear(d), p, 2);\n      },\n      w: function(d) {\n        return d.getDay();\n      },\n      W: function(d, p) {\n        return d3_time_formatPad(d3_time.mondayOfYear(d), p, 2);\n      },\n      x: d3_time_format(locale_date),\n      X: d3_time_format(locale_time),\n      y: function(d, p) {\n        return d3_time_formatPad(d.getFullYear() % 100, p, 2);\n      },\n      Y: function(d, p) {\n        return d3_time_formatPad(d.getFullYear() % 1e4, p, 4);\n      },\n      Z: d3_time_zone,\n      \"%\": function() {\n        return \"%\";\n      }\n    };\n    var d3_time_parsers = {\n      a: d3_time_parseWeekdayAbbrev,\n      A: d3_time_parseWeekday,\n      b: d3_time_parseMonthAbbrev,\n      B: d3_time_parseMonth,\n      c: d3_time_parseLocaleFull,\n      d: d3_time_parseDay,\n      e: d3_time_parseDay,\n      H: d3_time_parseHour24,\n      I: d3_time_parseHour24,\n      j: d3_time_parseDayOfYear,\n      L: d3_time_parseMilliseconds,\n      m: d3_time_parseMonthNumber,\n      M: d3_time_parseMinutes,\n      p: d3_time_parseAmPm,\n      S: d3_time_parseSeconds,\n      U: d3_time_parseWeekNumberSunday,\n      w: d3_time_parseWeekdayNumber,\n      W: d3_time_parseWeekNumberMonday,\n      x: d3_time_parseLocaleDate,\n      X: d3_time_parseLocaleTime,\n      y: d3_time_parseYear,\n      Y: d3_time_parseFullYear,\n      Z: d3_time_parseZone,\n      \"%\": d3_time_parseLiteralPercent\n    };\n    function d3_time_parseWeekdayAbbrev(date, string, i) {\n      d3_time_dayAbbrevRe.lastIndex = 0;\n      var n = d3_time_dayAbbrevRe.exec(string.slice(i));\n      return n ? (date.w = d3_time_dayAbbrevLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;\n    }\n    function d3_time_parseWeekday(date, string, i) {\n      d3_time_dayRe.lastIndex = 0;\n      var n = d3_time_dayRe.exec(string.slice(i));\n      return n ? (date.w = d3_time_dayLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;\n    }\n    function d3_time_parseMonthAbbrev(date, string, i) {\n      d3_time_monthAbbrevRe.lastIndex = 0;\n      var n = d3_time_monthAbbrevRe.exec(string.slice(i));\n      return n ? (date.m = d3_time_monthAbbrevLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;\n    }\n    function d3_time_parseMonth(date, string, i) {\n      d3_time_monthRe.lastIndex = 0;\n      var n = d3_time_monthRe.exec(string.slice(i));\n      return n ? (date.m = d3_time_monthLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;\n    }\n    function d3_time_parseLocaleFull(date, string, i) {\n      return d3_time_parse(date, d3_time_formats.c.toString(), string, i);\n    }\n    function d3_time_parseLocaleDate(date, string, i) {\n      return d3_time_parse(date, d3_time_formats.x.toString(), string, i);\n    }\n    function d3_time_parseLocaleTime(date, string, i) {\n      return d3_time_parse(date, d3_time_formats.X.toString(), string, i);\n    }\n    function d3_time_parseAmPm(date, string, i) {\n      var n = d3_time_periodLookup.get(string.slice(i, i += 2).toLowerCase());\n      return n == null ? -1 : (date.p = n, i);\n    }\n    return d3_time_format;\n  }\n  var d3_time_formatPads = {\n    \"-\": \"\",\n    _: \" \",\n    \"0\": \"0\"\n  }, d3_time_numberRe = /^\\s*\\d+/, d3_time_percentRe = /^%/;\n  function d3_time_formatPad(value, fill, width) {\n    var sign = value < 0 ? \"-\" : \"\", string = (sign ? -value : value) + \"\", length = string.length;\n    return sign + (length < width ? new Array(width - length + 1).join(fill) + string : string);\n  }\n  function d3_time_formatRe(names) {\n    return new RegExp(\"^(?:\" + names.map(d3.requote).join(\"|\") + \")\", \"i\");\n  }\n  function d3_time_formatLookup(names) {\n    var map = new d3_Map(), i = -1, n = names.length;\n    while (++i < n) map.set(names[i].toLowerCase(), i);\n    return map;\n  }\n  function d3_time_parseWeekdayNumber(date, string, i) {\n    d3_time_numberRe.lastIndex = 0;\n    var n = d3_time_numberRe.exec(string.slice(i, i + 1));\n    return n ? (date.w = +n[0], i + n[0].length) : -1;\n  }\n  function d3_time_parseWeekNumberSunday(date, string, i) {\n    d3_time_numberRe.lastIndex = 0;\n    var n = d3_time_numberRe.exec(string.slice(i));\n    return n ? (date.U = +n[0], i + n[0].length) : -1;\n  }\n  function d3_time_parseWeekNumberMonday(date, string, i) {\n    d3_time_numberRe.lastIndex = 0;\n    var n = d3_time_numberRe.exec(string.slice(i));\n    return n ? (date.W = +n[0], i + n[0].length) : -1;\n  }\n  function d3_time_parseFullYear(date, string, i) {\n    d3_time_numberRe.lastIndex = 0;\n    var n = d3_time_numberRe.exec(string.slice(i, i + 4));\n    return n ? (date.y = +n[0], i + n[0].length) : -1;\n  }\n  function d3_time_parseYear(date, string, i) {\n    d3_time_numberRe.lastIndex = 0;\n    var n = d3_time_numberRe.exec(string.slice(i, i + 2));\n    return n ? (date.y = d3_time_expandYear(+n[0]), i + n[0].length) : -1;\n  }\n  function d3_time_parseZone(date, string, i) {\n    return /^[+-]\\d{4}$/.test(string = string.slice(i, i + 5)) ? (date.Z = -string, \n    i + 5) : -1;\n  }\n  function d3_time_expandYear(d) {\n    return d + (d > 68 ? 1900 : 2e3);\n  }\n  function d3_time_parseMonthNumber(date, string, i) {\n    d3_time_numberRe.lastIndex = 0;\n    var n = d3_time_numberRe.exec(string.slice(i, i + 2));\n    return n ? (date.m = n[0] - 1, i + n[0].length) : -1;\n  }\n  function d3_time_parseDay(date, string, i) {\n    d3_time_numberRe.lastIndex = 0;\n    var n = d3_time_numberRe.exec(string.slice(i, i + 2));\n    return n ? (date.d = +n[0], i + n[0].length) : -1;\n  }\n  function d3_time_parseDayOfYear(date, string, i) {\n    d3_time_numberRe.lastIndex = 0;\n    var n = d3_time_numberRe.exec(string.slice(i, i + 3));\n    return n ? (date.j = +n[0], i + n[0].length) : -1;\n  }\n  function d3_time_parseHour24(date, string, i) {\n    d3_time_numberRe.lastIndex = 0;\n    var n = d3_time_numberRe.exec(string.slice(i, i + 2));\n    return n ? (date.H = +n[0], i + n[0].length) : -1;\n  }\n  function d3_time_parseMinutes(date, string, i) {\n    d3_time_numberRe.lastIndex = 0;\n    var n = d3_time_numberRe.exec(string.slice(i, i + 2));\n    return n ? (date.M = +n[0], i + n[0].length) : -1;\n  }\n  function d3_time_parseSeconds(date, string, i) {\n    d3_time_numberRe.lastIndex = 0;\n    var n = d3_time_numberRe.exec(string.slice(i, i + 2));\n    return n ? (date.S = +n[0], i + n[0].length) : -1;\n  }\n  function d3_time_parseMilliseconds(date, string, i) {\n    d3_time_numberRe.lastIndex = 0;\n    var n = d3_time_numberRe.exec(string.slice(i, i + 3));\n    return n ? (date.L = +n[0], i + n[0].length) : -1;\n  }\n  function d3_time_zone(d) {\n    var z = d.getTimezoneOffset(), zs = z > 0 ? \"-\" : \"+\", zh = abs(z) / 60 | 0, zm = abs(z) % 60;\n    return zs + d3_time_formatPad(zh, \"0\", 2) + d3_time_formatPad(zm, \"0\", 2);\n  }\n  function d3_time_parseLiteralPercent(date, string, i) {\n    d3_time_percentRe.lastIndex = 0;\n    var n = d3_time_percentRe.exec(string.slice(i, i + 1));\n    return n ? i + n[0].length : -1;\n  }\n  function d3_time_formatMulti(formats) {\n    var n = formats.length, i = -1;\n    while (++i < n) formats[i][0] = this(formats[i][0]);\n    return function(date) {\n      var i = 0, f = formats[i];\n      while (!f[1](date)) f = formats[++i];\n      return f[0](date);\n    };\n  }\n  d3.locale = function(locale) {\n    return {\n      numberFormat: d3_locale_numberFormat(locale),\n      timeFormat: d3_locale_timeFormat(locale)\n    };\n  };\n  var d3_locale_enUS = d3.locale({\n    decimal: \".\",\n    thousands: \",\",\n    grouping: [ 3 ],\n    currency: [ \"$\", \"\" ],\n    dateTime: \"%a %b %e %X %Y\",\n    date: \"%m/%d/%Y\",\n    time: \"%H:%M:%S\",\n    periods: [ \"AM\", \"PM\" ],\n    days: [ \"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\" ],\n    shortDays: [ \"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\" ],\n    months: [ \"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\" ],\n    shortMonths: [ \"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\" ]\n  });\n  d3.format = d3_locale_enUS.numberFormat;\n  d3.geo = {};\n  function d3_adder() {}\n  d3_adder.prototype = {\n    s: 0,\n    t: 0,\n    add: function(y) {\n      d3_adderSum(y, this.t, d3_adderTemp);\n      d3_adderSum(d3_adderTemp.s, this.s, this);\n      if (this.s) this.t += d3_adderTemp.t; else this.s = d3_adderTemp.t;\n    },\n    reset: function() {\n      this.s = this.t = 0;\n    },\n    valueOf: function() {\n      return this.s;\n    }\n  };\n  var d3_adderTemp = new d3_adder();\n  function d3_adderSum(a, b, o) {\n    var x = o.s = a + b, bv = x - a, av = x - bv;\n    o.t = a - av + (b - bv);\n  }\n  d3.geo.stream = function(object, listener) {\n    if (object && d3_geo_streamObjectType.hasOwnProperty(object.type)) {\n      d3_geo_streamObjectType[object.type](object, listener);\n    } else {\n      d3_geo_streamGeometry(object, listener);\n    }\n  };\n  function d3_geo_streamGeometry(geometry, listener) {\n    if (geometry && d3_geo_streamGeometryType.hasOwnProperty(geometry.type)) {\n      d3_geo_streamGeometryType[geometry.type](geometry, listener);\n    }\n  }\n  var d3_geo_streamObjectType = {\n    Feature: function(feature, listener) {\n      d3_geo_streamGeometry(feature.geometry, listener);\n    },\n    FeatureCollection: function(object, listener) {\n      var features = object.features, i = -1, n = features.length;\n      while (++i < n) d3_geo_streamGeometry(features[i].geometry, listener);\n    }\n  };\n  var d3_geo_streamGeometryType = {\n    Sphere: function(object, listener) {\n      listener.sphere();\n    },\n    Point: function(object, listener) {\n      object = object.coordinates;\n      listener.point(object[0], object[1], object[2]);\n    },\n    MultiPoint: function(object, listener) {\n      var coordinates = object.coordinates, i = -1, n = coordinates.length;\n      while (++i < n) object = coordinates[i], listener.point(object[0], object[1], object[2]);\n    },\n    LineString: function(object, listener) {\n      d3_geo_streamLine(object.coordinates, listener, 0);\n    },\n    MultiLineString: function(object, listener) {\n      var coordinates = object.coordinates, i = -1, n = coordinates.length;\n      while (++i < n) d3_geo_streamLine(coordinates[i], listener, 0);\n    },\n    Polygon: function(object, listener) {\n      d3_geo_streamPolygon(object.coordinates, listener);\n    },\n    MultiPolygon: function(object, listener) {\n      var coordinates = object.coordinates, i = -1, n = coordinates.length;\n      while (++i < n) d3_geo_streamPolygon(coordinates[i], listener);\n    },\n    GeometryCollection: function(object, listener) {\n      var geometries = object.geometries, i = -1, n = geometries.length;\n      while (++i < n) d3_geo_streamGeometry(geometries[i], listener);\n    }\n  };\n  function d3_geo_streamLine(coordinates, listener, closed) {\n    var i = -1, n = coordinates.length - closed, coordinate;\n    listener.lineStart();\n    while (++i < n) coordinate = coordinates[i], listener.point(coordinate[0], coordinate[1], coordinate[2]);\n    listener.lineEnd();\n  }\n  function d3_geo_streamPolygon(coordinates, listener) {\n    var i = -1, n = coordinates.length;\n    listener.polygonStart();\n    while (++i < n) d3_geo_streamLine(coordinates[i], listener, 1);\n    listener.polygonEnd();\n  }\n  d3.geo.area = function(object) {\n    d3_geo_areaSum = 0;\n    d3.geo.stream(object, d3_geo_area);\n    return d3_geo_areaSum;\n  };\n  var d3_geo_areaSum, d3_geo_areaRingSum = new d3_adder();\n  var d3_geo_area = {\n    sphere: function() {\n      d3_geo_areaSum += 4 * π;\n    },\n    point: d3_noop,\n    lineStart: d3_noop,\n    lineEnd: d3_noop,\n    polygonStart: function() {\n      d3_geo_areaRingSum.reset();\n      d3_geo_area.lineStart = d3_geo_areaRingStart;\n    },\n    polygonEnd: function() {\n      var area = 2 * d3_geo_areaRingSum;\n      d3_geo_areaSum += area < 0 ? 4 * π + area : area;\n      d3_geo_area.lineStart = d3_geo_area.lineEnd = d3_geo_area.point = d3_noop;\n    }\n  };\n  function d3_geo_areaRingStart() {\n    var λ00, φ00, λ0, cosφ0, sinφ0;\n    d3_geo_area.point = function(λ, φ) {\n      d3_geo_area.point = nextPoint;\n      λ0 = (λ00 = λ) * d3_radians, cosφ0 = Math.cos(φ = (φ00 = φ) * d3_radians / 2 + π / 4), \n      sinφ0 = Math.sin(φ);\n    };\n    function nextPoint(λ, φ) {\n      λ *= d3_radians;\n      φ = φ * d3_radians / 2 + π / 4;\n      var dλ = λ - λ0, sdλ = dλ >= 0 ? 1 : -1, adλ = sdλ * dλ, cosφ = Math.cos(φ), sinφ = Math.sin(φ), k = sinφ0 * sinφ, u = cosφ0 * cosφ + k * Math.cos(adλ), v = k * sdλ * Math.sin(adλ);\n      d3_geo_areaRingSum.add(Math.atan2(v, u));\n      λ0 = λ, cosφ0 = cosφ, sinφ0 = sinφ;\n    }\n    d3_geo_area.lineEnd = function() {\n      nextPoint(λ00, φ00);\n    };\n  }\n  function d3_geo_cartesian(spherical) {\n    var λ = spherical[0], φ = spherical[1], cosφ = Math.cos(φ);\n    return [ cosφ * Math.cos(λ), cosφ * Math.sin(λ), Math.sin(φ) ];\n  }\n  function d3_geo_cartesianDot(a, b) {\n    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n  }\n  function d3_geo_cartesianCross(a, b) {\n    return [ a[1] * b[2] - a[2] * b[1], a[2] * b[0] - a[0] * b[2], a[0] * b[1] - a[1] * b[0] ];\n  }\n  function d3_geo_cartesianAdd(a, b) {\n    a[0] += b[0];\n    a[1] += b[1];\n    a[2] += b[2];\n  }\n  function d3_geo_cartesianScale(vector, k) {\n    return [ vector[0] * k, vector[1] * k, vector[2] * k ];\n  }\n  function d3_geo_cartesianNormalize(d) {\n    var l = Math.sqrt(d[0] * d[0] + d[1] * d[1] + d[2] * d[2]);\n    d[0] /= l;\n    d[1] /= l;\n    d[2] /= l;\n  }\n  function d3_geo_spherical(cartesian) {\n    return [ Math.atan2(cartesian[1], cartesian[0]), d3_asin(cartesian[2]) ];\n  }\n  function d3_geo_sphericalEqual(a, b) {\n    return abs(a[0] - b[0]) < ε && abs(a[1] - b[1]) < ε;\n  }\n  d3.geo.bounds = function() {\n    var λ0, φ0, λ1, φ1, λ_, λ__, φ__, p0, dλSum, ranges, range;\n    var bound = {\n      point: point,\n      lineStart: lineStart,\n      lineEnd: lineEnd,\n      polygonStart: function() {\n        bound.point = ringPoint;\n        bound.lineStart = ringStart;\n        bound.lineEnd = ringEnd;\n        dλSum = 0;\n        d3_geo_area.polygonStart();\n      },\n      polygonEnd: function() {\n        d3_geo_area.polygonEnd();\n        bound.point = point;\n        bound.lineStart = lineStart;\n        bound.lineEnd = lineEnd;\n        if (d3_geo_areaRingSum < 0) λ0 = -(λ1 = 180), φ0 = -(φ1 = 90); else if (dλSum > ε) φ1 = 90; else if (dλSum < -ε) φ0 = -90;\n        range[0] = λ0, range[1] = λ1;\n      }\n    };\n    function point(λ, φ) {\n      ranges.push(range = [ λ0 = λ, λ1 = λ ]);\n      if (φ < φ0) φ0 = φ;\n      if (φ > φ1) φ1 = φ;\n    }\n    function linePoint(λ, φ) {\n      var p = d3_geo_cartesian([ λ * d3_radians, φ * d3_radians ]);\n      if (p0) {\n        var normal = d3_geo_cartesianCross(p0, p), equatorial = [ normal[1], -normal[0], 0 ], inflection = d3_geo_cartesianCross(equatorial, normal);\n        d3_geo_cartesianNormalize(inflection);\n        inflection = d3_geo_spherical(inflection);\n        var dλ = λ - λ_, s = dλ > 0 ? 1 : -1, λi = inflection[0] * d3_degrees * s, antimeridian = abs(dλ) > 180;\n        if (antimeridian ^ (s * λ_ < λi && λi < s * λ)) {\n          var φi = inflection[1] * d3_degrees;\n          if (φi > φ1) φ1 = φi;\n        } else if (λi = (λi + 360) % 360 - 180, antimeridian ^ (s * λ_ < λi && λi < s * λ)) {\n          var φi = -inflection[1] * d3_degrees;\n          if (φi < φ0) φ0 = φi;\n        } else {\n          if (φ < φ0) φ0 = φ;\n          if (φ > φ1) φ1 = φ;\n        }\n        if (antimeridian) {\n          if (λ < λ_) {\n            if (angle(λ0, λ) > angle(λ0, λ1)) λ1 = λ;\n          } else {\n            if (angle(λ, λ1) > angle(λ0, λ1)) λ0 = λ;\n          }\n        } else {\n          if (λ1 >= λ0) {\n            if (λ < λ0) λ0 = λ;\n            if (λ > λ1) λ1 = λ;\n          } else {\n            if (λ > λ_) {\n              if (angle(λ0, λ) > angle(λ0, λ1)) λ1 = λ;\n            } else {\n              if (angle(λ, λ1) > angle(λ0, λ1)) λ0 = λ;\n            }\n          }\n        }\n      } else {\n        point(λ, φ);\n      }\n      p0 = p, λ_ = λ;\n    }\n    function lineStart() {\n      bound.point = linePoint;\n    }\n    function lineEnd() {\n      range[0] = λ0, range[1] = λ1;\n      bound.point = point;\n      p0 = null;\n    }\n    function ringPoint(λ, φ) {\n      if (p0) {\n        var dλ = λ - λ_;\n        dλSum += abs(dλ) > 180 ? dλ + (dλ > 0 ? 360 : -360) : dλ;\n      } else λ__ = λ, φ__ = φ;\n      d3_geo_area.point(λ, φ);\n      linePoint(λ, φ);\n    }\n    function ringStart() {\n      d3_geo_area.lineStart();\n    }\n    function ringEnd() {\n      ringPoint(λ__, φ__);\n      d3_geo_area.lineEnd();\n      if (abs(dλSum) > ε) λ0 = -(λ1 = 180);\n      range[0] = λ0, range[1] = λ1;\n      p0 = null;\n    }\n    function angle(λ0, λ1) {\n      return (λ1 -= λ0) < 0 ? λ1 + 360 : λ1;\n    }\n    function compareRanges(a, b) {\n      return a[0] - b[0];\n    }\n    function withinRange(x, range) {\n      return range[0] <= range[1] ? range[0] <= x && x <= range[1] : x < range[0] || range[1] < x;\n    }\n    return function(feature) {\n      φ1 = λ1 = -(λ0 = φ0 = Infinity);\n      ranges = [];\n      d3.geo.stream(feature, bound);\n      var n = ranges.length;\n      if (n) {\n        ranges.sort(compareRanges);\n        for (var i = 1, a = ranges[0], b, merged = [ a ]; i < n; ++i) {\n          b = ranges[i];\n          if (withinRange(b[0], a) || withinRange(b[1], a)) {\n            if (angle(a[0], b[1]) > angle(a[0], a[1])) a[1] = b[1];\n            if (angle(b[0], a[1]) > angle(a[0], a[1])) a[0] = b[0];\n          } else {\n            merged.push(a = b);\n          }\n        }\n        var best = -Infinity, dλ;\n        for (var n = merged.length - 1, i = 0, a = merged[n], b; i <= n; a = b, ++i) {\n          b = merged[i];\n          if ((dλ = angle(a[1], b[0])) > best) best = dλ, λ0 = b[0], λ1 = a[1];\n        }\n      }\n      ranges = range = null;\n      return λ0 === Infinity || φ0 === Infinity ? [ [ NaN, NaN ], [ NaN, NaN ] ] : [ [ λ0, φ0 ], [ λ1, φ1 ] ];\n    };\n  }();\n  d3.geo.centroid = function(object) {\n    d3_geo_centroidW0 = d3_geo_centroidW1 = d3_geo_centroidX0 = d3_geo_centroidY0 = d3_geo_centroidZ0 = d3_geo_centroidX1 = d3_geo_centroidY1 = d3_geo_centroidZ1 = d3_geo_centroidX2 = d3_geo_centroidY2 = d3_geo_centroidZ2 = 0;\n    d3.geo.stream(object, d3_geo_centroid);\n    var x = d3_geo_centroidX2, y = d3_geo_centroidY2, z = d3_geo_centroidZ2, m = x * x + y * y + z * z;\n    if (m < ε2) {\n      x = d3_geo_centroidX1, y = d3_geo_centroidY1, z = d3_geo_centroidZ1;\n      if (d3_geo_centroidW1 < ε) x = d3_geo_centroidX0, y = d3_geo_centroidY0, z = d3_geo_centroidZ0;\n      m = x * x + y * y + z * z;\n      if (m < ε2) return [ NaN, NaN ];\n    }\n    return [ Math.atan2(y, x) * d3_degrees, d3_asin(z / Math.sqrt(m)) * d3_degrees ];\n  };\n  var d3_geo_centroidW0, d3_geo_centroidW1, d3_geo_centroidX0, d3_geo_centroidY0, d3_geo_centroidZ0, d3_geo_centroidX1, d3_geo_centroidY1, d3_geo_centroidZ1, d3_geo_centroidX2, d3_geo_centroidY2, d3_geo_centroidZ2;\n  var d3_geo_centroid = {\n    sphere: d3_noop,\n    point: d3_geo_centroidPoint,\n    lineStart: d3_geo_centroidLineStart,\n    lineEnd: d3_geo_centroidLineEnd,\n    polygonStart: function() {\n      d3_geo_centroid.lineStart = d3_geo_centroidRingStart;\n    },\n    polygonEnd: function() {\n      d3_geo_centroid.lineStart = d3_geo_centroidLineStart;\n    }\n  };\n  function d3_geo_centroidPoint(λ, φ) {\n    λ *= d3_radians;\n    var cosφ = Math.cos(φ *= d3_radians);\n    d3_geo_centroidPointXYZ(cosφ * Math.cos(λ), cosφ * Math.sin(λ), Math.sin(φ));\n  }\n  function d3_geo_centroidPointXYZ(x, y, z) {\n    ++d3_geo_centroidW0;\n    d3_geo_centroidX0 += (x - d3_geo_centroidX0) / d3_geo_centroidW0;\n    d3_geo_centroidY0 += (y - d3_geo_centroidY0) / d3_geo_centroidW0;\n    d3_geo_centroidZ0 += (z - d3_geo_centroidZ0) / d3_geo_centroidW0;\n  }\n  function d3_geo_centroidLineStart() {\n    var x0, y0, z0;\n    d3_geo_centroid.point = function(λ, φ) {\n      λ *= d3_radians;\n      var cosφ = Math.cos(φ *= d3_radians);\n      x0 = cosφ * Math.cos(λ);\n      y0 = cosφ * Math.sin(λ);\n      z0 = Math.sin(φ);\n      d3_geo_centroid.point = nextPoint;\n      d3_geo_centroidPointXYZ(x0, y0, z0);\n    };\n    function nextPoint(λ, φ) {\n      λ *= d3_radians;\n      var cosφ = Math.cos(φ *= d3_radians), x = cosφ * Math.cos(λ), y = cosφ * Math.sin(λ), z = Math.sin(φ), w = Math.atan2(Math.sqrt((w = y0 * z - z0 * y) * w + (w = z0 * x - x0 * z) * w + (w = x0 * y - y0 * x) * w), x0 * x + y0 * y + z0 * z);\n      d3_geo_centroidW1 += w;\n      d3_geo_centroidX1 += w * (x0 + (x0 = x));\n      d3_geo_centroidY1 += w * (y0 + (y0 = y));\n      d3_geo_centroidZ1 += w * (z0 + (z0 = z));\n      d3_geo_centroidPointXYZ(x0, y0, z0);\n    }\n  }\n  function d3_geo_centroidLineEnd() {\n    d3_geo_centroid.point = d3_geo_centroidPoint;\n  }\n  function d3_geo_centroidRingStart() {\n    var λ00, φ00, x0, y0, z0;\n    d3_geo_centroid.point = function(λ, φ) {\n      λ00 = λ, φ00 = φ;\n      d3_geo_centroid.point = nextPoint;\n      λ *= d3_radians;\n      var cosφ = Math.cos(φ *= d3_radians);\n      x0 = cosφ * Math.cos(λ);\n      y0 = cosφ * Math.sin(λ);\n      z0 = Math.sin(φ);\n      d3_geo_centroidPointXYZ(x0, y0, z0);\n    };\n    d3_geo_centroid.lineEnd = function() {\n      nextPoint(λ00, φ00);\n      d3_geo_centroid.lineEnd = d3_geo_centroidLineEnd;\n      d3_geo_centroid.point = d3_geo_centroidPoint;\n    };\n    function nextPoint(λ, φ) {\n      λ *= d3_radians;\n      var cosφ = Math.cos(φ *= d3_radians), x = cosφ * Math.cos(λ), y = cosφ * Math.sin(λ), z = Math.sin(φ), cx = y0 * z - z0 * y, cy = z0 * x - x0 * z, cz = x0 * y - y0 * x, m = Math.sqrt(cx * cx + cy * cy + cz * cz), u = x0 * x + y0 * y + z0 * z, v = m && -d3_acos(u) / m, w = Math.atan2(m, u);\n      d3_geo_centroidX2 += v * cx;\n      d3_geo_centroidY2 += v * cy;\n      d3_geo_centroidZ2 += v * cz;\n      d3_geo_centroidW1 += w;\n      d3_geo_centroidX1 += w * (x0 + (x0 = x));\n      d3_geo_centroidY1 += w * (y0 + (y0 = y));\n      d3_geo_centroidZ1 += w * (z0 + (z0 = z));\n      d3_geo_centroidPointXYZ(x0, y0, z0);\n    }\n  }\n  function d3_geo_compose(a, b) {\n    function compose(x, y) {\n      return x = a(x, y), b(x[0], x[1]);\n    }\n    if (a.invert && b.invert) compose.invert = function(x, y) {\n      return x = b.invert(x, y), x && a.invert(x[0], x[1]);\n    };\n    return compose;\n  }\n  function d3_true() {\n    return true;\n  }\n  function d3_geo_clipPolygon(segments, compare, clipStartInside, interpolate, listener) {\n    var subject = [], clip = [];\n    segments.forEach(function(segment) {\n      if ((n = segment.length - 1) <= 0) return;\n      var n, p0 = segment[0], p1 = segment[n];\n      if (d3_geo_sphericalEqual(p0, p1)) {\n        listener.lineStart();\n        for (var i = 0; i < n; ++i) listener.point((p0 = segment[i])[0], p0[1]);\n        listener.lineEnd();\n        return;\n      }\n      var a = new d3_geo_clipPolygonIntersection(p0, segment, null, true), b = new d3_geo_clipPolygonIntersection(p0, null, a, false);\n      a.o = b;\n      subject.push(a);\n      clip.push(b);\n      a = new d3_geo_clipPolygonIntersection(p1, segment, null, false);\n      b = new d3_geo_clipPolygonIntersection(p1, null, a, true);\n      a.o = b;\n      subject.push(a);\n      clip.push(b);\n    });\n    clip.sort(compare);\n    d3_geo_clipPolygonLinkCircular(subject);\n    d3_geo_clipPolygonLinkCircular(clip);\n    if (!subject.length) return;\n    for (var i = 0, entry = clipStartInside, n = clip.length; i < n; ++i) {\n      clip[i].e = entry = !entry;\n    }\n    var start = subject[0], points, point;\n    while (1) {\n      var current = start, isSubject = true;\n      while (current.v) if ((current = current.n) === start) return;\n      points = current.z;\n      listener.lineStart();\n      do {\n        current.v = current.o.v = true;\n        if (current.e) {\n          if (isSubject) {\n            for (var i = 0, n = points.length; i < n; ++i) listener.point((point = points[i])[0], point[1]);\n          } else {\n            interpolate(current.x, current.n.x, 1, listener);\n          }\n          current = current.n;\n        } else {\n          if (isSubject) {\n            points = current.p.z;\n            for (var i = points.length - 1; i >= 0; --i) listener.point((point = points[i])[0], point[1]);\n          } else {\n            interpolate(current.x, current.p.x, -1, listener);\n          }\n          current = current.p;\n        }\n        current = current.o;\n        points = current.z;\n        isSubject = !isSubject;\n      } while (!current.v);\n      listener.lineEnd();\n    }\n  }\n  function d3_geo_clipPolygonLinkCircular(array) {\n    if (!(n = array.length)) return;\n    var n, i = 0, a = array[0], b;\n    while (++i < n) {\n      a.n = b = array[i];\n      b.p = a;\n      a = b;\n    }\n    a.n = b = array[0];\n    b.p = a;\n  }\n  function d3_geo_clipPolygonIntersection(point, points, other, entry) {\n    this.x = point;\n    this.z = points;\n    this.o = other;\n    this.e = entry;\n    this.v = false;\n    this.n = this.p = null;\n  }\n  function d3_geo_clip(pointVisible, clipLine, interpolate, clipStart) {\n    return function(rotate, listener) {\n      var line = clipLine(listener), rotatedClipStart = rotate.invert(clipStart[0], clipStart[1]);\n      var clip = {\n        point: point,\n        lineStart: lineStart,\n        lineEnd: lineEnd,\n        polygonStart: function() {\n          clip.point = pointRing;\n          clip.lineStart = ringStart;\n          clip.lineEnd = ringEnd;\n          segments = [];\n          polygon = [];\n        },\n        polygonEnd: function() {\n          clip.point = point;\n          clip.lineStart = lineStart;\n          clip.lineEnd = lineEnd;\n          segments = d3.merge(segments);\n          var clipStartInside = d3_geo_pointInPolygon(rotatedClipStart, polygon);\n          if (segments.length) {\n            if (!polygonStarted) listener.polygonStart(), polygonStarted = true;\n            d3_geo_clipPolygon(segments, d3_geo_clipSort, clipStartInside, interpolate, listener);\n          } else if (clipStartInside) {\n            if (!polygonStarted) listener.polygonStart(), polygonStarted = true;\n            listener.lineStart();\n            interpolate(null, null, 1, listener);\n            listener.lineEnd();\n          }\n          if (polygonStarted) listener.polygonEnd(), polygonStarted = false;\n          segments = polygon = null;\n        },\n        sphere: function() {\n          listener.polygonStart();\n          listener.lineStart();\n          interpolate(null, null, 1, listener);\n          listener.lineEnd();\n          listener.polygonEnd();\n        }\n      };\n      function point(λ, φ) {\n        var point = rotate(λ, φ);\n        if (pointVisible(λ = point[0], φ = point[1])) listener.point(λ, φ);\n      }\n      function pointLine(λ, φ) {\n        var point = rotate(λ, φ);\n        line.point(point[0], point[1]);\n      }\n      function lineStart() {\n        clip.point = pointLine;\n        line.lineStart();\n      }\n      function lineEnd() {\n        clip.point = point;\n        line.lineEnd();\n      }\n      var segments;\n      var buffer = d3_geo_clipBufferListener(), ringListener = clipLine(buffer), polygonStarted = false, polygon, ring;\n      function pointRing(λ, φ) {\n        ring.push([ λ, φ ]);\n        var point = rotate(λ, φ);\n        ringListener.point(point[0], point[1]);\n      }\n      function ringStart() {\n        ringListener.lineStart();\n        ring = [];\n      }\n      function ringEnd() {\n        pointRing(ring[0][0], ring[0][1]);\n        ringListener.lineEnd();\n        var clean = ringListener.clean(), ringSegments = buffer.buffer(), segment, n = ringSegments.length;\n        ring.pop();\n        polygon.push(ring);\n        ring = null;\n        if (!n) return;\n        if (clean & 1) {\n          segment = ringSegments[0];\n          var n = segment.length - 1, i = -1, point;\n          if (n > 0) {\n            if (!polygonStarted) listener.polygonStart(), polygonStarted = true;\n            listener.lineStart();\n            while (++i < n) listener.point((point = segment[i])[0], point[1]);\n            listener.lineEnd();\n          }\n          return;\n        }\n        if (n > 1 && clean & 2) ringSegments.push(ringSegments.pop().concat(ringSegments.shift()));\n        segments.push(ringSegments.filter(d3_geo_clipSegmentLength1));\n      }\n      return clip;\n    };\n  }\n  function d3_geo_clipSegmentLength1(segment) {\n    return segment.length > 1;\n  }\n  function d3_geo_clipBufferListener() {\n    var lines = [], line;\n    return {\n      lineStart: function() {\n        lines.push(line = []);\n      },\n      point: function(λ, φ) {\n        line.push([ λ, φ ]);\n      },\n      lineEnd: d3_noop,\n      buffer: function() {\n        var buffer = lines;\n        lines = [];\n        line = null;\n        return buffer;\n      },\n      rejoin: function() {\n        if (lines.length > 1) lines.push(lines.pop().concat(lines.shift()));\n      }\n    };\n  }\n  function d3_geo_clipSort(a, b) {\n    return ((a = a.x)[0] < 0 ? a[1] - halfπ - ε : halfπ - a[1]) - ((b = b.x)[0] < 0 ? b[1] - halfπ - ε : halfπ - b[1]);\n  }\n  var d3_geo_clipAntimeridian = d3_geo_clip(d3_true, d3_geo_clipAntimeridianLine, d3_geo_clipAntimeridianInterpolate, [ -π, -π / 2 ]);\n  function d3_geo_clipAntimeridianLine(listener) {\n    var λ0 = NaN, φ0 = NaN, sλ0 = NaN, clean;\n    return {\n      lineStart: function() {\n        listener.lineStart();\n        clean = 1;\n      },\n      point: function(λ1, φ1) {\n        var sλ1 = λ1 > 0 ? π : -π, dλ = abs(λ1 - λ0);\n        if (abs(dλ - π) < ε) {\n          listener.point(λ0, φ0 = (φ0 + φ1) / 2 > 0 ? halfπ : -halfπ);\n          listener.point(sλ0, φ0);\n          listener.lineEnd();\n          listener.lineStart();\n          listener.point(sλ1, φ0);\n          listener.point(λ1, φ0);\n          clean = 0;\n        } else if (sλ0 !== sλ1 && dλ >= π) {\n          if (abs(λ0 - sλ0) < ε) λ0 -= sλ0 * ε;\n          if (abs(λ1 - sλ1) < ε) λ1 -= sλ1 * ε;\n          φ0 = d3_geo_clipAntimeridianIntersect(λ0, φ0, λ1, φ1);\n          listener.point(sλ0, φ0);\n          listener.lineEnd();\n          listener.lineStart();\n          listener.point(sλ1, φ0);\n          clean = 0;\n        }\n        listener.point(λ0 = λ1, φ0 = φ1);\n        sλ0 = sλ1;\n      },\n      lineEnd: function() {\n        listener.lineEnd();\n        λ0 = φ0 = NaN;\n      },\n      clean: function() {\n        return 2 - clean;\n      }\n    };\n  }\n  function d3_geo_clipAntimeridianIntersect(λ0, φ0, λ1, φ1) {\n    var cosφ0, cosφ1, sinλ0_λ1 = Math.sin(λ0 - λ1);\n    return abs(sinλ0_λ1) > ε ? Math.atan((Math.sin(φ0) * (cosφ1 = Math.cos(φ1)) * Math.sin(λ1) - Math.sin(φ1) * (cosφ0 = Math.cos(φ0)) * Math.sin(λ0)) / (cosφ0 * cosφ1 * sinλ0_λ1)) : (φ0 + φ1) / 2;\n  }\n  function d3_geo_clipAntimeridianInterpolate(from, to, direction, listener) {\n    var φ;\n    if (from == null) {\n      φ = direction * halfπ;\n      listener.point(-π, φ);\n      listener.point(0, φ);\n      listener.point(π, φ);\n      listener.point(π, 0);\n      listener.point(π, -φ);\n      listener.point(0, -φ);\n      listener.point(-π, -φ);\n      listener.point(-π, 0);\n      listener.point(-π, φ);\n    } else if (abs(from[0] - to[0]) > ε) {\n      var s = from[0] < to[0] ? π : -π;\n      φ = direction * s / 2;\n      listener.point(-s, φ);\n      listener.point(0, φ);\n      listener.point(s, φ);\n    } else {\n      listener.point(to[0], to[1]);\n    }\n  }\n  function d3_geo_pointInPolygon(point, polygon) {\n    var meridian = point[0], parallel = point[1], meridianNormal = [ Math.sin(meridian), -Math.cos(meridian), 0 ], polarAngle = 0, winding = 0;\n    d3_geo_areaRingSum.reset();\n    for (var i = 0, n = polygon.length; i < n; ++i) {\n      var ring = polygon[i], m = ring.length;\n      if (!m) continue;\n      var point0 = ring[0], λ0 = point0[0], φ0 = point0[1] / 2 + π / 4, sinφ0 = Math.sin(φ0), cosφ0 = Math.cos(φ0), j = 1;\n      while (true) {\n        if (j === m) j = 0;\n        point = ring[j];\n        var λ = point[0], φ = point[1] / 2 + π / 4, sinφ = Math.sin(φ), cosφ = Math.cos(φ), dλ = λ - λ0, sdλ = dλ >= 0 ? 1 : -1, adλ = sdλ * dλ, antimeridian = adλ > π, k = sinφ0 * sinφ;\n        d3_geo_areaRingSum.add(Math.atan2(k * sdλ * Math.sin(adλ), cosφ0 * cosφ + k * Math.cos(adλ)));\n        polarAngle += antimeridian ? dλ + sdλ * τ : dλ;\n        if (antimeridian ^ λ0 >= meridian ^ λ >= meridian) {\n          var arc = d3_geo_cartesianCross(d3_geo_cartesian(point0), d3_geo_cartesian(point));\n          d3_geo_cartesianNormalize(arc);\n          var intersection = d3_geo_cartesianCross(meridianNormal, arc);\n          d3_geo_cartesianNormalize(intersection);\n          var φarc = (antimeridian ^ dλ >= 0 ? -1 : 1) * d3_asin(intersection[2]);\n          if (parallel > φarc || parallel === φarc && (arc[0] || arc[1])) {\n            winding += antimeridian ^ dλ >= 0 ? 1 : -1;\n          }\n        }\n        if (!j++) break;\n        λ0 = λ, sinφ0 = sinφ, cosφ0 = cosφ, point0 = point;\n      }\n    }\n    return (polarAngle < -ε || polarAngle < ε && d3_geo_areaRingSum < 0) ^ winding & 1;\n  }\n  function d3_geo_clipCircle(radius) {\n    var cr = Math.cos(radius), smallRadius = cr > 0, notHemisphere = abs(cr) > ε, interpolate = d3_geo_circleInterpolate(radius, 6 * d3_radians);\n    return d3_geo_clip(visible, clipLine, interpolate, smallRadius ? [ 0, -radius ] : [ -π, radius - π ]);\n    function visible(λ, φ) {\n      return Math.cos(λ) * Math.cos(φ) > cr;\n    }\n    function clipLine(listener) {\n      var point0, c0, v0, v00, clean;\n      return {\n        lineStart: function() {\n          v00 = v0 = false;\n          clean = 1;\n        },\n        point: function(λ, φ) {\n          var point1 = [ λ, φ ], point2, v = visible(λ, φ), c = smallRadius ? v ? 0 : code(λ, φ) : v ? code(λ + (λ < 0 ? π : -π), φ) : 0;\n          if (!point0 && (v00 = v0 = v)) listener.lineStart();\n          if (v !== v0) {\n            point2 = intersect(point0, point1);\n            if (d3_geo_sphericalEqual(point0, point2) || d3_geo_sphericalEqual(point1, point2)) {\n              point1[0] += ε;\n              point1[1] += ε;\n              v = visible(point1[0], point1[1]);\n            }\n          }\n          if (v !== v0) {\n            clean = 0;\n            if (v) {\n              listener.lineStart();\n              point2 = intersect(point1, point0);\n              listener.point(point2[0], point2[1]);\n            } else {\n              point2 = intersect(point0, point1);\n              listener.point(point2[0], point2[1]);\n              listener.lineEnd();\n            }\n            point0 = point2;\n          } else if (notHemisphere && point0 && smallRadius ^ v) {\n            var t;\n            if (!(c & c0) && (t = intersect(point1, point0, true))) {\n              clean = 0;\n              if (smallRadius) {\n                listener.lineStart();\n                listener.point(t[0][0], t[0][1]);\n                listener.point(t[1][0], t[1][1]);\n                listener.lineEnd();\n              } else {\n                listener.point(t[1][0], t[1][1]);\n                listener.lineEnd();\n                listener.lineStart();\n                listener.point(t[0][0], t[0][1]);\n              }\n            }\n          }\n          if (v && (!point0 || !d3_geo_sphericalEqual(point0, point1))) {\n            listener.point(point1[0], point1[1]);\n          }\n          point0 = point1, v0 = v, c0 = c;\n        },\n        lineEnd: function() {\n          if (v0) listener.lineEnd();\n          point0 = null;\n        },\n        clean: function() {\n          return clean | (v00 && v0) << 1;\n        }\n      };\n    }\n    function intersect(a, b, two) {\n      var pa = d3_geo_cartesian(a), pb = d3_geo_cartesian(b);\n      var n1 = [ 1, 0, 0 ], n2 = d3_geo_cartesianCross(pa, pb), n2n2 = d3_geo_cartesianDot(n2, n2), n1n2 = n2[0], determinant = n2n2 - n1n2 * n1n2;\n      if (!determinant) return !two && a;\n      var c1 = cr * n2n2 / determinant, c2 = -cr * n1n2 / determinant, n1xn2 = d3_geo_cartesianCross(n1, n2), A = d3_geo_cartesianScale(n1, c1), B = d3_geo_cartesianScale(n2, c2);\n      d3_geo_cartesianAdd(A, B);\n      var u = n1xn2, w = d3_geo_cartesianDot(A, u), uu = d3_geo_cartesianDot(u, u), t2 = w * w - uu * (d3_geo_cartesianDot(A, A) - 1);\n      if (t2 < 0) return;\n      var t = Math.sqrt(t2), q = d3_geo_cartesianScale(u, (-w - t) / uu);\n      d3_geo_cartesianAdd(q, A);\n      q = d3_geo_spherical(q);\n      if (!two) return q;\n      var λ0 = a[0], λ1 = b[0], φ0 = a[1], φ1 = b[1], z;\n      if (λ1 < λ0) z = λ0, λ0 = λ1, λ1 = z;\n      var δλ = λ1 - λ0, polar = abs(δλ - π) < ε, meridian = polar || δλ < ε;\n      if (!polar && φ1 < φ0) z = φ0, φ0 = φ1, φ1 = z;\n      if (meridian ? polar ? φ0 + φ1 > 0 ^ q[1] < (abs(q[0] - λ0) < ε ? φ0 : φ1) : φ0 <= q[1] && q[1] <= φ1 : δλ > π ^ (λ0 <= q[0] && q[0] <= λ1)) {\n        var q1 = d3_geo_cartesianScale(u, (-w + t) / uu);\n        d3_geo_cartesianAdd(q1, A);\n        return [ q, d3_geo_spherical(q1) ];\n      }\n    }\n    function code(λ, φ) {\n      var r = smallRadius ? radius : π - radius, code = 0;\n      if (λ < -r) code |= 1; else if (λ > r) code |= 2;\n      if (φ < -r) code |= 4; else if (φ > r) code |= 8;\n      return code;\n    }\n  }\n  function d3_geom_clipLine(x0, y0, x1, y1) {\n    return function(line) {\n      var a = line.a, b = line.b, ax = a.x, ay = a.y, bx = b.x, by = b.y, t0 = 0, t1 = 1, dx = bx - ax, dy = by - ay, r;\n      r = x0 - ax;\n      if (!dx && r > 0) return;\n      r /= dx;\n      if (dx < 0) {\n        if (r < t0) return;\n        if (r < t1) t1 = r;\n      } else if (dx > 0) {\n        if (r > t1) return;\n        if (r > t0) t0 = r;\n      }\n      r = x1 - ax;\n      if (!dx && r < 0) return;\n      r /= dx;\n      if (dx < 0) {\n        if (r > t1) return;\n        if (r > t0) t0 = r;\n      } else if (dx > 0) {\n        if (r < t0) return;\n        if (r < t1) t1 = r;\n      }\n      r = y0 - ay;\n      if (!dy && r > 0) return;\n      r /= dy;\n      if (dy < 0) {\n        if (r < t0) return;\n        if (r < t1) t1 = r;\n      } else if (dy > 0) {\n        if (r > t1) return;\n        if (r > t0) t0 = r;\n      }\n      r = y1 - ay;\n      if (!dy && r < 0) return;\n      r /= dy;\n      if (dy < 0) {\n        if (r > t1) return;\n        if (r > t0) t0 = r;\n      } else if (dy > 0) {\n        if (r < t0) return;\n        if (r < t1) t1 = r;\n      }\n      if (t0 > 0) line.a = {\n        x: ax + t0 * dx,\n        y: ay + t0 * dy\n      };\n      if (t1 < 1) line.b = {\n        x: ax + t1 * dx,\n        y: ay + t1 * dy\n      };\n      return line;\n    };\n  }\n  var d3_geo_clipExtentMAX = 1e9;\n  d3.geo.clipExtent = function() {\n    var x0, y0, x1, y1, stream, clip, clipExtent = {\n      stream: function(output) {\n        if (stream) stream.valid = false;\n        stream = clip(output);\n        stream.valid = true;\n        return stream;\n      },\n      extent: function(_) {\n        if (!arguments.length) return [ [ x0, y0 ], [ x1, y1 ] ];\n        clip = d3_geo_clipExtent(x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]);\n        if (stream) stream.valid = false, stream = null;\n        return clipExtent;\n      }\n    };\n    return clipExtent.extent([ [ 0, 0 ], [ 960, 500 ] ]);\n  };\n  function d3_geo_clipExtent(x0, y0, x1, y1) {\n    return function(listener) {\n      var listener_ = listener, bufferListener = d3_geo_clipBufferListener(), clipLine = d3_geom_clipLine(x0, y0, x1, y1), segments, polygon, ring;\n      var clip = {\n        point: point,\n        lineStart: lineStart,\n        lineEnd: lineEnd,\n        polygonStart: function() {\n          listener = bufferListener;\n          segments = [];\n          polygon = [];\n          clean = true;\n        },\n        polygonEnd: function() {\n          listener = listener_;\n          segments = d3.merge(segments);\n          var clipStartInside = insidePolygon([ x0, y1 ]), inside = clean && clipStartInside, visible = segments.length;\n          if (inside || visible) {\n            listener.polygonStart();\n            if (inside) {\n              listener.lineStart();\n              interpolate(null, null, 1, listener);\n              listener.lineEnd();\n            }\n            if (visible) {\n              d3_geo_clipPolygon(segments, compare, clipStartInside, interpolate, listener);\n            }\n            listener.polygonEnd();\n          }\n          segments = polygon = ring = null;\n        }\n      };\n      function insidePolygon(p) {\n        var wn = 0, n = polygon.length, y = p[1];\n        for (var i = 0; i < n; ++i) {\n          for (var j = 1, v = polygon[i], m = v.length, a = v[0], b; j < m; ++j) {\n            b = v[j];\n            if (a[1] <= y) {\n              if (b[1] > y && d3_cross2d(a, b, p) > 0) ++wn;\n            } else {\n              if (b[1] <= y && d3_cross2d(a, b, p) < 0) --wn;\n            }\n            a = b;\n          }\n        }\n        return wn !== 0;\n      }\n      function interpolate(from, to, direction, listener) {\n        var a = 0, a1 = 0;\n        if (from == null || (a = corner(from, direction)) !== (a1 = corner(to, direction)) || comparePoints(from, to) < 0 ^ direction > 0) {\n          do {\n            listener.point(a === 0 || a === 3 ? x0 : x1, a > 1 ? y1 : y0);\n          } while ((a = (a + direction + 4) % 4) !== a1);\n        } else {\n          listener.point(to[0], to[1]);\n        }\n      }\n      function pointVisible(x, y) {\n        return x0 <= x && x <= x1 && y0 <= y && y <= y1;\n      }\n      function point(x, y) {\n        if (pointVisible(x, y)) listener.point(x, y);\n      }\n      var x__, y__, v__, x_, y_, v_, first, clean;\n      function lineStart() {\n        clip.point = linePoint;\n        if (polygon) polygon.push(ring = []);\n        first = true;\n        v_ = false;\n        x_ = y_ = NaN;\n      }\n      function lineEnd() {\n        if (segments) {\n          linePoint(x__, y__);\n          if (v__ && v_) bufferListener.rejoin();\n          segments.push(bufferListener.buffer());\n        }\n        clip.point = point;\n        if (v_) listener.lineEnd();\n      }\n      function linePoint(x, y) {\n        x = Math.max(-d3_geo_clipExtentMAX, Math.min(d3_geo_clipExtentMAX, x));\n        y = Math.max(-d3_geo_clipExtentMAX, Math.min(d3_geo_clipExtentMAX, y));\n        var v = pointVisible(x, y);\n        if (polygon) ring.push([ x, y ]);\n        if (first) {\n          x__ = x, y__ = y, v__ = v;\n          first = false;\n          if (v) {\n            listener.lineStart();\n            listener.point(x, y);\n          }\n        } else {\n          if (v && v_) listener.point(x, y); else {\n            var l = {\n              a: {\n                x: x_,\n                y: y_\n              },\n              b: {\n                x: x,\n                y: y\n              }\n            };\n            if (clipLine(l)) {\n              if (!v_) {\n                listener.lineStart();\n                listener.point(l.a.x, l.a.y);\n              }\n              listener.point(l.b.x, l.b.y);\n              if (!v) listener.lineEnd();\n              clean = false;\n            } else if (v) {\n              listener.lineStart();\n              listener.point(x, y);\n              clean = false;\n            }\n          }\n        }\n        x_ = x, y_ = y, v_ = v;\n      }\n      return clip;\n    };\n    function corner(p, direction) {\n      return abs(p[0] - x0) < ε ? direction > 0 ? 0 : 3 : abs(p[0] - x1) < ε ? direction > 0 ? 2 : 1 : abs(p[1] - y0) < ε ? direction > 0 ? 1 : 0 : direction > 0 ? 3 : 2;\n    }\n    function compare(a, b) {\n      return comparePoints(a.x, b.x);\n    }\n    function comparePoints(a, b) {\n      var ca = corner(a, 1), cb = corner(b, 1);\n      return ca !== cb ? ca - cb : ca === 0 ? b[1] - a[1] : ca === 1 ? a[0] - b[0] : ca === 2 ? a[1] - b[1] : b[0] - a[0];\n    }\n  }\n  function d3_geo_conic(projectAt) {\n    var φ0 = 0, φ1 = π / 3, m = d3_geo_projectionMutator(projectAt), p = m(φ0, φ1);\n    p.parallels = function(_) {\n      if (!arguments.length) return [ φ0 / π * 180, φ1 / π * 180 ];\n      return m(φ0 = _[0] * π / 180, φ1 = _[1] * π / 180);\n    };\n    return p;\n  }\n  function d3_geo_conicEqualArea(φ0, φ1) {\n    var sinφ0 = Math.sin(φ0), n = (sinφ0 + Math.sin(φ1)) / 2, C = 1 + sinφ0 * (2 * n - sinφ0), ρ0 = Math.sqrt(C) / n;\n    function forward(λ, φ) {\n      var ρ = Math.sqrt(C - 2 * n * Math.sin(φ)) / n;\n      return [ ρ * Math.sin(λ *= n), ρ0 - ρ * Math.cos(λ) ];\n    }\n    forward.invert = function(x, y) {\n      var ρ0_y = ρ0 - y;\n      return [ Math.atan2(x, ρ0_y) / n, d3_asin((C - (x * x + ρ0_y * ρ0_y) * n * n) / (2 * n)) ];\n    };\n    return forward;\n  }\n  (d3.geo.conicEqualArea = function() {\n    return d3_geo_conic(d3_geo_conicEqualArea);\n  }).raw = d3_geo_conicEqualArea;\n  d3.geo.albers = function() {\n    return d3.geo.conicEqualArea().rotate([ 96, 0 ]).center([ -.6, 38.7 ]).parallels([ 29.5, 45.5 ]).scale(1070);\n  };\n  d3.geo.albersUsa = function() {\n    var lower48 = d3.geo.albers();\n    var alaska = d3.geo.conicEqualArea().rotate([ 154, 0 ]).center([ -2, 58.5 ]).parallels([ 55, 65 ]);\n    var hawaii = d3.geo.conicEqualArea().rotate([ 157, 0 ]).center([ -3, 19.9 ]).parallels([ 8, 18 ]);\n    var point, pointStream = {\n      point: function(x, y) {\n        point = [ x, y ];\n      }\n    }, lower48Point, alaskaPoint, hawaiiPoint;\n    function albersUsa(coordinates) {\n      var x = coordinates[0], y = coordinates[1];\n      point = null;\n      (lower48Point(x, y), point) || (alaskaPoint(x, y), point) || hawaiiPoint(x, y);\n      return point;\n    }\n    albersUsa.invert = function(coordinates) {\n      var k = lower48.scale(), t = lower48.translate(), x = (coordinates[0] - t[0]) / k, y = (coordinates[1] - t[1]) / k;\n      return (y >= .12 && y < .234 && x >= -.425 && x < -.214 ? alaska : y >= .166 && y < .234 && x >= -.214 && x < -.115 ? hawaii : lower48).invert(coordinates);\n    };\n    albersUsa.stream = function(stream) {\n      var lower48Stream = lower48.stream(stream), alaskaStream = alaska.stream(stream), hawaiiStream = hawaii.stream(stream);\n      return {\n        point: function(x, y) {\n          lower48Stream.point(x, y);\n          alaskaStream.point(x, y);\n          hawaiiStream.point(x, y);\n        },\n        sphere: function() {\n          lower48Stream.sphere();\n          alaskaStream.sphere();\n          hawaiiStream.sphere();\n        },\n        lineStart: function() {\n          lower48Stream.lineStart();\n          alaskaStream.lineStart();\n          hawaiiStream.lineStart();\n        },\n        lineEnd: function() {\n          lower48Stream.lineEnd();\n          alaskaStream.lineEnd();\n          hawaiiStream.lineEnd();\n        },\n        polygonStart: function() {\n          lower48Stream.polygonStart();\n          alaskaStream.polygonStart();\n          hawaiiStream.polygonStart();\n        },\n        polygonEnd: function() {\n          lower48Stream.polygonEnd();\n          alaskaStream.polygonEnd();\n          hawaiiStream.polygonEnd();\n        }\n      };\n    };\n    albersUsa.precision = function(_) {\n      if (!arguments.length) return lower48.precision();\n      lower48.precision(_);\n      alaska.precision(_);\n      hawaii.precision(_);\n      return albersUsa;\n    };\n    albersUsa.scale = function(_) {\n      if (!arguments.length) return lower48.scale();\n      lower48.scale(_);\n      alaska.scale(_ * .35);\n      hawaii.scale(_);\n      return albersUsa.translate(lower48.translate());\n    };\n    albersUsa.translate = function(_) {\n      if (!arguments.length) return lower48.translate();\n      var k = lower48.scale(), x = +_[0], y = +_[1];\n      lower48Point = lower48.translate(_).clipExtent([ [ x - .455 * k, y - .238 * k ], [ x + .455 * k, y + .238 * k ] ]).stream(pointStream).point;\n      alaskaPoint = alaska.translate([ x - .307 * k, y + .201 * k ]).clipExtent([ [ x - .425 * k + ε, y + .12 * k + ε ], [ x - .214 * k - ε, y + .234 * k - ε ] ]).stream(pointStream).point;\n      hawaiiPoint = hawaii.translate([ x - .205 * k, y + .212 * k ]).clipExtent([ [ x - .214 * k + ε, y + .166 * k + ε ], [ x - .115 * k - ε, y + .234 * k - ε ] ]).stream(pointStream).point;\n      return albersUsa;\n    };\n    return albersUsa.scale(1070);\n  };\n  var d3_geo_pathAreaSum, d3_geo_pathAreaPolygon, d3_geo_pathArea = {\n    point: d3_noop,\n    lineStart: d3_noop,\n    lineEnd: d3_noop,\n    polygonStart: function() {\n      d3_geo_pathAreaPolygon = 0;\n      d3_geo_pathArea.lineStart = d3_geo_pathAreaRingStart;\n    },\n    polygonEnd: function() {\n      d3_geo_pathArea.lineStart = d3_geo_pathArea.lineEnd = d3_geo_pathArea.point = d3_noop;\n      d3_geo_pathAreaSum += abs(d3_geo_pathAreaPolygon / 2);\n    }\n  };\n  function d3_geo_pathAreaRingStart() {\n    var x00, y00, x0, y0;\n    d3_geo_pathArea.point = function(x, y) {\n      d3_geo_pathArea.point = nextPoint;\n      x00 = x0 = x, y00 = y0 = y;\n    };\n    function nextPoint(x, y) {\n      d3_geo_pathAreaPolygon += y0 * x - x0 * y;\n      x0 = x, y0 = y;\n    }\n    d3_geo_pathArea.lineEnd = function() {\n      nextPoint(x00, y00);\n    };\n  }\n  var d3_geo_pathBoundsX0, d3_geo_pathBoundsY0, d3_geo_pathBoundsX1, d3_geo_pathBoundsY1;\n  var d3_geo_pathBounds = {\n    point: d3_geo_pathBoundsPoint,\n    lineStart: d3_noop,\n    lineEnd: d3_noop,\n    polygonStart: d3_noop,\n    polygonEnd: d3_noop\n  };\n  function d3_geo_pathBoundsPoint(x, y) {\n    if (x < d3_geo_pathBoundsX0) d3_geo_pathBoundsX0 = x;\n    if (x > d3_geo_pathBoundsX1) d3_geo_pathBoundsX1 = x;\n    if (y < d3_geo_pathBoundsY0) d3_geo_pathBoundsY0 = y;\n    if (y > d3_geo_pathBoundsY1) d3_geo_pathBoundsY1 = y;\n  }\n  function d3_geo_pathBuffer() {\n    var pointCircle = d3_geo_pathBufferCircle(4.5), buffer = [];\n    var stream = {\n      point: point,\n      lineStart: function() {\n        stream.point = pointLineStart;\n      },\n      lineEnd: lineEnd,\n      polygonStart: function() {\n        stream.lineEnd = lineEndPolygon;\n      },\n      polygonEnd: function() {\n        stream.lineEnd = lineEnd;\n        stream.point = point;\n      },\n      pointRadius: function(_) {\n        pointCircle = d3_geo_pathBufferCircle(_);\n        return stream;\n      },\n      result: function() {\n        if (buffer.length) {\n          var result = buffer.join(\"\");\n          buffer = [];\n          return result;\n        }\n      }\n    };\n    function point(x, y) {\n      buffer.push(\"M\", x, \",\", y, pointCircle);\n    }\n    function pointLineStart(x, y) {\n      buffer.push(\"M\", x, \",\", y);\n      stream.point = pointLine;\n    }\n    function pointLine(x, y) {\n      buffer.push(\"L\", x, \",\", y);\n    }\n    function lineEnd() {\n      stream.point = point;\n    }\n    function lineEndPolygon() {\n      buffer.push(\"Z\");\n    }\n    return stream;\n  }\n  function d3_geo_pathBufferCircle(radius) {\n    return \"m0,\" + radius + \"a\" + radius + \",\" + radius + \" 0 1,1 0,\" + -2 * radius + \"a\" + radius + \",\" + radius + \" 0 1,1 0,\" + 2 * radius + \"z\";\n  }\n  var d3_geo_pathCentroid = {\n    point: d3_geo_pathCentroidPoint,\n    lineStart: d3_geo_pathCentroidLineStart,\n    lineEnd: d3_geo_pathCentroidLineEnd,\n    polygonStart: function() {\n      d3_geo_pathCentroid.lineStart = d3_geo_pathCentroidRingStart;\n    },\n    polygonEnd: function() {\n      d3_geo_pathCentroid.point = d3_geo_pathCentroidPoint;\n      d3_geo_pathCentroid.lineStart = d3_geo_pathCentroidLineStart;\n      d3_geo_pathCentroid.lineEnd = d3_geo_pathCentroidLineEnd;\n    }\n  };\n  function d3_geo_pathCentroidPoint(x, y) {\n    d3_geo_centroidX0 += x;\n    d3_geo_centroidY0 += y;\n    ++d3_geo_centroidZ0;\n  }\n  function d3_geo_pathCentroidLineStart() {\n    var x0, y0;\n    d3_geo_pathCentroid.point = function(x, y) {\n      d3_geo_pathCentroid.point = nextPoint;\n      d3_geo_pathCentroidPoint(x0 = x, y0 = y);\n    };\n    function nextPoint(x, y) {\n      var dx = x - x0, dy = y - y0, z = Math.sqrt(dx * dx + dy * dy);\n      d3_geo_centroidX1 += z * (x0 + x) / 2;\n      d3_geo_centroidY1 += z * (y0 + y) / 2;\n      d3_geo_centroidZ1 += z;\n      d3_geo_pathCentroidPoint(x0 = x, y0 = y);\n    }\n  }\n  function d3_geo_pathCentroidLineEnd() {\n    d3_geo_pathCentroid.point = d3_geo_pathCentroidPoint;\n  }\n  function d3_geo_pathCentroidRingStart() {\n    var x00, y00, x0, y0;\n    d3_geo_pathCentroid.point = function(x, y) {\n      d3_geo_pathCentroid.point = nextPoint;\n      d3_geo_pathCentroidPoint(x00 = x0 = x, y00 = y0 = y);\n    };\n    function nextPoint(x, y) {\n      var dx = x - x0, dy = y - y0, z = Math.sqrt(dx * dx + dy * dy);\n      d3_geo_centroidX1 += z * (x0 + x) / 2;\n      d3_geo_centroidY1 += z * (y0 + y) / 2;\n      d3_geo_centroidZ1 += z;\n      z = y0 * x - x0 * y;\n      d3_geo_centroidX2 += z * (x0 + x);\n      d3_geo_centroidY2 += z * (y0 + y);\n      d3_geo_centroidZ2 += z * 3;\n      d3_geo_pathCentroidPoint(x0 = x, y0 = y);\n    }\n    d3_geo_pathCentroid.lineEnd = function() {\n      nextPoint(x00, y00);\n    };\n  }\n  function d3_geo_pathContext(context) {\n    var pointRadius = 4.5;\n    var stream = {\n      point: point,\n      lineStart: function() {\n        stream.point = pointLineStart;\n      },\n      lineEnd: lineEnd,\n      polygonStart: function() {\n        stream.lineEnd = lineEndPolygon;\n      },\n      polygonEnd: function() {\n        stream.lineEnd = lineEnd;\n        stream.point = point;\n      },\n      pointRadius: function(_) {\n        pointRadius = _;\n        return stream;\n      },\n      result: d3_noop\n    };\n    function point(x, y) {\n      context.moveTo(x + pointRadius, y);\n      context.arc(x, y, pointRadius, 0, τ);\n    }\n    function pointLineStart(x, y) {\n      context.moveTo(x, y);\n      stream.point = pointLine;\n    }\n    function pointLine(x, y) {\n      context.lineTo(x, y);\n    }\n    function lineEnd() {\n      stream.point = point;\n    }\n    function lineEndPolygon() {\n      context.closePath();\n    }\n    return stream;\n  }\n  function d3_geo_resample(project) {\n    var δ2 = .5, cosMinDistance = Math.cos(30 * d3_radians), maxDepth = 16;\n    function resample(stream) {\n      return (maxDepth ? resampleRecursive : resampleNone)(stream);\n    }\n    function resampleNone(stream) {\n      return d3_geo_transformPoint(stream, function(x, y) {\n        x = project(x, y);\n        stream.point(x[0], x[1]);\n      });\n    }\n    function resampleRecursive(stream) {\n      var λ00, φ00, x00, y00, a00, b00, c00, λ0, x0, y0, a0, b0, c0;\n      var resample = {\n        point: point,\n        lineStart: lineStart,\n        lineEnd: lineEnd,\n        polygonStart: function() {\n          stream.polygonStart();\n          resample.lineStart = ringStart;\n        },\n        polygonEnd: function() {\n          stream.polygonEnd();\n          resample.lineStart = lineStart;\n        }\n      };\n      function point(x, y) {\n        x = project(x, y);\n        stream.point(x[0], x[1]);\n      }\n      function lineStart() {\n        x0 = NaN;\n        resample.point = linePoint;\n        stream.lineStart();\n      }\n      function linePoint(λ, φ) {\n        var c = d3_geo_cartesian([ λ, φ ]), p = project(λ, φ);\n        resampleLineTo(x0, y0, λ0, a0, b0, c0, x0 = p[0], y0 = p[1], λ0 = λ, a0 = c[0], b0 = c[1], c0 = c[2], maxDepth, stream);\n        stream.point(x0, y0);\n      }\n      function lineEnd() {\n        resample.point = point;\n        stream.lineEnd();\n      }\n      function ringStart() {\n        lineStart();\n        resample.point = ringPoint;\n        resample.lineEnd = ringEnd;\n      }\n      function ringPoint(λ, φ) {\n        linePoint(λ00 = λ, φ00 = φ), x00 = x0, y00 = y0, a00 = a0, b00 = b0, c00 = c0;\n        resample.point = linePoint;\n      }\n      function ringEnd() {\n        resampleLineTo(x0, y0, λ0, a0, b0, c0, x00, y00, λ00, a00, b00, c00, maxDepth, stream);\n        resample.lineEnd = lineEnd;\n        lineEnd();\n      }\n      return resample;\n    }\n    function resampleLineTo(x0, y0, λ0, a0, b0, c0, x1, y1, λ1, a1, b1, c1, depth, stream) {\n      var dx = x1 - x0, dy = y1 - y0, d2 = dx * dx + dy * dy;\n      if (d2 > 4 * δ2 && depth--) {\n        var a = a0 + a1, b = b0 + b1, c = c0 + c1, m = Math.sqrt(a * a + b * b + c * c), φ2 = Math.asin(c /= m), λ2 = abs(abs(c) - 1) < ε || abs(λ0 - λ1) < ε ? (λ0 + λ1) / 2 : Math.atan2(b, a), p = project(λ2, φ2), x2 = p[0], y2 = p[1], dx2 = x2 - x0, dy2 = y2 - y0, dz = dy * dx2 - dx * dy2;\n        if (dz * dz / d2 > δ2 || abs((dx * dx2 + dy * dy2) / d2 - .5) > .3 || a0 * a1 + b0 * b1 + c0 * c1 < cosMinDistance) {\n          resampleLineTo(x0, y0, λ0, a0, b0, c0, x2, y2, λ2, a /= m, b /= m, c, depth, stream);\n          stream.point(x2, y2);\n          resampleLineTo(x2, y2, λ2, a, b, c, x1, y1, λ1, a1, b1, c1, depth, stream);\n        }\n      }\n    }\n    resample.precision = function(_) {\n      if (!arguments.length) return Math.sqrt(δ2);\n      maxDepth = (δ2 = _ * _) > 0 && 16;\n      return resample;\n    };\n    return resample;\n  }\n  d3.geo.path = function() {\n    var pointRadius = 4.5, projection, context, projectStream, contextStream, cacheStream;\n    function path(object) {\n      if (object) {\n        if (typeof pointRadius === \"function\") contextStream.pointRadius(+pointRadius.apply(this, arguments));\n        if (!cacheStream || !cacheStream.valid) cacheStream = projectStream(contextStream);\n        d3.geo.stream(object, cacheStream);\n      }\n      return contextStream.result();\n    }\n    path.area = function(object) {\n      d3_geo_pathAreaSum = 0;\n      d3.geo.stream(object, projectStream(d3_geo_pathArea));\n      return d3_geo_pathAreaSum;\n    };\n    path.centroid = function(object) {\n      d3_geo_centroidX0 = d3_geo_centroidY0 = d3_geo_centroidZ0 = d3_geo_centroidX1 = d3_geo_centroidY1 = d3_geo_centroidZ1 = d3_geo_centroidX2 = d3_geo_centroidY2 = d3_geo_centroidZ2 = 0;\n      d3.geo.stream(object, projectStream(d3_geo_pathCentroid));\n      return d3_geo_centroidZ2 ? [ d3_geo_centroidX2 / d3_geo_centroidZ2, d3_geo_centroidY2 / d3_geo_centroidZ2 ] : d3_geo_centroidZ1 ? [ d3_geo_centroidX1 / d3_geo_centroidZ1, d3_geo_centroidY1 / d3_geo_centroidZ1 ] : d3_geo_centroidZ0 ? [ d3_geo_centroidX0 / d3_geo_centroidZ0, d3_geo_centroidY0 / d3_geo_centroidZ0 ] : [ NaN, NaN ];\n    };\n    path.bounds = function(object) {\n      d3_geo_pathBoundsX1 = d3_geo_pathBoundsY1 = -(d3_geo_pathBoundsX0 = d3_geo_pathBoundsY0 = Infinity);\n      d3.geo.stream(object, projectStream(d3_geo_pathBounds));\n      return [ [ d3_geo_pathBoundsX0, d3_geo_pathBoundsY0 ], [ d3_geo_pathBoundsX1, d3_geo_pathBoundsY1 ] ];\n    };\n    path.projection = function(_) {\n      if (!arguments.length) return projection;\n      projectStream = (projection = _) ? _.stream || d3_geo_pathProjectStream(_) : d3_identity;\n      return reset();\n    };\n    path.context = function(_) {\n      if (!arguments.length) return context;\n      contextStream = (context = _) == null ? new d3_geo_pathBuffer() : new d3_geo_pathContext(_);\n      if (typeof pointRadius !== \"function\") contextStream.pointRadius(pointRadius);\n      return reset();\n    };\n    path.pointRadius = function(_) {\n      if (!arguments.length) return pointRadius;\n      pointRadius = typeof _ === \"function\" ? _ : (contextStream.pointRadius(+_), +_);\n      return path;\n    };\n    function reset() {\n      cacheStream = null;\n      return path;\n    }\n    return path.projection(d3.geo.albersUsa()).context(null);\n  };\n  function d3_geo_pathProjectStream(project) {\n    var resample = d3_geo_resample(function(x, y) {\n      return project([ x * d3_degrees, y * d3_degrees ]);\n    });\n    return function(stream) {\n      return d3_geo_projectionRadians(resample(stream));\n    };\n  }\n  d3.geo.transform = function(methods) {\n    return {\n      stream: function(stream) {\n        var transform = new d3_geo_transform(stream);\n        for (var k in methods) transform[k] = methods[k];\n        return transform;\n      }\n    };\n  };\n  function d3_geo_transform(stream) {\n    this.stream = stream;\n  }\n  d3_geo_transform.prototype = {\n    point: function(x, y) {\n      this.stream.point(x, y);\n    },\n    sphere: function() {\n      this.stream.sphere();\n    },\n    lineStart: function() {\n      this.stream.lineStart();\n    },\n    lineEnd: function() {\n      this.stream.lineEnd();\n    },\n    polygonStart: function() {\n      this.stream.polygonStart();\n    },\n    polygonEnd: function() {\n      this.stream.polygonEnd();\n    }\n  };\n  function d3_geo_transformPoint(stream, point) {\n    return {\n      point: point,\n      sphere: function() {\n        stream.sphere();\n      },\n      lineStart: function() {\n        stream.lineStart();\n      },\n      lineEnd: function() {\n        stream.lineEnd();\n      },\n      polygonStart: function() {\n        stream.polygonStart();\n      },\n      polygonEnd: function() {\n        stream.polygonEnd();\n      }\n    };\n  }\n  d3.geo.projection = d3_geo_projection;\n  d3.geo.projectionMutator = d3_geo_projectionMutator;\n  function d3_geo_projection(project) {\n    return d3_geo_projectionMutator(function() {\n      return project;\n    })();\n  }\n  function d3_geo_projectionMutator(projectAt) {\n    var project, rotate, projectRotate, projectResample = d3_geo_resample(function(x, y) {\n      x = project(x, y);\n      return [ x[0] * k + δx, δy - x[1] * k ];\n    }), k = 150, x = 480, y = 250, λ = 0, φ = 0, δλ = 0, δφ = 0, δγ = 0, δx, δy, preclip = d3_geo_clipAntimeridian, postclip = d3_identity, clipAngle = null, clipExtent = null, stream;\n    function projection(point) {\n      point = projectRotate(point[0] * d3_radians, point[1] * d3_radians);\n      return [ point[0] * k + δx, δy - point[1] * k ];\n    }\n    function invert(point) {\n      point = projectRotate.invert((point[0] - δx) / k, (δy - point[1]) / k);\n      return point && [ point[0] * d3_degrees, point[1] * d3_degrees ];\n    }\n    projection.stream = function(output) {\n      if (stream) stream.valid = false;\n      stream = d3_geo_projectionRadians(preclip(rotate, projectResample(postclip(output))));\n      stream.valid = true;\n      return stream;\n    };\n    projection.clipAngle = function(_) {\n      if (!arguments.length) return clipAngle;\n      preclip = _ == null ? (clipAngle = _, d3_geo_clipAntimeridian) : d3_geo_clipCircle((clipAngle = +_) * d3_radians);\n      return invalidate();\n    };\n    projection.clipExtent = function(_) {\n      if (!arguments.length) return clipExtent;\n      clipExtent = _;\n      postclip = _ ? d3_geo_clipExtent(_[0][0], _[0][1], _[1][0], _[1][1]) : d3_identity;\n      return invalidate();\n    };\n    projection.scale = function(_) {\n      if (!arguments.length) return k;\n      k = +_;\n      return reset();\n    };\n    projection.translate = function(_) {\n      if (!arguments.length) return [ x, y ];\n      x = +_[0];\n      y = +_[1];\n      return reset();\n    };\n    projection.center = function(_) {\n      if (!arguments.length) return [ λ * d3_degrees, φ * d3_degrees ];\n      λ = _[0] % 360 * d3_radians;\n      φ = _[1] % 360 * d3_radians;\n      return reset();\n    };\n    projection.rotate = function(_) {\n      if (!arguments.length) return [ δλ * d3_degrees, δφ * d3_degrees, δγ * d3_degrees ];\n      δλ = _[0] % 360 * d3_radians;\n      δφ = _[1] % 360 * d3_radians;\n      δγ = _.length > 2 ? _[2] % 360 * d3_radians : 0;\n      return reset();\n    };\n    d3.rebind(projection, projectResample, \"precision\");\n    function reset() {\n      projectRotate = d3_geo_compose(rotate = d3_geo_rotation(δλ, δφ, δγ), project);\n      var center = project(λ, φ);\n      δx = x - center[0] * k;\n      δy = y + center[1] * k;\n      return invalidate();\n    }\n    function invalidate() {\n      if (stream) stream.valid = false, stream = null;\n      return projection;\n    }\n    return function() {\n      project = projectAt.apply(this, arguments);\n      projection.invert = project.invert && invert;\n      return reset();\n    };\n  }\n  function d3_geo_projectionRadians(stream) {\n    return d3_geo_transformPoint(stream, function(x, y) {\n      stream.point(x * d3_radians, y * d3_radians);\n    });\n  }\n  function d3_geo_equirectangular(λ, φ) {\n    return [ λ, φ ];\n  }\n  (d3.geo.equirectangular = function() {\n    return d3_geo_projection(d3_geo_equirectangular);\n  }).raw = d3_geo_equirectangular.invert = d3_geo_equirectangular;\n  d3.geo.rotation = function(rotate) {\n    rotate = d3_geo_rotation(rotate[0] % 360 * d3_radians, rotate[1] * d3_radians, rotate.length > 2 ? rotate[2] * d3_radians : 0);\n    function forward(coordinates) {\n      coordinates = rotate(coordinates[0] * d3_radians, coordinates[1] * d3_radians);\n      return coordinates[0] *= d3_degrees, coordinates[1] *= d3_degrees, coordinates;\n    }\n    forward.invert = function(coordinates) {\n      coordinates = rotate.invert(coordinates[0] * d3_radians, coordinates[1] * d3_radians);\n      return coordinates[0] *= d3_degrees, coordinates[1] *= d3_degrees, coordinates;\n    };\n    return forward;\n  };\n  function d3_geo_identityRotation(λ, φ) {\n    return [ λ > π ? λ - τ : λ < -π ? λ + τ : λ, φ ];\n  }\n  d3_geo_identityRotation.invert = d3_geo_equirectangular;\n  function d3_geo_rotation(δλ, δφ, δγ) {\n    return δλ ? δφ || δγ ? d3_geo_compose(d3_geo_rotationλ(δλ), d3_geo_rotationφγ(δφ, δγ)) : d3_geo_rotationλ(δλ) : δφ || δγ ? d3_geo_rotationφγ(δφ, δγ) : d3_geo_identityRotation;\n  }\n  function d3_geo_forwardRotationλ(δλ) {\n    return function(λ, φ) {\n      return λ += δλ, [ λ > π ? λ - τ : λ < -π ? λ + τ : λ, φ ];\n    };\n  }\n  function d3_geo_rotationλ(δλ) {\n    var rotation = d3_geo_forwardRotationλ(δλ);\n    rotation.invert = d3_geo_forwardRotationλ(-δλ);\n    return rotation;\n  }\n  function d3_geo_rotationφγ(δφ, δγ) {\n    var cosδφ = Math.cos(δφ), sinδφ = Math.sin(δφ), cosδγ = Math.cos(δγ), sinδγ = Math.sin(δγ);\n    function rotation(λ, φ) {\n      var cosφ = Math.cos(φ), x = Math.cos(λ) * cosφ, y = Math.sin(λ) * cosφ, z = Math.sin(φ), k = z * cosδφ + x * sinδφ;\n      return [ Math.atan2(y * cosδγ - k * sinδγ, x * cosδφ - z * sinδφ), d3_asin(k * cosδγ + y * sinδγ) ];\n    }\n    rotation.invert = function(λ, φ) {\n      var cosφ = Math.cos(φ), x = Math.cos(λ) * cosφ, y = Math.sin(λ) * cosφ, z = Math.sin(φ), k = z * cosδγ - y * sinδγ;\n      return [ Math.atan2(y * cosδγ + z * sinδγ, x * cosδφ + k * sinδφ), d3_asin(k * cosδφ - x * sinδφ) ];\n    };\n    return rotation;\n  }\n  d3.geo.circle = function() {\n    var origin = [ 0, 0 ], angle, precision = 6, interpolate;\n    function circle() {\n      var center = typeof origin === \"function\" ? origin.apply(this, arguments) : origin, rotate = d3_geo_rotation(-center[0] * d3_radians, -center[1] * d3_radians, 0).invert, ring = [];\n      interpolate(null, null, 1, {\n        point: function(x, y) {\n          ring.push(x = rotate(x, y));\n          x[0] *= d3_degrees, x[1] *= d3_degrees;\n        }\n      });\n      return {\n        type: \"Polygon\",\n        coordinates: [ ring ]\n      };\n    }\n    circle.origin = function(x) {\n      if (!arguments.length) return origin;\n      origin = x;\n      return circle;\n    };\n    circle.angle = function(x) {\n      if (!arguments.length) return angle;\n      interpolate = d3_geo_circleInterpolate((angle = +x) * d3_radians, precision * d3_radians);\n      return circle;\n    };\n    circle.precision = function(_) {\n      if (!arguments.length) return precision;\n      interpolate = d3_geo_circleInterpolate(angle * d3_radians, (precision = +_) * d3_radians);\n      return circle;\n    };\n    return circle.angle(90);\n  };\n  function d3_geo_circleInterpolate(radius, precision) {\n    var cr = Math.cos(radius), sr = Math.sin(radius);\n    return function(from, to, direction, listener) {\n      var step = direction * precision;\n      if (from != null) {\n        from = d3_geo_circleAngle(cr, from);\n        to = d3_geo_circleAngle(cr, to);\n        if (direction > 0 ? from < to : from > to) from += direction * τ;\n      } else {\n        from = radius + direction * τ;\n        to = radius - .5 * step;\n      }\n      for (var point, t = from; direction > 0 ? t > to : t < to; t -= step) {\n        listener.point((point = d3_geo_spherical([ cr, -sr * Math.cos(t), -sr * Math.sin(t) ]))[0], point[1]);\n      }\n    };\n  }\n  function d3_geo_circleAngle(cr, point) {\n    var a = d3_geo_cartesian(point);\n    a[0] -= cr;\n    d3_geo_cartesianNormalize(a);\n    var angle = d3_acos(-a[1]);\n    return ((-a[2] < 0 ? -angle : angle) + 2 * Math.PI - ε) % (2 * Math.PI);\n  }\n  d3.geo.distance = function(a, b) {\n    var Δλ = (b[0] - a[0]) * d3_radians, φ0 = a[1] * d3_radians, φ1 = b[1] * d3_radians, sinΔλ = Math.sin(Δλ), cosΔλ = Math.cos(Δλ), sinφ0 = Math.sin(φ0), cosφ0 = Math.cos(φ0), sinφ1 = Math.sin(φ1), cosφ1 = Math.cos(φ1), t;\n    return Math.atan2(Math.sqrt((t = cosφ1 * sinΔλ) * t + (t = cosφ0 * sinφ1 - sinφ0 * cosφ1 * cosΔλ) * t), sinφ0 * sinφ1 + cosφ0 * cosφ1 * cosΔλ);\n  };\n  d3.geo.graticule = function() {\n    var x1, x0, X1, X0, y1, y0, Y1, Y0, dx = 10, dy = dx, DX = 90, DY = 360, x, y, X, Y, precision = 2.5;\n    function graticule() {\n      return {\n        type: \"MultiLineString\",\n        coordinates: lines()\n      };\n    }\n    function lines() {\n      return d3.range(Math.ceil(X0 / DX) * DX, X1, DX).map(X).concat(d3.range(Math.ceil(Y0 / DY) * DY, Y1, DY).map(Y)).concat(d3.range(Math.ceil(x0 / dx) * dx, x1, dx).filter(function(x) {\n        return abs(x % DX) > ε;\n      }).map(x)).concat(d3.range(Math.ceil(y0 / dy) * dy, y1, dy).filter(function(y) {\n        return abs(y % DY) > ε;\n      }).map(y));\n    }\n    graticule.lines = function() {\n      return lines().map(function(coordinates) {\n        return {\n          type: \"LineString\",\n          coordinates: coordinates\n        };\n      });\n    };\n    graticule.outline = function() {\n      return {\n        type: \"Polygon\",\n        coordinates: [ X(X0).concat(Y(Y1).slice(1), X(X1).reverse().slice(1), Y(Y0).reverse().slice(1)) ]\n      };\n    };\n    graticule.extent = function(_) {\n      if (!arguments.length) return graticule.minorExtent();\n      return graticule.majorExtent(_).minorExtent(_);\n    };\n    graticule.majorExtent = function(_) {\n      if (!arguments.length) return [ [ X0, Y0 ], [ X1, Y1 ] ];\n      X0 = +_[0][0], X1 = +_[1][0];\n      Y0 = +_[0][1], Y1 = +_[1][1];\n      if (X0 > X1) _ = X0, X0 = X1, X1 = _;\n      if (Y0 > Y1) _ = Y0, Y0 = Y1, Y1 = _;\n      return graticule.precision(precision);\n    };\n    graticule.minorExtent = function(_) {\n      if (!arguments.length) return [ [ x0, y0 ], [ x1, y1 ] ];\n      x0 = +_[0][0], x1 = +_[1][0];\n      y0 = +_[0][1], y1 = +_[1][1];\n      if (x0 > x1) _ = x0, x0 = x1, x1 = _;\n      if (y0 > y1) _ = y0, y0 = y1, y1 = _;\n      return graticule.precision(precision);\n    };\n    graticule.step = function(_) {\n      if (!arguments.length) return graticule.minorStep();\n      return graticule.majorStep(_).minorStep(_);\n    };\n    graticule.majorStep = function(_) {\n      if (!arguments.length) return [ DX, DY ];\n      DX = +_[0], DY = +_[1];\n      return graticule;\n    };\n    graticule.minorStep = function(_) {\n      if (!arguments.length) return [ dx, dy ];\n      dx = +_[0], dy = +_[1];\n      return graticule;\n    };\n    graticule.precision = function(_) {\n      if (!arguments.length) return precision;\n      precision = +_;\n      x = d3_geo_graticuleX(y0, y1, 90);\n      y = d3_geo_graticuleY(x0, x1, precision);\n      X = d3_geo_graticuleX(Y0, Y1, 90);\n      Y = d3_geo_graticuleY(X0, X1, precision);\n      return graticule;\n    };\n    return graticule.majorExtent([ [ -180, -90 + ε ], [ 180, 90 - ε ] ]).minorExtent([ [ -180, -80 - ε ], [ 180, 80 + ε ] ]);\n  };\n  function d3_geo_graticuleX(y0, y1, dy) {\n    var y = d3.range(y0, y1 - ε, dy).concat(y1);\n    return function(x) {\n      return y.map(function(y) {\n        return [ x, y ];\n      });\n    };\n  }\n  function d3_geo_graticuleY(x0, x1, dx) {\n    var x = d3.range(x0, x1 - ε, dx).concat(x1);\n    return function(y) {\n      return x.map(function(x) {\n        return [ x, y ];\n      });\n    };\n  }\n  function d3_source(d) {\n    return d.source;\n  }\n  function d3_target(d) {\n    return d.target;\n  }\n  d3.geo.greatArc = function() {\n    var source = d3_source, source_, target = d3_target, target_;\n    function greatArc() {\n      return {\n        type: \"LineString\",\n        coordinates: [ source_ || source.apply(this, arguments), target_ || target.apply(this, arguments) ]\n      };\n    }\n    greatArc.distance = function() {\n      return d3.geo.distance(source_ || source.apply(this, arguments), target_ || target.apply(this, arguments));\n    };\n    greatArc.source = function(_) {\n      if (!arguments.length) return source;\n      source = _, source_ = typeof _ === \"function\" ? null : _;\n      return greatArc;\n    };\n    greatArc.target = function(_) {\n      if (!arguments.length) return target;\n      target = _, target_ = typeof _ === \"function\" ? null : _;\n      return greatArc;\n    };\n    greatArc.precision = function() {\n      return arguments.length ? greatArc : 0;\n    };\n    return greatArc;\n  };\n  d3.geo.interpolate = function(source, target) {\n    return d3_geo_interpolate(source[0] * d3_radians, source[1] * d3_radians, target[0] * d3_radians, target[1] * d3_radians);\n  };\n  function d3_geo_interpolate(x0, y0, x1, y1) {\n    var cy0 = Math.cos(y0), sy0 = Math.sin(y0), cy1 = Math.cos(y1), sy1 = Math.sin(y1), kx0 = cy0 * Math.cos(x0), ky0 = cy0 * Math.sin(x0), kx1 = cy1 * Math.cos(x1), ky1 = cy1 * Math.sin(x1), d = 2 * Math.asin(Math.sqrt(d3_haversin(y1 - y0) + cy0 * cy1 * d3_haversin(x1 - x0))), k = 1 / Math.sin(d);\n    var interpolate = d ? function(t) {\n      var B = Math.sin(t *= d) * k, A = Math.sin(d - t) * k, x = A * kx0 + B * kx1, y = A * ky0 + B * ky1, z = A * sy0 + B * sy1;\n      return [ Math.atan2(y, x) * d3_degrees, Math.atan2(z, Math.sqrt(x * x + y * y)) * d3_degrees ];\n    } : function() {\n      return [ x0 * d3_degrees, y0 * d3_degrees ];\n    };\n    interpolate.distance = d;\n    return interpolate;\n  }\n  d3.geo.length = function(object) {\n    d3_geo_lengthSum = 0;\n    d3.geo.stream(object, d3_geo_length);\n    return d3_geo_lengthSum;\n  };\n  var d3_geo_lengthSum;\n  var d3_geo_length = {\n    sphere: d3_noop,\n    point: d3_noop,\n    lineStart: d3_geo_lengthLineStart,\n    lineEnd: d3_noop,\n    polygonStart: d3_noop,\n    polygonEnd: d3_noop\n  };\n  function d3_geo_lengthLineStart() {\n    var λ0, sinφ0, cosφ0;\n    d3_geo_length.point = function(λ, φ) {\n      λ0 = λ * d3_radians, sinφ0 = Math.sin(φ *= d3_radians), cosφ0 = Math.cos(φ);\n      d3_geo_length.point = nextPoint;\n    };\n    d3_geo_length.lineEnd = function() {\n      d3_geo_length.point = d3_geo_length.lineEnd = d3_noop;\n    };\n    function nextPoint(λ, φ) {\n      var sinφ = Math.sin(φ *= d3_radians), cosφ = Math.cos(φ), t = abs((λ *= d3_radians) - λ0), cosΔλ = Math.cos(t);\n      d3_geo_lengthSum += Math.atan2(Math.sqrt((t = cosφ * Math.sin(t)) * t + (t = cosφ0 * sinφ - sinφ0 * cosφ * cosΔλ) * t), sinφ0 * sinφ + cosφ0 * cosφ * cosΔλ);\n      λ0 = λ, sinφ0 = sinφ, cosφ0 = cosφ;\n    }\n  }\n  function d3_geo_azimuthal(scale, angle) {\n    function azimuthal(λ, φ) {\n      var cosλ = Math.cos(λ), cosφ = Math.cos(φ), k = scale(cosλ * cosφ);\n      return [ k * cosφ * Math.sin(λ), k * Math.sin(φ) ];\n    }\n    azimuthal.invert = function(x, y) {\n      var ρ = Math.sqrt(x * x + y * y), c = angle(ρ), sinc = Math.sin(c), cosc = Math.cos(c);\n      return [ Math.atan2(x * sinc, ρ * cosc), Math.asin(ρ && y * sinc / ρ) ];\n    };\n    return azimuthal;\n  }\n  var d3_geo_azimuthalEqualArea = d3_geo_azimuthal(function(cosλcosφ) {\n    return Math.sqrt(2 / (1 + cosλcosφ));\n  }, function(ρ) {\n    return 2 * Math.asin(ρ / 2);\n  });\n  (d3.geo.azimuthalEqualArea = function() {\n    return d3_geo_projection(d3_geo_azimuthalEqualArea);\n  }).raw = d3_geo_azimuthalEqualArea;\n  var d3_geo_azimuthalEquidistant = d3_geo_azimuthal(function(cosλcosφ) {\n    var c = Math.acos(cosλcosφ);\n    return c && c / Math.sin(c);\n  }, d3_identity);\n  (d3.geo.azimuthalEquidistant = function() {\n    return d3_geo_projection(d3_geo_azimuthalEquidistant);\n  }).raw = d3_geo_azimuthalEquidistant;\n  function d3_geo_conicConformal(φ0, φ1) {\n    var cosφ0 = Math.cos(φ0), t = function(φ) {\n      return Math.tan(π / 4 + φ / 2);\n    }, n = φ0 === φ1 ? Math.sin(φ0) : Math.log(cosφ0 / Math.cos(φ1)) / Math.log(t(φ1) / t(φ0)), F = cosφ0 * Math.pow(t(φ0), n) / n;\n    if (!n) return d3_geo_mercator;\n    function forward(λ, φ) {\n      if (F > 0) {\n        if (φ < -halfπ + ε) φ = -halfπ + ε;\n      } else {\n        if (φ > halfπ - ε) φ = halfπ - ε;\n      }\n      var ρ = F / Math.pow(t(φ), n);\n      return [ ρ * Math.sin(n * λ), F - ρ * Math.cos(n * λ) ];\n    }\n    forward.invert = function(x, y) {\n      var ρ0_y = F - y, ρ = d3_sgn(n) * Math.sqrt(x * x + ρ0_y * ρ0_y);\n      return [ Math.atan2(x, ρ0_y) / n, 2 * Math.atan(Math.pow(F / ρ, 1 / n)) - halfπ ];\n    };\n    return forward;\n  }\n  (d3.geo.conicConformal = function() {\n    return d3_geo_conic(d3_geo_conicConformal);\n  }).raw = d3_geo_conicConformal;\n  function d3_geo_conicEquidistant(φ0, φ1) {\n    var cosφ0 = Math.cos(φ0), n = φ0 === φ1 ? Math.sin(φ0) : (cosφ0 - Math.cos(φ1)) / (φ1 - φ0), G = cosφ0 / n + φ0;\n    if (abs(n) < ε) return d3_geo_equirectangular;\n    function forward(λ, φ) {\n      var ρ = G - φ;\n      return [ ρ * Math.sin(n * λ), G - ρ * Math.cos(n * λ) ];\n    }\n    forward.invert = function(x, y) {\n      var ρ0_y = G - y;\n      return [ Math.atan2(x, ρ0_y) / n, G - d3_sgn(n) * Math.sqrt(x * x + ρ0_y * ρ0_y) ];\n    };\n    return forward;\n  }\n  (d3.geo.conicEquidistant = function() {\n    return d3_geo_conic(d3_geo_conicEquidistant);\n  }).raw = d3_geo_conicEquidistant;\n  var d3_geo_gnomonic = d3_geo_azimuthal(function(cosλcosφ) {\n    return 1 / cosλcosφ;\n  }, Math.atan);\n  (d3.geo.gnomonic = function() {\n    return d3_geo_projection(d3_geo_gnomonic);\n  }).raw = d3_geo_gnomonic;\n  function d3_geo_mercator(λ, φ) {\n    return [ λ, Math.log(Math.tan(π / 4 + φ / 2)) ];\n  }\n  d3_geo_mercator.invert = function(x, y) {\n    return [ x, 2 * Math.atan(Math.exp(y)) - halfπ ];\n  };\n  function d3_geo_mercatorProjection(project) {\n    var m = d3_geo_projection(project), scale = m.scale, translate = m.translate, clipExtent = m.clipExtent, clipAuto;\n    m.scale = function() {\n      var v = scale.apply(m, arguments);\n      return v === m ? clipAuto ? m.clipExtent(null) : m : v;\n    };\n    m.translate = function() {\n      var v = translate.apply(m, arguments);\n      return v === m ? clipAuto ? m.clipExtent(null) : m : v;\n    };\n    m.clipExtent = function(_) {\n      var v = clipExtent.apply(m, arguments);\n      if (v === m) {\n        if (clipAuto = _ == null) {\n          var k = π * scale(), t = translate();\n          clipExtent([ [ t[0] - k, t[1] - k ], [ t[0] + k, t[1] + k ] ]);\n        }\n      } else if (clipAuto) {\n        v = null;\n      }\n      return v;\n    };\n    return m.clipExtent(null);\n  }\n  (d3.geo.mercator = function() {\n    return d3_geo_mercatorProjection(d3_geo_mercator);\n  }).raw = d3_geo_mercator;\n  var d3_geo_orthographic = d3_geo_azimuthal(function() {\n    return 1;\n  }, Math.asin);\n  (d3.geo.orthographic = function() {\n    return d3_geo_projection(d3_geo_orthographic);\n  }).raw = d3_geo_orthographic;\n  var d3_geo_stereographic = d3_geo_azimuthal(function(cosλcosφ) {\n    return 1 / (1 + cosλcosφ);\n  }, function(ρ) {\n    return 2 * Math.atan(ρ);\n  });\n  (d3.geo.stereographic = function() {\n    return d3_geo_projection(d3_geo_stereographic);\n  }).raw = d3_geo_stereographic;\n  function d3_geo_transverseMercator(λ, φ) {\n    return [ Math.log(Math.tan(π / 4 + φ / 2)), -λ ];\n  }\n  d3_geo_transverseMercator.invert = function(x, y) {\n    return [ -y, 2 * Math.atan(Math.exp(x)) - halfπ ];\n  };\n  (d3.geo.transverseMercator = function() {\n    var projection = d3_geo_mercatorProjection(d3_geo_transverseMercator), center = projection.center, rotate = projection.rotate;\n    projection.center = function(_) {\n      return _ ? center([ -_[1], _[0] ]) : (_ = center(), [ _[1], -_[0] ]);\n    };\n    projection.rotate = function(_) {\n      return _ ? rotate([ _[0], _[1], _.length > 2 ? _[2] + 90 : 90 ]) : (_ = rotate(), \n      [ _[0], _[1], _[2] - 90 ]);\n    };\n    return rotate([ 0, 0, 90 ]);\n  }).raw = d3_geo_transverseMercator;\n  d3.geom = {};\n  function d3_geom_pointX(d) {\n    return d[0];\n  }\n  function d3_geom_pointY(d) {\n    return d[1];\n  }\n  d3.geom.hull = function(vertices) {\n    var x = d3_geom_pointX, y = d3_geom_pointY;\n    if (arguments.length) return hull(vertices);\n    function hull(data) {\n      if (data.length < 3) return [];\n      var fx = d3_functor(x), fy = d3_functor(y), i, n = data.length, points = [], flippedPoints = [];\n      for (i = 0; i < n; i++) {\n        points.push([ +fx.call(this, data[i], i), +fy.call(this, data[i], i), i ]);\n      }\n      points.sort(d3_geom_hullOrder);\n      for (i = 0; i < n; i++) flippedPoints.push([ points[i][0], -points[i][1] ]);\n      var upper = d3_geom_hullUpper(points), lower = d3_geom_hullUpper(flippedPoints);\n      var skipLeft = lower[0] === upper[0], skipRight = lower[lower.length - 1] === upper[upper.length - 1], polygon = [];\n      for (i = upper.length - 1; i >= 0; --i) polygon.push(data[points[upper[i]][2]]);\n      for (i = +skipLeft; i < lower.length - skipRight; ++i) polygon.push(data[points[lower[i]][2]]);\n      return polygon;\n    }\n    hull.x = function(_) {\n      return arguments.length ? (x = _, hull) : x;\n    };\n    hull.y = function(_) {\n      return arguments.length ? (y = _, hull) : y;\n    };\n    return hull;\n  };\n  function d3_geom_hullUpper(points) {\n    var n = points.length, hull = [ 0, 1 ], hs = 2;\n    for (var i = 2; i < n; i++) {\n      while (hs > 1 && d3_cross2d(points[hull[hs - 2]], points[hull[hs - 1]], points[i]) <= 0) --hs;\n      hull[hs++] = i;\n    }\n    return hull.slice(0, hs);\n  }\n  function d3_geom_hullOrder(a, b) {\n    return a[0] - b[0] || a[1] - b[1];\n  }\n  d3.geom.polygon = function(coordinates) {\n    d3_subclass(coordinates, d3_geom_polygonPrototype);\n    return coordinates;\n  };\n  var d3_geom_polygonPrototype = d3.geom.polygon.prototype = [];\n  d3_geom_polygonPrototype.area = function() {\n    var i = -1, n = this.length, a, b = this[n - 1], area = 0;\n    while (++i < n) {\n      a = b;\n      b = this[i];\n      area += a[1] * b[0] - a[0] * b[1];\n    }\n    return area * .5;\n  };\n  d3_geom_polygonPrototype.centroid = function(k) {\n    var i = -1, n = this.length, x = 0, y = 0, a, b = this[n - 1], c;\n    if (!arguments.length) k = -1 / (6 * this.area());\n    while (++i < n) {\n      a = b;\n      b = this[i];\n      c = a[0] * b[1] - b[0] * a[1];\n      x += (a[0] + b[0]) * c;\n      y += (a[1] + b[1]) * c;\n    }\n    return [ x * k, y * k ];\n  };\n  d3_geom_polygonPrototype.clip = function(subject) {\n    var input, closed = d3_geom_polygonClosed(subject), i = -1, n = this.length - d3_geom_polygonClosed(this), j, m, a = this[n - 1], b, c, d;\n    while (++i < n) {\n      input = subject.slice();\n      subject.length = 0;\n      b = this[i];\n      c = input[(m = input.length - closed) - 1];\n      j = -1;\n      while (++j < m) {\n        d = input[j];\n        if (d3_geom_polygonInside(d, a, b)) {\n          if (!d3_geom_polygonInside(c, a, b)) {\n            subject.push(d3_geom_polygonIntersect(c, d, a, b));\n          }\n          subject.push(d);\n        } else if (d3_geom_polygonInside(c, a, b)) {\n          subject.push(d3_geom_polygonIntersect(c, d, a, b));\n        }\n        c = d;\n      }\n      if (closed) subject.push(subject[0]);\n      a = b;\n    }\n    return subject;\n  };\n  function d3_geom_polygonInside(p, a, b) {\n    return (b[0] - a[0]) * (p[1] - a[1]) < (b[1] - a[1]) * (p[0] - a[0]);\n  }\n  function d3_geom_polygonIntersect(c, d, a, b) {\n    var x1 = c[0], x3 = a[0], x21 = d[0] - x1, x43 = b[0] - x3, y1 = c[1], y3 = a[1], y21 = d[1] - y1, y43 = b[1] - y3, ua = (x43 * (y1 - y3) - y43 * (x1 - x3)) / (y43 * x21 - x43 * y21);\n    return [ x1 + ua * x21, y1 + ua * y21 ];\n  }\n  function d3_geom_polygonClosed(coordinates) {\n    var a = coordinates[0], b = coordinates[coordinates.length - 1];\n    return !(a[0] - b[0] || a[1] - b[1]);\n  }\n  var d3_geom_voronoiEdges, d3_geom_voronoiCells, d3_geom_voronoiBeaches, d3_geom_voronoiBeachPool = [], d3_geom_voronoiFirstCircle, d3_geom_voronoiCircles, d3_geom_voronoiCirclePool = [];\n  function d3_geom_voronoiBeach() {\n    d3_geom_voronoiRedBlackNode(this);\n    this.edge = this.site = this.circle = null;\n  }\n  function d3_geom_voronoiCreateBeach(site) {\n    var beach = d3_geom_voronoiBeachPool.pop() || new d3_geom_voronoiBeach();\n    beach.site = site;\n    return beach;\n  }\n  function d3_geom_voronoiDetachBeach(beach) {\n    d3_geom_voronoiDetachCircle(beach);\n    d3_geom_voronoiBeaches.remove(beach);\n    d3_geom_voronoiBeachPool.push(beach);\n    d3_geom_voronoiRedBlackNode(beach);\n  }\n  function d3_geom_voronoiRemoveBeach(beach) {\n    var circle = beach.circle, x = circle.x, y = circle.cy, vertex = {\n      x: x,\n      y: y\n    }, previous = beach.P, next = beach.N, disappearing = [ beach ];\n    d3_geom_voronoiDetachBeach(beach);\n    var lArc = previous;\n    while (lArc.circle && abs(x - lArc.circle.x) < ε && abs(y - lArc.circle.cy) < ε) {\n      previous = lArc.P;\n      disappearing.unshift(lArc);\n      d3_geom_voronoiDetachBeach(lArc);\n      lArc = previous;\n    }\n    disappearing.unshift(lArc);\n    d3_geom_voronoiDetachCircle(lArc);\n    var rArc = next;\n    while (rArc.circle && abs(x - rArc.circle.x) < ε && abs(y - rArc.circle.cy) < ε) {\n      next = rArc.N;\n      disappearing.push(rArc);\n      d3_geom_voronoiDetachBeach(rArc);\n      rArc = next;\n    }\n    disappearing.push(rArc);\n    d3_geom_voronoiDetachCircle(rArc);\n    var nArcs = disappearing.length, iArc;\n    for (iArc = 1; iArc < nArcs; ++iArc) {\n      rArc = disappearing[iArc];\n      lArc = disappearing[iArc - 1];\n      d3_geom_voronoiSetEdgeEnd(rArc.edge, lArc.site, rArc.site, vertex);\n    }\n    lArc = disappearing[0];\n    rArc = disappearing[nArcs - 1];\n    rArc.edge = d3_geom_voronoiCreateEdge(lArc.site, rArc.site, null, vertex);\n    d3_geom_voronoiAttachCircle(lArc);\n    d3_geom_voronoiAttachCircle(rArc);\n  }\n  function d3_geom_voronoiAddBeach(site) {\n    var x = site.x, directrix = site.y, lArc, rArc, dxl, dxr, node = d3_geom_voronoiBeaches._;\n    while (node) {\n      dxl = d3_geom_voronoiLeftBreakPoint(node, directrix) - x;\n      if (dxl > ε) node = node.L; else {\n        dxr = x - d3_geom_voronoiRightBreakPoint(node, directrix);\n        if (dxr > ε) {\n          if (!node.R) {\n            lArc = node;\n            break;\n          }\n          node = node.R;\n        } else {\n          if (dxl > -ε) {\n            lArc = node.P;\n            rArc = node;\n          } else if (dxr > -ε) {\n            lArc = node;\n            rArc = node.N;\n          } else {\n            lArc = rArc = node;\n          }\n          break;\n        }\n      }\n    }\n    var newArc = d3_geom_voronoiCreateBeach(site);\n    d3_geom_voronoiBeaches.insert(lArc, newArc);\n    if (!lArc && !rArc) return;\n    if (lArc === rArc) {\n      d3_geom_voronoiDetachCircle(lArc);\n      rArc = d3_geom_voronoiCreateBeach(lArc.site);\n      d3_geom_voronoiBeaches.insert(newArc, rArc);\n      newArc.edge = rArc.edge = d3_geom_voronoiCreateEdge(lArc.site, newArc.site);\n      d3_geom_voronoiAttachCircle(lArc);\n      d3_geom_voronoiAttachCircle(rArc);\n      return;\n    }\n    if (!rArc) {\n      newArc.edge = d3_geom_voronoiCreateEdge(lArc.site, newArc.site);\n      return;\n    }\n    d3_geom_voronoiDetachCircle(lArc);\n    d3_geom_voronoiDetachCircle(rArc);\n    var lSite = lArc.site, ax = lSite.x, ay = lSite.y, bx = site.x - ax, by = site.y - ay, rSite = rArc.site, cx = rSite.x - ax, cy = rSite.y - ay, d = 2 * (bx * cy - by * cx), hb = bx * bx + by * by, hc = cx * cx + cy * cy, vertex = {\n      x: (cy * hb - by * hc) / d + ax,\n      y: (bx * hc - cx * hb) / d + ay\n    };\n    d3_geom_voronoiSetEdgeEnd(rArc.edge, lSite, rSite, vertex);\n    newArc.edge = d3_geom_voronoiCreateEdge(lSite, site, null, vertex);\n    rArc.edge = d3_geom_voronoiCreateEdge(site, rSite, null, vertex);\n    d3_geom_voronoiAttachCircle(lArc);\n    d3_geom_voronoiAttachCircle(rArc);\n  }\n  function d3_geom_voronoiLeftBreakPoint(arc, directrix) {\n    var site = arc.site, rfocx = site.x, rfocy = site.y, pby2 = rfocy - directrix;\n    if (!pby2) return rfocx;\n    var lArc = arc.P;\n    if (!lArc) return -Infinity;\n    site = lArc.site;\n    var lfocx = site.x, lfocy = site.y, plby2 = lfocy - directrix;\n    if (!plby2) return lfocx;\n    var hl = lfocx - rfocx, aby2 = 1 / pby2 - 1 / plby2, b = hl / plby2;\n    if (aby2) return (-b + Math.sqrt(b * b - 2 * aby2 * (hl * hl / (-2 * plby2) - lfocy + plby2 / 2 + rfocy - pby2 / 2))) / aby2 + rfocx;\n    return (rfocx + lfocx) / 2;\n  }\n  function d3_geom_voronoiRightBreakPoint(arc, directrix) {\n    var rArc = arc.N;\n    if (rArc) return d3_geom_voronoiLeftBreakPoint(rArc, directrix);\n    var site = arc.site;\n    return site.y === directrix ? site.x : Infinity;\n  }\n  function d3_geom_voronoiCell(site) {\n    this.site = site;\n    this.edges = [];\n  }\n  d3_geom_voronoiCell.prototype.prepare = function() {\n    var halfEdges = this.edges, iHalfEdge = halfEdges.length, edge;\n    while (iHalfEdge--) {\n      edge = halfEdges[iHalfEdge].edge;\n      if (!edge.b || !edge.a) halfEdges.splice(iHalfEdge, 1);\n    }\n    halfEdges.sort(d3_geom_voronoiHalfEdgeOrder);\n    return halfEdges.length;\n  };\n  function d3_geom_voronoiCloseCells(extent) {\n    var x0 = extent[0][0], x1 = extent[1][0], y0 = extent[0][1], y1 = extent[1][1], x2, y2, x3, y3, cells = d3_geom_voronoiCells, iCell = cells.length, cell, iHalfEdge, halfEdges, nHalfEdges, start, end;\n    while (iCell--) {\n      cell = cells[iCell];\n      if (!cell || !cell.prepare()) continue;\n      halfEdges = cell.edges;\n      nHalfEdges = halfEdges.length;\n      iHalfEdge = 0;\n      while (iHalfEdge < nHalfEdges) {\n        end = halfEdges[iHalfEdge].end(), x3 = end.x, y3 = end.y;\n        start = halfEdges[++iHalfEdge % nHalfEdges].start(), x2 = start.x, y2 = start.y;\n        if (abs(x3 - x2) > ε || abs(y3 - y2) > ε) {\n          halfEdges.splice(iHalfEdge, 0, new d3_geom_voronoiHalfEdge(d3_geom_voronoiCreateBorderEdge(cell.site, end, abs(x3 - x0) < ε && y1 - y3 > ε ? {\n            x: x0,\n            y: abs(x2 - x0) < ε ? y2 : y1\n          } : abs(y3 - y1) < ε && x1 - x3 > ε ? {\n            x: abs(y2 - y1) < ε ? x2 : x1,\n            y: y1\n          } : abs(x3 - x1) < ε && y3 - y0 > ε ? {\n            x: x1,\n            y: abs(x2 - x1) < ε ? y2 : y0\n          } : abs(y3 - y0) < ε && x3 - x0 > ε ? {\n            x: abs(y2 - y0) < ε ? x2 : x0,\n            y: y0\n          } : null), cell.site, null));\n          ++nHalfEdges;\n        }\n      }\n    }\n  }\n  function d3_geom_voronoiHalfEdgeOrder(a, b) {\n    return b.angle - a.angle;\n  }\n  function d3_geom_voronoiCircle() {\n    d3_geom_voronoiRedBlackNode(this);\n    this.x = this.y = this.arc = this.site = this.cy = null;\n  }\n  function d3_geom_voronoiAttachCircle(arc) {\n    var lArc = arc.P, rArc = arc.N;\n    if (!lArc || !rArc) return;\n    var lSite = lArc.site, cSite = arc.site, rSite = rArc.site;\n    if (lSite === rSite) return;\n    var bx = cSite.x, by = cSite.y, ax = lSite.x - bx, ay = lSite.y - by, cx = rSite.x - bx, cy = rSite.y - by;\n    var d = 2 * (ax * cy - ay * cx);\n    if (d >= -ε2) return;\n    var ha = ax * ax + ay * ay, hc = cx * cx + cy * cy, x = (cy * ha - ay * hc) / d, y = (ax * hc - cx * ha) / d, cy = y + by;\n    var circle = d3_geom_voronoiCirclePool.pop() || new d3_geom_voronoiCircle();\n    circle.arc = arc;\n    circle.site = cSite;\n    circle.x = x + bx;\n    circle.y = cy + Math.sqrt(x * x + y * y);\n    circle.cy = cy;\n    arc.circle = circle;\n    var before = null, node = d3_geom_voronoiCircles._;\n    while (node) {\n      if (circle.y < node.y || circle.y === node.y && circle.x <= node.x) {\n        if (node.L) node = node.L; else {\n          before = node.P;\n          break;\n        }\n      } else {\n        if (node.R) node = node.R; else {\n          before = node;\n          break;\n        }\n      }\n    }\n    d3_geom_voronoiCircles.insert(before, circle);\n    if (!before) d3_geom_voronoiFirstCircle = circle;\n  }\n  function d3_geom_voronoiDetachCircle(arc) {\n    var circle = arc.circle;\n    if (circle) {\n      if (!circle.P) d3_geom_voronoiFirstCircle = circle.N;\n      d3_geom_voronoiCircles.remove(circle);\n      d3_geom_voronoiCirclePool.push(circle);\n      d3_geom_voronoiRedBlackNode(circle);\n      arc.circle = null;\n    }\n  }\n  function d3_geom_voronoiClipEdges(extent) {\n    var edges = d3_geom_voronoiEdges, clip = d3_geom_clipLine(extent[0][0], extent[0][1], extent[1][0], extent[1][1]), i = edges.length, e;\n    while (i--) {\n      e = edges[i];\n      if (!d3_geom_voronoiConnectEdge(e, extent) || !clip(e) || abs(e.a.x - e.b.x) < ε && abs(e.a.y - e.b.y) < ε) {\n        e.a = e.b = null;\n        edges.splice(i, 1);\n      }\n    }\n  }\n  function d3_geom_voronoiConnectEdge(edge, extent) {\n    var vb = edge.b;\n    if (vb) return true;\n    var va = edge.a, x0 = extent[0][0], x1 = extent[1][0], y0 = extent[0][1], y1 = extent[1][1], lSite = edge.l, rSite = edge.r, lx = lSite.x, ly = lSite.y, rx = rSite.x, ry = rSite.y, fx = (lx + rx) / 2, fy = (ly + ry) / 2, fm, fb;\n    if (ry === ly) {\n      if (fx < x0 || fx >= x1) return;\n      if (lx > rx) {\n        if (!va) va = {\n          x: fx,\n          y: y0\n        }; else if (va.y >= y1) return;\n        vb = {\n          x: fx,\n          y: y1\n        };\n      } else {\n        if (!va) va = {\n          x: fx,\n          y: y1\n        }; else if (va.y < y0) return;\n        vb = {\n          x: fx,\n          y: y0\n        };\n      }\n    } else {\n      fm = (lx - rx) / (ry - ly);\n      fb = fy - fm * fx;\n      if (fm < -1 || fm > 1) {\n        if (lx > rx) {\n          if (!va) va = {\n            x: (y0 - fb) / fm,\n            y: y0\n          }; else if (va.y >= y1) return;\n          vb = {\n            x: (y1 - fb) / fm,\n            y: y1\n          };\n        } else {\n          if (!va) va = {\n            x: (y1 - fb) / fm,\n            y: y1\n          }; else if (va.y < y0) return;\n          vb = {\n            x: (y0 - fb) / fm,\n            y: y0\n          };\n        }\n      } else {\n        if (ly < ry) {\n          if (!va) va = {\n            x: x0,\n            y: fm * x0 + fb\n          }; else if (va.x >= x1) return;\n          vb = {\n            x: x1,\n            y: fm * x1 + fb\n          };\n        } else {\n          if (!va) va = {\n            x: x1,\n            y: fm * x1 + fb\n          }; else if (va.x < x0) return;\n          vb = {\n            x: x0,\n            y: fm * x0 + fb\n          };\n        }\n      }\n    }\n    edge.a = va;\n    edge.b = vb;\n    return true;\n  }\n  function d3_geom_voronoiEdge(lSite, rSite) {\n    this.l = lSite;\n    this.r = rSite;\n    this.a = this.b = null;\n  }\n  function d3_geom_voronoiCreateEdge(lSite, rSite, va, vb) {\n    var edge = new d3_geom_voronoiEdge(lSite, rSite);\n    d3_geom_voronoiEdges.push(edge);\n    if (va) d3_geom_voronoiSetEdgeEnd(edge, lSite, rSite, va);\n    if (vb) d3_geom_voronoiSetEdgeEnd(edge, rSite, lSite, vb);\n    d3_geom_voronoiCells[lSite.i].edges.push(new d3_geom_voronoiHalfEdge(edge, lSite, rSite));\n    d3_geom_voronoiCells[rSite.i].edges.push(new d3_geom_voronoiHalfEdge(edge, rSite, lSite));\n    return edge;\n  }\n  function d3_geom_voronoiCreateBorderEdge(lSite, va, vb) {\n    var edge = new d3_geom_voronoiEdge(lSite, null);\n    edge.a = va;\n    edge.b = vb;\n    d3_geom_voronoiEdges.push(edge);\n    return edge;\n  }\n  function d3_geom_voronoiSetEdgeEnd(edge, lSite, rSite, vertex) {\n    if (!edge.a && !edge.b) {\n      edge.a = vertex;\n      edge.l = lSite;\n      edge.r = rSite;\n    } else if (edge.l === rSite) {\n      edge.b = vertex;\n    } else {\n      edge.a = vertex;\n    }\n  }\n  function d3_geom_voronoiHalfEdge(edge, lSite, rSite) {\n    var va = edge.a, vb = edge.b;\n    this.edge = edge;\n    this.site = lSite;\n    this.angle = rSite ? Math.atan2(rSite.y - lSite.y, rSite.x - lSite.x) : edge.l === lSite ? Math.atan2(vb.x - va.x, va.y - vb.y) : Math.atan2(va.x - vb.x, vb.y - va.y);\n  }\n  d3_geom_voronoiHalfEdge.prototype = {\n    start: function() {\n      return this.edge.l === this.site ? this.edge.a : this.edge.b;\n    },\n    end: function() {\n      return this.edge.l === this.site ? this.edge.b : this.edge.a;\n    }\n  };\n  function d3_geom_voronoiRedBlackTree() {\n    this._ = null;\n  }\n  function d3_geom_voronoiRedBlackNode(node) {\n    node.U = node.C = node.L = node.R = node.P = node.N = null;\n  }\n  d3_geom_voronoiRedBlackTree.prototype = {\n    insert: function(after, node) {\n      var parent, grandpa, uncle;\n      if (after) {\n        node.P = after;\n        node.N = after.N;\n        if (after.N) after.N.P = node;\n        after.N = node;\n        if (after.R) {\n          after = after.R;\n          while (after.L) after = after.L;\n          after.L = node;\n        } else {\n          after.R = node;\n        }\n        parent = after;\n      } else if (this._) {\n        after = d3_geom_voronoiRedBlackFirst(this._);\n        node.P = null;\n        node.N = after;\n        after.P = after.L = node;\n        parent = after;\n      } else {\n        node.P = node.N = null;\n        this._ = node;\n        parent = null;\n      }\n      node.L = node.R = null;\n      node.U = parent;\n      node.C = true;\n      after = node;\n      while (parent && parent.C) {\n        grandpa = parent.U;\n        if (parent === grandpa.L) {\n          uncle = grandpa.R;\n          if (uncle && uncle.C) {\n            parent.C = uncle.C = false;\n            grandpa.C = true;\n            after = grandpa;\n          } else {\n            if (after === parent.R) {\n              d3_geom_voronoiRedBlackRotateLeft(this, parent);\n              after = parent;\n              parent = after.U;\n            }\n            parent.C = false;\n            grandpa.C = true;\n            d3_geom_voronoiRedBlackRotateRight(this, grandpa);\n          }\n        } else {\n          uncle = grandpa.L;\n          if (uncle && uncle.C) {\n            parent.C = uncle.C = false;\n            grandpa.C = true;\n            after = grandpa;\n          } else {\n            if (after === parent.L) {\n              d3_geom_voronoiRedBlackRotateRight(this, parent);\n              after = parent;\n              parent = after.U;\n            }\n            parent.C = false;\n            grandpa.C = true;\n            d3_geom_voronoiRedBlackRotateLeft(this, grandpa);\n          }\n        }\n        parent = after.U;\n      }\n      this._.C = false;\n    },\n    remove: function(node) {\n      if (node.N) node.N.P = node.P;\n      if (node.P) node.P.N = node.N;\n      node.N = node.P = null;\n      var parent = node.U, sibling, left = node.L, right = node.R, next, red;\n      if (!left) next = right; else if (!right) next = left; else next = d3_geom_voronoiRedBlackFirst(right);\n      if (parent) {\n        if (parent.L === node) parent.L = next; else parent.R = next;\n      } else {\n        this._ = next;\n      }\n      if (left && right) {\n        red = next.C;\n        next.C = node.C;\n        next.L = left;\n        left.U = next;\n        if (next !== right) {\n          parent = next.U;\n          next.U = node.U;\n          node = next.R;\n          parent.L = node;\n          next.R = right;\n          right.U = next;\n        } else {\n          next.U = parent;\n          parent = next;\n          node = next.R;\n        }\n      } else {\n        red = node.C;\n        node = next;\n      }\n      if (node) node.U = parent;\n      if (red) return;\n      if (node && node.C) {\n        node.C = false;\n        return;\n      }\n      do {\n        if (node === this._) break;\n        if (node === parent.L) {\n          sibling = parent.R;\n          if (sibling.C) {\n            sibling.C = false;\n            parent.C = true;\n            d3_geom_voronoiRedBlackRotateLeft(this, parent);\n            sibling = parent.R;\n          }\n          if (sibling.L && sibling.L.C || sibling.R && sibling.R.C) {\n            if (!sibling.R || !sibling.R.C) {\n              sibling.L.C = false;\n              sibling.C = true;\n              d3_geom_voronoiRedBlackRotateRight(this, sibling);\n              sibling = parent.R;\n            }\n            sibling.C = parent.C;\n            parent.C = sibling.R.C = false;\n            d3_geom_voronoiRedBlackRotateLeft(this, parent);\n            node = this._;\n            break;\n          }\n        } else {\n          sibling = parent.L;\n          if (sibling.C) {\n            sibling.C = false;\n            parent.C = true;\n            d3_geom_voronoiRedBlackRotateRight(this, parent);\n            sibling = parent.L;\n          }\n          if (sibling.L && sibling.L.C || sibling.R && sibling.R.C) {\n            if (!sibling.L || !sibling.L.C) {\n              sibling.R.C = false;\n              sibling.C = true;\n              d3_geom_voronoiRedBlackRotateLeft(this, sibling);\n              sibling = parent.L;\n            }\n            sibling.C = parent.C;\n            parent.C = sibling.L.C = false;\n            d3_geom_voronoiRedBlackRotateRight(this, parent);\n            node = this._;\n            break;\n          }\n        }\n        sibling.C = true;\n        node = parent;\n        parent = parent.U;\n      } while (!node.C);\n      if (node) node.C = false;\n    }\n  };\n  function d3_geom_voronoiRedBlackRotateLeft(tree, node) {\n    var p = node, q = node.R, parent = p.U;\n    if (parent) {\n      if (parent.L === p) parent.L = q; else parent.R = q;\n    } else {\n      tree._ = q;\n    }\n    q.U = parent;\n    p.U = q;\n    p.R = q.L;\n    if (p.R) p.R.U = p;\n    q.L = p;\n  }\n  function d3_geom_voronoiRedBlackRotateRight(tree, node) {\n    var p = node, q = node.L, parent = p.U;\n    if (parent) {\n      if (parent.L === p) parent.L = q; else parent.R = q;\n    } else {\n      tree._ = q;\n    }\n    q.U = parent;\n    p.U = q;\n    p.L = q.R;\n    if (p.L) p.L.U = p;\n    q.R = p;\n  }\n  function d3_geom_voronoiRedBlackFirst(node) {\n    while (node.L) node = node.L;\n    return node;\n  }\n  function d3_geom_voronoi(sites, bbox) {\n    var site = sites.sort(d3_geom_voronoiVertexOrder).pop(), x0, y0, circle;\n    d3_geom_voronoiEdges = [];\n    d3_geom_voronoiCells = new Array(sites.length);\n    d3_geom_voronoiBeaches = new d3_geom_voronoiRedBlackTree();\n    d3_geom_voronoiCircles = new d3_geom_voronoiRedBlackTree();\n    while (true) {\n      circle = d3_geom_voronoiFirstCircle;\n      if (site && (!circle || site.y < circle.y || site.y === circle.y && site.x < circle.x)) {\n        if (site.x !== x0 || site.y !== y0) {\n          d3_geom_voronoiCells[site.i] = new d3_geom_voronoiCell(site);\n          d3_geom_voronoiAddBeach(site);\n          x0 = site.x, y0 = site.y;\n        }\n        site = sites.pop();\n      } else if (circle) {\n        d3_geom_voronoiRemoveBeach(circle.arc);\n      } else {\n        break;\n      }\n    }\n    if (bbox) d3_geom_voronoiClipEdges(bbox), d3_geom_voronoiCloseCells(bbox);\n    var diagram = {\n      cells: d3_geom_voronoiCells,\n      edges: d3_geom_voronoiEdges\n    };\n    d3_geom_voronoiBeaches = d3_geom_voronoiCircles = d3_geom_voronoiEdges = d3_geom_voronoiCells = null;\n    return diagram;\n  }\n  function d3_geom_voronoiVertexOrder(a, b) {\n    return b.y - a.y || b.x - a.x;\n  }\n  d3.geom.voronoi = function(points) {\n    var x = d3_geom_pointX, y = d3_geom_pointY, fx = x, fy = y, clipExtent = d3_geom_voronoiClipExtent;\n    if (points) return voronoi(points);\n    function voronoi(data) {\n      var polygons = new Array(data.length), x0 = clipExtent[0][0], y0 = clipExtent[0][1], x1 = clipExtent[1][0], y1 = clipExtent[1][1];\n      d3_geom_voronoi(sites(data), clipExtent).cells.forEach(function(cell, i) {\n        var edges = cell.edges, site = cell.site, polygon = polygons[i] = edges.length ? edges.map(function(e) {\n          var s = e.start();\n          return [ s.x, s.y ];\n        }) : site.x >= x0 && site.x <= x1 && site.y >= y0 && site.y <= y1 ? [ [ x0, y1 ], [ x1, y1 ], [ x1, y0 ], [ x0, y0 ] ] : [];\n        polygon.point = data[i];\n      });\n      return polygons;\n    }\n    function sites(data) {\n      return data.map(function(d, i) {\n        return {\n          x: Math.round(fx(d, i) / ε) * ε,\n          y: Math.round(fy(d, i) / ε) * ε,\n          i: i\n        };\n      });\n    }\n    voronoi.links = function(data) {\n      return d3_geom_voronoi(sites(data)).edges.filter(function(edge) {\n        return edge.l && edge.r;\n      }).map(function(edge) {\n        return {\n          source: data[edge.l.i],\n          target: data[edge.r.i]\n        };\n      });\n    };\n    voronoi.triangles = function(data) {\n      var triangles = [];\n      d3_geom_voronoi(sites(data)).cells.forEach(function(cell, i) {\n        var site = cell.site, edges = cell.edges.sort(d3_geom_voronoiHalfEdgeOrder), j = -1, m = edges.length, e0, s0, e1 = edges[m - 1].edge, s1 = e1.l === site ? e1.r : e1.l;\n        while (++j < m) {\n          e0 = e1;\n          s0 = s1;\n          e1 = edges[j].edge;\n          s1 = e1.l === site ? e1.r : e1.l;\n          if (i < s0.i && i < s1.i && d3_geom_voronoiTriangleArea(site, s0, s1) < 0) {\n            triangles.push([ data[i], data[s0.i], data[s1.i] ]);\n          }\n        }\n      });\n      return triangles;\n    };\n    voronoi.x = function(_) {\n      return arguments.length ? (fx = d3_functor(x = _), voronoi) : x;\n    };\n    voronoi.y = function(_) {\n      return arguments.length ? (fy = d3_functor(y = _), voronoi) : y;\n    };\n    voronoi.clipExtent = function(_) {\n      if (!arguments.length) return clipExtent === d3_geom_voronoiClipExtent ? null : clipExtent;\n      clipExtent = _ == null ? d3_geom_voronoiClipExtent : _;\n      return voronoi;\n    };\n    voronoi.size = function(_) {\n      if (!arguments.length) return clipExtent === d3_geom_voronoiClipExtent ? null : clipExtent && clipExtent[1];\n      return voronoi.clipExtent(_ && [ [ 0, 0 ], _ ]);\n    };\n    return voronoi;\n  };\n  var d3_geom_voronoiClipExtent = [ [ -1e6, -1e6 ], [ 1e6, 1e6 ] ];\n  function d3_geom_voronoiTriangleArea(a, b, c) {\n    return (a.x - c.x) * (b.y - a.y) - (a.x - b.x) * (c.y - a.y);\n  }\n  d3.geom.delaunay = function(vertices) {\n    return d3.geom.voronoi().triangles(vertices);\n  };\n  d3.geom.quadtree = function(points, x1, y1, x2, y2) {\n    var x = d3_geom_pointX, y = d3_geom_pointY, compat;\n    if (compat = arguments.length) {\n      x = d3_geom_quadtreeCompatX;\n      y = d3_geom_quadtreeCompatY;\n      if (compat === 3) {\n        y2 = y1;\n        x2 = x1;\n        y1 = x1 = 0;\n      }\n      return quadtree(points);\n    }\n    function quadtree(data) {\n      var d, fx = d3_functor(x), fy = d3_functor(y), xs, ys, i, n, x1_, y1_, x2_, y2_;\n      if (x1 != null) {\n        x1_ = x1, y1_ = y1, x2_ = x2, y2_ = y2;\n      } else {\n        x2_ = y2_ = -(x1_ = y1_ = Infinity);\n        xs = [], ys = [];\n        n = data.length;\n        if (compat) for (i = 0; i < n; ++i) {\n          d = data[i];\n          if (d.x < x1_) x1_ = d.x;\n          if (d.y < y1_) y1_ = d.y;\n          if (d.x > x2_) x2_ = d.x;\n          if (d.y > y2_) y2_ = d.y;\n          xs.push(d.x);\n          ys.push(d.y);\n        } else for (i = 0; i < n; ++i) {\n          var x_ = +fx(d = data[i], i), y_ = +fy(d, i);\n          if (x_ < x1_) x1_ = x_;\n          if (y_ < y1_) y1_ = y_;\n          if (x_ > x2_) x2_ = x_;\n          if (y_ > y2_) y2_ = y_;\n          xs.push(x_);\n          ys.push(y_);\n        }\n      }\n      var dx = x2_ - x1_, dy = y2_ - y1_;\n      if (dx > dy) y2_ = y1_ + dx; else x2_ = x1_ + dy;\n      function insert(n, d, x, y, x1, y1, x2, y2) {\n        if (isNaN(x) || isNaN(y)) return;\n        if (n.leaf) {\n          var nx = n.x, ny = n.y;\n          if (nx != null) {\n            if (abs(nx - x) + abs(ny - y) < .01) {\n              insertChild(n, d, x, y, x1, y1, x2, y2);\n            } else {\n              var nPoint = n.point;\n              n.x = n.y = n.point = null;\n              insertChild(n, nPoint, nx, ny, x1, y1, x2, y2);\n              insertChild(n, d, x, y, x1, y1, x2, y2);\n            }\n          } else {\n            n.x = x, n.y = y, n.point = d;\n          }\n        } else {\n          insertChild(n, d, x, y, x1, y1, x2, y2);\n        }\n      }\n      function insertChild(n, d, x, y, x1, y1, x2, y2) {\n        var xm = (x1 + x2) * .5, ym = (y1 + y2) * .5, right = x >= xm, below = y >= ym, i = below << 1 | right;\n        n.leaf = false;\n        n = n.nodes[i] || (n.nodes[i] = d3_geom_quadtreeNode());\n        if (right) x1 = xm; else x2 = xm;\n        if (below) y1 = ym; else y2 = ym;\n        insert(n, d, x, y, x1, y1, x2, y2);\n      }\n      var root = d3_geom_quadtreeNode();\n      root.add = function(d) {\n        insert(root, d, +fx(d, ++i), +fy(d, i), x1_, y1_, x2_, y2_);\n      };\n      root.visit = function(f) {\n        d3_geom_quadtreeVisit(f, root, x1_, y1_, x2_, y2_);\n      };\n      root.find = function(point) {\n        return d3_geom_quadtreeFind(root, point[0], point[1], x1_, y1_, x2_, y2_);\n      };\n      i = -1;\n      if (x1 == null) {\n        while (++i < n) {\n          insert(root, data[i], xs[i], ys[i], x1_, y1_, x2_, y2_);\n        }\n        --i;\n      } else data.forEach(root.add);\n      xs = ys = data = d = null;\n      return root;\n    }\n    quadtree.x = function(_) {\n      return arguments.length ? (x = _, quadtree) : x;\n    };\n    quadtree.y = function(_) {\n      return arguments.length ? (y = _, quadtree) : y;\n    };\n    quadtree.extent = function(_) {\n      if (!arguments.length) return x1 == null ? null : [ [ x1, y1 ], [ x2, y2 ] ];\n      if (_ == null) x1 = y1 = x2 = y2 = null; else x1 = +_[0][0], y1 = +_[0][1], x2 = +_[1][0], \n      y2 = +_[1][1];\n      return quadtree;\n    };\n    quadtree.size = function(_) {\n      if (!arguments.length) return x1 == null ? null : [ x2 - x1, y2 - y1 ];\n      if (_ == null) x1 = y1 = x2 = y2 = null; else x1 = y1 = 0, x2 = +_[0], y2 = +_[1];\n      return quadtree;\n    };\n    return quadtree;\n  };\n  function d3_geom_quadtreeCompatX(d) {\n    return d.x;\n  }\n  function d3_geom_quadtreeCompatY(d) {\n    return d.y;\n  }\n  function d3_geom_quadtreeNode() {\n    return {\n      leaf: true,\n      nodes: [],\n      point: null,\n      x: null,\n      y: null\n    };\n  }\n  function d3_geom_quadtreeVisit(f, node, x1, y1, x2, y2) {\n    if (!f(node, x1, y1, x2, y2)) {\n      var sx = (x1 + x2) * .5, sy = (y1 + y2) * .5, children = node.nodes;\n      if (children[0]) d3_geom_quadtreeVisit(f, children[0], x1, y1, sx, sy);\n      if (children[1]) d3_geom_quadtreeVisit(f, children[1], sx, y1, x2, sy);\n      if (children[2]) d3_geom_quadtreeVisit(f, children[2], x1, sy, sx, y2);\n      if (children[3]) d3_geom_quadtreeVisit(f, children[3], sx, sy, x2, y2);\n    }\n  }\n  function d3_geom_quadtreeFind(root, x, y, x0, y0, x3, y3) {\n    var minDistance2 = Infinity, closestPoint;\n    (function find(node, x1, y1, x2, y2) {\n      if (x1 > x3 || y1 > y3 || x2 < x0 || y2 < y0) return;\n      if (point = node.point) {\n        var point, dx = x - point[0], dy = y - point[1], distance2 = dx * dx + dy * dy;\n        if (distance2 < minDistance2) {\n          var distance = Math.sqrt(minDistance2 = distance2);\n          x0 = x - distance, y0 = y - distance;\n          x3 = x + distance, y3 = y + distance;\n          closestPoint = point;\n        }\n      }\n      var children = node.nodes, xm = (x1 + x2) * .5, ym = (y1 + y2) * .5, right = x >= xm, below = y >= ym;\n      for (var i = below << 1 | right, j = i + 4; i < j; ++i) {\n        if (node = children[i & 3]) switch (i & 3) {\n         case 0:\n          find(node, x1, y1, xm, ym);\n          break;\n\n         case 1:\n          find(node, xm, y1, x2, ym);\n          break;\n\n         case 2:\n          find(node, x1, ym, xm, y2);\n          break;\n\n         case 3:\n          find(node, xm, ym, x2, y2);\n          break;\n        }\n      }\n    })(root, x0, y0, x3, y3);\n    return closestPoint;\n  }\n  d3.interpolateRgb = d3_interpolateRgb;\n  function d3_interpolateRgb(a, b) {\n    a = d3.rgb(a);\n    b = d3.rgb(b);\n    var ar = a.r, ag = a.g, ab = a.b, br = b.r - ar, bg = b.g - ag, bb = b.b - ab;\n    return function(t) {\n      return \"#\" + d3_rgb_hex(Math.round(ar + br * t)) + d3_rgb_hex(Math.round(ag + bg * t)) + d3_rgb_hex(Math.round(ab + bb * t));\n    };\n  }\n  d3.interpolateObject = d3_interpolateObject;\n  function d3_interpolateObject(a, b) {\n    var i = {}, c = {}, k;\n    for (k in a) {\n      if (k in b) {\n        i[k] = d3_interpolate(a[k], b[k]);\n      } else {\n        c[k] = a[k];\n      }\n    }\n    for (k in b) {\n      if (!(k in a)) {\n        c[k] = b[k];\n      }\n    }\n    return function(t) {\n      for (k in i) c[k] = i[k](t);\n      return c;\n    };\n  }\n  d3.interpolateNumber = d3_interpolateNumber;\n  function d3_interpolateNumber(a, b) {\n    a = +a, b = +b;\n    return function(t) {\n      return a * (1 - t) + b * t;\n    };\n  }\n  d3.interpolateString = d3_interpolateString;\n  function d3_interpolateString(a, b) {\n    var bi = d3_interpolate_numberA.lastIndex = d3_interpolate_numberB.lastIndex = 0, am, bm, bs, i = -1, s = [], q = [];\n    a = a + \"\", b = b + \"\";\n    while ((am = d3_interpolate_numberA.exec(a)) && (bm = d3_interpolate_numberB.exec(b))) {\n      if ((bs = bm.index) > bi) {\n        bs = b.slice(bi, bs);\n        if (s[i]) s[i] += bs; else s[++i] = bs;\n      }\n      if ((am = am[0]) === (bm = bm[0])) {\n        if (s[i]) s[i] += bm; else s[++i] = bm;\n      } else {\n        s[++i] = null;\n        q.push({\n          i: i,\n          x: d3_interpolateNumber(am, bm)\n        });\n      }\n      bi = d3_interpolate_numberB.lastIndex;\n    }\n    if (bi < b.length) {\n      bs = b.slice(bi);\n      if (s[i]) s[i] += bs; else s[++i] = bs;\n    }\n    return s.length < 2 ? q[0] ? (b = q[0].x, function(t) {\n      return b(t) + \"\";\n    }) : function() {\n      return b;\n    } : (b = q.length, function(t) {\n      for (var i = 0, o; i < b; ++i) s[(o = q[i]).i] = o.x(t);\n      return s.join(\"\");\n    });\n  }\n  var d3_interpolate_numberA = /[-+]?(?:\\d+\\.?\\d*|\\.?\\d+)(?:[eE][-+]?\\d+)?/g, d3_interpolate_numberB = new RegExp(d3_interpolate_numberA.source, \"g\");\n  d3.interpolate = d3_interpolate;\n  function d3_interpolate(a, b) {\n    var i = d3.interpolators.length, f;\n    while (--i >= 0 && !(f = d3.interpolators[i](a, b))) ;\n    return f;\n  }\n  d3.interpolators = [ function(a, b) {\n    var t = typeof b;\n    return (t === \"string\" ? d3_rgb_names.has(b) || /^(#|rgb\\(|hsl\\()/.test(b) ? d3_interpolateRgb : d3_interpolateString : b instanceof d3_color ? d3_interpolateRgb : Array.isArray(b) ? d3_interpolateArray : t === \"object\" && isNaN(b) ? d3_interpolateObject : d3_interpolateNumber)(a, b);\n  } ];\n  d3.interpolateArray = d3_interpolateArray;\n  function d3_interpolateArray(a, b) {\n    var x = [], c = [], na = a.length, nb = b.length, n0 = Math.min(a.length, b.length), i;\n    for (i = 0; i < n0; ++i) x.push(d3_interpolate(a[i], b[i]));\n    for (;i < na; ++i) c[i] = a[i];\n    for (;i < nb; ++i) c[i] = b[i];\n    return function(t) {\n      for (i = 0; i < n0; ++i) c[i] = x[i](t);\n      return c;\n    };\n  }\n  var d3_ease_default = function() {\n    return d3_identity;\n  };\n  var d3_ease = d3.map({\n    linear: d3_ease_default,\n    poly: d3_ease_poly,\n    quad: function() {\n      return d3_ease_quad;\n    },\n    cubic: function() {\n      return d3_ease_cubic;\n    },\n    sin: function() {\n      return d3_ease_sin;\n    },\n    exp: function() {\n      return d3_ease_exp;\n    },\n    circle: function() {\n      return d3_ease_circle;\n    },\n    elastic: d3_ease_elastic,\n    back: d3_ease_back,\n    bounce: function() {\n      return d3_ease_bounce;\n    }\n  });\n  var d3_ease_mode = d3.map({\n    \"in\": d3_identity,\n    out: d3_ease_reverse,\n    \"in-out\": d3_ease_reflect,\n    \"out-in\": function(f) {\n      return d3_ease_reflect(d3_ease_reverse(f));\n    }\n  });\n  d3.ease = function(name) {\n    var i = name.indexOf(\"-\"), t = i >= 0 ? name.slice(0, i) : name, m = i >= 0 ? name.slice(i + 1) : \"in\";\n    t = d3_ease.get(t) || d3_ease_default;\n    m = d3_ease_mode.get(m) || d3_identity;\n    return d3_ease_clamp(m(t.apply(null, d3_arraySlice.call(arguments, 1))));\n  };\n  function d3_ease_clamp(f) {\n    return function(t) {\n      return t <= 0 ? 0 : t >= 1 ? 1 : f(t);\n    };\n  }\n  function d3_ease_reverse(f) {\n    return function(t) {\n      return 1 - f(1 - t);\n    };\n  }\n  function d3_ease_reflect(f) {\n    return function(t) {\n      return .5 * (t < .5 ? f(2 * t) : 2 - f(2 - 2 * t));\n    };\n  }\n  function d3_ease_quad(t) {\n    return t * t;\n  }\n  function d3_ease_cubic(t) {\n    return t * t * t;\n  }\n  function d3_ease_cubicInOut(t) {\n    if (t <= 0) return 0;\n    if (t >= 1) return 1;\n    var t2 = t * t, t3 = t2 * t;\n    return 4 * (t < .5 ? t3 : 3 * (t - t2) + t3 - .75);\n  }\n  function d3_ease_poly(e) {\n    return function(t) {\n      return Math.pow(t, e);\n    };\n  }\n  function d3_ease_sin(t) {\n    return 1 - Math.cos(t * halfπ);\n  }\n  function d3_ease_exp(t) {\n    return Math.pow(2, 10 * (t - 1));\n  }\n  function d3_ease_circle(t) {\n    return 1 - Math.sqrt(1 - t * t);\n  }\n  function d3_ease_elastic(a, p) {\n    var s;\n    if (arguments.length < 2) p = .45;\n    if (arguments.length) s = p / τ * Math.asin(1 / a); else a = 1, s = p / 4;\n    return function(t) {\n      return 1 + a * Math.pow(2, -10 * t) * Math.sin((t - s) * τ / p);\n    };\n  }\n  function d3_ease_back(s) {\n    if (!s) s = 1.70158;\n    return function(t) {\n      return t * t * ((s + 1) * t - s);\n    };\n  }\n  function d3_ease_bounce(t) {\n    return t < 1 / 2.75 ? 7.5625 * t * t : t < 2 / 2.75 ? 7.5625 * (t -= 1.5 / 2.75) * t + .75 : t < 2.5 / 2.75 ? 7.5625 * (t -= 2.25 / 2.75) * t + .9375 : 7.5625 * (t -= 2.625 / 2.75) * t + .984375;\n  }\n  d3.interpolateHcl = d3_interpolateHcl;\n  function d3_interpolateHcl(a, b) {\n    a = d3.hcl(a);\n    b = d3.hcl(b);\n    var ah = a.h, ac = a.c, al = a.l, bh = b.h - ah, bc = b.c - ac, bl = b.l - al;\n    if (isNaN(bc)) bc = 0, ac = isNaN(ac) ? b.c : ac;\n    if (isNaN(bh)) bh = 0, ah = isNaN(ah) ? b.h : ah; else if (bh > 180) bh -= 360; else if (bh < -180) bh += 360;\n    return function(t) {\n      return d3_hcl_lab(ah + bh * t, ac + bc * t, al + bl * t) + \"\";\n    };\n  }\n  d3.interpolateHsl = d3_interpolateHsl;\n  function d3_interpolateHsl(a, b) {\n    a = d3.hsl(a);\n    b = d3.hsl(b);\n    var ah = a.h, as = a.s, al = a.l, bh = b.h - ah, bs = b.s - as, bl = b.l - al;\n    if (isNaN(bs)) bs = 0, as = isNaN(as) ? b.s : as;\n    if (isNaN(bh)) bh = 0, ah = isNaN(ah) ? b.h : ah; else if (bh > 180) bh -= 360; else if (bh < -180) bh += 360;\n    return function(t) {\n      return d3_hsl_rgb(ah + bh * t, as + bs * t, al + bl * t) + \"\";\n    };\n  }\n  d3.interpolateLab = d3_interpolateLab;\n  function d3_interpolateLab(a, b) {\n    a = d3.lab(a);\n    b = d3.lab(b);\n    var al = a.l, aa = a.a, ab = a.b, bl = b.l - al, ba = b.a - aa, bb = b.b - ab;\n    return function(t) {\n      return d3_lab_rgb(al + bl * t, aa + ba * t, ab + bb * t) + \"\";\n    };\n  }\n  d3.interpolateRound = d3_interpolateRound;\n  function d3_interpolateRound(a, b) {\n    b -= a;\n    return function(t) {\n      return Math.round(a + b * t);\n    };\n  }\n  d3.transform = function(string) {\n    var g = d3_document.createElementNS(d3.ns.prefix.svg, \"g\");\n    return (d3.transform = function(string) {\n      if (string != null) {\n        g.setAttribute(\"transform\", string);\n        var t = g.transform.baseVal.consolidate();\n      }\n      return new d3_transform(t ? t.matrix : d3_transformIdentity);\n    })(string);\n  };\n  function d3_transform(m) {\n    var r0 = [ m.a, m.b ], r1 = [ m.c, m.d ], kx = d3_transformNormalize(r0), kz = d3_transformDot(r0, r1), ky = d3_transformNormalize(d3_transformCombine(r1, r0, -kz)) || 0;\n    if (r0[0] * r1[1] < r1[0] * r0[1]) {\n      r0[0] *= -1;\n      r0[1] *= -1;\n      kx *= -1;\n      kz *= -1;\n    }\n    this.rotate = (kx ? Math.atan2(r0[1], r0[0]) : Math.atan2(-r1[0], r1[1])) * d3_degrees;\n    this.translate = [ m.e, m.f ];\n    this.scale = [ kx, ky ];\n    this.skew = ky ? Math.atan2(kz, ky) * d3_degrees : 0;\n  }\n  d3_transform.prototype.toString = function() {\n    return \"translate(\" + this.translate + \")rotate(\" + this.rotate + \")skewX(\" + this.skew + \")scale(\" + this.scale + \")\";\n  };\n  function d3_transformDot(a, b) {\n    return a[0] * b[0] + a[1] * b[1];\n  }\n  function d3_transformNormalize(a) {\n    var k = Math.sqrt(d3_transformDot(a, a));\n    if (k) {\n      a[0] /= k;\n      a[1] /= k;\n    }\n    return k;\n  }\n  function d3_transformCombine(a, b, k) {\n    a[0] += k * b[0];\n    a[1] += k * b[1];\n    return a;\n  }\n  var d3_transformIdentity = {\n    a: 1,\n    b: 0,\n    c: 0,\n    d: 1,\n    e: 0,\n    f: 0\n  };\n  d3.interpolateTransform = d3_interpolateTransform;\n  function d3_interpolateTransform(a, b) {\n    var s = [], q = [], n, A = d3.transform(a), B = d3.transform(b), ta = A.translate, tb = B.translate, ra = A.rotate, rb = B.rotate, wa = A.skew, wb = B.skew, ka = A.scale, kb = B.scale;\n    if (ta[0] != tb[0] || ta[1] != tb[1]) {\n      s.push(\"translate(\", null, \",\", null, \")\");\n      q.push({\n        i: 1,\n        x: d3_interpolateNumber(ta[0], tb[0])\n      }, {\n        i: 3,\n        x: d3_interpolateNumber(ta[1], tb[1])\n      });\n    } else if (tb[0] || tb[1]) {\n      s.push(\"translate(\" + tb + \")\");\n    } else {\n      s.push(\"\");\n    }\n    if (ra != rb) {\n      if (ra - rb > 180) rb += 360; else if (rb - ra > 180) ra += 360;\n      q.push({\n        i: s.push(s.pop() + \"rotate(\", null, \")\") - 2,\n        x: d3_interpolateNumber(ra, rb)\n      });\n    } else if (rb) {\n      s.push(s.pop() + \"rotate(\" + rb + \")\");\n    }\n    if (wa != wb) {\n      q.push({\n        i: s.push(s.pop() + \"skewX(\", null, \")\") - 2,\n        x: d3_interpolateNumber(wa, wb)\n      });\n    } else if (wb) {\n      s.push(s.pop() + \"skewX(\" + wb + \")\");\n    }\n    if (ka[0] != kb[0] || ka[1] != kb[1]) {\n      n = s.push(s.pop() + \"scale(\", null, \",\", null, \")\");\n      q.push({\n        i: n - 4,\n        x: d3_interpolateNumber(ka[0], kb[0])\n      }, {\n        i: n - 2,\n        x: d3_interpolateNumber(ka[1], kb[1])\n      });\n    } else if (kb[0] != 1 || kb[1] != 1) {\n      s.push(s.pop() + \"scale(\" + kb + \")\");\n    }\n    n = q.length;\n    return function(t) {\n      var i = -1, o;\n      while (++i < n) s[(o = q[i]).i] = o.x(t);\n      return s.join(\"\");\n    };\n  }\n  function d3_uninterpolateNumber(a, b) {\n    b = (b -= a = +a) || 1 / b;\n    return function(x) {\n      return (x - a) / b;\n    };\n  }\n  function d3_uninterpolateClamp(a, b) {\n    b = (b -= a = +a) || 1 / b;\n    return function(x) {\n      return Math.max(0, Math.min(1, (x - a) / b));\n    };\n  }\n  d3.layout = {};\n  d3.layout.bundle = function() {\n    return function(links) {\n      var paths = [], i = -1, n = links.length;\n      while (++i < n) paths.push(d3_layout_bundlePath(links[i]));\n      return paths;\n    };\n  };\n  function d3_layout_bundlePath(link) {\n    var start = link.source, end = link.target, lca = d3_layout_bundleLeastCommonAncestor(start, end), points = [ start ];\n    while (start !== lca) {\n      start = start.parent;\n      points.push(start);\n    }\n    var k = points.length;\n    while (end !== lca) {\n      points.splice(k, 0, end);\n      end = end.parent;\n    }\n    return points;\n  }\n  function d3_layout_bundleAncestors(node) {\n    var ancestors = [], parent = node.parent;\n    while (parent != null) {\n      ancestors.push(node);\n      node = parent;\n      parent = parent.parent;\n    }\n    ancestors.push(node);\n    return ancestors;\n  }\n  function d3_layout_bundleLeastCommonAncestor(a, b) {\n    if (a === b) return a;\n    var aNodes = d3_layout_bundleAncestors(a), bNodes = d3_layout_bundleAncestors(b), aNode = aNodes.pop(), bNode = bNodes.pop(), sharedNode = null;\n    while (aNode === bNode) {\n      sharedNode = aNode;\n      aNode = aNodes.pop();\n      bNode = bNodes.pop();\n    }\n    return sharedNode;\n  }\n  d3.layout.chord = function() {\n    var chord = {}, chords, groups, matrix, n, padding = 0, sortGroups, sortSubgroups, sortChords;\n    function relayout() {\n      var subgroups = {}, groupSums = [], groupIndex = d3.range(n), subgroupIndex = [], k, x, x0, i, j;\n      chords = [];\n      groups = [];\n      k = 0, i = -1;\n      while (++i < n) {\n        x = 0, j = -1;\n        while (++j < n) {\n          x += matrix[i][j];\n        }\n        groupSums.push(x);\n        subgroupIndex.push(d3.range(n));\n        k += x;\n      }\n      if (sortGroups) {\n        groupIndex.sort(function(a, b) {\n          return sortGroups(groupSums[a], groupSums[b]);\n        });\n      }\n      if (sortSubgroups) {\n        subgroupIndex.forEach(function(d, i) {\n          d.sort(function(a, b) {\n            return sortSubgroups(matrix[i][a], matrix[i][b]);\n          });\n        });\n      }\n      k = (τ - padding * n) / k;\n      x = 0, i = -1;\n      while (++i < n) {\n        x0 = x, j = -1;\n        while (++j < n) {\n          var di = groupIndex[i], dj = subgroupIndex[di][j], v = matrix[di][dj], a0 = x, a1 = x += v * k;\n          subgroups[di + \"-\" + dj] = {\n            index: di,\n            subindex: dj,\n            startAngle: a0,\n            endAngle: a1,\n            value: v\n          };\n        }\n        groups[di] = {\n          index: di,\n          startAngle: x0,\n          endAngle: x,\n          value: (x - x0) / k\n        };\n        x += padding;\n      }\n      i = -1;\n      while (++i < n) {\n        j = i - 1;\n        while (++j < n) {\n          var source = subgroups[i + \"-\" + j], target = subgroups[j + \"-\" + i];\n          if (source.value || target.value) {\n            chords.push(source.value < target.value ? {\n              source: target,\n              target: source\n            } : {\n              source: source,\n              target: target\n            });\n          }\n        }\n      }\n      if (sortChords) resort();\n    }\n    function resort() {\n      chords.sort(function(a, b) {\n        return sortChords((a.source.value + a.target.value) / 2, (b.source.value + b.target.value) / 2);\n      });\n    }\n    chord.matrix = function(x) {\n      if (!arguments.length) return matrix;\n      n = (matrix = x) && matrix.length;\n      chords = groups = null;\n      return chord;\n    };\n    chord.padding = function(x) {\n      if (!arguments.length) return padding;\n      padding = x;\n      chords = groups = null;\n      return chord;\n    };\n    chord.sortGroups = function(x) {\n      if (!arguments.length) return sortGroups;\n      sortGroups = x;\n      chords = groups = null;\n      return chord;\n    };\n    chord.sortSubgroups = function(x) {\n      if (!arguments.length) return sortSubgroups;\n      sortSubgroups = x;\n      chords = null;\n      return chord;\n    };\n    chord.sortChords = function(x) {\n      if (!arguments.length) return sortChords;\n      sortChords = x;\n      if (chords) resort();\n      return chord;\n    };\n    chord.chords = function() {\n      if (!chords) relayout();\n      return chords;\n    };\n    chord.groups = function() {\n      if (!groups) relayout();\n      return groups;\n    };\n    return chord;\n  };\n  d3.layout.force = function() {\n    var force = {}, event = d3.dispatch(\"start\", \"tick\", \"end\"), size = [ 1, 1 ], drag, alpha, friction = .9, linkDistance = d3_layout_forceLinkDistance, linkStrength = d3_layout_forceLinkStrength, charge = -30, chargeDistance2 = d3_layout_forceChargeDistance2, gravity = .1, theta2 = .64, nodes = [], links = [], distances, strengths, charges;\n    function repulse(node) {\n      return function(quad, x1, _, x2) {\n        if (quad.point !== node) {\n          var dx = quad.cx - node.x, dy = quad.cy - node.y, dw = x2 - x1, dn = dx * dx + dy * dy;\n          if (dw * dw / theta2 < dn) {\n            if (dn < chargeDistance2) {\n              var k = quad.charge / dn;\n              node.px -= dx * k;\n              node.py -= dy * k;\n            }\n            return true;\n          }\n          if (quad.point && dn && dn < chargeDistance2) {\n            var k = quad.pointCharge / dn;\n            node.px -= dx * k;\n            node.py -= dy * k;\n          }\n        }\n        return !quad.charge;\n      };\n    }\n    force.tick = function() {\n      if ((alpha *= .99) < .005) {\n        event.end({\n          type: \"end\",\n          alpha: alpha = 0\n        });\n        return true;\n      }\n      var n = nodes.length, m = links.length, q, i, o, s, t, l, k, x, y;\n      for (i = 0; i < m; ++i) {\n        o = links[i];\n        s = o.source;\n        t = o.target;\n        x = t.x - s.x;\n        y = t.y - s.y;\n        if (l = x * x + y * y) {\n          l = alpha * strengths[i] * ((l = Math.sqrt(l)) - distances[i]) / l;\n          x *= l;\n          y *= l;\n          t.x -= x * (k = s.weight / (t.weight + s.weight));\n          t.y -= y * k;\n          s.x += x * (k = 1 - k);\n          s.y += y * k;\n        }\n      }\n      if (k = alpha * gravity) {\n        x = size[0] / 2;\n        y = size[1] / 2;\n        i = -1;\n        if (k) while (++i < n) {\n          o = nodes[i];\n          o.x += (x - o.x) * k;\n          o.y += (y - o.y) * k;\n        }\n      }\n      if (charge) {\n        d3_layout_forceAccumulate(q = d3.geom.quadtree(nodes), alpha, charges);\n        i = -1;\n        while (++i < n) {\n          if (!(o = nodes[i]).fixed) {\n            q.visit(repulse(o));\n          }\n        }\n      }\n      i = -1;\n      while (++i < n) {\n        o = nodes[i];\n        if (o.fixed) {\n          o.x = o.px;\n          o.y = o.py;\n        } else {\n          o.x -= (o.px - (o.px = o.x)) * friction;\n          o.y -= (o.py - (o.py = o.y)) * friction;\n        }\n      }\n      event.tick({\n        type: \"tick\",\n        alpha: alpha\n      });\n    };\n    force.nodes = function(x) {\n      if (!arguments.length) return nodes;\n      nodes = x;\n      return force;\n    };\n    force.links = function(x) {\n      if (!arguments.length) return links;\n      links = x;\n      return force;\n    };\n    force.size = function(x) {\n      if (!arguments.length) return size;\n      size = x;\n      return force;\n    };\n    force.linkDistance = function(x) {\n      if (!arguments.length) return linkDistance;\n      linkDistance = typeof x === \"function\" ? x : +x;\n      return force;\n    };\n    force.distance = force.linkDistance;\n    force.linkStrength = function(x) {\n      if (!arguments.length) return linkStrength;\n      linkStrength = typeof x === \"function\" ? x : +x;\n      return force;\n    };\n    force.friction = function(x) {\n      if (!arguments.length) return friction;\n      friction = +x;\n      return force;\n    };\n    force.charge = function(x) {\n      if (!arguments.length) return charge;\n      charge = typeof x === \"function\" ? x : +x;\n      return force;\n    };\n    force.chargeDistance = function(x) {\n      if (!arguments.length) return Math.sqrt(chargeDistance2);\n      chargeDistance2 = x * x;\n      return force;\n    };\n    force.gravity = function(x) {\n      if (!arguments.length) return gravity;\n      gravity = +x;\n      return force;\n    };\n    force.theta = function(x) {\n      if (!arguments.length) return Math.sqrt(theta2);\n      theta2 = x * x;\n      return force;\n    };\n    force.alpha = function(x) {\n      if (!arguments.length) return alpha;\n      x = +x;\n      if (alpha) {\n        if (x > 0) alpha = x; else alpha = 0;\n      } else if (x > 0) {\n        event.start({\n          type: \"start\",\n          alpha: alpha = x\n        });\n        d3.timer(force.tick);\n      }\n      return force;\n    };\n    force.start = function() {\n      var i, n = nodes.length, m = links.length, w = size[0], h = size[1], neighbors, o;\n      for (i = 0; i < n; ++i) {\n        (o = nodes[i]).index = i;\n        o.weight = 0;\n      }\n      for (i = 0; i < m; ++i) {\n        o = links[i];\n        if (typeof o.source == \"number\") o.source = nodes[o.source];\n        if (typeof o.target == \"number\") o.target = nodes[o.target];\n        ++o.source.weight;\n        ++o.target.weight;\n      }\n      for (i = 0; i < n; ++i) {\n        o = nodes[i];\n        if (isNaN(o.x)) o.x = position(\"x\", w);\n        if (isNaN(o.y)) o.y = position(\"y\", h);\n        if (isNaN(o.px)) o.px = o.x;\n        if (isNaN(o.py)) o.py = o.y;\n      }\n      distances = [];\n      if (typeof linkDistance === \"function\") for (i = 0; i < m; ++i) distances[i] = +linkDistance.call(this, links[i], i); else for (i = 0; i < m; ++i) distances[i] = linkDistance;\n      strengths = [];\n      if (typeof linkStrength === \"function\") for (i = 0; i < m; ++i) strengths[i] = +linkStrength.call(this, links[i], i); else for (i = 0; i < m; ++i) strengths[i] = linkStrength;\n      charges = [];\n      if (typeof charge === \"function\") for (i = 0; i < n; ++i) charges[i] = +charge.call(this, nodes[i], i); else for (i = 0; i < n; ++i) charges[i] = charge;\n      function position(dimension, size) {\n        if (!neighbors) {\n          neighbors = new Array(n);\n          for (j = 0; j < n; ++j) {\n            neighbors[j] = [];\n          }\n          for (j = 0; j < m; ++j) {\n            var o = links[j];\n            neighbors[o.source.index].push(o.target);\n            neighbors[o.target.index].push(o.source);\n          }\n        }\n        var candidates = neighbors[i], j = -1, m = candidates.length, x;\n        while (++j < m) if (!isNaN(x = candidates[j][dimension])) return x;\n        return Math.random() * size;\n      }\n      return force.resume();\n    };\n    force.resume = function() {\n      return force.alpha(.1);\n    };\n    force.stop = function() {\n      return force.alpha(0);\n    };\n    force.drag = function() {\n      if (!drag) drag = d3.behavior.drag().origin(d3_identity).on(\"dragstart.force\", d3_layout_forceDragstart).on(\"drag.force\", dragmove).on(\"dragend.force\", d3_layout_forceDragend);\n      if (!arguments.length) return drag;\n      this.on(\"mouseover.force\", d3_layout_forceMouseover).on(\"mouseout.force\", d3_layout_forceMouseout).call(drag);\n    };\n    function dragmove(d) {\n      d.px = d3.event.x, d.py = d3.event.y;\n      force.resume();\n    }\n    return d3.rebind(force, event, \"on\");\n  };\n  function d3_layout_forceDragstart(d) {\n    d.fixed |= 2;\n  }\n  function d3_layout_forceDragend(d) {\n    d.fixed &= ~6;\n  }\n  function d3_layout_forceMouseover(d) {\n    d.fixed |= 4;\n    d.px = d.x, d.py = d.y;\n  }\n  function d3_layout_forceMouseout(d) {\n    d.fixed &= ~4;\n  }\n  function d3_layout_forceAccumulate(quad, alpha, charges) {\n    var cx = 0, cy = 0;\n    quad.charge = 0;\n    if (!quad.leaf) {\n      var nodes = quad.nodes, n = nodes.length, i = -1, c;\n      while (++i < n) {\n        c = nodes[i];\n        if (c == null) continue;\n        d3_layout_forceAccumulate(c, alpha, charges);\n        quad.charge += c.charge;\n        cx += c.charge * c.cx;\n        cy += c.charge * c.cy;\n      }\n    }\n    if (quad.point) {\n      if (!quad.leaf) {\n        quad.point.x += Math.random() - .5;\n        quad.point.y += Math.random() - .5;\n      }\n      var k = alpha * charges[quad.point.index];\n      quad.charge += quad.pointCharge = k;\n      cx += k * quad.point.x;\n      cy += k * quad.point.y;\n    }\n    quad.cx = cx / quad.charge;\n    quad.cy = cy / quad.charge;\n  }\n  var d3_layout_forceLinkDistance = 20, d3_layout_forceLinkStrength = 1, d3_layout_forceChargeDistance2 = Infinity;\n  d3.layout.hierarchy = function() {\n    var sort = d3_layout_hierarchySort, children = d3_layout_hierarchyChildren, value = d3_layout_hierarchyValue;\n    function hierarchy(root) {\n      var stack = [ root ], nodes = [], node;\n      root.depth = 0;\n      while ((node = stack.pop()) != null) {\n        nodes.push(node);\n        if ((childs = children.call(hierarchy, node, node.depth)) && (n = childs.length)) {\n          var n, childs, child;\n          while (--n >= 0) {\n            stack.push(child = childs[n]);\n            child.parent = node;\n            child.depth = node.depth + 1;\n          }\n          if (value) node.value = 0;\n          node.children = childs;\n        } else {\n          if (value) node.value = +value.call(hierarchy, node, node.depth) || 0;\n          delete node.children;\n        }\n      }\n      d3_layout_hierarchyVisitAfter(root, function(node) {\n        var childs, parent;\n        if (sort && (childs = node.children)) childs.sort(sort);\n        if (value && (parent = node.parent)) parent.value += node.value;\n      });\n      return nodes;\n    }\n    hierarchy.sort = function(x) {\n      if (!arguments.length) return sort;\n      sort = x;\n      return hierarchy;\n    };\n    hierarchy.children = function(x) {\n      if (!arguments.length) return children;\n      children = x;\n      return hierarchy;\n    };\n    hierarchy.value = function(x) {\n      if (!arguments.length) return value;\n      value = x;\n      return hierarchy;\n    };\n    hierarchy.revalue = function(root) {\n      if (value) {\n        d3_layout_hierarchyVisitBefore(root, function(node) {\n          if (node.children) node.value = 0;\n        });\n        d3_layout_hierarchyVisitAfter(root, function(node) {\n          var parent;\n          if (!node.children) node.value = +value.call(hierarchy, node, node.depth) || 0;\n          if (parent = node.parent) parent.value += node.value;\n        });\n      }\n      return root;\n    };\n    return hierarchy;\n  };\n  function d3_layout_hierarchyRebind(object, hierarchy) {\n    d3.rebind(object, hierarchy, \"sort\", \"children\", \"value\");\n    object.nodes = object;\n    object.links = d3_layout_hierarchyLinks;\n    return object;\n  }\n  function d3_layout_hierarchyVisitBefore(node, callback) {\n    var nodes = [ node ];\n    while ((node = nodes.pop()) != null) {\n      callback(node);\n      if ((children = node.children) && (n = children.length)) {\n        var n, children;\n        while (--n >= 0) nodes.push(children[n]);\n      }\n    }\n  }\n  function d3_layout_hierarchyVisitAfter(node, callback) {\n    var nodes = [ node ], nodes2 = [];\n    while ((node = nodes.pop()) != null) {\n      nodes2.push(node);\n      if ((children = node.children) && (n = children.length)) {\n        var i = -1, n, children;\n        while (++i < n) nodes.push(children[i]);\n      }\n    }\n    while ((node = nodes2.pop()) != null) {\n      callback(node);\n    }\n  }\n  function d3_layout_hierarchyChildren(d) {\n    return d.children;\n  }\n  function d3_layout_hierarchyValue(d) {\n    return d.value;\n  }\n  function d3_layout_hierarchySort(a, b) {\n    return b.value - a.value;\n  }\n  function d3_layout_hierarchyLinks(nodes) {\n    return d3.merge(nodes.map(function(parent) {\n      return (parent.children || []).map(function(child) {\n        return {\n          source: parent,\n          target: child\n        };\n      });\n    }));\n  }\n  d3.layout.partition = function() {\n    var hierarchy = d3.layout.hierarchy(), size = [ 1, 1 ];\n    function position(node, x, dx, dy) {\n      var children = node.children;\n      node.x = x;\n      node.y = node.depth * dy;\n      node.dx = dx;\n      node.dy = dy;\n      if (children && (n = children.length)) {\n        var i = -1, n, c, d;\n        dx = node.value ? dx / node.value : 0;\n        while (++i < n) {\n          position(c = children[i], x, d = c.value * dx, dy);\n          x += d;\n        }\n      }\n    }\n    function depth(node) {\n      var children = node.children, d = 0;\n      if (children && (n = children.length)) {\n        var i = -1, n;\n        while (++i < n) d = Math.max(d, depth(children[i]));\n      }\n      return 1 + d;\n    }\n    function partition(d, i) {\n      var nodes = hierarchy.call(this, d, i);\n      position(nodes[0], 0, size[0], size[1] / depth(nodes[0]));\n      return nodes;\n    }\n    partition.size = function(x) {\n      if (!arguments.length) return size;\n      size = x;\n      return partition;\n    };\n    return d3_layout_hierarchyRebind(partition, hierarchy);\n  };\n  d3.layout.pie = function() {\n    var value = Number, sort = d3_layout_pieSortByValue, startAngle = 0, endAngle = τ, padAngle = 0;\n    function pie(data) {\n      var n = data.length, values = data.map(function(d, i) {\n        return +value.call(pie, d, i);\n      }), a = +(typeof startAngle === \"function\" ? startAngle.apply(this, arguments) : startAngle), da = (typeof endAngle === \"function\" ? endAngle.apply(this, arguments) : endAngle) - a, p = Math.min(Math.abs(da) / n, +(typeof padAngle === \"function\" ? padAngle.apply(this, arguments) : padAngle)), pa = p * (da < 0 ? -1 : 1), k = (da - n * pa) / d3.sum(values), index = d3.range(n), arcs = [], v;\n      if (sort != null) index.sort(sort === d3_layout_pieSortByValue ? function(i, j) {\n        return values[j] - values[i];\n      } : function(i, j) {\n        return sort(data[i], data[j]);\n      });\n      index.forEach(function(i) {\n        arcs[i] = {\n          data: data[i],\n          value: v = values[i],\n          startAngle: a,\n          endAngle: a += v * k + pa,\n          padAngle: p\n        };\n      });\n      return arcs;\n    }\n    pie.value = function(_) {\n      if (!arguments.length) return value;\n      value = _;\n      return pie;\n    };\n    pie.sort = function(_) {\n      if (!arguments.length) return sort;\n      sort = _;\n      return pie;\n    };\n    pie.startAngle = function(_) {\n      if (!arguments.length) return startAngle;\n      startAngle = _;\n      return pie;\n    };\n    pie.endAngle = function(_) {\n      if (!arguments.length) return endAngle;\n      endAngle = _;\n      return pie;\n    };\n    pie.padAngle = function(_) {\n      if (!arguments.length) return padAngle;\n      padAngle = _;\n      return pie;\n    };\n    return pie;\n  };\n  var d3_layout_pieSortByValue = {};\n  d3.layout.stack = function() {\n    var values = d3_identity, order = d3_layout_stackOrderDefault, offset = d3_layout_stackOffsetZero, out = d3_layout_stackOut, x = d3_layout_stackX, y = d3_layout_stackY;\n    function stack(data, index) {\n      if (!(n = data.length)) return data;\n      var series = data.map(function(d, i) {\n        return values.call(stack, d, i);\n      });\n      var points = series.map(function(d) {\n        return d.map(function(v, i) {\n          return [ x.call(stack, v, i), y.call(stack, v, i) ];\n        });\n      });\n      var orders = order.call(stack, points, index);\n      series = d3.permute(series, orders);\n      points = d3.permute(points, orders);\n      var offsets = offset.call(stack, points, index);\n      var m = series[0].length, n, i, j, o;\n      for (j = 0; j < m; ++j) {\n        out.call(stack, series[0][j], o = offsets[j], points[0][j][1]);\n        for (i = 1; i < n; ++i) {\n          out.call(stack, series[i][j], o += points[i - 1][j][1], points[i][j][1]);\n        }\n      }\n      return data;\n    }\n    stack.values = function(x) {\n      if (!arguments.length) return values;\n      values = x;\n      return stack;\n    };\n    stack.order = function(x) {\n      if (!arguments.length) return order;\n      order = typeof x === \"function\" ? x : d3_layout_stackOrders.get(x) || d3_layout_stackOrderDefault;\n      return stack;\n    };\n    stack.offset = function(x) {\n      if (!arguments.length) return offset;\n      offset = typeof x === \"function\" ? x : d3_layout_stackOffsets.get(x) || d3_layout_stackOffsetZero;\n      return stack;\n    };\n    stack.x = function(z) {\n      if (!arguments.length) return x;\n      x = z;\n      return stack;\n    };\n    stack.y = function(z) {\n      if (!arguments.length) return y;\n      y = z;\n      return stack;\n    };\n    stack.out = function(z) {\n      if (!arguments.length) return out;\n      out = z;\n      return stack;\n    };\n    return stack;\n  };\n  function d3_layout_stackX(d) {\n    return d.x;\n  }\n  function d3_layout_stackY(d) {\n    return d.y;\n  }\n  function d3_layout_stackOut(d, y0, y) {\n    d.y0 = y0;\n    d.y = y;\n  }\n  var d3_layout_stackOrders = d3.map({\n    \"inside-out\": function(data) {\n      var n = data.length, i, j, max = data.map(d3_layout_stackMaxIndex), sums = data.map(d3_layout_stackReduceSum), index = d3.range(n).sort(function(a, b) {\n        return max[a] - max[b];\n      }), top = 0, bottom = 0, tops = [], bottoms = [];\n      for (i = 0; i < n; ++i) {\n        j = index[i];\n        if (top < bottom) {\n          top += sums[j];\n          tops.push(j);\n        } else {\n          bottom += sums[j];\n          bottoms.push(j);\n        }\n      }\n      return bottoms.reverse().concat(tops);\n    },\n    reverse: function(data) {\n      return d3.range(data.length).reverse();\n    },\n    \"default\": d3_layout_stackOrderDefault\n  });\n  var d3_layout_stackOffsets = d3.map({\n    silhouette: function(data) {\n      var n = data.length, m = data[0].length, sums = [], max = 0, i, j, o, y0 = [];\n      for (j = 0; j < m; ++j) {\n        for (i = 0, o = 0; i < n; i++) o += data[i][j][1];\n        if (o > max) max = o;\n        sums.push(o);\n      }\n      for (j = 0; j < m; ++j) {\n        y0[j] = (max - sums[j]) / 2;\n      }\n      return y0;\n    },\n    wiggle: function(data) {\n      var n = data.length, x = data[0], m = x.length, i, j, k, s1, s2, s3, dx, o, o0, y0 = [];\n      y0[0] = o = o0 = 0;\n      for (j = 1; j < m; ++j) {\n        for (i = 0, s1 = 0; i < n; ++i) s1 += data[i][j][1];\n        for (i = 0, s2 = 0, dx = x[j][0] - x[j - 1][0]; i < n; ++i) {\n          for (k = 0, s3 = (data[i][j][1] - data[i][j - 1][1]) / (2 * dx); k < i; ++k) {\n            s3 += (data[k][j][1] - data[k][j - 1][1]) / dx;\n          }\n          s2 += s3 * data[i][j][1];\n        }\n        y0[j] = o -= s1 ? s2 / s1 * dx : 0;\n        if (o < o0) o0 = o;\n      }\n      for (j = 0; j < m; ++j) y0[j] -= o0;\n      return y0;\n    },\n    expand: function(data) {\n      var n = data.length, m = data[0].length, k = 1 / n, i, j, o, y0 = [];\n      for (j = 0; j < m; ++j) {\n        for (i = 0, o = 0; i < n; i++) o += data[i][j][1];\n        if (o) for (i = 0; i < n; i++) data[i][j][1] /= o; else for (i = 0; i < n; i++) data[i][j][1] = k;\n      }\n      for (j = 0; j < m; ++j) y0[j] = 0;\n      return y0;\n    },\n    zero: d3_layout_stackOffsetZero\n  });\n  function d3_layout_stackOrderDefault(data) {\n    return d3.range(data.length);\n  }\n  function d3_layout_stackOffsetZero(data) {\n    var j = -1, m = data[0].length, y0 = [];\n    while (++j < m) y0[j] = 0;\n    return y0;\n  }\n  function d3_layout_stackMaxIndex(array) {\n    var i = 1, j = 0, v = array[0][1], k, n = array.length;\n    for (;i < n; ++i) {\n      if ((k = array[i][1]) > v) {\n        j = i;\n        v = k;\n      }\n    }\n    return j;\n  }\n  function d3_layout_stackReduceSum(d) {\n    return d.reduce(d3_layout_stackSum, 0);\n  }\n  function d3_layout_stackSum(p, d) {\n    return p + d[1];\n  }\n  d3.layout.histogram = function() {\n    var frequency = true, valuer = Number, ranger = d3_layout_histogramRange, binner = d3_layout_histogramBinSturges;\n    function histogram(data, i) {\n      var bins = [], values = data.map(valuer, this), range = ranger.call(this, values, i), thresholds = binner.call(this, range, values, i), bin, i = -1, n = values.length, m = thresholds.length - 1, k = frequency ? 1 : 1 / n, x;\n      while (++i < m) {\n        bin = bins[i] = [];\n        bin.dx = thresholds[i + 1] - (bin.x = thresholds[i]);\n        bin.y = 0;\n      }\n      if (m > 0) {\n        i = -1;\n        while (++i < n) {\n          x = values[i];\n          if (x >= range[0] && x <= range[1]) {\n            bin = bins[d3.bisect(thresholds, x, 1, m) - 1];\n            bin.y += k;\n            bin.push(data[i]);\n          }\n        }\n      }\n      return bins;\n    }\n    histogram.value = function(x) {\n      if (!arguments.length) return valuer;\n      valuer = x;\n      return histogram;\n    };\n    histogram.range = function(x) {\n      if (!arguments.length) return ranger;\n      ranger = d3_functor(x);\n      return histogram;\n    };\n    histogram.bins = function(x) {\n      if (!arguments.length) return binner;\n      binner = typeof x === \"number\" ? function(range) {\n        return d3_layout_histogramBinFixed(range, x);\n      } : d3_functor(x);\n      return histogram;\n    };\n    histogram.frequency = function(x) {\n      if (!arguments.length) return frequency;\n      frequency = !!x;\n      return histogram;\n    };\n    return histogram;\n  };\n  function d3_layout_histogramBinSturges(range, values) {\n    return d3_layout_histogramBinFixed(range, Math.ceil(Math.log(values.length) / Math.LN2 + 1));\n  }\n  function d3_layout_histogramBinFixed(range, n) {\n    var x = -1, b = +range[0], m = (range[1] - b) / n, f = [];\n    while (++x <= n) f[x] = m * x + b;\n    return f;\n  }\n  function d3_layout_histogramRange(values) {\n    return [ d3.min(values), d3.max(values) ];\n  }\n  d3.layout.pack = function() {\n    var hierarchy = d3.layout.hierarchy().sort(d3_layout_packSort), padding = 0, size = [ 1, 1 ], radius;\n    function pack(d, i) {\n      var nodes = hierarchy.call(this, d, i), root = nodes[0], w = size[0], h = size[1], r = radius == null ? Math.sqrt : typeof radius === \"function\" ? radius : function() {\n        return radius;\n      };\n      root.x = root.y = 0;\n      d3_layout_hierarchyVisitAfter(root, function(d) {\n        d.r = +r(d.value);\n      });\n      d3_layout_hierarchyVisitAfter(root, d3_layout_packSiblings);\n      if (padding) {\n        var dr = padding * (radius ? 1 : Math.max(2 * root.r / w, 2 * root.r / h)) / 2;\n        d3_layout_hierarchyVisitAfter(root, function(d) {\n          d.r += dr;\n        });\n        d3_layout_hierarchyVisitAfter(root, d3_layout_packSiblings);\n        d3_layout_hierarchyVisitAfter(root, function(d) {\n          d.r -= dr;\n        });\n      }\n      d3_layout_packTransform(root, w / 2, h / 2, radius ? 1 : 1 / Math.max(2 * root.r / w, 2 * root.r / h));\n      return nodes;\n    }\n    pack.size = function(_) {\n      if (!arguments.length) return size;\n      size = _;\n      return pack;\n    };\n    pack.radius = function(_) {\n      if (!arguments.length) return radius;\n      radius = _ == null || typeof _ === \"function\" ? _ : +_;\n      return pack;\n    };\n    pack.padding = function(_) {\n      if (!arguments.length) return padding;\n      padding = +_;\n      return pack;\n    };\n    return d3_layout_hierarchyRebind(pack, hierarchy);\n  };\n  function d3_layout_packSort(a, b) {\n    return a.value - b.value;\n  }\n  function d3_layout_packInsert(a, b) {\n    var c = a._pack_next;\n    a._pack_next = b;\n    b._pack_prev = a;\n    b._pack_next = c;\n    c._pack_prev = b;\n  }\n  function d3_layout_packSplice(a, b) {\n    a._pack_next = b;\n    b._pack_prev = a;\n  }\n  function d3_layout_packIntersects(a, b) {\n    var dx = b.x - a.x, dy = b.y - a.y, dr = a.r + b.r;\n    return .999 * dr * dr > dx * dx + dy * dy;\n  }\n  function d3_layout_packSiblings(node) {\n    if (!(nodes = node.children) || !(n = nodes.length)) return;\n    var nodes, xMin = Infinity, xMax = -Infinity, yMin = Infinity, yMax = -Infinity, a, b, c, i, j, k, n;\n    function bound(node) {\n      xMin = Math.min(node.x - node.r, xMin);\n      xMax = Math.max(node.x + node.r, xMax);\n      yMin = Math.min(node.y - node.r, yMin);\n      yMax = Math.max(node.y + node.r, yMax);\n    }\n    nodes.forEach(d3_layout_packLink);\n    a = nodes[0];\n    a.x = -a.r;\n    a.y = 0;\n    bound(a);\n    if (n > 1) {\n      b = nodes[1];\n      b.x = b.r;\n      b.y = 0;\n      bound(b);\n      if (n > 2) {\n        c = nodes[2];\n        d3_layout_packPlace(a, b, c);\n        bound(c);\n        d3_layout_packInsert(a, c);\n        a._pack_prev = c;\n        d3_layout_packInsert(c, b);\n        b = a._pack_next;\n        for (i = 3; i < n; i++) {\n          d3_layout_packPlace(a, b, c = nodes[i]);\n          var isect = 0, s1 = 1, s2 = 1;\n          for (j = b._pack_next; j !== b; j = j._pack_next, s1++) {\n            if (d3_layout_packIntersects(j, c)) {\n              isect = 1;\n              break;\n            }\n          }\n          if (isect == 1) {\n            for (k = a._pack_prev; k !== j._pack_prev; k = k._pack_prev, s2++) {\n              if (d3_layout_packIntersects(k, c)) {\n                break;\n              }\n            }\n          }\n          if (isect) {\n            if (s1 < s2 || s1 == s2 && b.r < a.r) d3_layout_packSplice(a, b = j); else d3_layout_packSplice(a = k, b);\n            i--;\n          } else {\n            d3_layout_packInsert(a, c);\n            b = c;\n            bound(c);\n          }\n        }\n      }\n    }\n    var cx = (xMin + xMax) / 2, cy = (yMin + yMax) / 2, cr = 0;\n    for (i = 0; i < n; i++) {\n      c = nodes[i];\n      c.x -= cx;\n      c.y -= cy;\n      cr = Math.max(cr, c.r + Math.sqrt(c.x * c.x + c.y * c.y));\n    }\n    node.r = cr;\n    nodes.forEach(d3_layout_packUnlink);\n  }\n  function d3_layout_packLink(node) {\n    node._pack_next = node._pack_prev = node;\n  }\n  function d3_layout_packUnlink(node) {\n    delete node._pack_next;\n    delete node._pack_prev;\n  }\n  function d3_layout_packTransform(node, x, y, k) {\n    var children = node.children;\n    node.x = x += k * node.x;\n    node.y = y += k * node.y;\n    node.r *= k;\n    if (children) {\n      var i = -1, n = children.length;\n      while (++i < n) d3_layout_packTransform(children[i], x, y, k);\n    }\n  }\n  function d3_layout_packPlace(a, b, c) {\n    var db = a.r + c.r, dx = b.x - a.x, dy = b.y - a.y;\n    if (db && (dx || dy)) {\n      var da = b.r + c.r, dc = dx * dx + dy * dy;\n      da *= da;\n      db *= db;\n      var x = .5 + (db - da) / (2 * dc), y = Math.sqrt(Math.max(0, 2 * da * (db + dc) - (db -= dc) * db - da * da)) / (2 * dc);\n      c.x = a.x + x * dx + y * dy;\n      c.y = a.y + x * dy - y * dx;\n    } else {\n      c.x = a.x + db;\n      c.y = a.y;\n    }\n  }\n  d3.layout.tree = function() {\n    var hierarchy = d3.layout.hierarchy().sort(null).value(null), separation = d3_layout_treeSeparation, size = [ 1, 1 ], nodeSize = null;\n    function tree(d, i) {\n      var nodes = hierarchy.call(this, d, i), root0 = nodes[0], root1 = wrapTree(root0);\n      d3_layout_hierarchyVisitAfter(root1, firstWalk), root1.parent.m = -root1.z;\n      d3_layout_hierarchyVisitBefore(root1, secondWalk);\n      if (nodeSize) d3_layout_hierarchyVisitBefore(root0, sizeNode); else {\n        var left = root0, right = root0, bottom = root0;\n        d3_layout_hierarchyVisitBefore(root0, function(node) {\n          if (node.x < left.x) left = node;\n          if (node.x > right.x) right = node;\n          if (node.depth > bottom.depth) bottom = node;\n        });\n        var tx = separation(left, right) / 2 - left.x, kx = size[0] / (right.x + separation(right, left) / 2 + tx), ky = size[1] / (bottom.depth || 1);\n        d3_layout_hierarchyVisitBefore(root0, function(node) {\n          node.x = (node.x + tx) * kx;\n          node.y = node.depth * ky;\n        });\n      }\n      return nodes;\n    }\n    function wrapTree(root0) {\n      var root1 = {\n        A: null,\n        children: [ root0 ]\n      }, queue = [ root1 ], node1;\n      while ((node1 = queue.pop()) != null) {\n        for (var children = node1.children, child, i = 0, n = children.length; i < n; ++i) {\n          queue.push((children[i] = child = {\n            _: children[i],\n            parent: node1,\n            children: (child = children[i].children) && child.slice() || [],\n            A: null,\n            a: null,\n            z: 0,\n            m: 0,\n            c: 0,\n            s: 0,\n            t: null,\n            i: i\n          }).a = child);\n        }\n      }\n      return root1.children[0];\n    }\n    function firstWalk(v) {\n      var children = v.children, siblings = v.parent.children, w = v.i ? siblings[v.i - 1] : null;\n      if (children.length) {\n        d3_layout_treeShift(v);\n        var midpoint = (children[0].z + children[children.length - 1].z) / 2;\n        if (w) {\n          v.z = w.z + separation(v._, w._);\n          v.m = v.z - midpoint;\n        } else {\n          v.z = midpoint;\n        }\n      } else if (w) {\n        v.z = w.z + separation(v._, w._);\n      }\n      v.parent.A = apportion(v, w, v.parent.A || siblings[0]);\n    }\n    function secondWalk(v) {\n      v._.x = v.z + v.parent.m;\n      v.m += v.parent.m;\n    }\n    function apportion(v, w, ancestor) {\n      if (w) {\n        var vip = v, vop = v, vim = w, vom = vip.parent.children[0], sip = vip.m, sop = vop.m, sim = vim.m, som = vom.m, shift;\n        while (vim = d3_layout_treeRight(vim), vip = d3_layout_treeLeft(vip), vim && vip) {\n          vom = d3_layout_treeLeft(vom);\n          vop = d3_layout_treeRight(vop);\n          vop.a = v;\n          shift = vim.z + sim - vip.z - sip + separation(vim._, vip._);\n          if (shift > 0) {\n            d3_layout_treeMove(d3_layout_treeAncestor(vim, v, ancestor), v, shift);\n            sip += shift;\n            sop += shift;\n          }\n          sim += vim.m;\n          sip += vip.m;\n          som += vom.m;\n          sop += vop.m;\n        }\n        if (vim && !d3_layout_treeRight(vop)) {\n          vop.t = vim;\n          vop.m += sim - sop;\n        }\n        if (vip && !d3_layout_treeLeft(vom)) {\n          vom.t = vip;\n          vom.m += sip - som;\n          ancestor = v;\n        }\n      }\n      return ancestor;\n    }\n    function sizeNode(node) {\n      node.x *= size[0];\n      node.y = node.depth * size[1];\n    }\n    tree.separation = function(x) {\n      if (!arguments.length) return separation;\n      separation = x;\n      return tree;\n    };\n    tree.size = function(x) {\n      if (!arguments.length) return nodeSize ? null : size;\n      nodeSize = (size = x) == null ? sizeNode : null;\n      return tree;\n    };\n    tree.nodeSize = function(x) {\n      if (!arguments.length) return nodeSize ? size : null;\n      nodeSize = (size = x) == null ? null : sizeNode;\n      return tree;\n    };\n    return d3_layout_hierarchyRebind(tree, hierarchy);\n  };\n  function d3_layout_treeSeparation(a, b) {\n    return a.parent == b.parent ? 1 : 2;\n  }\n  function d3_layout_treeLeft(v) {\n    var children = v.children;\n    return children.length ? children[0] : v.t;\n  }\n  function d3_layout_treeRight(v) {\n    var children = v.children, n;\n    return (n = children.length) ? children[n - 1] : v.t;\n  }\n  function d3_layout_treeMove(wm, wp, shift) {\n    var change = shift / (wp.i - wm.i);\n    wp.c -= change;\n    wp.s += shift;\n    wm.c += change;\n    wp.z += shift;\n    wp.m += shift;\n  }\n  function d3_layout_treeShift(v) {\n    var shift = 0, change = 0, children = v.children, i = children.length, w;\n    while (--i >= 0) {\n      w = children[i];\n      w.z += shift;\n      w.m += shift;\n      shift += w.s + (change += w.c);\n    }\n  }\n  function d3_layout_treeAncestor(vim, v, ancestor) {\n    return vim.a.parent === v.parent ? vim.a : ancestor;\n  }\n  d3.layout.cluster = function() {\n    var hierarchy = d3.layout.hierarchy().sort(null).value(null), separation = d3_layout_treeSeparation, size = [ 1, 1 ], nodeSize = false;\n    function cluster(d, i) {\n      var nodes = hierarchy.call(this, d, i), root = nodes[0], previousNode, x = 0;\n      d3_layout_hierarchyVisitAfter(root, function(node) {\n        var children = node.children;\n        if (children && children.length) {\n          node.x = d3_layout_clusterX(children);\n          node.y = d3_layout_clusterY(children);\n        } else {\n          node.x = previousNode ? x += separation(node, previousNode) : 0;\n          node.y = 0;\n          previousNode = node;\n        }\n      });\n      var left = d3_layout_clusterLeft(root), right = d3_layout_clusterRight(root), x0 = left.x - separation(left, right) / 2, x1 = right.x + separation(right, left) / 2;\n      d3_layout_hierarchyVisitAfter(root, nodeSize ? function(node) {\n        node.x = (node.x - root.x) * size[0];\n        node.y = (root.y - node.y) * size[1];\n      } : function(node) {\n        node.x = (node.x - x0) / (x1 - x0) * size[0];\n        node.y = (1 - (root.y ? node.y / root.y : 1)) * size[1];\n      });\n      return nodes;\n    }\n    cluster.separation = function(x) {\n      if (!arguments.length) return separation;\n      separation = x;\n      return cluster;\n    };\n    cluster.size = function(x) {\n      if (!arguments.length) return nodeSize ? null : size;\n      nodeSize = (size = x) == null;\n      return cluster;\n    };\n    cluster.nodeSize = function(x) {\n      if (!arguments.length) return nodeSize ? size : null;\n      nodeSize = (size = x) != null;\n      return cluster;\n    };\n    return d3_layout_hierarchyRebind(cluster, hierarchy);\n  };\n  function d3_layout_clusterY(children) {\n    return 1 + d3.max(children, function(child) {\n      return child.y;\n    });\n  }\n  function d3_layout_clusterX(children) {\n    return children.reduce(function(x, child) {\n      return x + child.x;\n    }, 0) / children.length;\n  }\n  function d3_layout_clusterLeft(node) {\n    var children = node.children;\n    return children && children.length ? d3_layout_clusterLeft(children[0]) : node;\n  }\n  function d3_layout_clusterRight(node) {\n    var children = node.children, n;\n    return children && (n = children.length) ? d3_layout_clusterRight(children[n - 1]) : node;\n  }\n  d3.layout.treemap = function() {\n    var hierarchy = d3.layout.hierarchy(), round = Math.round, size = [ 1, 1 ], padding = null, pad = d3_layout_treemapPadNull, sticky = false, stickies, mode = \"squarify\", ratio = .5 * (1 + Math.sqrt(5));\n    function scale(children, k) {\n      var i = -1, n = children.length, child, area;\n      while (++i < n) {\n        area = (child = children[i]).value * (k < 0 ? 0 : k);\n        child.area = isNaN(area) || area <= 0 ? 0 : area;\n      }\n    }\n    function squarify(node) {\n      var children = node.children;\n      if (children && children.length) {\n        var rect = pad(node), row = [], remaining = children.slice(), child, best = Infinity, score, u = mode === \"slice\" ? rect.dx : mode === \"dice\" ? rect.dy : mode === \"slice-dice\" ? node.depth & 1 ? rect.dy : rect.dx : Math.min(rect.dx, rect.dy), n;\n        scale(remaining, rect.dx * rect.dy / node.value);\n        row.area = 0;\n        while ((n = remaining.length) > 0) {\n          row.push(child = remaining[n - 1]);\n          row.area += child.area;\n          if (mode !== \"squarify\" || (score = worst(row, u)) <= best) {\n            remaining.pop();\n            best = score;\n          } else {\n            row.area -= row.pop().area;\n            position(row, u, rect, false);\n            u = Math.min(rect.dx, rect.dy);\n            row.length = row.area = 0;\n            best = Infinity;\n          }\n        }\n        if (row.length) {\n          position(row, u, rect, true);\n          row.length = row.area = 0;\n        }\n        children.forEach(squarify);\n      }\n    }\n    function stickify(node) {\n      var children = node.children;\n      if (children && children.length) {\n        var rect = pad(node), remaining = children.slice(), child, row = [];\n        scale(remaining, rect.dx * rect.dy / node.value);\n        row.area = 0;\n        while (child = remaining.pop()) {\n          row.push(child);\n          row.area += child.area;\n          if (child.z != null) {\n            position(row, child.z ? rect.dx : rect.dy, rect, !remaining.length);\n            row.length = row.area = 0;\n          }\n        }\n        children.forEach(stickify);\n      }\n    }\n    function worst(row, u) {\n      var s = row.area, r, rmax = 0, rmin = Infinity, i = -1, n = row.length;\n      while (++i < n) {\n        if (!(r = row[i].area)) continue;\n        if (r < rmin) rmin = r;\n        if (r > rmax) rmax = r;\n      }\n      s *= s;\n      u *= u;\n      return s ? Math.max(u * rmax * ratio / s, s / (u * rmin * ratio)) : Infinity;\n    }\n    function position(row, u, rect, flush) {\n      var i = -1, n = row.length, x = rect.x, y = rect.y, v = u ? round(row.area / u) : 0, o;\n      if (u == rect.dx) {\n        if (flush || v > rect.dy) v = rect.dy;\n        while (++i < n) {\n          o = row[i];\n          o.x = x;\n          o.y = y;\n          o.dy = v;\n          x += o.dx = Math.min(rect.x + rect.dx - x, v ? round(o.area / v) : 0);\n        }\n        o.z = true;\n        o.dx += rect.x + rect.dx - x;\n        rect.y += v;\n        rect.dy -= v;\n      } else {\n        if (flush || v > rect.dx) v = rect.dx;\n        while (++i < n) {\n          o = row[i];\n          o.x = x;\n          o.y = y;\n          o.dx = v;\n          y += o.dy = Math.min(rect.y + rect.dy - y, v ? round(o.area / v) : 0);\n        }\n        o.z = false;\n        o.dy += rect.y + rect.dy - y;\n        rect.x += v;\n        rect.dx -= v;\n      }\n    }\n    function treemap(d) {\n      var nodes = stickies || hierarchy(d), root = nodes[0];\n      root.x = 0;\n      root.y = 0;\n      root.dx = size[0];\n      root.dy = size[1];\n      if (stickies) hierarchy.revalue(root);\n      scale([ root ], root.dx * root.dy / root.value);\n      (stickies ? stickify : squarify)(root);\n      if (sticky) stickies = nodes;\n      return nodes;\n    }\n    treemap.size = function(x) {\n      if (!arguments.length) return size;\n      size = x;\n      return treemap;\n    };\n    treemap.padding = function(x) {\n      if (!arguments.length) return padding;\n      function padFunction(node) {\n        var p = x.call(treemap, node, node.depth);\n        return p == null ? d3_layout_treemapPadNull(node) : d3_layout_treemapPad(node, typeof p === \"number\" ? [ p, p, p, p ] : p);\n      }\n      function padConstant(node) {\n        return d3_layout_treemapPad(node, x);\n      }\n      var type;\n      pad = (padding = x) == null ? d3_layout_treemapPadNull : (type = typeof x) === \"function\" ? padFunction : type === \"number\" ? (x = [ x, x, x, x ], \n      padConstant) : padConstant;\n      return treemap;\n    };\n    treemap.round = function(x) {\n      if (!arguments.length) return round != Number;\n      round = x ? Math.round : Number;\n      return treemap;\n    };\n    treemap.sticky = function(x) {\n      if (!arguments.length) return sticky;\n      sticky = x;\n      stickies = null;\n      return treemap;\n    };\n    treemap.ratio = function(x) {\n      if (!arguments.length) return ratio;\n      ratio = x;\n      return treemap;\n    };\n    treemap.mode = function(x) {\n      if (!arguments.length) return mode;\n      mode = x + \"\";\n      return treemap;\n    };\n    return d3_layout_hierarchyRebind(treemap, hierarchy);\n  };\n  function d3_layout_treemapPadNull(node) {\n    return {\n      x: node.x,\n      y: node.y,\n      dx: node.dx,\n      dy: node.dy\n    };\n  }\n  function d3_layout_treemapPad(node, padding) {\n    var x = node.x + padding[3], y = node.y + padding[0], dx = node.dx - padding[1] - padding[3], dy = node.dy - padding[0] - padding[2];\n    if (dx < 0) {\n      x += dx / 2;\n      dx = 0;\n    }\n    if (dy < 0) {\n      y += dy / 2;\n      dy = 0;\n    }\n    return {\n      x: x,\n      y: y,\n      dx: dx,\n      dy: dy\n    };\n  }\n  d3.random = {\n    normal: function(µ, σ) {\n      var n = arguments.length;\n      if (n < 2) σ = 1;\n      if (n < 1) µ = 0;\n      return function() {\n        var x, y, r;\n        do {\n          x = Math.random() * 2 - 1;\n          y = Math.random() * 2 - 1;\n          r = x * x + y * y;\n        } while (!r || r > 1);\n        return µ + σ * x * Math.sqrt(-2 * Math.log(r) / r);\n      };\n    },\n    logNormal: function() {\n      var random = d3.random.normal.apply(d3, arguments);\n      return function() {\n        return Math.exp(random());\n      };\n    },\n    bates: function(m) {\n      var random = d3.random.irwinHall(m);\n      return function() {\n        return random() / m;\n      };\n    },\n    irwinHall: function(m) {\n      return function() {\n        for (var s = 0, j = 0; j < m; j++) s += Math.random();\n        return s;\n      };\n    }\n  };\n  d3.scale = {};\n  function d3_scaleExtent(domain) {\n    var start = domain[0], stop = domain[domain.length - 1];\n    return start < stop ? [ start, stop ] : [ stop, start ];\n  }\n  function d3_scaleRange(scale) {\n    return scale.rangeExtent ? scale.rangeExtent() : d3_scaleExtent(scale.range());\n  }\n  function d3_scale_bilinear(domain, range, uninterpolate, interpolate) {\n    var u = uninterpolate(domain[0], domain[1]), i = interpolate(range[0], range[1]);\n    return function(x) {\n      return i(u(x));\n    };\n  }\n  function d3_scale_nice(domain, nice) {\n    var i0 = 0, i1 = domain.length - 1, x0 = domain[i0], x1 = domain[i1], dx;\n    if (x1 < x0) {\n      dx = i0, i0 = i1, i1 = dx;\n      dx = x0, x0 = x1, x1 = dx;\n    }\n    domain[i0] = nice.floor(x0);\n    domain[i1] = nice.ceil(x1);\n    return domain;\n  }\n  function d3_scale_niceStep(step) {\n    return step ? {\n      floor: function(x) {\n        return Math.floor(x / step) * step;\n      },\n      ceil: function(x) {\n        return Math.ceil(x / step) * step;\n      }\n    } : d3_scale_niceIdentity;\n  }\n  var d3_scale_niceIdentity = {\n    floor: d3_identity,\n    ceil: d3_identity\n  };\n  function d3_scale_polylinear(domain, range, uninterpolate, interpolate) {\n    var u = [], i = [], j = 0, k = Math.min(domain.length, range.length) - 1;\n    if (domain[k] < domain[0]) {\n      domain = domain.slice().reverse();\n      range = range.slice().reverse();\n    }\n    while (++j <= k) {\n      u.push(uninterpolate(domain[j - 1], domain[j]));\n      i.push(interpolate(range[j - 1], range[j]));\n    }\n    return function(x) {\n      var j = d3.bisect(domain, x, 1, k) - 1;\n      return i[j](u[j](x));\n    };\n  }\n  d3.scale.linear = function() {\n    return d3_scale_linear([ 0, 1 ], [ 0, 1 ], d3_interpolate, false);\n  };\n  function d3_scale_linear(domain, range, interpolate, clamp) {\n    var output, input;\n    function rescale() {\n      var linear = Math.min(domain.length, range.length) > 2 ? d3_scale_polylinear : d3_scale_bilinear, uninterpolate = clamp ? d3_uninterpolateClamp : d3_uninterpolateNumber;\n      output = linear(domain, range, uninterpolate, interpolate);\n      input = linear(range, domain, uninterpolate, d3_interpolate);\n      return scale;\n    }\n    function scale(x) {\n      return output(x);\n    }\n    scale.invert = function(y) {\n      return input(y);\n    };\n    scale.domain = function(x) {\n      if (!arguments.length) return domain;\n      domain = x.map(Number);\n      return rescale();\n    };\n    scale.range = function(x) {\n      if (!arguments.length) return range;\n      range = x;\n      return rescale();\n    };\n    scale.rangeRound = function(x) {\n      return scale.range(x).interpolate(d3_interpolateRound);\n    };\n    scale.clamp = function(x) {\n      if (!arguments.length) return clamp;\n      clamp = x;\n      return rescale();\n    };\n    scale.interpolate = function(x) {\n      if (!arguments.length) return interpolate;\n      interpolate = x;\n      return rescale();\n    };\n    scale.ticks = function(m) {\n      return d3_scale_linearTicks(domain, m);\n    };\n    scale.tickFormat = function(m, format) {\n      return d3_scale_linearTickFormat(domain, m, format);\n    };\n    scale.nice = function(m) {\n      d3_scale_linearNice(domain, m);\n      return rescale();\n    };\n    scale.copy = function() {\n      return d3_scale_linear(domain, range, interpolate, clamp);\n    };\n    return rescale();\n  }\n  function d3_scale_linearRebind(scale, linear) {\n    return d3.rebind(scale, linear, \"range\", \"rangeRound\", \"interpolate\", \"clamp\");\n  }\n  function d3_scale_linearNice(domain, m) {\n    return d3_scale_nice(domain, d3_scale_niceStep(d3_scale_linearTickRange(domain, m)[2]));\n  }\n  function d3_scale_linearTickRange(domain, m) {\n    if (m == null) m = 10;\n    var extent = d3_scaleExtent(domain), span = extent[1] - extent[0], step = Math.pow(10, Math.floor(Math.log(span / m) / Math.LN10)), err = m / span * step;\n    if (err <= .15) step *= 10; else if (err <= .35) step *= 5; else if (err <= .75) step *= 2;\n    extent[0] = Math.ceil(extent[0] / step) * step;\n    extent[1] = Math.floor(extent[1] / step) * step + step * .5;\n    extent[2] = step;\n    return extent;\n  }\n  function d3_scale_linearTicks(domain, m) {\n    return d3.range.apply(d3, d3_scale_linearTickRange(domain, m));\n  }\n  function d3_scale_linearTickFormat(domain, m, format) {\n    var range = d3_scale_linearTickRange(domain, m);\n    if (format) {\n      var match = d3_format_re.exec(format);\n      match.shift();\n      if (match[8] === \"s\") {\n        var prefix = d3.formatPrefix(Math.max(abs(range[0]), abs(range[1])));\n        if (!match[7]) match[7] = \".\" + d3_scale_linearPrecision(prefix.scale(range[2]));\n        match[8] = \"f\";\n        format = d3.format(match.join(\"\"));\n        return function(d) {\n          return format(prefix.scale(d)) + prefix.symbol;\n        };\n      }\n      if (!match[7]) match[7] = \".\" + d3_scale_linearFormatPrecision(match[8], range);\n      format = match.join(\"\");\n    } else {\n      format = \",.\" + d3_scale_linearPrecision(range[2]) + \"f\";\n    }\n    return d3.format(format);\n  }\n  var d3_scale_linearFormatSignificant = {\n    s: 1,\n    g: 1,\n    p: 1,\n    r: 1,\n    e: 1\n  };\n  function d3_scale_linearPrecision(value) {\n    return -Math.floor(Math.log(value) / Math.LN10 + .01);\n  }\n  function d3_scale_linearFormatPrecision(type, range) {\n    var p = d3_scale_linearPrecision(range[2]);\n    return type in d3_scale_linearFormatSignificant ? Math.abs(p - d3_scale_linearPrecision(Math.max(abs(range[0]), abs(range[1])))) + +(type !== \"e\") : p - (type === \"%\") * 2;\n  }\n  d3.scale.log = function() {\n    return d3_scale_log(d3.scale.linear().domain([ 0, 1 ]), 10, true, [ 1, 10 ]);\n  };\n  function d3_scale_log(linear, base, positive, domain) {\n    function log(x) {\n      return (positive ? Math.log(x < 0 ? 0 : x) : -Math.log(x > 0 ? 0 : -x)) / Math.log(base);\n    }\n    function pow(x) {\n      return positive ? Math.pow(base, x) : -Math.pow(base, -x);\n    }\n    function scale(x) {\n      return linear(log(x));\n    }\n    scale.invert = function(x) {\n      return pow(linear.invert(x));\n    };\n    scale.domain = function(x) {\n      if (!arguments.length) return domain;\n      positive = x[0] >= 0;\n      linear.domain((domain = x.map(Number)).map(log));\n      return scale;\n    };\n    scale.base = function(_) {\n      if (!arguments.length) return base;\n      base = +_;\n      linear.domain(domain.map(log));\n      return scale;\n    };\n    scale.nice = function() {\n      var niced = d3_scale_nice(domain.map(log), positive ? Math : d3_scale_logNiceNegative);\n      linear.domain(niced);\n      domain = niced.map(pow);\n      return scale;\n    };\n    scale.ticks = function() {\n      var extent = d3_scaleExtent(domain), ticks = [], u = extent[0], v = extent[1], i = Math.floor(log(u)), j = Math.ceil(log(v)), n = base % 1 ? 2 : base;\n      if (isFinite(j - i)) {\n        if (positive) {\n          for (;i < j; i++) for (var k = 1; k < n; k++) ticks.push(pow(i) * k);\n          ticks.push(pow(i));\n        } else {\n          ticks.push(pow(i));\n          for (;i++ < j; ) for (var k = n - 1; k > 0; k--) ticks.push(pow(i) * k);\n        }\n        for (i = 0; ticks[i] < u; i++) {}\n        for (j = ticks.length; ticks[j - 1] > v; j--) {}\n        ticks = ticks.slice(i, j);\n      }\n      return ticks;\n    };\n    scale.tickFormat = function(n, format) {\n      if (!arguments.length) return d3_scale_logFormat;\n      if (arguments.length < 2) format = d3_scale_logFormat; else if (typeof format !== \"function\") format = d3.format(format);\n      var k = Math.max(.1, n / scale.ticks().length), f = positive ? (e = 1e-12, Math.ceil) : (e = -1e-12, \n      Math.floor), e;\n      return function(d) {\n        return d / pow(f(log(d) + e)) <= k ? format(d) : \"\";\n      };\n    };\n    scale.copy = function() {\n      return d3_scale_log(linear.copy(), base, positive, domain);\n    };\n    return d3_scale_linearRebind(scale, linear);\n  }\n  var d3_scale_logFormat = d3.format(\".0e\"), d3_scale_logNiceNegative = {\n    floor: function(x) {\n      return -Math.ceil(-x);\n    },\n    ceil: function(x) {\n      return -Math.floor(-x);\n    }\n  };\n  d3.scale.pow = function() {\n    return d3_scale_pow(d3.scale.linear(), 1, [ 0, 1 ]);\n  };\n  function d3_scale_pow(linear, exponent, domain) {\n    var powp = d3_scale_powPow(exponent), powb = d3_scale_powPow(1 / exponent);\n    function scale(x) {\n      return linear(powp(x));\n    }\n    scale.invert = function(x) {\n      return powb(linear.invert(x));\n    };\n    scale.domain = function(x) {\n      if (!arguments.length) return domain;\n      linear.domain((domain = x.map(Number)).map(powp));\n      return scale;\n    };\n    scale.ticks = function(m) {\n      return d3_scale_linearTicks(domain, m);\n    };\n    scale.tickFormat = function(m, format) {\n      return d3_scale_linearTickFormat(domain, m, format);\n    };\n    scale.nice = function(m) {\n      return scale.domain(d3_scale_linearNice(domain, m));\n    };\n    scale.exponent = function(x) {\n      if (!arguments.length) return exponent;\n      powp = d3_scale_powPow(exponent = x);\n      powb = d3_scale_powPow(1 / exponent);\n      linear.domain(domain.map(powp));\n      return scale;\n    };\n    scale.copy = function() {\n      return d3_scale_pow(linear.copy(), exponent, domain);\n    };\n    return d3_scale_linearRebind(scale, linear);\n  }\n  function d3_scale_powPow(e) {\n    return function(x) {\n      return x < 0 ? -Math.pow(-x, e) : Math.pow(x, e);\n    };\n  }\n  d3.scale.sqrt = function() {\n    return d3.scale.pow().exponent(.5);\n  };\n  d3.scale.ordinal = function() {\n    return d3_scale_ordinal([], {\n      t: \"range\",\n      a: [ [] ]\n    });\n  };\n  function d3_scale_ordinal(domain, ranger) {\n    var index, range, rangeBand;\n    function scale(x) {\n      return range[((index.get(x) || (ranger.t === \"range\" ? index.set(x, domain.push(x)) : NaN)) - 1) % range.length];\n    }\n    function steps(start, step) {\n      return d3.range(domain.length).map(function(i) {\n        return start + step * i;\n      });\n    }\n    scale.domain = function(x) {\n      if (!arguments.length) return domain;\n      domain = [];\n      index = new d3_Map();\n      var i = -1, n = x.length, xi;\n      while (++i < n) if (!index.has(xi = x[i])) index.set(xi, domain.push(xi));\n      return scale[ranger.t].apply(scale, ranger.a);\n    };\n    scale.range = function(x) {\n      if (!arguments.length) return range;\n      range = x;\n      rangeBand = 0;\n      ranger = {\n        t: \"range\",\n        a: arguments\n      };\n      return scale;\n    };\n    scale.rangePoints = function(x, padding) {\n      if (arguments.length < 2) padding = 0;\n      var start = x[0], stop = x[1], step = domain.length < 2 ? (start = (start + stop) / 2, \n      0) : (stop - start) / (domain.length - 1 + padding);\n      range = steps(start + step * padding / 2, step);\n      rangeBand = 0;\n      ranger = {\n        t: \"rangePoints\",\n        a: arguments\n      };\n      return scale;\n    };\n    scale.rangeRoundPoints = function(x, padding) {\n      if (arguments.length < 2) padding = 0;\n      var start = x[0], stop = x[1], step = domain.length < 2 ? (start = stop = Math.round((start + stop) / 2), \n      0) : (stop - start) / (domain.length - 1 + padding) | 0;\n      range = steps(start + Math.round(step * padding / 2 + (stop - start - (domain.length - 1 + padding) * step) / 2), step);\n      rangeBand = 0;\n      ranger = {\n        t: \"rangeRoundPoints\",\n        a: arguments\n      };\n      return scale;\n    };\n    scale.rangeBands = function(x, padding, outerPadding) {\n      if (arguments.length < 2) padding = 0;\n      if (arguments.length < 3) outerPadding = padding;\n      var reverse = x[1] < x[0], start = x[reverse - 0], stop = x[1 - reverse], step = (stop - start) / (domain.length - padding + 2 * outerPadding);\n      range = steps(start + step * outerPadding, step);\n      if (reverse) range.reverse();\n      rangeBand = step * (1 - padding);\n      ranger = {\n        t: \"rangeBands\",\n        a: arguments\n      };\n      return scale;\n    };\n    scale.rangeRoundBands = function(x, padding, outerPadding) {\n      if (arguments.length < 2) padding = 0;\n      if (arguments.length < 3) outerPadding = padding;\n      var reverse = x[1] < x[0], start = x[reverse - 0], stop = x[1 - reverse], step = Math.floor((stop - start) / (domain.length - padding + 2 * outerPadding));\n      range = steps(start + Math.round((stop - start - (domain.length - padding) * step) / 2), step);\n      if (reverse) range.reverse();\n      rangeBand = Math.round(step * (1 - padding));\n      ranger = {\n        t: \"rangeRoundBands\",\n        a: arguments\n      };\n      return scale;\n    };\n    scale.rangeBand = function() {\n      return rangeBand;\n    };\n    scale.rangeExtent = function() {\n      return d3_scaleExtent(ranger.a[0]);\n    };\n    scale.copy = function() {\n      return d3_scale_ordinal(domain, ranger);\n    };\n    return scale.domain(domain);\n  }\n  d3.scale.category10 = function() {\n    return d3.scale.ordinal().range(d3_category10);\n  };\n  d3.scale.category20 = function() {\n    return d3.scale.ordinal().range(d3_category20);\n  };\n  d3.scale.category20b = function() {\n    return d3.scale.ordinal().range(d3_category20b);\n  };\n  d3.scale.category20c = function() {\n    return d3.scale.ordinal().range(d3_category20c);\n  };\n  var d3_category10 = [ 2062260, 16744206, 2924588, 14034728, 9725885, 9197131, 14907330, 8355711, 12369186, 1556175 ].map(d3_rgbString);\n  var d3_category20 = [ 2062260, 11454440, 16744206, 16759672, 2924588, 10018698, 14034728, 16750742, 9725885, 12955861, 9197131, 12885140, 14907330, 16234194, 8355711, 13092807, 12369186, 14408589, 1556175, 10410725 ].map(d3_rgbString);\n  var d3_category20b = [ 3750777, 5395619, 7040719, 10264286, 6519097, 9216594, 11915115, 13556636, 9202993, 12426809, 15186514, 15190932, 8666169, 11356490, 14049643, 15177372, 8077683, 10834324, 13528509, 14589654 ].map(d3_rgbString);\n  var d3_category20c = [ 3244733, 7057110, 10406625, 13032431, 15095053, 16616764, 16625259, 16634018, 3253076, 7652470, 10607003, 13101504, 7695281, 10394312, 12369372, 14342891, 6513507, 9868950, 12434877, 14277081 ].map(d3_rgbString);\n  d3.scale.quantile = function() {\n    return d3_scale_quantile([], []);\n  };\n  function d3_scale_quantile(domain, range) {\n    var thresholds;\n    function rescale() {\n      var k = 0, q = range.length;\n      thresholds = [];\n      while (++k < q) thresholds[k - 1] = d3.quantile(domain, k / q);\n      return scale;\n    }\n    function scale(x) {\n      if (!isNaN(x = +x)) return range[d3.bisect(thresholds, x)];\n    }\n    scale.domain = function(x) {\n      if (!arguments.length) return domain;\n      domain = x.map(d3_number).filter(d3_numeric).sort(d3_ascending);\n      return rescale();\n    };\n    scale.range = function(x) {\n      if (!arguments.length) return range;\n      range = x;\n      return rescale();\n    };\n    scale.quantiles = function() {\n      return thresholds;\n    };\n    scale.invertExtent = function(y) {\n      y = range.indexOf(y);\n      return y < 0 ? [ NaN, NaN ] : [ y > 0 ? thresholds[y - 1] : domain[0], y < thresholds.length ? thresholds[y] : domain[domain.length - 1] ];\n    };\n    scale.copy = function() {\n      return d3_scale_quantile(domain, range);\n    };\n    return rescale();\n  }\n  d3.scale.quantize = function() {\n    return d3_scale_quantize(0, 1, [ 0, 1 ]);\n  };\n  function d3_scale_quantize(x0, x1, range) {\n    var kx, i;\n    function scale(x) {\n      return range[Math.max(0, Math.min(i, Math.floor(kx * (x - x0))))];\n    }\n    function rescale() {\n      kx = range.length / (x1 - x0);\n      i = range.length - 1;\n      return scale;\n    }\n    scale.domain = function(x) {\n      if (!arguments.length) return [ x0, x1 ];\n      x0 = +x[0];\n      x1 = +x[x.length - 1];\n      return rescale();\n    };\n    scale.range = function(x) {\n      if (!arguments.length) return range;\n      range = x;\n      return rescale();\n    };\n    scale.invertExtent = function(y) {\n      y = range.indexOf(y);\n      y = y < 0 ? NaN : y / kx + x0;\n      return [ y, y + 1 / kx ];\n    };\n    scale.copy = function() {\n      return d3_scale_quantize(x0, x1, range);\n    };\n    return rescale();\n  }\n  d3.scale.threshold = function() {\n    return d3_scale_threshold([ .5 ], [ 0, 1 ]);\n  };\n  function d3_scale_threshold(domain, range) {\n    function scale(x) {\n      if (x <= x) return range[d3.bisect(domain, x)];\n    }\n    scale.domain = function(_) {\n      if (!arguments.length) return domain;\n      domain = _;\n      return scale;\n    };\n    scale.range = function(_) {\n      if (!arguments.length) return range;\n      range = _;\n      return scale;\n    };\n    scale.invertExtent = function(y) {\n      y = range.indexOf(y);\n      return [ domain[y - 1], domain[y] ];\n    };\n    scale.copy = function() {\n      return d3_scale_threshold(domain, range);\n    };\n    return scale;\n  }\n  d3.scale.identity = function() {\n    return d3_scale_identity([ 0, 1 ]);\n  };\n  function d3_scale_identity(domain) {\n    function identity(x) {\n      return +x;\n    }\n    identity.invert = identity;\n    identity.domain = identity.range = function(x) {\n      if (!arguments.length) return domain;\n      domain = x.map(identity);\n      return identity;\n    };\n    identity.ticks = function(m) {\n      return d3_scale_linearTicks(domain, m);\n    };\n    identity.tickFormat = function(m, format) {\n      return d3_scale_linearTickFormat(domain, m, format);\n    };\n    identity.copy = function() {\n      return d3_scale_identity(domain);\n    };\n    return identity;\n  }\n  d3.svg = {};\n  function d3_zero() {\n    return 0;\n  }\n  d3.svg.arc = function() {\n    var innerRadius = d3_svg_arcInnerRadius, outerRadius = d3_svg_arcOuterRadius, cornerRadius = d3_zero, padRadius = d3_svg_arcAuto, startAngle = d3_svg_arcStartAngle, endAngle = d3_svg_arcEndAngle, padAngle = d3_svg_arcPadAngle;\n    function arc() {\n      var r0 = Math.max(0, +innerRadius.apply(this, arguments)), r1 = Math.max(0, +outerRadius.apply(this, arguments)), a0 = startAngle.apply(this, arguments) - halfπ, a1 = endAngle.apply(this, arguments) - halfπ, da = Math.abs(a1 - a0), cw = a0 > a1 ? 0 : 1;\n      if (r1 < r0) rc = r1, r1 = r0, r0 = rc;\n      if (da >= τε) return circleSegment(r1, cw) + (r0 ? circleSegment(r0, 1 - cw) : \"\") + \"Z\";\n      var rc, cr, rp, ap, p0 = 0, p1 = 0, x0, y0, x1, y1, x2, y2, x3, y3, path = [];\n      if (ap = (+padAngle.apply(this, arguments) || 0) / 2) {\n        rp = padRadius === d3_svg_arcAuto ? Math.sqrt(r0 * r0 + r1 * r1) : +padRadius.apply(this, arguments);\n        if (!cw) p1 *= -1;\n        if (r1) p1 = d3_asin(rp / r1 * Math.sin(ap));\n        if (r0) p0 = d3_asin(rp / r0 * Math.sin(ap));\n      }\n      if (r1) {\n        x0 = r1 * Math.cos(a0 + p1);\n        y0 = r1 * Math.sin(a0 + p1);\n        x1 = r1 * Math.cos(a1 - p1);\n        y1 = r1 * Math.sin(a1 - p1);\n        var l1 = Math.abs(a1 - a0 - 2 * p1) <= π ? 0 : 1;\n        if (p1 && d3_svg_arcSweep(x0, y0, x1, y1) === cw ^ l1) {\n          var h1 = (a0 + a1) / 2;\n          x0 = r1 * Math.cos(h1);\n          y0 = r1 * Math.sin(h1);\n          x1 = y1 = null;\n        }\n      } else {\n        x0 = y0 = 0;\n      }\n      if (r0) {\n        x2 = r0 * Math.cos(a1 - p0);\n        y2 = r0 * Math.sin(a1 - p0);\n        x3 = r0 * Math.cos(a0 + p0);\n        y3 = r0 * Math.sin(a0 + p0);\n        var l0 = Math.abs(a0 - a1 + 2 * p0) <= π ? 0 : 1;\n        if (p0 && d3_svg_arcSweep(x2, y2, x3, y3) === 1 - cw ^ l0) {\n          var h0 = (a0 + a1) / 2;\n          x2 = r0 * Math.cos(h0);\n          y2 = r0 * Math.sin(h0);\n          x3 = y3 = null;\n        }\n      } else {\n        x2 = y2 = 0;\n      }\n      if ((rc = Math.min(Math.abs(r1 - r0) / 2, +cornerRadius.apply(this, arguments))) > .001) {\n        cr = r0 < r1 ^ cw ? 0 : 1;\n        var oc = x3 == null ? [ x2, y2 ] : x1 == null ? [ x0, y0 ] : d3_geom_polygonIntersect([ x0, y0 ], [ x3, y3 ], [ x1, y1 ], [ x2, y2 ]), ax = x0 - oc[0], ay = y0 - oc[1], bx = x1 - oc[0], by = y1 - oc[1], kc = 1 / Math.sin(Math.acos((ax * bx + ay * by) / (Math.sqrt(ax * ax + ay * ay) * Math.sqrt(bx * bx + by * by))) / 2), lc = Math.sqrt(oc[0] * oc[0] + oc[1] * oc[1]);\n        if (x1 != null) {\n          var rc1 = Math.min(rc, (r1 - lc) / (kc + 1)), t30 = d3_svg_arcCornerTangents(x3 == null ? [ x2, y2 ] : [ x3, y3 ], [ x0, y0 ], r1, rc1, cw), t12 = d3_svg_arcCornerTangents([ x1, y1 ], [ x2, y2 ], r1, rc1, cw);\n          if (rc === rc1) {\n            path.push(\"M\", t30[0], \"A\", rc1, \",\", rc1, \" 0 0,\", cr, \" \", t30[1], \"A\", r1, \",\", r1, \" 0 \", 1 - cw ^ d3_svg_arcSweep(t30[1][0], t30[1][1], t12[1][0], t12[1][1]), \",\", cw, \" \", t12[1], \"A\", rc1, \",\", rc1, \" 0 0,\", cr, \" \", t12[0]);\n          } else {\n            path.push(\"M\", t30[0], \"A\", rc1, \",\", rc1, \" 0 1,\", cr, \" \", t12[0]);\n          }\n        } else {\n          path.push(\"M\", x0, \",\", y0);\n        }\n        if (x3 != null) {\n          var rc0 = Math.min(rc, (r0 - lc) / (kc - 1)), t03 = d3_svg_arcCornerTangents([ x0, y0 ], [ x3, y3 ], r0, -rc0, cw), t21 = d3_svg_arcCornerTangents([ x2, y2 ], x1 == null ? [ x0, y0 ] : [ x1, y1 ], r0, -rc0, cw);\n          if (rc === rc0) {\n            path.push(\"L\", t21[0], \"A\", rc0, \",\", rc0, \" 0 0,\", cr, \" \", t21[1], \"A\", r0, \",\", r0, \" 0 \", cw ^ d3_svg_arcSweep(t21[1][0], t21[1][1], t03[1][0], t03[1][1]), \",\", 1 - cw, \" \", t03[1], \"A\", rc0, \",\", rc0, \" 0 0,\", cr, \" \", t03[0]);\n          } else {\n            path.push(\"L\", t21[0], \"A\", rc0, \",\", rc0, \" 0 0,\", cr, \" \", t03[0]);\n          }\n        } else {\n          path.push(\"L\", x2, \",\", y2);\n        }\n      } else {\n        path.push(\"M\", x0, \",\", y0);\n        if (x1 != null) path.push(\"A\", r1, \",\", r1, \" 0 \", l1, \",\", cw, \" \", x1, \",\", y1);\n        path.push(\"L\", x2, \",\", y2);\n        if (x3 != null) path.push(\"A\", r0, \",\", r0, \" 0 \", l0, \",\", 1 - cw, \" \", x3, \",\", y3);\n      }\n      path.push(\"Z\");\n      return path.join(\"\");\n    }\n    function circleSegment(r1, cw) {\n      return \"M0,\" + r1 + \"A\" + r1 + \",\" + r1 + \" 0 1,\" + cw + \" 0,\" + -r1 + \"A\" + r1 + \",\" + r1 + \" 0 1,\" + cw + \" 0,\" + r1;\n    }\n    arc.innerRadius = function(v) {\n      if (!arguments.length) return innerRadius;\n      innerRadius = d3_functor(v);\n      return arc;\n    };\n    arc.outerRadius = function(v) {\n      if (!arguments.length) return outerRadius;\n      outerRadius = d3_functor(v);\n      return arc;\n    };\n    arc.cornerRadius = function(v) {\n      if (!arguments.length) return cornerRadius;\n      cornerRadius = d3_functor(v);\n      return arc;\n    };\n    arc.padRadius = function(v) {\n      if (!arguments.length) return padRadius;\n      padRadius = v == d3_svg_arcAuto ? d3_svg_arcAuto : d3_functor(v);\n      return arc;\n    };\n    arc.startAngle = function(v) {\n      if (!arguments.length) return startAngle;\n      startAngle = d3_functor(v);\n      return arc;\n    };\n    arc.endAngle = function(v) {\n      if (!arguments.length) return endAngle;\n      endAngle = d3_functor(v);\n      return arc;\n    };\n    arc.padAngle = function(v) {\n      if (!arguments.length) return padAngle;\n      padAngle = d3_functor(v);\n      return arc;\n    };\n    arc.centroid = function() {\n      var r = (+innerRadius.apply(this, arguments) + +outerRadius.apply(this, arguments)) / 2, a = (+startAngle.apply(this, arguments) + +endAngle.apply(this, arguments)) / 2 - halfπ;\n      return [ Math.cos(a) * r, Math.sin(a) * r ];\n    };\n    return arc;\n  };\n  var d3_svg_arcAuto = \"auto\";\n  function d3_svg_arcInnerRadius(d) {\n    return d.innerRadius;\n  }\n  function d3_svg_arcOuterRadius(d) {\n    return d.outerRadius;\n  }\n  function d3_svg_arcStartAngle(d) {\n    return d.startAngle;\n  }\n  function d3_svg_arcEndAngle(d) {\n    return d.endAngle;\n  }\n  function d3_svg_arcPadAngle(d) {\n    return d && d.padAngle;\n  }\n  function d3_svg_arcSweep(x0, y0, x1, y1) {\n    return (x0 - x1) * y0 - (y0 - y1) * x0 > 0 ? 0 : 1;\n  }\n  function d3_svg_arcCornerTangents(p0, p1, r1, rc, cw) {\n    var x01 = p0[0] - p1[0], y01 = p0[1] - p1[1], lo = (cw ? rc : -rc) / Math.sqrt(x01 * x01 + y01 * y01), ox = lo * y01, oy = -lo * x01, x1 = p0[0] + ox, y1 = p0[1] + oy, x2 = p1[0] + ox, y2 = p1[1] + oy, x3 = (x1 + x2) / 2, y3 = (y1 + y2) / 2, dx = x2 - x1, dy = y2 - y1, d2 = dx * dx + dy * dy, r = r1 - rc, D = x1 * y2 - x2 * y1, d = (dy < 0 ? -1 : 1) * Math.sqrt(r * r * d2 - D * D), cx0 = (D * dy - dx * d) / d2, cy0 = (-D * dx - dy * d) / d2, cx1 = (D * dy + dx * d) / d2, cy1 = (-D * dx + dy * d) / d2, dx0 = cx0 - x3, dy0 = cy0 - y3, dx1 = cx1 - x3, dy1 = cy1 - y3;\n    if (dx0 * dx0 + dy0 * dy0 > dx1 * dx1 + dy1 * dy1) cx0 = cx1, cy0 = cy1;\n    return [ [ cx0 - ox, cy0 - oy ], [ cx0 * r1 / r, cy0 * r1 / r ] ];\n  }\n  function d3_svg_line(projection) {\n    var x = d3_geom_pointX, y = d3_geom_pointY, defined = d3_true, interpolate = d3_svg_lineLinear, interpolateKey = interpolate.key, tension = .7;\n    function line(data) {\n      var segments = [], points = [], i = -1, n = data.length, d, fx = d3_functor(x), fy = d3_functor(y);\n      function segment() {\n        segments.push(\"M\", interpolate(projection(points), tension));\n      }\n      while (++i < n) {\n        if (defined.call(this, d = data[i], i)) {\n          points.push([ +fx.call(this, d, i), +fy.call(this, d, i) ]);\n        } else if (points.length) {\n          segment();\n          points = [];\n        }\n      }\n      if (points.length) segment();\n      return segments.length ? segments.join(\"\") : null;\n    }\n    line.x = function(_) {\n      if (!arguments.length) return x;\n      x = _;\n      return line;\n    };\n    line.y = function(_) {\n      if (!arguments.length) return y;\n      y = _;\n      return line;\n    };\n    line.defined = function(_) {\n      if (!arguments.length) return defined;\n      defined = _;\n      return line;\n    };\n    line.interpolate = function(_) {\n      if (!arguments.length) return interpolateKey;\n      if (typeof _ === \"function\") interpolateKey = interpolate = _; else interpolateKey = (interpolate = d3_svg_lineInterpolators.get(_) || d3_svg_lineLinear).key;\n      return line;\n    };\n    line.tension = function(_) {\n      if (!arguments.length) return tension;\n      tension = _;\n      return line;\n    };\n    return line;\n  }\n  d3.svg.line = function() {\n    return d3_svg_line(d3_identity);\n  };\n  var d3_svg_lineInterpolators = d3.map({\n    linear: d3_svg_lineLinear,\n    \"linear-closed\": d3_svg_lineLinearClosed,\n    step: d3_svg_lineStep,\n    \"step-before\": d3_svg_lineStepBefore,\n    \"step-after\": d3_svg_lineStepAfter,\n    basis: d3_svg_lineBasis,\n    \"basis-open\": d3_svg_lineBasisOpen,\n    \"basis-closed\": d3_svg_lineBasisClosed,\n    bundle: d3_svg_lineBundle,\n    cardinal: d3_svg_lineCardinal,\n    \"cardinal-open\": d3_svg_lineCardinalOpen,\n    \"cardinal-closed\": d3_svg_lineCardinalClosed,\n    monotone: d3_svg_lineMonotone\n  });\n  d3_svg_lineInterpolators.forEach(function(key, value) {\n    value.key = key;\n    value.closed = /-closed$/.test(key);\n  });\n  function d3_svg_lineLinear(points) {\n    return points.join(\"L\");\n  }\n  function d3_svg_lineLinearClosed(points) {\n    return d3_svg_lineLinear(points) + \"Z\";\n  }\n  function d3_svg_lineStep(points) {\n    var i = 0, n = points.length, p = points[0], path = [ p[0], \",\", p[1] ];\n    while (++i < n) path.push(\"H\", (p[0] + (p = points[i])[0]) / 2, \"V\", p[1]);\n    if (n > 1) path.push(\"H\", p[0]);\n    return path.join(\"\");\n  }\n  function d3_svg_lineStepBefore(points) {\n    var i = 0, n = points.length, p = points[0], path = [ p[0], \",\", p[1] ];\n    while (++i < n) path.push(\"V\", (p = points[i])[1], \"H\", p[0]);\n    return path.join(\"\");\n  }\n  function d3_svg_lineStepAfter(points) {\n    var i = 0, n = points.length, p = points[0], path = [ p[0], \",\", p[1] ];\n    while (++i < n) path.push(\"H\", (p = points[i])[0], \"V\", p[1]);\n    return path.join(\"\");\n  }\n  function d3_svg_lineCardinalOpen(points, tension) {\n    return points.length < 4 ? d3_svg_lineLinear(points) : points[1] + d3_svg_lineHermite(points.slice(1, -1), d3_svg_lineCardinalTangents(points, tension));\n  }\n  function d3_svg_lineCardinalClosed(points, tension) {\n    return points.length < 3 ? d3_svg_lineLinear(points) : points[0] + d3_svg_lineHermite((points.push(points[0]), \n    points), d3_svg_lineCardinalTangents([ points[points.length - 2] ].concat(points, [ points[1] ]), tension));\n  }\n  function d3_svg_lineCardinal(points, tension) {\n    return points.length < 3 ? d3_svg_lineLinear(points) : points[0] + d3_svg_lineHermite(points, d3_svg_lineCardinalTangents(points, tension));\n  }\n  function d3_svg_lineHermite(points, tangents) {\n    if (tangents.length < 1 || points.length != tangents.length && points.length != tangents.length + 2) {\n      return d3_svg_lineLinear(points);\n    }\n    var quad = points.length != tangents.length, path = \"\", p0 = points[0], p = points[1], t0 = tangents[0], t = t0, pi = 1;\n    if (quad) {\n      path += \"Q\" + (p[0] - t0[0] * 2 / 3) + \",\" + (p[1] - t0[1] * 2 / 3) + \",\" + p[0] + \",\" + p[1];\n      p0 = points[1];\n      pi = 2;\n    }\n    if (tangents.length > 1) {\n      t = tangents[1];\n      p = points[pi];\n      pi++;\n      path += \"C\" + (p0[0] + t0[0]) + \",\" + (p0[1] + t0[1]) + \",\" + (p[0] - t[0]) + \",\" + (p[1] - t[1]) + \",\" + p[0] + \",\" + p[1];\n      for (var i = 2; i < tangents.length; i++, pi++) {\n        p = points[pi];\n        t = tangents[i];\n        path += \"S\" + (p[0] - t[0]) + \",\" + (p[1] - t[1]) + \",\" + p[0] + \",\" + p[1];\n      }\n    }\n    if (quad) {\n      var lp = points[pi];\n      path += \"Q\" + (p[0] + t[0] * 2 / 3) + \",\" + (p[1] + t[1] * 2 / 3) + \",\" + lp[0] + \",\" + lp[1];\n    }\n    return path;\n  }\n  function d3_svg_lineCardinalTangents(points, tension) {\n    var tangents = [], a = (1 - tension) / 2, p0, p1 = points[0], p2 = points[1], i = 1, n = points.length;\n    while (++i < n) {\n      p0 = p1;\n      p1 = p2;\n      p2 = points[i];\n      tangents.push([ a * (p2[0] - p0[0]), a * (p2[1] - p0[1]) ]);\n    }\n    return tangents;\n  }\n  function d3_svg_lineBasis(points) {\n    if (points.length < 3) return d3_svg_lineLinear(points);\n    var i = 1, n = points.length, pi = points[0], x0 = pi[0], y0 = pi[1], px = [ x0, x0, x0, (pi = points[1])[0] ], py = [ y0, y0, y0, pi[1] ], path = [ x0, \",\", y0, \"L\", d3_svg_lineDot4(d3_svg_lineBasisBezier3, px), \",\", d3_svg_lineDot4(d3_svg_lineBasisBezier3, py) ];\n    points.push(points[n - 1]);\n    while (++i <= n) {\n      pi = points[i];\n      px.shift();\n      px.push(pi[0]);\n      py.shift();\n      py.push(pi[1]);\n      d3_svg_lineBasisBezier(path, px, py);\n    }\n    points.pop();\n    path.push(\"L\", pi);\n    return path.join(\"\");\n  }\n  function d3_svg_lineBasisOpen(points) {\n    if (points.length < 4) return d3_svg_lineLinear(points);\n    var path = [], i = -1, n = points.length, pi, px = [ 0 ], py = [ 0 ];\n    while (++i < 3) {\n      pi = points[i];\n      px.push(pi[0]);\n      py.push(pi[1]);\n    }\n    path.push(d3_svg_lineDot4(d3_svg_lineBasisBezier3, px) + \",\" + d3_svg_lineDot4(d3_svg_lineBasisBezier3, py));\n    --i;\n    while (++i < n) {\n      pi = points[i];\n      px.shift();\n      px.push(pi[0]);\n      py.shift();\n      py.push(pi[1]);\n      d3_svg_lineBasisBezier(path, px, py);\n    }\n    return path.join(\"\");\n  }\n  function d3_svg_lineBasisClosed(points) {\n    var path, i = -1, n = points.length, m = n + 4, pi, px = [], py = [];\n    while (++i < 4) {\n      pi = points[i % n];\n      px.push(pi[0]);\n      py.push(pi[1]);\n    }\n    path = [ d3_svg_lineDot4(d3_svg_lineBasisBezier3, px), \",\", d3_svg_lineDot4(d3_svg_lineBasisBezier3, py) ];\n    --i;\n    while (++i < m) {\n      pi = points[i % n];\n      px.shift();\n      px.push(pi[0]);\n      py.shift();\n      py.push(pi[1]);\n      d3_svg_lineBasisBezier(path, px, py);\n    }\n    return path.join(\"\");\n  }\n  function d3_svg_lineBundle(points, tension) {\n    var n = points.length - 1;\n    if (n) {\n      var x0 = points[0][0], y0 = points[0][1], dx = points[n][0] - x0, dy = points[n][1] - y0, i = -1, p, t;\n      while (++i <= n) {\n        p = points[i];\n        t = i / n;\n        p[0] = tension * p[0] + (1 - tension) * (x0 + t * dx);\n        p[1] = tension * p[1] + (1 - tension) * (y0 + t * dy);\n      }\n    }\n    return d3_svg_lineBasis(points);\n  }\n  function d3_svg_lineDot4(a, b) {\n    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\n  }\n  var d3_svg_lineBasisBezier1 = [ 0, 2 / 3, 1 / 3, 0 ], d3_svg_lineBasisBezier2 = [ 0, 1 / 3, 2 / 3, 0 ], d3_svg_lineBasisBezier3 = [ 0, 1 / 6, 2 / 3, 1 / 6 ];\n  function d3_svg_lineBasisBezier(path, x, y) {\n    path.push(\"C\", d3_svg_lineDot4(d3_svg_lineBasisBezier1, x), \",\", d3_svg_lineDot4(d3_svg_lineBasisBezier1, y), \",\", d3_svg_lineDot4(d3_svg_lineBasisBezier2, x), \",\", d3_svg_lineDot4(d3_svg_lineBasisBezier2, y), \",\", d3_svg_lineDot4(d3_svg_lineBasisBezier3, x), \",\", d3_svg_lineDot4(d3_svg_lineBasisBezier3, y));\n  }\n  function d3_svg_lineSlope(p0, p1) {\n    return (p1[1] - p0[1]) / (p1[0] - p0[0]);\n  }\n  function d3_svg_lineFiniteDifferences(points) {\n    var i = 0, j = points.length - 1, m = [], p0 = points[0], p1 = points[1], d = m[0] = d3_svg_lineSlope(p0, p1);\n    while (++i < j) {\n      m[i] = (d + (d = d3_svg_lineSlope(p0 = p1, p1 = points[i + 1]))) / 2;\n    }\n    m[i] = d;\n    return m;\n  }\n  function d3_svg_lineMonotoneTangents(points) {\n    var tangents = [], d, a, b, s, m = d3_svg_lineFiniteDifferences(points), i = -1, j = points.length - 1;\n    while (++i < j) {\n      d = d3_svg_lineSlope(points[i], points[i + 1]);\n      if (abs(d) < ε) {\n        m[i] = m[i + 1] = 0;\n      } else {\n        a = m[i] / d;\n        b = m[i + 1] / d;\n        s = a * a + b * b;\n        if (s > 9) {\n          s = d * 3 / Math.sqrt(s);\n          m[i] = s * a;\n          m[i + 1] = s * b;\n        }\n      }\n    }\n    i = -1;\n    while (++i <= j) {\n      s = (points[Math.min(j, i + 1)][0] - points[Math.max(0, i - 1)][0]) / (6 * (1 + m[i] * m[i]));\n      tangents.push([ s || 0, m[i] * s || 0 ]);\n    }\n    return tangents;\n  }\n  function d3_svg_lineMonotone(points) {\n    return points.length < 3 ? d3_svg_lineLinear(points) : points[0] + d3_svg_lineHermite(points, d3_svg_lineMonotoneTangents(points));\n  }\n  d3.svg.line.radial = function() {\n    var line = d3_svg_line(d3_svg_lineRadial);\n    line.radius = line.x, delete line.x;\n    line.angle = line.y, delete line.y;\n    return line;\n  };\n  function d3_svg_lineRadial(points) {\n    var point, i = -1, n = points.length, r, a;\n    while (++i < n) {\n      point = points[i];\n      r = point[0];\n      a = point[1] - halfπ;\n      point[0] = r * Math.cos(a);\n      point[1] = r * Math.sin(a);\n    }\n    return points;\n  }\n  function d3_svg_area(projection) {\n    var x0 = d3_geom_pointX, x1 = d3_geom_pointX, y0 = 0, y1 = d3_geom_pointY, defined = d3_true, interpolate = d3_svg_lineLinear, interpolateKey = interpolate.key, interpolateReverse = interpolate, L = \"L\", tension = .7;\n    function area(data) {\n      var segments = [], points0 = [], points1 = [], i = -1, n = data.length, d, fx0 = d3_functor(x0), fy0 = d3_functor(y0), fx1 = x0 === x1 ? function() {\n        return x;\n      } : d3_functor(x1), fy1 = y0 === y1 ? function() {\n        return y;\n      } : d3_functor(y1), x, y;\n      function segment() {\n        segments.push(\"M\", interpolate(projection(points1), tension), L, interpolateReverse(projection(points0.reverse()), tension), \"Z\");\n      }\n      while (++i < n) {\n        if (defined.call(this, d = data[i], i)) {\n          points0.push([ x = +fx0.call(this, d, i), y = +fy0.call(this, d, i) ]);\n          points1.push([ +fx1.call(this, d, i), +fy1.call(this, d, i) ]);\n        } else if (points0.length) {\n          segment();\n          points0 = [];\n          points1 = [];\n        }\n      }\n      if (points0.length) segment();\n      return segments.length ? segments.join(\"\") : null;\n    }\n    area.x = function(_) {\n      if (!arguments.length) return x1;\n      x0 = x1 = _;\n      return area;\n    };\n    area.x0 = function(_) {\n      if (!arguments.length) return x0;\n      x0 = _;\n      return area;\n    };\n    area.x1 = function(_) {\n      if (!arguments.length) return x1;\n      x1 = _;\n      return area;\n    };\n    area.y = function(_) {\n      if (!arguments.length) return y1;\n      y0 = y1 = _;\n      return area;\n    };\n    area.y0 = function(_) {\n      if (!arguments.length) return y0;\n      y0 = _;\n      return area;\n    };\n    area.y1 = function(_) {\n      if (!arguments.length) return y1;\n      y1 = _;\n      return area;\n    };\n    area.defined = function(_) {\n      if (!arguments.length) return defined;\n      defined = _;\n      return area;\n    };\n    area.interpolate = function(_) {\n      if (!arguments.length) return interpolateKey;\n      if (typeof _ === \"function\") interpolateKey = interpolate = _; else interpolateKey = (interpolate = d3_svg_lineInterpolators.get(_) || d3_svg_lineLinear).key;\n      interpolateReverse = interpolate.reverse || interpolate;\n      L = interpolate.closed ? \"M\" : \"L\";\n      return area;\n    };\n    area.tension = function(_) {\n      if (!arguments.length) return tension;\n      tension = _;\n      return area;\n    };\n    return area;\n  }\n  d3_svg_lineStepBefore.reverse = d3_svg_lineStepAfter;\n  d3_svg_lineStepAfter.reverse = d3_svg_lineStepBefore;\n  d3.svg.area = function() {\n    return d3_svg_area(d3_identity);\n  };\n  d3.svg.area.radial = function() {\n    var area = d3_svg_area(d3_svg_lineRadial);\n    area.radius = area.x, delete area.x;\n    area.innerRadius = area.x0, delete area.x0;\n    area.outerRadius = area.x1, delete area.x1;\n    area.angle = area.y, delete area.y;\n    area.startAngle = area.y0, delete area.y0;\n    area.endAngle = area.y1, delete area.y1;\n    return area;\n  };\n  d3.svg.chord = function() {\n    var source = d3_source, target = d3_target, radius = d3_svg_chordRadius, startAngle = d3_svg_arcStartAngle, endAngle = d3_svg_arcEndAngle;\n    function chord(d, i) {\n      var s = subgroup(this, source, d, i), t = subgroup(this, target, d, i);\n      return \"M\" + s.p0 + arc(s.r, s.p1, s.a1 - s.a0) + (equals(s, t) ? curve(s.r, s.p1, s.r, s.p0) : curve(s.r, s.p1, t.r, t.p0) + arc(t.r, t.p1, t.a1 - t.a0) + curve(t.r, t.p1, s.r, s.p0)) + \"Z\";\n    }\n    function subgroup(self, f, d, i) {\n      var subgroup = f.call(self, d, i), r = radius.call(self, subgroup, i), a0 = startAngle.call(self, subgroup, i) - halfπ, a1 = endAngle.call(self, subgroup, i) - halfπ;\n      return {\n        r: r,\n        a0: a0,\n        a1: a1,\n        p0: [ r * Math.cos(a0), r * Math.sin(a0) ],\n        p1: [ r * Math.cos(a1), r * Math.sin(a1) ]\n      };\n    }\n    function equals(a, b) {\n      return a.a0 == b.a0 && a.a1 == b.a1;\n    }\n    function arc(r, p, a) {\n      return \"A\" + r + \",\" + r + \" 0 \" + +(a > π) + \",1 \" + p;\n    }\n    function curve(r0, p0, r1, p1) {\n      return \"Q 0,0 \" + p1;\n    }\n    chord.radius = function(v) {\n      if (!arguments.length) return radius;\n      radius = d3_functor(v);\n      return chord;\n    };\n    chord.source = function(v) {\n      if (!arguments.length) return source;\n      source = d3_functor(v);\n      return chord;\n    };\n    chord.target = function(v) {\n      if (!arguments.length) return target;\n      target = d3_functor(v);\n      return chord;\n    };\n    chord.startAngle = function(v) {\n      if (!arguments.length) return startAngle;\n      startAngle = d3_functor(v);\n      return chord;\n    };\n    chord.endAngle = function(v) {\n      if (!arguments.length) return endAngle;\n      endAngle = d3_functor(v);\n      return chord;\n    };\n    return chord;\n  };\n  function d3_svg_chordRadius(d) {\n    return d.radius;\n  }\n  d3.svg.diagonal = function() {\n    var source = d3_source, target = d3_target, projection = d3_svg_diagonalProjection;\n    function diagonal(d, i) {\n      var p0 = source.call(this, d, i), p3 = target.call(this, d, i), m = (p0.y + p3.y) / 2, p = [ p0, {\n        x: p0.x,\n        y: m\n      }, {\n        x: p3.x,\n        y: m\n      }, p3 ];\n      p = p.map(projection);\n      return \"M\" + p[0] + \"C\" + p[1] + \" \" + p[2] + \" \" + p[3];\n    }\n    diagonal.source = function(x) {\n      if (!arguments.length) return source;\n      source = d3_functor(x);\n      return diagonal;\n    };\n    diagonal.target = function(x) {\n      if (!arguments.length) return target;\n      target = d3_functor(x);\n      return diagonal;\n    };\n    diagonal.projection = function(x) {\n      if (!arguments.length) return projection;\n      projection = x;\n      return diagonal;\n    };\n    return diagonal;\n  };\n  function d3_svg_diagonalProjection(d) {\n    return [ d.x, d.y ];\n  }\n  d3.svg.diagonal.radial = function() {\n    var diagonal = d3.svg.diagonal(), projection = d3_svg_diagonalProjection, projection_ = diagonal.projection;\n    diagonal.projection = function(x) {\n      return arguments.length ? projection_(d3_svg_diagonalRadialProjection(projection = x)) : projection;\n    };\n    return diagonal;\n  };\n  function d3_svg_diagonalRadialProjection(projection) {\n    return function() {\n      var d = projection.apply(this, arguments), r = d[0], a = d[1] - halfπ;\n      return [ r * Math.cos(a), r * Math.sin(a) ];\n    };\n  }\n  d3.svg.symbol = function() {\n    var type = d3_svg_symbolType, size = d3_svg_symbolSize;\n    function symbol(d, i) {\n      return (d3_svg_symbols.get(type.call(this, d, i)) || d3_svg_symbolCircle)(size.call(this, d, i));\n    }\n    symbol.type = function(x) {\n      if (!arguments.length) return type;\n      type = d3_functor(x);\n      return symbol;\n    };\n    symbol.size = function(x) {\n      if (!arguments.length) return size;\n      size = d3_functor(x);\n      return symbol;\n    };\n    return symbol;\n  };\n  function d3_svg_symbolSize() {\n    return 64;\n  }\n  function d3_svg_symbolType() {\n    return \"circle\";\n  }\n  function d3_svg_symbolCircle(size) {\n    var r = Math.sqrt(size / π);\n    return \"M0,\" + r + \"A\" + r + \",\" + r + \" 0 1,1 0,\" + -r + \"A\" + r + \",\" + r + \" 0 1,1 0,\" + r + \"Z\";\n  }\n  var d3_svg_symbols = d3.map({\n    circle: d3_svg_symbolCircle,\n    cross: function(size) {\n      var r = Math.sqrt(size / 5) / 2;\n      return \"M\" + -3 * r + \",\" + -r + \"H\" + -r + \"V\" + -3 * r + \"H\" + r + \"V\" + -r + \"H\" + 3 * r + \"V\" + r + \"H\" + r + \"V\" + 3 * r + \"H\" + -r + \"V\" + r + \"H\" + -3 * r + \"Z\";\n    },\n    diamond: function(size) {\n      var ry = Math.sqrt(size / (2 * d3_svg_symbolTan30)), rx = ry * d3_svg_symbolTan30;\n      return \"M0,\" + -ry + \"L\" + rx + \",0\" + \" 0,\" + ry + \" \" + -rx + \",0\" + \"Z\";\n    },\n    square: function(size) {\n      var r = Math.sqrt(size) / 2;\n      return \"M\" + -r + \",\" + -r + \"L\" + r + \",\" + -r + \" \" + r + \",\" + r + \" \" + -r + \",\" + r + \"Z\";\n    },\n    \"triangle-down\": function(size) {\n      var rx = Math.sqrt(size / d3_svg_symbolSqrt3), ry = rx * d3_svg_symbolSqrt3 / 2;\n      return \"M0,\" + ry + \"L\" + rx + \",\" + -ry + \" \" + -rx + \",\" + -ry + \"Z\";\n    },\n    \"triangle-up\": function(size) {\n      var rx = Math.sqrt(size / d3_svg_symbolSqrt3), ry = rx * d3_svg_symbolSqrt3 / 2;\n      return \"M0,\" + -ry + \"L\" + rx + \",\" + ry + \" \" + -rx + \",\" + ry + \"Z\";\n    }\n  });\n  d3.svg.symbolTypes = d3_svg_symbols.keys();\n  var d3_svg_symbolSqrt3 = Math.sqrt(3), d3_svg_symbolTan30 = Math.tan(30 * d3_radians);\n  function d3_transition(groups, namespace, id) {\n    d3_subclass(groups, d3_transitionPrototype);\n    groups.namespace = namespace;\n    groups.id = id;\n    return groups;\n  }\n  var d3_transitionPrototype = [], d3_transitionId = 0, d3_transitionInheritId, d3_transitionInherit;\n  d3_transitionPrototype.call = d3_selectionPrototype.call;\n  d3_transitionPrototype.empty = d3_selectionPrototype.empty;\n  d3_transitionPrototype.node = d3_selectionPrototype.node;\n  d3_transitionPrototype.size = d3_selectionPrototype.size;\n  d3.transition = function(selection) {\n    return arguments.length ? d3_transitionInheritId ? selection.transition() : selection : d3_selectionRoot.transition();\n  };\n  d3.transition.prototype = d3_transitionPrototype;\n  d3_transitionPrototype.select = function(selector) {\n    var id = this.id, ns = this.namespace, subgroups = [], subgroup, subnode, node;\n    selector = d3_selection_selector(selector);\n    for (var j = -1, m = this.length; ++j < m; ) {\n      subgroups.push(subgroup = []);\n      for (var group = this[j], i = -1, n = group.length; ++i < n; ) {\n        if ((node = group[i]) && (subnode = selector.call(node, node.__data__, i, j))) {\n          if (\"__data__\" in node) subnode.__data__ = node.__data__;\n          d3_transitionNode(subnode, i, ns, id, node[ns][id]);\n          subgroup.push(subnode);\n        } else {\n          subgroup.push(null);\n        }\n      }\n    }\n    return d3_transition(subgroups, ns, id);\n  };\n  d3_transitionPrototype.selectAll = function(selector) {\n    var id = this.id, ns = this.namespace, subgroups = [], subgroup, subnodes, node, subnode, transition;\n    selector = d3_selection_selectorAll(selector);\n    for (var j = -1, m = this.length; ++j < m; ) {\n      for (var group = this[j], i = -1, n = group.length; ++i < n; ) {\n        if (node = group[i]) {\n          transition = node[ns][id];\n          subnodes = selector.call(node, node.__data__, i, j);\n          subgroups.push(subgroup = []);\n          for (var k = -1, o = subnodes.length; ++k < o; ) {\n            if (subnode = subnodes[k]) d3_transitionNode(subnode, k, ns, id, transition);\n            subgroup.push(subnode);\n          }\n        }\n      }\n    }\n    return d3_transition(subgroups, ns, id);\n  };\n  d3_transitionPrototype.filter = function(filter) {\n    var subgroups = [], subgroup, group, node;\n    if (typeof filter !== \"function\") filter = d3_selection_filter(filter);\n    for (var j = 0, m = this.length; j < m; j++) {\n      subgroups.push(subgroup = []);\n      for (var group = this[j], i = 0, n = group.length; i < n; i++) {\n        if ((node = group[i]) && filter.call(node, node.__data__, i, j)) {\n          subgroup.push(node);\n        }\n      }\n    }\n    return d3_transition(subgroups, this.namespace, this.id);\n  };\n  d3_transitionPrototype.tween = function(name, tween) {\n    var id = this.id, ns = this.namespace;\n    if (arguments.length < 2) return this.node()[ns][id].tween.get(name);\n    return d3_selection_each(this, tween == null ? function(node) {\n      node[ns][id].tween.remove(name);\n    } : function(node) {\n      node[ns][id].tween.set(name, tween);\n    });\n  };\n  function d3_transition_tween(groups, name, value, tween) {\n    var id = groups.id, ns = groups.namespace;\n    return d3_selection_each(groups, typeof value === \"function\" ? function(node, i, j) {\n      node[ns][id].tween.set(name, tween(value.call(node, node.__data__, i, j)));\n    } : (value = tween(value), function(node) {\n      node[ns][id].tween.set(name, value);\n    }));\n  }\n  d3_transitionPrototype.attr = function(nameNS, value) {\n    if (arguments.length < 2) {\n      for (value in nameNS) this.attr(value, nameNS[value]);\n      return this;\n    }\n    var interpolate = nameNS == \"transform\" ? d3_interpolateTransform : d3_interpolate, name = d3.ns.qualify(nameNS);\n    function attrNull() {\n      this.removeAttribute(name);\n    }\n    function attrNullNS() {\n      this.removeAttributeNS(name.space, name.local);\n    }\n    function attrTween(b) {\n      return b == null ? attrNull : (b += \"\", function() {\n        var a = this.getAttribute(name), i;\n        return a !== b && (i = interpolate(a, b), function(t) {\n          this.setAttribute(name, i(t));\n        });\n      });\n    }\n    function attrTweenNS(b) {\n      return b == null ? attrNullNS : (b += \"\", function() {\n        var a = this.getAttributeNS(name.space, name.local), i;\n        return a !== b && (i = interpolate(a, b), function(t) {\n          this.setAttributeNS(name.space, name.local, i(t));\n        });\n      });\n    }\n    return d3_transition_tween(this, \"attr.\" + nameNS, value, name.local ? attrTweenNS : attrTween);\n  };\n  d3_transitionPrototype.attrTween = function(nameNS, tween) {\n    var name = d3.ns.qualify(nameNS);\n    function attrTween(d, i) {\n      var f = tween.call(this, d, i, this.getAttribute(name));\n      return f && function(t) {\n        this.setAttribute(name, f(t));\n      };\n    }\n    function attrTweenNS(d, i) {\n      var f = tween.call(this, d, i, this.getAttributeNS(name.space, name.local));\n      return f && function(t) {\n        this.setAttributeNS(name.space, name.local, f(t));\n      };\n    }\n    return this.tween(\"attr.\" + nameNS, name.local ? attrTweenNS : attrTween);\n  };\n  d3_transitionPrototype.style = function(name, value, priority) {\n    var n = arguments.length;\n    if (n < 3) {\n      if (typeof name !== \"string\") {\n        if (n < 2) value = \"\";\n        for (priority in name) this.style(priority, name[priority], value);\n        return this;\n      }\n      priority = \"\";\n    }\n    function styleNull() {\n      this.style.removeProperty(name);\n    }\n    function styleString(b) {\n      return b == null ? styleNull : (b += \"\", function() {\n        var a = d3_window.getComputedStyle(this, null).getPropertyValue(name), i;\n        return a !== b && (i = d3_interpolate(a, b), function(t) {\n          this.style.setProperty(name, i(t), priority);\n        });\n      });\n    }\n    return d3_transition_tween(this, \"style.\" + name, value, styleString);\n  };\n  d3_transitionPrototype.styleTween = function(name, tween, priority) {\n    if (arguments.length < 3) priority = \"\";\n    function styleTween(d, i) {\n      var f = tween.call(this, d, i, d3_window.getComputedStyle(this, null).getPropertyValue(name));\n      return f && function(t) {\n        this.style.setProperty(name, f(t), priority);\n      };\n    }\n    return this.tween(\"style.\" + name, styleTween);\n  };\n  d3_transitionPrototype.text = function(value) {\n    return d3_transition_tween(this, \"text\", value, d3_transition_text);\n  };\n  function d3_transition_text(b) {\n    if (b == null) b = \"\";\n    return function() {\n      this.textContent = b;\n    };\n  }\n  d3_transitionPrototype.remove = function() {\n    var ns = this.namespace;\n    return this.each(\"end.transition\", function() {\n      var p;\n      if (this[ns].count < 2 && (p = this.parentNode)) p.removeChild(this);\n    });\n  };\n  d3_transitionPrototype.ease = function(value) {\n    var id = this.id, ns = this.namespace;\n    if (arguments.length < 1) return this.node()[ns][id].ease;\n    if (typeof value !== \"function\") value = d3.ease.apply(d3, arguments);\n    return d3_selection_each(this, function(node) {\n      node[ns][id].ease = value;\n    });\n  };\n  d3_transitionPrototype.delay = function(value) {\n    var id = this.id, ns = this.namespace;\n    if (arguments.length < 1) return this.node()[ns][id].delay;\n    return d3_selection_each(this, typeof value === \"function\" ? function(node, i, j) {\n      node[ns][id].delay = +value.call(node, node.__data__, i, j);\n    } : (value = +value, function(node) {\n      node[ns][id].delay = value;\n    }));\n  };\n  d3_transitionPrototype.duration = function(value) {\n    var id = this.id, ns = this.namespace;\n    if (arguments.length < 1) return this.node()[ns][id].duration;\n    return d3_selection_each(this, typeof value === \"function\" ? function(node, i, j) {\n      node[ns][id].duration = Math.max(1, value.call(node, node.__data__, i, j));\n    } : (value = Math.max(1, value), function(node) {\n      node[ns][id].duration = value;\n    }));\n  };\n  d3_transitionPrototype.each = function(type, listener) {\n    var id = this.id, ns = this.namespace;\n    if (arguments.length < 2) {\n      var inherit = d3_transitionInherit, inheritId = d3_transitionInheritId;\n      d3_transitionInheritId = id;\n      d3_selection_each(this, function(node, i, j) {\n        d3_transitionInherit = node[ns][id];\n        type.call(node, node.__data__, i, j);\n      });\n      d3_transitionInherit = inherit;\n      d3_transitionInheritId = inheritId;\n    } else {\n      d3_selection_each(this, function(node) {\n        var transition = node[ns][id];\n        (transition.event || (transition.event = d3.dispatch(\"start\", \"end\", \"interrupt\"))).on(type, listener);\n      });\n    }\n    return this;\n  };\n  d3_transitionPrototype.transition = function() {\n    var id0 = this.id, id1 = ++d3_transitionId, ns = this.namespace, subgroups = [], subgroup, group, node, transition;\n    for (var j = 0, m = this.length; j < m; j++) {\n      subgroups.push(subgroup = []);\n      for (var group = this[j], i = 0, n = group.length; i < n; i++) {\n        if (node = group[i]) {\n          transition = node[ns][id0];\n          d3_transitionNode(node, i, ns, id1, {\n            time: transition.time,\n            ease: transition.ease,\n            delay: transition.delay + transition.duration,\n            duration: transition.duration\n          });\n        }\n        subgroup.push(node);\n      }\n    }\n    return d3_transition(subgroups, ns, id1);\n  };\n  function d3_transitionNamespace(name) {\n    return name == null ? \"__transition__\" : \"__transition_\" + name + \"__\";\n  }\n  function d3_transitionNode(node, i, namespace, id, inherit) {\n    var lock = node[namespace] || (node[namespace] = {\n      active: 0,\n      count: 0\n    }), transition = lock[id];\n    if (!transition) {\n      var time = inherit.time;\n      transition = lock[id] = {\n        tween: new d3_Map(),\n        time: time,\n        delay: inherit.delay,\n        duration: inherit.duration,\n        ease: inherit.ease\n      };\n      inherit = null;\n      ++lock.count;\n      d3.timer(function(elapsed) {\n        var d = node.__data__, delay = transition.delay, duration, ease, timer = d3_timer_active, tweened = [];\n        timer.t = delay + time;\n        if (delay <= elapsed) return start(elapsed - delay);\n        timer.c = start;\n        function start(elapsed) {\n          if (lock.active > id) return stop(false);\n          lock.active = id;\n          transition.event && transition.event.start.call(node, d, i);\n          transition.tween.forEach(function(key, value) {\n            if (value = value.call(node, d, i)) {\n              tweened.push(value);\n            }\n          });\n          ease = transition.ease;\n          duration = transition.duration;\n          d3.timer(function() {\n            timer.c = tick(elapsed || 1) ? d3_true : tick;\n            return 1;\n          }, 0, time);\n        }\n        function tick(elapsed) {\n          if (lock.active !== id) return stop(false);\n          var t = elapsed / duration, e = ease(t), n = tweened.length;\n          while (n > 0) {\n            tweened[--n].call(node, e);\n          }\n          if (t >= 1) return stop(true);\n        }\n        function stop(end) {\n          if (transition.event) transition.event[end ? \"end\" : \"interrupt\"].call(node, d, i);\n          if (--lock.count) delete lock[id]; else delete node[namespace];\n          return 1;\n        }\n      }, 0, time);\n    }\n  }\n  d3.svg.axis = function() {\n    var scale = d3.scale.linear(), orient = d3_svg_axisDefaultOrient, innerTickSize = 6, outerTickSize = 6, tickPadding = 3, tickArguments_ = [ 10 ], tickValues = null, tickFormat_;\n    function axis(g) {\n      g.each(function() {\n        var g = d3.select(this);\n        var scale0 = this.__chart__ || scale, scale1 = this.__chart__ = scale.copy();\n        var ticks = tickValues == null ? scale1.ticks ? scale1.ticks.apply(scale1, tickArguments_) : scale1.domain() : tickValues, tickFormat = tickFormat_ == null ? scale1.tickFormat ? scale1.tickFormat.apply(scale1, tickArguments_) : d3_identity : tickFormat_, tick = g.selectAll(\".tick\").data(ticks, scale1), tickEnter = tick.enter().insert(\"g\", \".domain\").attr(\"class\", \"tick\").style(\"opacity\", ε), tickExit = d3.transition(tick.exit()).style(\"opacity\", ε).remove(), tickUpdate = d3.transition(tick.order()).style(\"opacity\", 1), tickSpacing = Math.max(innerTickSize, 0) + tickPadding, tickTransform;\n        var range = d3_scaleRange(scale1), path = g.selectAll(\".domain\").data([ 0 ]), pathUpdate = (path.enter().append(\"path\").attr(\"class\", \"domain\"), \n        d3.transition(path));\n        tickEnter.append(\"line\");\n        tickEnter.append(\"text\");\n        var lineEnter = tickEnter.select(\"line\"), lineUpdate = tickUpdate.select(\"line\"), text = tick.select(\"text\").text(tickFormat), textEnter = tickEnter.select(\"text\"), textUpdate = tickUpdate.select(\"text\"), sign = orient === \"top\" || orient === \"left\" ? -1 : 1, x1, x2, y1, y2;\n        if (orient === \"bottom\" || orient === \"top\") {\n          tickTransform = d3_svg_axisX, x1 = \"x\", y1 = \"y\", x2 = \"x2\", y2 = \"y2\";\n          text.attr(\"dy\", sign < 0 ? \"0em\" : \".71em\").style(\"text-anchor\", \"middle\");\n          pathUpdate.attr(\"d\", \"M\" + range[0] + \",\" + sign * outerTickSize + \"V0H\" + range[1] + \"V\" + sign * outerTickSize);\n        } else {\n          tickTransform = d3_svg_axisY, x1 = \"y\", y1 = \"x\", x2 = \"y2\", y2 = \"x2\";\n          text.attr(\"dy\", \".32em\").style(\"text-anchor\", sign < 0 ? \"end\" : \"start\");\n          pathUpdate.attr(\"d\", \"M\" + sign * outerTickSize + \",\" + range[0] + \"H0V\" + range[1] + \"H\" + sign * outerTickSize);\n        }\n        lineEnter.attr(y2, sign * innerTickSize);\n        textEnter.attr(y1, sign * tickSpacing);\n        lineUpdate.attr(x2, 0).attr(y2, sign * innerTickSize);\n        textUpdate.attr(x1, 0).attr(y1, sign * tickSpacing);\n        if (scale1.rangeBand) {\n          var x = scale1, dx = x.rangeBand() / 2;\n          scale0 = scale1 = function(d) {\n            return x(d) + dx;\n          };\n        } else if (scale0.rangeBand) {\n          scale0 = scale1;\n        } else {\n          tickExit.call(tickTransform, scale1, scale0);\n        }\n        tickEnter.call(tickTransform, scale0, scale1);\n        tickUpdate.call(tickTransform, scale1, scale1);\n      });\n    }\n    axis.scale = function(x) {\n      if (!arguments.length) return scale;\n      scale = x;\n      return axis;\n    };\n    axis.orient = function(x) {\n      if (!arguments.length) return orient;\n      orient = x in d3_svg_axisOrients ? x + \"\" : d3_svg_axisDefaultOrient;\n      return axis;\n    };\n    axis.ticks = function() {\n      if (!arguments.length) return tickArguments_;\n      tickArguments_ = arguments;\n      return axis;\n    };\n    axis.tickValues = function(x) {\n      if (!arguments.length) return tickValues;\n      tickValues = x;\n      return axis;\n    };\n    axis.tickFormat = function(x) {\n      if (!arguments.length) return tickFormat_;\n      tickFormat_ = x;\n      return axis;\n    };\n    axis.tickSize = function(x) {\n      var n = arguments.length;\n      if (!n) return innerTickSize;\n      innerTickSize = +x;\n      outerTickSize = +arguments[n - 1];\n      return axis;\n    };\n    axis.innerTickSize = function(x) {\n      if (!arguments.length) return innerTickSize;\n      innerTickSize = +x;\n      return axis;\n    };\n    axis.outerTickSize = function(x) {\n      if (!arguments.length) return outerTickSize;\n      outerTickSize = +x;\n      return axis;\n    };\n    axis.tickPadding = function(x) {\n      if (!arguments.length) return tickPadding;\n      tickPadding = +x;\n      return axis;\n    };\n    axis.tickSubdivide = function() {\n      return arguments.length && axis;\n    };\n    return axis;\n  };\n  var d3_svg_axisDefaultOrient = \"bottom\", d3_svg_axisOrients = {\n    top: 1,\n    right: 1,\n    bottom: 1,\n    left: 1\n  };\n  function d3_svg_axisX(selection, x0, x1) {\n    selection.attr(\"transform\", function(d) {\n      var v0 = x0(d);\n      return \"translate(\" + (isFinite(v0) ? v0 : x1(d)) + \",0)\";\n    });\n  }\n  function d3_svg_axisY(selection, y0, y1) {\n    selection.attr(\"transform\", function(d) {\n      var v0 = y0(d);\n      return \"translate(0,\" + (isFinite(v0) ? v0 : y1(d)) + \")\";\n    });\n  }\n  d3.svg.brush = function() {\n    var event = d3_eventDispatch(brush, \"brushstart\", \"brush\", \"brushend\"), x = null, y = null, xExtent = [ 0, 0 ], yExtent = [ 0, 0 ], xExtentDomain, yExtentDomain, xClamp = true, yClamp = true, resizes = d3_svg_brushResizes[0];\n    function brush(g) {\n      g.each(function() {\n        var g = d3.select(this).style(\"pointer-events\", \"all\").style(\"-webkit-tap-highlight-color\", \"rgba(0,0,0,0)\").on(\"mousedown.brush\", brushstart).on(\"touchstart.brush\", brushstart);\n        var background = g.selectAll(\".background\").data([ 0 ]);\n        background.enter().append(\"rect\").attr(\"class\", \"background\").style(\"visibility\", \"hidden\").style(\"cursor\", \"crosshair\");\n        g.selectAll(\".extent\").data([ 0 ]).enter().append(\"rect\").attr(\"class\", \"extent\").style(\"cursor\", \"move\");\n        var resize = g.selectAll(\".resize\").data(resizes, d3_identity);\n        resize.exit().remove();\n        resize.enter().append(\"g\").attr(\"class\", function(d) {\n          return \"resize \" + d;\n        }).style(\"cursor\", function(d) {\n          return d3_svg_brushCursor[d];\n        }).append(\"rect\").attr(\"x\", function(d) {\n          return /[ew]$/.test(d) ? -3 : null;\n        }).attr(\"y\", function(d) {\n          return /^[ns]/.test(d) ? -3 : null;\n        }).attr(\"width\", 6).attr(\"height\", 6).style(\"visibility\", \"hidden\");\n        resize.style(\"display\", brush.empty() ? \"none\" : null);\n        var gUpdate = d3.transition(g), backgroundUpdate = d3.transition(background), range;\n        if (x) {\n          range = d3_scaleRange(x);\n          backgroundUpdate.attr(\"x\", range[0]).attr(\"width\", range[1] - range[0]);\n          redrawX(gUpdate);\n        }\n        if (y) {\n          range = d3_scaleRange(y);\n          backgroundUpdate.attr(\"y\", range[0]).attr(\"height\", range[1] - range[0]);\n          redrawY(gUpdate);\n        }\n        redraw(gUpdate);\n      });\n    }\n    brush.event = function(g) {\n      g.each(function() {\n        var event_ = event.of(this, arguments), extent1 = {\n          x: xExtent,\n          y: yExtent,\n          i: xExtentDomain,\n          j: yExtentDomain\n        }, extent0 = this.__chart__ || extent1;\n        this.__chart__ = extent1;\n        if (d3_transitionInheritId) {\n          d3.select(this).transition().each(\"start.brush\", function() {\n            xExtentDomain = extent0.i;\n            yExtentDomain = extent0.j;\n            xExtent = extent0.x;\n            yExtent = extent0.y;\n            event_({\n              type: \"brushstart\"\n            });\n          }).tween(\"brush:brush\", function() {\n            var xi = d3_interpolateArray(xExtent, extent1.x), yi = d3_interpolateArray(yExtent, extent1.y);\n            xExtentDomain = yExtentDomain = null;\n            return function(t) {\n              xExtent = extent1.x = xi(t);\n              yExtent = extent1.y = yi(t);\n              event_({\n                type: \"brush\",\n                mode: \"resize\"\n              });\n            };\n          }).each(\"end.brush\", function() {\n            xExtentDomain = extent1.i;\n            yExtentDomain = extent1.j;\n            event_({\n              type: \"brush\",\n              mode: \"resize\"\n            });\n            event_({\n              type: \"brushend\"\n            });\n          });\n        } else {\n          event_({\n            type: \"brushstart\"\n          });\n          event_({\n            type: \"brush\",\n            mode: \"resize\"\n          });\n          event_({\n            type: \"brushend\"\n          });\n        }\n      });\n    };\n    function redraw(g) {\n      g.selectAll(\".resize\").attr(\"transform\", function(d) {\n        return \"translate(\" + xExtent[+/e$/.test(d)] + \",\" + yExtent[+/^s/.test(d)] + \")\";\n      });\n    }\n    function redrawX(g) {\n      g.select(\".extent\").attr(\"x\", xExtent[0]);\n      g.selectAll(\".extent,.n>rect,.s>rect\").attr(\"width\", xExtent[1] - xExtent[0]);\n    }\n    function redrawY(g) {\n      g.select(\".extent\").attr(\"y\", yExtent[0]);\n      g.selectAll(\".extent,.e>rect,.w>rect\").attr(\"height\", yExtent[1] - yExtent[0]);\n    }\n    function brushstart() {\n      var target = this, eventTarget = d3.select(d3.event.target), event_ = event.of(target, arguments), g = d3.select(target), resizing = eventTarget.datum(), resizingX = !/^(n|s)$/.test(resizing) && x, resizingY = !/^(e|w)$/.test(resizing) && y, dragging = eventTarget.classed(\"extent\"), dragRestore = d3_event_dragSuppress(), center, origin = d3.mouse(target), offset;\n      var w = d3.select(d3_window).on(\"keydown.brush\", keydown).on(\"keyup.brush\", keyup);\n      if (d3.event.changedTouches) {\n        w.on(\"touchmove.brush\", brushmove).on(\"touchend.brush\", brushend);\n      } else {\n        w.on(\"mousemove.brush\", brushmove).on(\"mouseup.brush\", brushend);\n      }\n      g.interrupt().selectAll(\"*\").interrupt();\n      if (dragging) {\n        origin[0] = xExtent[0] - origin[0];\n        origin[1] = yExtent[0] - origin[1];\n      } else if (resizing) {\n        var ex = +/w$/.test(resizing), ey = +/^n/.test(resizing);\n        offset = [ xExtent[1 - ex] - origin[0], yExtent[1 - ey] - origin[1] ];\n        origin[0] = xExtent[ex];\n        origin[1] = yExtent[ey];\n      } else if (d3.event.altKey) center = origin.slice();\n      g.style(\"pointer-events\", \"none\").selectAll(\".resize\").style(\"display\", null);\n      d3.select(\"body\").style(\"cursor\", eventTarget.style(\"cursor\"));\n      event_({\n        type: \"brushstart\"\n      });\n      brushmove();\n      function keydown() {\n        if (d3.event.keyCode == 32) {\n          if (!dragging) {\n            center = null;\n            origin[0] -= xExtent[1];\n            origin[1] -= yExtent[1];\n            dragging = 2;\n          }\n          d3_eventPreventDefault();\n        }\n      }\n      function keyup() {\n        if (d3.event.keyCode == 32 && dragging == 2) {\n          origin[0] += xExtent[1];\n          origin[1] += yExtent[1];\n          dragging = 0;\n          d3_eventPreventDefault();\n        }\n      }\n      function brushmove() {\n        var point = d3.mouse(target), moved = false;\n        if (offset) {\n          point[0] += offset[0];\n          point[1] += offset[1];\n        }\n        if (!dragging) {\n          if (d3.event.altKey) {\n            if (!center) center = [ (xExtent[0] + xExtent[1]) / 2, (yExtent[0] + yExtent[1]) / 2 ];\n            origin[0] = xExtent[+(point[0] < center[0])];\n            origin[1] = yExtent[+(point[1] < center[1])];\n          } else center = null;\n        }\n        if (resizingX && move1(point, x, 0)) {\n          redrawX(g);\n          moved = true;\n        }\n        if (resizingY && move1(point, y, 1)) {\n          redrawY(g);\n          moved = true;\n        }\n        if (moved) {\n          redraw(g);\n          event_({\n            type: \"brush\",\n            mode: dragging ? \"move\" : \"resize\"\n          });\n        }\n      }\n      function move1(point, scale, i) {\n        var range = d3_scaleRange(scale), r0 = range[0], r1 = range[1], position = origin[i], extent = i ? yExtent : xExtent, size = extent[1] - extent[0], min, max;\n        if (dragging) {\n          r0 -= position;\n          r1 -= size + position;\n        }\n        min = (i ? yClamp : xClamp) ? Math.max(r0, Math.min(r1, point[i])) : point[i];\n        if (dragging) {\n          max = (min += position) + size;\n        } else {\n          if (center) position = Math.max(r0, Math.min(r1, 2 * center[i] - min));\n          if (position < min) {\n            max = min;\n            min = position;\n          } else {\n            max = position;\n          }\n        }\n        if (extent[0] != min || extent[1] != max) {\n          if (i) yExtentDomain = null; else xExtentDomain = null;\n          extent[0] = min;\n          extent[1] = max;\n          return true;\n        }\n      }\n      function brushend() {\n        brushmove();\n        g.style(\"pointer-events\", \"all\").selectAll(\".resize\").style(\"display\", brush.empty() ? \"none\" : null);\n        d3.select(\"body\").style(\"cursor\", null);\n        w.on(\"mousemove.brush\", null).on(\"mouseup.brush\", null).on(\"touchmove.brush\", null).on(\"touchend.brush\", null).on(\"keydown.brush\", null).on(\"keyup.brush\", null);\n        dragRestore();\n        event_({\n          type: \"brushend\"\n        });\n      }\n    }\n    brush.x = function(z) {\n      if (!arguments.length) return x;\n      x = z;\n      resizes = d3_svg_brushResizes[!x << 1 | !y];\n      return brush;\n    };\n    brush.y = function(z) {\n      if (!arguments.length) return y;\n      y = z;\n      resizes = d3_svg_brushResizes[!x << 1 | !y];\n      return brush;\n    };\n    brush.clamp = function(z) {\n      if (!arguments.length) return x && y ? [ xClamp, yClamp ] : x ? xClamp : y ? yClamp : null;\n      if (x && y) xClamp = !!z[0], yClamp = !!z[1]; else if (x) xClamp = !!z; else if (y) yClamp = !!z;\n      return brush;\n    };\n    brush.extent = function(z) {\n      var x0, x1, y0, y1, t;\n      if (!arguments.length) {\n        if (x) {\n          if (xExtentDomain) {\n            x0 = xExtentDomain[0], x1 = xExtentDomain[1];\n          } else {\n            x0 = xExtent[0], x1 = xExtent[1];\n            if (x.invert) x0 = x.invert(x0), x1 = x.invert(x1);\n            if (x1 < x0) t = x0, x0 = x1, x1 = t;\n          }\n        }\n        if (y) {\n          if (yExtentDomain) {\n            y0 = yExtentDomain[0], y1 = yExtentDomain[1];\n          } else {\n            y0 = yExtent[0], y1 = yExtent[1];\n            if (y.invert) y0 = y.invert(y0), y1 = y.invert(y1);\n            if (y1 < y0) t = y0, y0 = y1, y1 = t;\n          }\n        }\n        return x && y ? [ [ x0, y0 ], [ x1, y1 ] ] : x ? [ x0, x1 ] : y && [ y0, y1 ];\n      }\n      if (x) {\n        x0 = z[0], x1 = z[1];\n        if (y) x0 = x0[0], x1 = x1[0];\n        xExtentDomain = [ x0, x1 ];\n        if (x.invert) x0 = x(x0), x1 = x(x1);\n        if (x1 < x0) t = x0, x0 = x1, x1 = t;\n        if (x0 != xExtent[0] || x1 != xExtent[1]) xExtent = [ x0, x1 ];\n      }\n      if (y) {\n        y0 = z[0], y1 = z[1];\n        if (x) y0 = y0[1], y1 = y1[1];\n        yExtentDomain = [ y0, y1 ];\n        if (y.invert) y0 = y(y0), y1 = y(y1);\n        if (y1 < y0) t = y0, y0 = y1, y1 = t;\n        if (y0 != yExtent[0] || y1 != yExtent[1]) yExtent = [ y0, y1 ];\n      }\n      return brush;\n    };\n    brush.clear = function() {\n      if (!brush.empty()) {\n        xExtent = [ 0, 0 ], yExtent = [ 0, 0 ];\n        xExtentDomain = yExtentDomain = null;\n      }\n      return brush;\n    };\n    brush.empty = function() {\n      return !!x && xExtent[0] == xExtent[1] || !!y && yExtent[0] == yExtent[1];\n    };\n    return d3.rebind(brush, event, \"on\");\n  };\n  var d3_svg_brushCursor = {\n    n: \"ns-resize\",\n    e: \"ew-resize\",\n    s: \"ns-resize\",\n    w: \"ew-resize\",\n    nw: \"nwse-resize\",\n    ne: \"nesw-resize\",\n    se: \"nwse-resize\",\n    sw: \"nesw-resize\"\n  };\n  var d3_svg_brushResizes = [ [ \"n\", \"e\", \"s\", \"w\", \"nw\", \"ne\", \"se\", \"sw\" ], [ \"e\", \"w\" ], [ \"n\", \"s\" ], [] ];\n  var d3_time_format = d3_time.format = d3_locale_enUS.timeFormat;\n  var d3_time_formatUtc = d3_time_format.utc;\n  var d3_time_formatIso = d3_time_formatUtc(\"%Y-%m-%dT%H:%M:%S.%LZ\");\n  d3_time_format.iso = Date.prototype.toISOString && +new Date(\"2000-01-01T00:00:00.000Z\") ? d3_time_formatIsoNative : d3_time_formatIso;\n  function d3_time_formatIsoNative(date) {\n    return date.toISOString();\n  }\n  d3_time_formatIsoNative.parse = function(string) {\n    var date = new Date(string);\n    return isNaN(date) ? null : date;\n  };\n  d3_time_formatIsoNative.toString = d3_time_formatIso.toString;\n  d3_time.second = d3_time_interval(function(date) {\n    return new d3_date(Math.floor(date / 1e3) * 1e3);\n  }, function(date, offset) {\n    date.setTime(date.getTime() + Math.floor(offset) * 1e3);\n  }, function(date) {\n    return date.getSeconds();\n  });\n  d3_time.seconds = d3_time.second.range;\n  d3_time.seconds.utc = d3_time.second.utc.range;\n  d3_time.minute = d3_time_interval(function(date) {\n    return new d3_date(Math.floor(date / 6e4) * 6e4);\n  }, function(date, offset) {\n    date.setTime(date.getTime() + Math.floor(offset) * 6e4);\n  }, function(date) {\n    return date.getMinutes();\n  });\n  d3_time.minutes = d3_time.minute.range;\n  d3_time.minutes.utc = d3_time.minute.utc.range;\n  d3_time.hour = d3_time_interval(function(date) {\n    var timezone = date.getTimezoneOffset() / 60;\n    return new d3_date((Math.floor(date / 36e5 - timezone) + timezone) * 36e5);\n  }, function(date, offset) {\n    date.setTime(date.getTime() + Math.floor(offset) * 36e5);\n  }, function(date) {\n    return date.getHours();\n  });\n  d3_time.hours = d3_time.hour.range;\n  d3_time.hours.utc = d3_time.hour.utc.range;\n  d3_time.month = d3_time_interval(function(date) {\n    date = d3_time.day(date);\n    date.setDate(1);\n    return date;\n  }, function(date, offset) {\n    date.setMonth(date.getMonth() + offset);\n  }, function(date) {\n    return date.getMonth();\n  });\n  d3_time.months = d3_time.month.range;\n  d3_time.months.utc = d3_time.month.utc.range;\n  function d3_time_scale(linear, methods, format) {\n    function scale(x) {\n      return linear(x);\n    }\n    scale.invert = function(x) {\n      return d3_time_scaleDate(linear.invert(x));\n    };\n    scale.domain = function(x) {\n      if (!arguments.length) return linear.domain().map(d3_time_scaleDate);\n      linear.domain(x);\n      return scale;\n    };\n    function tickMethod(extent, count) {\n      var span = extent[1] - extent[0], target = span / count, i = d3.bisect(d3_time_scaleSteps, target);\n      return i == d3_time_scaleSteps.length ? [ methods.year, d3_scale_linearTickRange(extent.map(function(d) {\n        return d / 31536e6;\n      }), count)[2] ] : !i ? [ d3_time_scaleMilliseconds, d3_scale_linearTickRange(extent, count)[2] ] : methods[target / d3_time_scaleSteps[i - 1] < d3_time_scaleSteps[i] / target ? i - 1 : i];\n    }\n    scale.nice = function(interval, skip) {\n      var domain = scale.domain(), extent = d3_scaleExtent(domain), method = interval == null ? tickMethod(extent, 10) : typeof interval === \"number\" && tickMethod(extent, interval);\n      if (method) interval = method[0], skip = method[1];\n      function skipped(date) {\n        return !isNaN(date) && !interval.range(date, d3_time_scaleDate(+date + 1), skip).length;\n      }\n      return scale.domain(d3_scale_nice(domain, skip > 1 ? {\n        floor: function(date) {\n          while (skipped(date = interval.floor(date))) date = d3_time_scaleDate(date - 1);\n          return date;\n        },\n        ceil: function(date) {\n          while (skipped(date = interval.ceil(date))) date = d3_time_scaleDate(+date + 1);\n          return date;\n        }\n      } : interval));\n    };\n    scale.ticks = function(interval, skip) {\n      var extent = d3_scaleExtent(scale.domain()), method = interval == null ? tickMethod(extent, 10) : typeof interval === \"number\" ? tickMethod(extent, interval) : !interval.range && [ {\n        range: interval\n      }, skip ];\n      if (method) interval = method[0], skip = method[1];\n      return interval.range(extent[0], d3_time_scaleDate(+extent[1] + 1), skip < 1 ? 1 : skip);\n    };\n    scale.tickFormat = function() {\n      return format;\n    };\n    scale.copy = function() {\n      return d3_time_scale(linear.copy(), methods, format);\n    };\n    return d3_scale_linearRebind(scale, linear);\n  }\n  function d3_time_scaleDate(t) {\n    return new Date(t);\n  }\n  var d3_time_scaleSteps = [ 1e3, 5e3, 15e3, 3e4, 6e4, 3e5, 9e5, 18e5, 36e5, 108e5, 216e5, 432e5, 864e5, 1728e5, 6048e5, 2592e6, 7776e6, 31536e6 ];\n  var d3_time_scaleLocalMethods = [ [ d3_time.second, 1 ], [ d3_time.second, 5 ], [ d3_time.second, 15 ], [ d3_time.second, 30 ], [ d3_time.minute, 1 ], [ d3_time.minute, 5 ], [ d3_time.minute, 15 ], [ d3_time.minute, 30 ], [ d3_time.hour, 1 ], [ d3_time.hour, 3 ], [ d3_time.hour, 6 ], [ d3_time.hour, 12 ], [ d3_time.day, 1 ], [ d3_time.day, 2 ], [ d3_time.week, 1 ], [ d3_time.month, 1 ], [ d3_time.month, 3 ], [ d3_time.year, 1 ] ];\n  var d3_time_scaleLocalFormat = d3_time_format.multi([ [ \".%L\", function(d) {\n    return d.getMilliseconds();\n  } ], [ \":%S\", function(d) {\n    return d.getSeconds();\n  } ], [ \"%I:%M\", function(d) {\n    return d.getMinutes();\n  } ], [ \"%I %p\", function(d) {\n    return d.getHours();\n  } ], [ \"%a %d\", function(d) {\n    return d.getDay() && d.getDate() != 1;\n  } ], [ \"%b %d\", function(d) {\n    return d.getDate() != 1;\n  } ], [ \"%B\", function(d) {\n    return d.getMonth();\n  } ], [ \"%Y\", d3_true ] ]);\n  var d3_time_scaleMilliseconds = {\n    range: function(start, stop, step) {\n      return d3.range(Math.ceil(start / step) * step, +stop, step).map(d3_time_scaleDate);\n    },\n    floor: d3_identity,\n    ceil: d3_identity\n  };\n  d3_time_scaleLocalMethods.year = d3_time.year;\n  d3_time.scale = function() {\n    return d3_time_scale(d3.scale.linear(), d3_time_scaleLocalMethods, d3_time_scaleLocalFormat);\n  };\n  var d3_time_scaleUtcMethods = d3_time_scaleLocalMethods.map(function(m) {\n    return [ m[0].utc, m[1] ];\n  });\n  var d3_time_scaleUtcFormat = d3_time_formatUtc.multi([ [ \".%L\", function(d) {\n    return d.getUTCMilliseconds();\n  } ], [ \":%S\", function(d) {\n    return d.getUTCSeconds();\n  } ], [ \"%I:%M\", function(d) {\n    return d.getUTCMinutes();\n  } ], [ \"%I %p\", function(d) {\n    return d.getUTCHours();\n  } ], [ \"%a %d\", function(d) {\n    return d.getUTCDay() && d.getUTCDate() != 1;\n  } ], [ \"%b %d\", function(d) {\n    return d.getUTCDate() != 1;\n  } ], [ \"%B\", function(d) {\n    return d.getUTCMonth();\n  } ], [ \"%Y\", d3_true ] ]);\n  d3_time_scaleUtcMethods.year = d3_time.year.utc;\n  d3_time.scale.utc = function() {\n    return d3_time_scale(d3.scale.linear(), d3_time_scaleUtcMethods, d3_time_scaleUtcFormat);\n  };\n  d3.text = d3_xhrType(function(request) {\n    return request.responseText;\n  });\n  d3.json = function(url, callback) {\n    return d3_xhr(url, \"application/json\", d3_json, callback);\n  };\n  function d3_json(request) {\n    return JSON.parse(request.responseText);\n  }\n  d3.html = function(url, callback) {\n    return d3_xhr(url, \"text/html\", d3_html, callback);\n  };\n  function d3_html(request) {\n    var range = d3_document.createRange();\n    range.selectNode(d3_document.body);\n    return range.createContextualFragment(request.responseText);\n  }\n  d3.xml = d3_xhrType(function(request) {\n    return request.responseXML;\n  });\n  if (typeof define === \"function\" && define.amd) define(d3); else if (typeof module === \"object\" && module.exports) module.exports = d3;\n  this.d3 = d3;\n}();\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/c3/~/d3/d3.js\n ** module id = 1357\n ** module chunks = 4\n **/"],"sourceRoot":""}